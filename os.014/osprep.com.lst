     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to locate and report the ethernet adapter
     8                                  ;                       at start-up.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIPERIOD            equ     02Eh                                            ;period
   368                                  EASCIIUPPERA            equ     041h                                            ;'A'
   369                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   370                                  EASCIILOWERA            equ     061h                                            ;'a'
   371                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   372                                  EASCIITILDE             equ     07Eh                                            ;'~'
   373                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   374                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   375                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   376                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   377                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   378                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   379                                  EASCIICASE              equ     00100000b                                       ;case bit
   380                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  ;
   383                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   384                                  ;
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   387                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   388                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   389                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   390                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   391                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   392                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   393                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   394                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   395                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   396                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   397                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   398                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   399                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   400                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   401                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;
   404                                  ;       Operating System Values
   405                                  ;
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;
   409                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   410                                  ;
   411                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   412                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   413                                  ;
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   416                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   417                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   418                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   419                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   420                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   421                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;       Console Constants                                                       ECON...
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ECONCOLS                equ     80                                              ;columns per row
   426                                  ECONROWS                equ     24                                              ;console rows
   427                                  ECONOIAROW              equ     24                                              ;operator information area row
   428                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   429                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   430                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   431                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   432                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   437                                  EGDTCGA                 equ     020h                                            ;cga video selector
   438                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   439                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   440                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   441                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   442                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   443                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;       Hardware Flags                                                          EHWF...
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;       Keyboard Flags                                                          EKEYF...
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   452                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   453                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   454                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   455                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   456                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   457                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   458                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   459                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   460                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   461                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ;       Kernel Constants                                                        EKRN...
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   466                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   467                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   468                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   469                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   470                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;       Memory Management Constants                                             EMEM...
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   479                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   480                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   481                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;       Message Identifiers                                                     EMSG...
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   486                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   487                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   488                                  ;=======================================================================================================================
   489                                  ;
   490                                  ;       Structures
   491                                  ;
   492                                  ;=======================================================================================================================
   493                                  ;-----------------------------------------------------------------------------------------------------------------------
   494                                  ;
   495                                  ;       DATETIME
   496                                  ;
   497                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  struc                   DATETIME
   501 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   502 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   503 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   504 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   505 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   506 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   507 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   508 00000007 <res 00000001>          .century                resb    1                                               ;century
   509                                  EDATETIMELEN            equ     ($-.second)
   510                                  endstruc
   511                                  ;-----------------------------------------------------------------------------------------------------------------------
   512                                  ;
   513                                  ;       ETHER
   514                                  ;
   515                                  ;       The ETHER structure defines an Ethernet adapter context.
   516                                  ;
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  struc                   ETHER
   519 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   520 00000004 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address
   521 00000008 <res 00000004>          .port                   resd    1                                               ;i/o port
   522 0000000C <res 00000006>          .mac                    resb    6                                               ;mac address
   523 00000012 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   524                                  EETHERLEN               equ     ($-.selector)
   525                                  endstruc
   526                                  ;-----------------------------------------------------------------------------------------------------------------------
   527                                  ;
   528                                  ;       MEMBLOCK
   529                                  ;
   530                                  ;       The MEMBLOCK structure defines a memory block.
   531                                  ;
   532                                  ;-----------------------------------------------------------------------------------------------------------------------
   533                                  struc                   MEMBLOCK
   534 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   535 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   536 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   537 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   538 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   539 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   540 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   541 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   542                                  EMEMBLOCKLEN            equ     ($-.signature)
   543                                  endstruc
   544                                  ;-----------------------------------------------------------------------------------------------------------------------
   545                                  ;
   546                                  ;       MEMROOT
   547                                  ;
   548                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   549                                  ;
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551                                  struc                   MEMROOT
   552 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   553 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   554 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   555 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   556 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   557 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   558                                  EMEMROOTLEN             equ     ($-.firstcontig)
   559                                  endstruc
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  ;
   562                                  ;       MQUEUE
   563                                  ;
   564                                  ;       The MQUEUE structure maps memory used for a message queue.
   565                                  ;
   566                                  ;-----------------------------------------------------------------------------------------------------------------------
   567                                  struc                   MQUEUE
   568 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   569 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   570 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   571                                  endstruc
   572                                  ;-----------------------------------------------------------------------------------------------------------------------
   573                                  ;
   574                                  ;       PCI
   575                                  ;
   576                                  ;       The PCI structure defines a PCI bus, device and function context.
   577                                  ;
   578                                  ;-----------------------------------------------------------------------------------------------------------------------
   579                                  struc                   PCI
   580 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   581 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   582 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   583 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   584 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   585                                  .configdata             equ     $                                               ;data read from port 0CFCh
   586 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   587 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   588 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   589 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   590                                  EPCILEN                 equ     ($-.configdata)
   591                                  endstruc
   592                                  ;-----------------------------------------------------------------------------------------------------------------------
   593                                  ;
   594                                  ;       OSDATA
   595                                  ;
   596                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   597                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   598                                  ;
   599                                  ;-----------------------------------------------------------------------------------------------------------------------
   600                                  struc                   OSDATA
   601 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   602 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   603 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   604 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   605 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   606 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   607 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   608 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   609 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   610 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   611 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   612 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   613 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   614 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   615 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   616 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   617 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   618 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   619 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   620 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   621 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   622 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   623 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   624 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   625 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   626 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   627 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   628 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   629 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   630 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   631 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   632 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   633 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   634 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   635 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   636 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   637 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   638 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   639 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   640 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   641 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   642 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   643 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   644 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   645 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   646 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   647 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   648 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   649 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   650 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   651 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   652 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   653 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   654 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   655 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   656 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   657 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   658 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   659 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   660 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   661 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   662 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   663 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   664 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   665 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   666 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   667 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   668 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   669 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   670 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   671 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   672 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   673 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   674 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   675 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   676 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   677 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   678 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   679 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   680 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   681 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   682 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   683 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   684 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   685 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   686 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   687 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   688 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   689 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   690 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   691 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   692 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   693 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   694 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   695 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   696 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   697 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   698 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   699 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   700 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   701 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   702                                  ;-----------------------------------------------------------------------------------------------------------------------
   703                                  ;
   704                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   705                                  ;
   706                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   707                                  ;
   708                                  ;-----------------------------------------------------------------------------------------------------------------------
   709                                  ECONDATA                equ     ($)
   710 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   711 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   712 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   713 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   714 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   715 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   716 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   717 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   718 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   719 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   720 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   721 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   722 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   723 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   724 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   725 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   726 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   727 00000820 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   728 00000821 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   729 00000871 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   730 000008C1 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   731 00000911 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   732 0000091C <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   733 00000927 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   734 00000932 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   735 0000093B <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   736 00000953 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   737 0000095B <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   738 00000967 <res 00000013>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   739                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   740                                  ;-----------------------------------------------------------------------------------------------------------------------
   741                                  ;
   742                                  ;       End of OS Variables
   743                                  ;
   744                                  ;-----------------------------------------------------------------------------------------------------------------------
   745                                  endstruc
   746                                  ;-----------------------------------------------------------------------------------------------------------------------
   747                                  ;
   748                                  ;       Macros
   749                                  ;
   750                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   751                                  ;
   752                                  ;-----------------------------------------------------------------------------------------------------------------------
   753                                  %macro                  mint    1
   754                                  _%1                     equ     ($-$$) / EX86DESCLEN
   755                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   756                                  %endmacro
   757                                  %macro                  mtrap   1
   758                                  _%1                     equ     ($-$$) / EX86DESCLEN
   759                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   760                                  %endmacro
   761                                  %macro                  menter  1
   762                                  ?%1                     equ     ($-$$)
   763                                  %endmacro
   764                                  %macro                  tsvce   1
   765                                  e%1                     equ     ($-tsvc)/4
   766                                                          dd      %1
   767                                  %endmacro
   768                                  %ifdef BUILDBOOT
   769                                  ;=======================================================================================================================
   770                                  ;
   771                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   772                                  ;
   773                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   774                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   775                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   776                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   777                                  ;
   778                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   779                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   780                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   781                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   782                                  ;       immediately followed by a disk parameter table.
   783                                  ;
   784                                  ;=======================================================================================================================
   785                                                          cpu     8086                                            ;assume minimal CPU
   786                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   787                                                          bits    16                                              ;16-bit code at power-up
   788                                  %ifdef BUILDPREP
   789 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   790                                  %else
   791                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   792                                  %endif
   793                                  ;-----------------------------------------------------------------------------------------------------------------------
   794                                  ;
   795                                  ;       Disk Parameter Table
   796                                  ;
   797                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   798                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   799                                  ;
   800                                  ;-----------------------------------------------------------------------------------------------------------------------
   801 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   802 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   803 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   804 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   805 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   806 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   807 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   808 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   809 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   810                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   811 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   812 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   813 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   814                                  ;
   815                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   816                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   817                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   818                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   819                                  ;       given several possible starting values for CS:IP.
   820                                  ;
   821                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   822 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   823                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   824 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   825 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   826 00000025 B104                                            mov     cl,4                                            ;shift count
   827 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   828 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   829 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   830                                  ;
   831                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   832                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   833                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   834                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   835                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   836                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   837                                  ;
   838 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   839 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   840 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   841 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   842 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   843                                  ;
   844                                  ;       Our boot addressability is now set up according to the following diagram.
   845                                  ;
   846                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   847                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   848                                  ;                               |  256 = 100h bytes                             |
   849                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   850                                  ;                               |  Boot Sector (vstart=0100h)                   |
   851                                  ;                               |  1 sector = 512 = 200h bytes                  |
   852                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   853                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   854                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   855                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   856                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   857                                  ;                               |  2 sectors = 1024 = 400h bytes
   858                                  ;                       009400  +-----------------------------------------------+ DS:1900
   859                                  ;
   860                                  ;       On entry, DL indicates the drive being booted from.
   861                                  ;
   862 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   863                                  ;
   864                                  ;       Compute directory i/o buffer address.
   865                                  ;
   866 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   867 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   868 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   869 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   870                                  ;
   871                                  ;       Compute segment where os.com will be loaded.
   872                                  ;
   873 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   874 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   875 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   876 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   877                                  ;
   878                                  ;       Set the video mode to 80 column, 25 row, text.
   879                                  ;
   880 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   881 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   882                                  ;
   883                                  ;       Write a message to the console so we know we have our addressability established.
   884                                  ;
   885 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   886 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   887                                  ;
   888                                  ;       Initialize the number of directory sectors to search.
   889                                  ;
   890 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   891 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   892                                  ;
   893                                  ;       Compute number of directory sectors and initialize overhead count.
   894                                  ;
   895 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   896 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   897 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   898 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   899                                  ;
   900                                  ;       Compute directory entries per sector.
   901                                  ;
   902 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   903 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   904 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   905                                  ;
   906                                  ;       Compute first logical directory sector and update overhead count.
   907                                  ;
   908 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   909 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   910 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   911 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   912 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   913 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   914                                  ;
   915                                  ;       Read directory sector.
   916                                  ;
   917 0000008E B001                    .30                     mov     al,1                                            ;sector count
   918 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   919 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   920 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   921                                  ;
   922                                  ;       Setup variables to search this directory sector.
   923                                  ;
   924 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   925 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   926 000000A1 7603                                            jna     .40                                             ;no, continue
   927 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   928 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   929 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   930 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   931                                  ;
   932                                  ;       Loop through directory sectors searching for kernel program.
   933                                  ;
   934 000000B1 56                      .50                     push    si                                              ;save kernel name address
   935 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   936 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   937 000000B6 FC                                              cld                                                     ;forward strings
   938 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   939 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   940 000000BA 5E                                              pop     si                                              ;restore kernel name address
   941 000000BB 7418                                            je      .60                                             ;exit loop if found
   942 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   943 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   944 000000C2 75ED                                            jnz     .50                                             ;next entry
   945                                  ;
   946                                  ;       Repeat search if we are not at the end of the directory.
   947                                  ;
   948 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   949 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   950 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   951 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   952 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   953                                  ;
   954                                  ;       If we find the kernel program in the directory, read the FAT.
   955                                  ;
   956 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   957 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   958 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   959 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   960 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   961 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   962                                  ;
   963                                  ;       Get the starting cluster of the kernel program and target address.
   964                                  ;
   965 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   966 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   967                                  ;
   968                                  ;       Read each program cluster into RAM.
   969                                  ;
   970 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   971 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   972 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   973 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   974 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   975 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   976 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   977 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   978 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   979                                  ;
   980                                  ;       Update buffer pointer for next cluster.
   981                                  ;
   982 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   983 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   984 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   985 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   986 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   987                                  ;
   988                                  ;       Compute next cluster number.
   989                                  ;
   990 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   991 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   992 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   993 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   994 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   995 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   996 00000120 83E701                                          and     di,1                                            ;get low bit
   997 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   998 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   999 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1000                                  ;
  1001                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1002                                  ;
  1003 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1004 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1005 00000130 B104                                            mov     cl,4                                            ;shift count
  1006 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1007 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1008 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1009 0000013A 75B2                                            jne     .70                                             ;no, continue
  1010                                  ;
  1011                                  ;       Transfer control to the operating system program.
  1012                                  ;
  1013 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1014 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1015 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1016                                  ;
  1017                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1018                                  ;
  1019 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1020 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1021 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1022 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1023 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1024 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1025 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1026 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1027 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1028 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1029                                  ;
  1030                                  ;       Try maxtries times to read sector.
  1031                                  ;
  1032 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1033 00000160 53                      .10                     push    bx                                              ;save buffer address
  1034 00000161 51                                              push    cx                                              ;save retry count
  1035 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1036 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1037 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1038 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1039 0000016F 59                                              pop     cx                                              ;restore retry count
  1040 00000170 5B                                              pop     bx                                              ;restore buffer address
  1041 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1042 00000173 E2EB                                            loop    .10                                             ;retry
  1043                                  ;
  1044                                  ;       Handle disk error: convert to ASCII and store in error string.
  1045                                  ;
  1046 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1047 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1048 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1049 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1050 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1051 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1052 00000183 7203                                            jb      .20                                             ;continue if numeral
  1053 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1054 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1055 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1056 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1057 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1058 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1059 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1060                                  ;
  1061                                  ;       Wait for a key press.
  1062                                  ;
  1063 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1064 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1065 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1066 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1067 0000019F F4                                              hlt                                                     ;wait for interrupt
  1068 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1069                                  ;
  1070                                  ;       Reset the system.
  1071                                  ;
  1072 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1073 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1074 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1075 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1076 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1077                                  ;
  1078                                  ;       Display text message.
  1079                                  ;
  1080 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1081 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1082 000001AC 84C0                                            test    al,al                                           ;end of string?
  1083 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1084 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1085 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1086 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1087 000001B6 C3                      BootReturn              ret                                                     ;return
  1088                                  ;-----------------------------------------------------------------------------------------------------------------------
  1089                                  ;
  1090                                  ;       Constants
  1091                                  ;
  1092                                  ;-----------------------------------------------------------------------------------------------------------------------
  1093 000001B7 90                                              align   2
  1094 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1095 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1095 000001C3 4F4D               
  1096 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1096 000001CE 530D0A00           
  1097 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1097 000001DB 7220               
  1098 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1099 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1099 000001E9 6700               
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  ;
  1102                                  ;       Work Areas
  1103                                  ;
  1104                                  ;-----------------------------------------------------------------------------------------------------------------------
  1105 000001EB 90                                              align   2
  1106 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1107 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1108 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1109 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1110 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1111                                  wwReadCountCommand      equ     $                                               ;read count and command
  1112 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1113 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1114                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1115 000001F8 00                      wbDrive                 db      0                                               ;drive
  1116 000001F9 00                      wbHead                  db      0                                               ;head
  1117                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1118 000001FA 00                                              db      0                                               ;sector
  1119 000001FB 00                      wbTrack                 db      0                                               ;track
  1120 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1121 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1122                                  %endif
  1123                                  %ifdef BUILDPREP
  1124                                  ;=======================================================================================================================
  1125                                  ;
  1126                                  ;       Diskette Preparation Code
  1127                                  ;
  1128                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1129                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1130                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1131                                  ;
  1132                                  ;=======================================================================================================================
  1133                                  ;
  1134                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1135                                  ;
  1136 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1137 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1138                                  ;
  1139                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1140                                  ;
  1141 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1142 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1143 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1144 0000020C FB                                              sti                                                     ;enable interrupts
  1145 0000020D F4                                              hlt                                                     ;wait for interrupt
  1146 0000020E EBF6                                            jmp     .10                                             ;repeat
  1147 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1148 00000212 7407                                            je      .30                                             ;yes, branch
  1149 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1150 00000216 75EE                                            jne     .10                                             ;no, repeat
  1151 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1152                                  ;
  1153                                  ;       Display writing-sector message and patch the JMP instruction.
  1154                                  ;
  1155 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1156 0000021E E889FF                                          call    BootPrint                                       ;display message
  1157 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1158 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1159 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1160                                  ;
  1161                                  ;       Try to read the boot sector.
  1162                                  ;
  1163 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1164 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1165 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1166 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1167 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1168 00000236 B001                                            mov     al,1                                            ;one sector
  1169 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1170 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1171 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1172 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1173 0000023F E2EB                                            loop    .40                                             ;try again
  1174 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1175 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1176                                  ;
  1177                                  ;       Copy diskette parms from input buffer to output buffer.
  1178                                  ;
  1179 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1180 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1181 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1182 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1183 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1184 00000255 FC                                              cld                                                     ;forward string copies
  1185 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1186                                  ;
  1187                                  ;       Try to write boot sector to diskette.
  1188                                  ;
  1189 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1190 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1191 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1192 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1193 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1194 00000265 B001                                            mov     al,1                                            ;one sector
  1195 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1196 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1197 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1198 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1199 0000026E E2EB                                            loop    .60                                             ;try again
  1200 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1201                                  ;
  1202                                  ;       Convert the error code to ASCII and display the error message.
  1203                                  ;
  1204 00000273 50                      .70                     push    ax                                              ;save error code
  1205 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1206 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1207 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1208 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1209 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1210 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1211 00000282 7203                                            jb      .80                                             ;yes, continue
  1212 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1213 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1214 00000289 7202                                            jb      .90                                             ;yes, continue
  1215 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1216 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1217 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1218 00000293 58                                              pop     ax                                              ;restore error code
  1219                                  ;
  1220                                  ;       Display the completion message.
  1221                                  ;
  1222 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1223 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1224 00000299 3C00                                            cmp     al,0                                            ;success?
  1225 0000029B 7426                                            je      .110                                            ;yes, continue
  1226 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1227 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1228 000002A2 741F                                            je      .110                                            ;yes, continue
  1229 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1230 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1231 000002A9 7418                                            je      .110                                            ;yes, continue
  1232 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1233 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1234 000002B0 7411                                            je      .110                                            ;yes, continue
  1235 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1236 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1237 000002B7 740A                                            je      .110                                            ;yes, continue
  1238 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1239 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1240 000002BE 7403                                            je      .110                                            ;yes, continue
  1241 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1242 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1243 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1244 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1245 000002CB C3                                              ret                                                     ;return (should not execute)
  1246                                  ;-----------------------------------------------------------------------------------------------------------------------
  1247                                  ;
  1248                                  ;       Diskette Preparation Messages
  1249                                  ;
  1250                                  ;-----------------------------------------------------------------------------------------------------------------------
  1251 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1251 000002D5 5320426F6F742D4469-
  1251 000002DE 736B65747465205072-
  1251 000002E7 657061726174696F6E-
  1251 000002F0 2050726F6772616D   
  1252 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1252 00000301 687420284329203230-
  1252 0000030A 31302D323031382044-
  1252 00000313 61766964204A2E2057-
  1252 0000031C 616C6C696E672E2041-
  1252 00000325 6C6C20726967687473-
  1252 0000032E 207265736572766564-
  1252 00000337 2E                 
  1253 00000338 0D0A                                            db      13,10
  1254 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1254 00000343 6F6772616D206F7665-
  1254 0000034C 727772697465732074-
  1254 00000355 686520626F6F742073-
  1254 0000035E 6563746F72206F6620-
  1254 00000367 61206469736B657474-
  1254 00000370 652077697468207374-
  1254 00000379 617274757020636F64-
  1254 00000382 652074686174       
  1255 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1255 00000391 616420746865206F70-
  1255 0000039A 65726174696E672073-
  1255 000003A3 797374656D20696E74-
  1255 000003AC 6F206D656D6F727920-
  1255 000003B5 7768656E2074686520-
  1255 000003BE 636F6D707574657220-
  1255 000003C7 697320726573746172-
  1255 000003D0 7465642E           
  1256 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1256 000003DD 6565642C20706C6163-
  1256 000003E6 65206120666F726D61-
  1256 000003EF 74746564206469736B-
  1256 000003F8 6574746520696E746F-
  1256 00000401 20647269766520413A-
  1256 0000040A 20616E642070726573-
  1256 00000413 732074686520456E74-
  1256 0000041C 6572206B65792E     
  1257 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1257 0000042C 20746869732070726F-
  1257 00000435 6772616D2077697468-
  1257 0000043E 6F7574207072657061-
  1257 00000447 72696E672061206469-
  1257 00000450 736B657474652C2070-
  1257 00000459 726573732074686520-
  1257 00000462 457363617065206B65-
  1257 0000046B 792E               
  1258 0000046D 0D0A00                                          db      13,10,0
  1259 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1259 00000479 2074686520626F6F74-
  1259 00000482 20736563746F722074-
  1259 0000048B 6F2074686520646973-
  1259 00000494 6B65747465202E2E2E 
  1260 0000049D 0D0A00                                          db      13,10,0
  1261 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1261 000004A9 6F722D636F6465202E-
  1261 000004B2 2E2077617320726574-
  1261 000004BB 75726E65642066726F-
  1261 000004C4 6D207468652042494F-
  1261 000004CD 53207768696C652072-
  1261 000004D6 656164696E67206672-
  1261 000004DF 6F6D20746865206469-
  1261 000004E8 736B2E             
  1262 000004EB 0D0A00                                          db      13,10,0
  1263 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1263 000004F7 6F722D636F6465202E-
  1263 00000500 2E2077617320726574-
  1263 00000509 75726E65642066726F-
  1263 00000512 6D207468652042494F-
  1263 0000051B 53207768696C652077-
  1263 00000524 726974696E6720746F-
  1263 0000052D 20746865206469736B-
  1263 00000536 2E                 
  1264 00000537 0D0A00                                          db      13,10,0
  1265 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1265 00000543 742D736563746F7220-
  1265 0000054C 776173207772697474-
  1265 00000555 656E20746F20746865-
  1265 0000055E 206469736B65747465-
  1265 00000567 2E204265666F726520-
  1265 00000570 626F6F74696E672079-
  1265 00000579 6F757220636F6D7075-
  1265 00000582 7465722077697468   
  1266 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1266 00000593 736B657474652C206D-
  1266 0000059C 616B65207375726520-
  1266 000005A5 746861742074686520-
  1266 000005AE 66696C65204F532E43-
  1266 000005B7 4F4D20697320636F70-
  1266 000005C0 696564206F6E746F20-
  1266 000005C9 746865206469736B65-
  1266 000005D2 7474652E           
  1267 000005D6 0D0A00                                          db      13,10,0
  1268 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1268 000005E2 76616C696420446973-
  1268 000005EB 6B20506172616D6574-
  1268 000005F4 6572               
  1269 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1269 000005FF 20616E20696E746572-
  1269 00000608 6E616C206572726F72-
  1269 00000611 206361757365642062-
  1269 0000061A 7920616E20696E7661-
  1269 00000623 6C69642076616C7565-
  1269 0000062C 206265696E67207061-
  1269 00000635 7373656420746F2061-
  1269 0000063E 2073797374656D     
  1270 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1270 0000064E 6E2E20546865204F53-
  1270 00000657 424F4F542E434F4D20-
  1270 00000660 66696C65206D617920-
  1270 00000669 626520636F72727570-
  1270 00000672 742E20436F7079206F-
  1270 0000067B 7220646F776E6C6F61-
  1270 00000684 64207468652066696C-
  1270 0000068D 6520616761696E     
  1271 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1271 0000069D 72792E             
  1272 000006A0 0D0A00                                          db      13,10,0
  1273 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1273 000006AC 6472657373204D6172-
  1273 000006B5 6B204E6F7420466F75-
  1273 000006BE 6E64               
  1274 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1274 000006C9 726F7220696E646963-
  1274 000006D2 617465732061207068-
  1274 000006DB 79736963616C207072-
  1274 000006E4 6F626C656D20776974-
  1274 000006ED 682074686520666C6F-
  1274 000006F6 707079206469736B65-
  1274 000006FF 7474652E20506C6561-
  1274 00000708 7365207265747279   
  1275 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1275 00000719 6E6F74686572206469-
  1275 00000722 736B657474652E     
  1276 00000729 0D0A00                                          db      13,10,0
  1277 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1277 00000735 6F7465637465642044-
  1277 0000073E 69736B             
  1278 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1278 0000074A 726F72206973207573-
  1278 00000753 75616C6C7920636175-
  1278 0000075C 736564206279206174-
  1278 00000765 74656D7074696E6720-
  1278 0000076E 746F20777269746520-
  1278 00000777 746F20612077726974-
  1278 00000780 652D70726F74656374-
  1278 00000789 6564206469736B2E   
  1279 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1279 0000079A 686520277772697465-
  1279 000007A3 2D70726F7465637427-
  1279 000007AC 2073657474696E6720-
  1279 000007B5 6F6E20746865206469-
  1279 000007BE 736B206F7220726574-
  1279 000007C7 7279207573696E6720-
  1279 000007D0 7573696E6720616E6F-
  1279 000007D9 74686572206469736B-
  1279 000007E2 2E                 
  1280 000007E3 0D0A00                                          db      13,10,0
  1281 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1281 000007EF 736B65747465205265-
  1281 000007F8 6D6F766564         
  1282 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1282 00000806 726F72206D61792069-
  1282 0000080F 6E6469636174652074-
  1282 00000818 686174207468652066-
  1282 00000821 6C6F70707920646973-
  1282 0000082A 6B6574746520686173-
  1282 00000833 206265656E2072656D-
  1282 0000083C 6F7665642066726F6D-
  1282 00000845 20746865           
  1283 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1283 00000852 652064726976652E20-
  1283 0000085B 4F6E20736F6D652073-
  1283 00000864 797374656D732C2074-
  1283 0000086D 68697320636F646520-
  1283 00000876 6D617920616C736F20-
  1283 0000087F 6F6363757220696620-
  1283 00000888 746865206469736B65-
  1283 00000891 747465206973       
  1284 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1284 000008A0 70726F746563746564-
  1284 000008A9 2E2720506C65617365-
  1284 000008B2 207665726966792074-
  1284 000008BB 686174207468652064-
  1284 000008C4 69736B657474652069-
  1284 000008CD 73206E6F7420777269-
  1284 000008D6 74652D70726F746563-
  1284 000008DF 74656420616E64     
  1285 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1285 000008EF 65726C7920696E7365-
  1285 000008F8 7274656420696E2074-
  1285 00000901 6865206469736B6574-
  1285 0000090A 74652064726976652E 
  1286 00000913 0D0A00                                          db      13,10,0
  1287 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1287 0000091F 6976652054696D6564-
  1287 00000928 204F7574           
  1288 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1288 00000935 726F7220757375616C-
  1288 0000093E 6C7920696E64696361-
  1288 00000947 746573207468617420-
  1288 00000950 6E6F206469736B6574-
  1288 00000959 746520697320696E20-
  1288 00000962 746865206469736B65-
  1288 0000096B 747465206472697665-
  1288 00000974 2E20506C65617365   
  1289 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1289 00000985 726520746861742074-
  1289 0000098E 6865206469736B6574-
  1289 00000997 74652069732070726F-
  1289 000009A0 7065726C7920736561-
  1289 000009A9 74656420696E207468-
  1289 000009B2 652064726976652061-
  1289 000009BB 6E642072657472792E 
  1290 000009C4 0D0A00                                          db      13,10,0
  1291 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1291 000009D0 6B6E6F776E20457272-
  1291 000009D9 6F72               
  1292 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1292 000009E4 6F722D636F64652072-
  1292 000009ED 657475726E65642062-
  1292 000009F6 79207468652042494F-
  1292 000009FF 53206973206E6F7420-
  1292 00000A08 61207265636F676E69-
  1292 00000A11 7A6564206572726F72-
  1292 00000A1A 2E20506C6561736520-
  1292 00000A23 636F6E73756C74     
  1293 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1293 00000A33 6D7075746572277320-
  1293 00000A3C 746563686E6963616C-
  1293 00000A45 207265666572656E63-
  1293 00000A4E 6520666F7220612064-
  1293 00000A57 65736372697074696F-
  1293 00000A60 6E206F662074686973-
  1293 00000A69 206572726F7220636F-
  1293 00000A72 64652E             
  1294 00000A75 0D0A00                                          db      13,10,0
  1295                                  wcPrepInBuf             equ     $
  1296                                  %endif
  1297                                  %ifdef BUILDDISK
  1298                                  ;=======================================================================================================================
  1299                                  ;
  1300                                  ;       File Allocation Tables
  1301                                  ;
  1302                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1303                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1304                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1305                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1306                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1307                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1308                                  ;       the last cluster in the chain.
  1309                                  ;
  1310                                  ;       Every three bytes encode two FAT entries as follows:
  1311                                  ;
  1312                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1313                                  ;
  1314                                  ;=======================================================================================================================
  1315                                  ;-----------------------------------------------------------------------------------------------------------------------
  1316                                  ;
  1317                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1318                                  ;
  1319                                  ;-----------------------------------------------------------------------------------------------------------------------
  1320                                  section                 fat1                                                    ;first copy of FAT
  1321                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1322                                                          db      005h,060h,000h, 007h,080h,000h
  1323                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1324                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1325                                                          db      011h,020h,001h, 013h,040h,001h
  1326                                                          db      015h,060h,001h, 017h,080h,001h
  1327                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1328                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1329                                                          db      021h,020h,002h, 023h,040h,002h
  1330                                                          db      025h,060h,002h, 027h,080h,002h
  1331                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1332                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1333                                  ;-----------------------------------------------------------------------------------------------------------------------
  1334                                  ;
  1335                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1336                                  ;
  1337                                  ;-----------------------------------------------------------------------------------------------------------------------
  1338                                  section                 fat2                                                    ;second copy of FAT
  1339                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1340                                                          db      005h,060h,000h, 007h,080h,000h
  1341                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1342                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1343                                                          db      011h,020h,001h, 013h,040h,001h
  1344                                                          db      015h,060h,001h, 017h,080h,001h
  1345                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1346                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1347                                                          db      021h,020h,002h, 023h,040h,002h
  1348                                                          db      025h,060h,002h, 027h,080h,002h
  1349                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1350                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1351                                  ;-----------------------------------------------------------------------------------------------------------------------
  1352                                  ;
  1353                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1354                                  ;
  1355                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1356                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1357                                  ;       copy.
  1358                                  ;
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  section                 dir                                                     ;diskette directory
  1361                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1362                                                          db      020h                                            ;attribute (archive bit set)
  1363                                                          times   10 db 0                                         ;unused
  1364                                                          dw      0h                                              ;time
  1365                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1366                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1367                                                          dw      2                                               ;first cluster
  1368                                                          dd      05400h                                          ;file size
  1369                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1370                                  %endif
  1371                                  %ifdef BUILDCOM
  1372                                  ;=======================================================================================================================
  1373                                  ;
  1374                                  ;       OS.COM
  1375                                  ;
  1376                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1377                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1378                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1379                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1380                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1381                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1382                                  ;
  1383                                  ;       Our loader addressability is set up according to the following diagram.
  1384                                  ;
  1385                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1386                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1387                                  ;                               |  256 = 100h bytes                             |
  1388                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1389                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1390                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1391                                  ;                       007e00  +-----------------------------------------------+
  1392                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1393                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1394                                  ;                               |                                               |
  1395                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1396                                  ;                               |                                               |
  1397                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1398                                  ;                               |  Loader Code                                  |
  1399                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1400                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1401                                  ;
  1402                                  ;=======================================================================================================================
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404                                  ;
  1405                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1406                                  ;
  1407                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1408                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1409                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1410                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1411                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1412                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1413                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1414                                  ;       registers.
  1415                                  ;
  1416                                  ;-----------------------------------------------------------------------------------------------------------------------
  1417                                                          cpu     8086                                            ;assume minimal CPU
  1418                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1419                                                          bits    16                                              ;this is 16-bit code
  1420                                  Loader                  push    cs                                              ;use the code segment
  1421                                                          pop     ds                                              ;...as our data segment
  1422                                                          push    cs                                              ;use the code segment
  1423                                                          pop     es                                              ;...as our extra segment
  1424                                  ;
  1425                                  ;       Write a message to the console so we know we have our addressability established.
  1426                                  ;
  1427                                                          mov     si,czStartingMsg                                ;starting message
  1428                                                          call    PutTTYString                                    ;display loader message
  1429                                  ;
  1430                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1431                                  ;
  1432                                                          call    GetCPUType                                      ;AL = cpu type
  1433                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1434                                                          cmp     al,3                                            ;80386+?
  1435                                                          jb      LoaderExit                                      ;no, exit with error message
  1436                                                          cpu     386                                             ;allow 80386 instructions
  1437                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1438                                                          call    PutTTYString                                    ;display message
  1439                                  ;
  1440                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1441                                  ;
  1442                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1443                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1444                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1445                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1446                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1447                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1448                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1449                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1450                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1451                                                          call    PutTTYString                                    ;display message
  1452                                  ;
  1453                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1454                                  ;
  1455                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1456                                                          pop     es                                              ;... as target segment
  1457                                                          xor     di,di                                           ;ES:DI = target address
  1458                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1459                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1460                                                          cld                                                     ;forward strings
  1461                                                          rep     movsb                                           ;copy kernel image
  1462                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1463                                                          call    PutTTYString                                    ;display message
  1464                                  ;
  1465                                  ;       Switch to protected mode.
  1466                                  ;
  1467                                                          xor     si,si                                           ;ES:SI = gdt addr
  1468                                                          mov     ss,si                                           ;protected mode ss
  1469                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1470                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1471                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1472                                                          mov     dx,001Fh                                        ;outer delay loop count
  1473                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1474                                                          loop    $                                               ;wait out pending interrupts
  1475                                                          dec     dx                                              ;restore outer loop count
  1476                                                          jnz     .10                                             ;continue outer loop
  1477                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1478                                  ;
  1479                                  ;       Enable hardware and maskable interrupts.
  1480                                  ;
  1481                                                          xor     al,al                                           ;enable all registers code
  1482                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1483                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1484                                                          sti                                                     ;enable maskable interrupts
  1485                                  ;
  1486                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1487                                  ;
  1488                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1489                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1490                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1491                                  ;-----------------------------------------------------------------------------------------------------------------------
  1492                                  ;
  1493                                  ;       Routine:        LoaderExit
  1494                                  ;
  1495                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1496                                  ;
  1497                                  ;       In:             DS:SI   string address
  1498                                  ;
  1499                                  ;-----------------------------------------------------------------------------------------------------------------------
  1500                                  LoaderExit              call    PutTTYString                                    ;display error message
  1501                                  ;
  1502                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1503                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1504                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1505                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1506                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1507                                  ;
  1508                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1509                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1510                                                          jnz     .40                                             ;exit if key pressed
  1511                                                          sti                                                     ;enable maskable interrupts
  1512                                                          hlt                                                     ;wait for interrupt
  1513                                                          jmp     .30                                             ;repeat until keypress
  1514                                  ;
  1515                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1516                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1517                                  ;       HLT until the system resets.
  1518                                  ;
  1519                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1520                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1521                                  .50                     sti                                                     ;enable maskable interrupts
  1522                                                          hlt                                                     ;stop until reset, int, nmi
  1523                                                          jmp     .50                                             ;loop until restart kicks in
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;       Routine:        GetCPUType
  1527                                  ;
  1528                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1529                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1530                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1531                                  ;
  1532                                  ;       Out:            AX      0 = 808x, v20, etc.
  1533                                  ;                               1 = 80186
  1534                                  ;                               2 = 80286
  1535                                  ;                               3 = 80386
  1536                                  ;
  1537                                  ;-----------------------------------------------------------------------------------------------------------------------
  1538                                  GetCPUType              mov     al,1                                            ;AL = 1
  1539                                                          mov     cl,32                                           ;shift count
  1540                                                          shr     al,cl                                           ;try a 32-bit shift
  1541                                                          or      al,al                                           ;did the shift happen?
  1542                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1543                                                          cpu     186
  1544                                                          push    sp                                              ;save stack pointer
  1545                                                          pop     cx                                              ;...into cx
  1546                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1547                                                          jne     .10                                             ;yes, cpu is 80186
  1548                                                          cpu     286
  1549                                                          inc     ax                                              ;AX = 2
  1550                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1551                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1552                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1553                                                          jz      .10                                             ;yes, cpu is 80286
  1554                                                          inc     ax                                              ;AX = 3
  1555                                  .10                     ret                                                     ;return
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557                                  ;
  1558                                  ;       Routine:        PutTTYString
  1559                                  ;
  1560                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1561                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1562                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1563                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1564                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1565                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1566                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1567                                  ;                       to LODSB is not needed.
  1568                                  ;
  1569                                  ;       In:             DS:SI   address of string
  1570                                  ;
  1571                                  ;       Out:            DF      0
  1572                                  ;                       ZF      1
  1573                                  ;                       AL      0
  1574                                  ;
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                  PutTTYString            cld                                                     ;forward strings
  1577                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1578                                                          test    al,al                                           ;end of string?
  1579                                                          jz      .20                                             ;... yes, exit our loop
  1580                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1581                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1582                                                          jmp     .10                                             ;repeat until done
  1583                                  .20                     ret                                                     ;return
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;       Loader Data
  1587                                  ;
  1588                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1589                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1590                                  ;
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                                          align   2
  1593                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1594                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1595                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1596                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1597                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1598                                                          db      "Please press any key to restart the computer.",13,10,0
  1599                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1600                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1601                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1602                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1603                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1604                                  ;=======================================================================================================================
  1605                                  ;
  1606                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1607                                  ;
  1608                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1609                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1610                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1611                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1612                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1613                                  ;
  1614                                  ;=======================================================================================================================
  1615                                  ;=======================================================================================================================
  1616                                  ;
  1617                                  ;       Kernel Tables
  1618                                  ;
  1619                                  ;=======================================================================================================================
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;
  1622                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1623                                  ;
  1624                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1625                                  ;       first descriptor must be all nulls.
  1626                                  ;
  1627                                  ;       6   5         4         3         2         1         0
  1628                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1629                                  ;       ----------------------------------------------------------------
  1630                                  ;       h......hffffmmmma......ab......................bn..............n
  1631                                  ;
  1632                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1633                                  ;               ffff                                                            flags
  1634                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1635                                  ;                       a......a                                                access
  1636                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1637                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1638                                  ;
  1639                                  ;       00000000                                                                all areas have base addresses below 2^24
  1640                                  ;               0...                                                            single-byte size granularity
  1641                                  ;               1...                                                            4-kilobyte size granularity
  1642                                  ;               .0..                                                            16-bit default for code segments
  1643                                  ;               .1..                                                            32-bit default for code segments
  1644                                  ;               ..0.                                                            intel-reserved; should be zero
  1645                                  ;               ...0                                                            available for operating system use
  1646                                  ;                   0000                                                        segment is less than 2^16 in size
  1647                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1648                                  ;                       1.......                                                segment is present in memory
  1649                                  ;                       .00.....                                                segment is of privilege level 0
  1650                                  ;                       ...0....                                                segment is of system or gate type
  1651                                  ;                       ...00010                                                local decriptor table (LDT)
  1652                                  ;                       ...01001                                                task state segment (TSS) available
  1653                                  ;                       ...01011                                                task state segment (TSS) busy
  1654                                  ;                       ...10...                                                data segment
  1655                                  ;                       ...10011                                                writable data (accessed)
  1656                                  ;                       ...11...                                                code segment
  1657                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  section                 gdt                                                     ;global descriptor table
  1661                                                          dq      0000000000000000h                               ;00 required null selector
  1662                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1663                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1664                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1665                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1666                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1667                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1668                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1669                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1670                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1671                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1672                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1673                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1674                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1675                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1679                                  ;
  1680                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1681                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1682                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1683                                  ;
  1684                                  ;       6   5         4         3         2         1         0
  1685                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1686                                  ;       ----------------------------------------------------------------
  1687                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1688                                  ;
  1689                                  ;       h...h   high-order offset (bits 16-31)
  1690                                  ;       P       present (0=unused interrupt)
  1691                                  ;       zz      descriptor privilege level
  1692                                  ;       S       storage segment (must be zero for IDT)
  1693                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1694                                  ;       S...S   handling code selector in GDT
  1695                                  ;       l...l   lo-order offset (bits 0-15)
  1696                                  ;
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  section                 idt                                                     ;interrupt descriptor table
  1699                                                          mint    dividebyzero                                    ;00 divide by zero
  1700                                                          mint    singlestep                                      ;01 single step
  1701                                                          mint    nmi                                             ;02 non-maskable
  1702                                                          mint    break                                           ;03 break
  1703                                                          mint    into                                            ;04 into
  1704                                                          mint    bounds                                          ;05 bounds
  1705                                                          mint    badopcode                                       ;06 bad op code
  1706                                                          mint    nocoproc                                        ;07 no coprocessor
  1707                                                          mint    doublefault                                     ;08 double-fault
  1708                                                          mint    operand                                         ;09 operand
  1709                                                          mint    badtss                                          ;0a bad TSS
  1710                                                          mint    notpresent                                      ;0b not-present
  1711                                                          mint    stacklimit                                      ;0c stack limit
  1712                                                          mint    protection                                      ;0d general protection fault
  1713                                                          mint    int14                                           ;0e (reserved)
  1714                                                          mint    int15                                           ;0f (reserved)
  1715                                                          mint    coproccalc                                      ;10 (reserved)
  1716                                                          mint    int17                                           ;11 (reserved)
  1717                                                          mint    int18                                           ;12 (reserved)
  1718                                                          mint    int19                                           ;13 (reserved)
  1719                                                          mint    int20                                           ;14 (reserved)
  1720                                                          mint    int21                                           ;15 (reserved)
  1721                                                          mint    int22                                           ;16 (reserved)
  1722                                                          mint    int23                                           ;17 (reserved)
  1723                                                          mint    int24                                           ;18 (reserved)
  1724                                                          mint    int25                                           ;19 (reserved)
  1725                                                          mint    int26                                           ;1a (reserved)
  1726                                                          mint    int27                                           ;1b (reserved)
  1727                                                          mint    int28                                           ;1c (reserved)
  1728                                                          mint    int29                                           ;1d (reserved)
  1729                                                          mint    int30                                           ;1e (reserved)
  1730                                                          mint    int31                                           ;1f (reserved)
  1731                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1732                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1733                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1734                                                          mtrap   com2                                            ;23 IRQ3 com2
  1735                                                          mtrap   com1                                            ;24 IRQ4 com1
  1736                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1737                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1738                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1739                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1740                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1741                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1742                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1743                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1744                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1745                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1746                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1747                                                          mtrap   svc                                             ;30 OS services
  1748                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1749                                  ;=======================================================================================================================
  1750                                  ;
  1751                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1752                                  ;
  1753                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1754                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1755                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1756                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1757                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1758                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1759                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1760                                  ;
  1761                                  ;=======================================================================================================================
  1762                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1763                                                          cpu     386                                             ;allow 80386 instructions
  1764                                                          bits    32                                              ;this is 32-bit code
  1765                                  ;=======================================================================================================================
  1766                                  ;
  1767                                  ;       CPU Interrupt Handlers
  1768                                  ;
  1769                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1770                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1771                                  ;
  1772                                  ;=======================================================================================================================
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;       INT0    Divide By Zero
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                                          menter  dividebyzero                                    ;divide by zero
  1779                                                          push    0                                               ;store interrupt nbr
  1780                                                          push    czIntDivideByZero                               ;store message offset
  1781                                                          jmp     ReportInterrupt                                 ;report interrupt
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;       INT1    Single Step
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                                          menter  singlestep                                      ;single step
  1788                                                          push    1                                               ;store interrupt nbr
  1789                                                          push    czIntSingleStep                                 ;store message offset
  1790                                                          jmp     ReportInterrupt                                 ;report interrupt
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;       INT2    Non-Maskable Interrupt
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                                          menter  nmi                                             ;non-maskable
  1797                                                          push    2                                               ;store interrupt nbr
  1798                                                          push    czIntNonMaskable                                ;store message offset
  1799                                                          jmp     ReportInterrupt                                 ;report interrupt
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;       INT3    Break
  1803                                  ;
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                                          menter  break                                           ;break
  1806                                                          push    3                                               ;store interrupt nbr
  1807                                                          push    czIntBreak                                      ;store message offset
  1808                                                          jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT4    Into
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  into                                            ;into
  1815                                                          push    4                                               ;store interrupt nbr
  1816                                                          push    czIntInto                                       ;store message offset
  1817                                                          jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT5    Bounds
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  bounds                                          ;bounds
  1824                                                          push    5                                               ;store interrupt nbr
  1825                                                          push    czIntBounds                                     ;store message offset
  1826                                                          jmp     ReportInterrupt                                 ;report interrupt
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       INT6    Bad Operation Code
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                                          menter  badopcode                                       ;bad opcode interrupt
  1833                                                          push    6                                               ;store interrupt nbr
  1834                                                          push    czIntBadOpCode                                  ;store message offset
  1835                                                          jmp     ReportInterrupt                                 ;report interrupt
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;       INT7    No Coprocessor
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1842                                                          push    7                                               ;store interrupt nbr
  1843                                                          push    czIntNoCoprocessor                              ;store message offset
  1844                                                          jmp     ReportInterrupt                                 ;report interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;       INT8    Double Fault
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                                          menter  doublefault                                     ;doublefault interrupt
  1851                                                          push    8                                               ;store interrupt nbr
  1852                                                          push    czIntDoubleFault                                ;store message offset
  1853                                                          jmp     ReportInterrupt                                 ;report interrupt
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;       INT9    Operand
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                                          menter  operand                                         ;operand interrupt
  1860                                                          push    9                                               ;store interrupt nbr
  1861                                                          push    czIntOperand                                    ;store message offset
  1862                                                          jmp     ReportInterrupt                                 ;report interrupt
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;       INT10   Bad Task State Segment
  1866                                  ;
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                                          menter  badtss                                          ;bad TSS interrupt
  1869                                                          push    10                                              ;store interrupt nbr
  1870                                                          push    czIntBadTSS                                     ;store message offset
  1871                                                          jmp     ReportInterrupt                                 ;report interrupt
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  ;
  1874                                  ;       INT11   Not Present
  1875                                  ;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                                          menter  notpresent                                      ;not present interrupt
  1878                                                          push    11                                              ;store interrupt nbr
  1879                                                          push    czIntNotPresent                                 ;store message offset
  1880                                                          jmp     ReportInterrupt                                 ;report interrupt
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       INT12   Stack Limit
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  stacklimit                                      ;stack limit interrupt
  1887                                                          push    12                                              ;store interrupt nbr
  1888                                                          push    czIntStackLimit                                 ;store message offset
  1889                                                          jmp     ReportInterrupt                                 ;report interrupt
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       INT13   General Protection Fault
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  protection                                      ;protection fault interrupt
  1896                                                          push    13                                              ;store interrupt nbr
  1897                                                          push    czIntProtection                                 ;store message offset
  1898                                                          jmp     ReportInterrupt                                 ;report interrupt
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;       INT14   Reserved
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                                          menter  int14                                           ;(reserved)
  1905                                                          push    14                                              ;store interrupt nbr
  1906                                                          push    czIntReserved                                   ;store message offset
  1907                                                          jmp     ReportInterrupt                                 ;report interrupt
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  ;
  1910                                  ;       INT15   Reserved
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                                          menter  int15                                           ;(reserved)
  1914                                                          push    15                                              ;store interrupt nbr
  1915                                                          push    czIntReserved                                   ;store message offset
  1916                                                          jmp     ReportInterrupt                                 ;report interrupt
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  ;
  1919                                  ;       INT16   Coprocessor Calculation
  1920                                  ;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                                          menter  coproccalc                                      ;coprocessor calculation
  1923                                                          push    16                                              ;store interrupt nbr
  1924                                                          push    czIntCoprocessorCalc                            ;store message offset
  1925                                                          jmp     ReportInterrupt                                 ;report interrupt
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  ;
  1928                                  ;       INT17   Reserved
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  int17                                           ;(reserved)
  1932                                                          push    17                                              ;store interrupt nbr
  1933                                                          push    czIntReserved                                   ;store message offset
  1934                                                          jmp     ReportInterrupt                                 ;report interrupt
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       INT18   Reserved
  1938                                  ;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                                          menter  int18                                           ;(reserved)
  1941                                                          push    18                                              ;store interrupt nbr
  1942                                                          push    czIntReserved                                   ;store message offset
  1943                                                          jmp     ReportInterrupt                                 ;report interrupt
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;       INT19   Reserved
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                                          menter  int19                                           ;(reserved)
  1950                                                          push    19                                              ;store interrupt nbr
  1951                                                          push    czIntReserved                                   ;store message offset
  1952                                                          jmp     ReportInterrupt                                 ;report interrupt
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                  ;
  1955                                  ;       INT20   Reserved
  1956                                  ;
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                                          menter  int20                                           ;(reserved)
  1959                                                          push    20                                              ;store interrupt nbr
  1960                                                          push    czIntReserved                                   ;store message offset
  1961                                                          jmp     ReportInterrupt                                 ;report interrupt
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                  ;
  1964                                  ;       INT21   Reserved
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                                          menter  int21                                           ;(reserved)
  1968                                                          push    21                                              ;store interrupt nbr
  1969                                                          push    czIntReserved                                   ;store message offset
  1970                                                          jmp     ReportInterrupt                                 ;report interrupt
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;       INT22   Reserved
  1974                                  ;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                                          menter  int22                                           ;(reserved)
  1977                                                          push    22                                              ;store interrupt nbr
  1978                                                          push    czIntReserved                                   ;store message offset
  1979                                                          jmp     ReportInterrupt                                 ;report interrupt
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  ;
  1982                                  ;       INT23   Reserved
  1983                                  ;
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                                          menter  int23                                           ;(reserved)
  1986                                                          push    23                                              ;store interrupt nbr
  1987                                                          push    czIntReserved                                   ;store message offset
  1988                                                          jmp     ReportInterrupt                                 ;report interrupt
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;       INT24   Reserved
  1992                                  ;
  1993                                  ;-----------------------------------------------------------------------------------------------------------------------
  1994                                                          menter  int24                                           ;(reserved)
  1995                                                          push    24                                              ;store interrupt nbr
  1996                                                          push    czIntReserved                                   ;store message offset
  1997                                                          jmp     ReportInterrupt                                 ;report interrupt
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                  ;
  2000                                  ;       INT25   Reserved
  2001                                  ;
  2002                                  ;-----------------------------------------------------------------------------------------------------------------------
  2003                                                          menter  int25                                           ;(reserved)
  2004                                                          push    25                                              ;store interrupt nbr
  2005                                                          push    czIntReserved                                   ;store message offset
  2006                                                          jmp     ReportInterrupt                                 ;report interrupt
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  ;
  2009                                  ;       INT26   Reserved
  2010                                  ;
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                                          menter  int26                                           ;(reserved)
  2013                                                          push    26                                              ;store interrupt nbr
  2014                                                          push    czIntReserved                                   ;store message offset
  2015                                                          jmp     ReportInterrupt                                 ;report interrupt
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;
  2018                                  ;       INT27   Reserved
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                                          menter  int27                                           ;(reserved)
  2022                                                          push    27                                              ;store interrupt nbr
  2023                                                          push    czIntReserved                                   ;store message offset
  2024                                                          jmp     ReportInterrupt                                 ;report interrupt
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026                                  ;
  2027                                  ;       INT28   Reserved
  2028                                  ;
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                                          menter  int28                                           ;(reserved)
  2031                                                          push    28                                              ;store interrupt nbr
  2032                                                          push    czIntReserved                                   ;store message offset
  2033                                                          jmp     ReportInterrupt                                 ;report interrupt
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;
  2036                                  ;       INT29   Reserved
  2037                                  ;
  2038                                  ;-----------------------------------------------------------------------------------------------------------------------
  2039                                                          menter  int29                                           ;(reserved)
  2040                                                          push    29                                              ;store interrupt nbr
  2041                                                          push    czIntReserved                                   ;store message offset
  2042                                                          jmp     ReportInterrupt                                 ;report interrupt
  2043                                  ;-----------------------------------------------------------------------------------------------------------------------
  2044                                  ;
  2045                                  ;       INT30   Reserved
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048                                                          menter  int30                                           ;(reserved)
  2049                                                          push    30                                              ;store interrupt nbr
  2050                                                          push    czIntReserved                                   ;store message offset
  2051                                                          jmp     ReportInterrupt                                 ;report interrupt
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  ;
  2054                                  ;       INT31   Reserved
  2055                                  ;
  2056                                  ;-----------------------------------------------------------------------------------------------------------------------
  2057                                                          menter  int31                                           ;(reserved)
  2058                                                          push    31                                              ;store interrupt nbr
  2059                                                          push    czIntReserved                                   ;store message offset
  2060                                                          jmp     ReportInterrupt                                 ;report interrupt
  2061                                  ;-----------------------------------------------------------------------------------------------------------------------
  2062                                  ;
  2063                                  ;       Routine:        ReportInterrupt
  2064                                  ;
  2065                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2066                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2067                                  ;
  2068                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2069                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2070                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2071                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2072                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2073                                  ;
  2074                                  ;       Out:            N/A             This routine does not exit.
  2075                                  ;
  2076                                  ;-----------------------------------------------------------------------------------------------------------------------
  2077                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2078                                                          push    es                                              ;save ES at time of interrupt
  2079                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2080                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2081                                  ;
  2082                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2083                                  ;
  2084                                  ;                       [EBP+60]        EFLAGS
  2085                                  ;                       [EBP+56]        CS
  2086                                  ;                       [EBP+52]        EIP
  2087                                  ;                       [EBP+48]        EIP hi-order
  2088                                  ;                       [EBP+44]        interrupt number (0-31)
  2089                                  ;                       [EBP+40]        error message address
  2090                                  ;                       [EBP+36]        DS
  2091                                  ;                       [EBP+32]        ES
  2092                                  ;                       [EBP+28]        EAX
  2093                                  ;                       [EBP+24]        ECX
  2094                                  ;                       [EBP+20]        EDX
  2095                                  ;                       [EBP+16]        EBX
  2096                                  ;                       [EBP+12]        ESP
  2097                                  ;                       [EBP+8]         EBP
  2098                                  ;                       [EBP+4]         ESI
  2099                                  ;                       [EBP+0]         EDI
  2100                                  ;
  2101                                                          push    cs                                              ;load code selector ...
  2102                                                          pop     ds                                              ;... into DS
  2103                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2104                                                          pop     es                                              ;... into ES
  2105                                  ;
  2106                                  ;       Display the interrupt report boundary box
  2107                                  ;
  2108                                                          mov     cl,13                                           ;column
  2109                                                          mov     ch,6                                            ;row
  2110                                                          mov     dl,50                                           ;width
  2111                                                          mov     dh,8                                            ;height
  2112                                                          mov     bh,07h                                          ;attribute
  2113                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2114                                  ;
  2115                                  ;       Display the report header
  2116                                  ;
  2117                                                          mov     cl,15                                           ;column
  2118                                                          mov     ch,7                                            ;row
  2119                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2120                                                          call    SetConsoleString                                ;draw text string
  2121                                  ;
  2122                                  ;       Display the interrupt description label
  2123                                  ;
  2124                                                          mov     cl,15                                           ;column
  2125                                                          mov     ch,8                                            ;row
  2126                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2127                                                          call    SetConsoleString                                ;draw text string
  2128                                  ;
  2129                                  ;       Display the interrupt number
  2130                                  ;
  2131                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2132                                                          mov     cl,26                                           ;column
  2133                                                          mov     ch,8                                            ;row
  2134                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2135                                  ;
  2136                                  ;       Display the interrupt name
  2137                                  ;
  2138                                                          mov     cl,29                                           ;column
  2139                                                          mov     ch,8                                            ;row
  2140                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2141                                                          call    SetConsoleString                                ;display interrupt description
  2142                                  ;
  2143                                  ;       Display the register values header
  2144                                  ;
  2145                                                          mov     cl,15                                           ;column
  2146                                                          mov     ch,10                                           ;row
  2147                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2148                                                          call    SetConsoleString                                ;draw text string
  2149                                  ;
  2150                                  ;       Display the EAX register label and value
  2151                                  ;
  2152                                                          mov     cl,15                                           ;column
  2153                                                          mov     ch,11                                           ;row
  2154                                                          mov     esi,czIntEAX                                    ;register EAX label
  2155                                                          call    SetConsoleString                                ;draw label
  2156                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2157                                                          mov     cl,19                                           ;column
  2158                                                          mov     ch,11                                           ;row
  2159                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2160                                  ;
  2161                                  ;       Display the ECX register label and value
  2162                                  ;
  2163                                                          mov     cl,15                                           ;column
  2164                                                          mov     ch,12                                           ;row
  2165                                                          mov     esi,czIntECX                                    ;label
  2166                                                          call    SetConsoleString                                ;draw label
  2167                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2168                                                          mov     cl,19                                           ;column
  2169                                                          mov     ch,12                                           ;row
  2170                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2171                                  ;
  2172                                  ;       Display the EDX register label and value
  2173                                  ;
  2174                                                          mov     cl,15                                           ;column
  2175                                                          mov     ch,13                                           ;row
  2176                                                          mov     esi,czIntEDX                                    ;label
  2177                                                          call    SetConsoleString                                ;draw label
  2178                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2179                                                          mov     cl,19                                           ;column
  2180                                                          mov     ch,13                                           ;row
  2181                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2182                                  ;
  2183                                  ;       Display the EBX register label and value
  2184                                  ;
  2185                                                          mov     cl,15                                           ;column
  2186                                                          mov     ch,14                                           ;row
  2187                                                          mov     esi,czIntEBX                                    ;label
  2188                                                          call    SetConsoleString                                ;draw label
  2189                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2190                                                          mov     cl,19                                           ;column
  2191                                                          mov     ch,14                                           ;row
  2192                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2193                                  ;
  2194                                  ;       Display the ESI register label and value
  2195                                  ;
  2196                                                          mov     cl,29                                           ;column
  2197                                                          mov     ch,11                                           ;row
  2198                                                          mov     esi,czIntESI                                    ;label
  2199                                                          call    SetConsoleString                                ;draw label
  2200                                                          mov     eax,[ebp+4]                                     ;ESI
  2201                                                          mov     cl,33                                           ;column
  2202                                                          mov     ch,11                                           ;row
  2203                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2204                                  ;
  2205                                  ;       Display the EDI register label and value
  2206                                  ;
  2207                                                          mov     cl,29                                           ;column
  2208                                                          mov     ch,12                                           ;row
  2209                                                          mov     esi,czIntEDI                                    ;label
  2210                                                          call    SetConsoleString                                ;draw label
  2211                                                          mov     eax,[ebp+0]                                     ;EDI
  2212                                                          mov     cl,33                                           ;column
  2213                                                          mov     ch,12                                           ;row
  2214                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2215                                  ;
  2216                                  ;       Display the EBP register label and value
  2217                                  ;
  2218                                                          mov     cl,29                                           ;column
  2219                                                          mov     ch,13                                           ;row
  2220                                                          mov     esi,czIntEBP                                    ;label
  2221                                                          call    SetConsoleString                                ;draw label
  2222                                                          mov     eax,[ebp+8]                                     ;EBP
  2223                                                          mov     cl,33                                           ;column
  2224                                                          mov     ch,13                                           ;row
  2225                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2226                                  ;
  2227                                  ;       Display the DS register label and value
  2228                                  ;
  2229                                                          mov     cl,42                                           ;column
  2230                                                          mov     ch,11                                           ;row
  2231                                                          mov     esi,czIntDS                                     ;label
  2232                                                          call    SetConsoleString                                ;draw label
  2233                                                          xor     eax,eax                                         ;zero register
  2234                                                          mov     ax,[ebp+36]                                     ;DS
  2235                                                          mov     cl,46                                           ;column
  2236                                                          mov     ch,11                                           ;row
  2237                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2238                                  ;
  2239                                  ;       Display the ES register label and value
  2240                                  ;
  2241                                                          mov     cl,42                                           ;column
  2242                                                          mov     ch,12                                           ;row
  2243                                                          mov     esi,czIntES                                     ;label
  2244                                                          call    SetConsoleString                                ;draw label
  2245                                                          xor     eax,eax                                         ;zero register
  2246                                                          mov     ax,[ebp+32]                                     ;ES
  2247                                                          mov     cl,46                                           ;column
  2248                                                          mov     ch,12                                           ;row
  2249                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2250                                  ;
  2251                                  ;       Display the SS register label and value
  2252                                  ;
  2253                                                          mov     cl,42                                           ;column
  2254                                                          mov     ch,13                                           ;row
  2255                                                          mov     esi,czIntSS                                     ;label
  2256                                                          call    SetConsoleString                                ;draw label
  2257                                                          xor     eax,eax                                         ;zero register
  2258                                                          mov     ax,ss                                           ;SS
  2259                                                          mov     cl,46                                           ;column
  2260                                                          mov     ch,13                                           ;row
  2261                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2262                                  ;
  2263                                  ;       Display the CS register lable and value
  2264                                  ;
  2265                                                          mov     cl,42                                           ;column
  2266                                                          mov     ch,14                                           ;row
  2267                                                          mov     esi,czIntCS                                     ;label
  2268                                                          call    SetConsoleString                                ;draw label
  2269                                                          xor     eax,eax                                         ;zero register
  2270                                                          mov     ax,[ebp+56]                                     ;CS
  2271                                                          mov     cl,46                                           ;column
  2272                                                          mov     ch,14                                           ;row
  2273                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2274                                  ;
  2275                                  ;       Display the EFLAGS register label and value
  2276                                  ;
  2277                                                          mov     cl,51                                           ;column
  2278                                                          mov     ch,11                                           ;row
  2279                                                          mov     esi,czIntEFLAGS                                 ;label
  2280                                                          call    SetConsoleString                                ;draw label
  2281                                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2282                                                          mov     cl,55                                           ;column
  2283                                                          mov     ch,11                                           ;row
  2284                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2285                                  ;
  2286                                  ;       Display the ESP register label and value
  2287                                  ;
  2288                                                          mov     cl,51                                           ;column
  2289                                                          mov     ch,13                                           ;row
  2290                                                          mov     esi,czIntESP                                    ;label
  2291                                                          call    SetConsoleString                                ;draw label
  2292                                                          mov     eax,[ebp+12]                                    ;ESP
  2293                                                          mov     cl,55                                           ;column
  2294                                                          mov     ch,13                                           ;row
  2295                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2296                                  ;
  2297                                  ;       Display the EIP register label and value
  2298                                  ;
  2299                                                          mov     cl,51                                           ;column
  2300                                                          mov     ch,14                                           ;row
  2301                                                          mov     esi,czIntEIP                                    ;label
  2302                                                          call    SetConsoleString                                ;draw label
  2303                                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2304                                                          mov     cl,55                                           ;column
  2305                                                          mov     ch,14                                           ;row
  2306                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2307                                  ;
  2308                                  ;       Halt and loop until reset
  2309                                  ;
  2310                                  .10                     sti                                                     ;enable maskable interrupts
  2311                                                          hlt                                                     ;halt processor
  2312                                                          jmp     .10                                             ;resume on interrupt
  2313                                  ;-----------------------------------------------------------------------------------------------------------------------
  2314                                  ;
  2315                                  ;       Processor Interrupt Name Strings
  2316                                  ;
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  czIntDivideByZero       db      "Division by zero",0
  2319                                  czIntSingleStep         db      "Single step",0
  2320                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2321                                  czIntBreak              db      "Break",0
  2322                                  czIntInto               db      "Into",0
  2323                                  czIntBounds             db      "Bounds",0
  2324                                  czIntBadOpCode          db      "Bad Operation Code",0
  2325                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2326                                  czIntDoubleFault        db      "Double Fault",0
  2327                                  czIntOperand            db      "Operand",0
  2328                                  czIntBadTSS             db      "Bad Task State Segment",0
  2329                                  czIntNotPresent         db      "Not Present",0
  2330                                  czIntStackLimit         db      "Stack Limit",0
  2331                                  czIntProtection         db      "General Protection Fault",0
  2332                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2333                                  czIntReserved           db      "Reserved",0
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;       Processor Interrupt Handling Strings
  2337                                  ;
  2338                                  ;-----------------------------------------------------------------------------------------------------------------------
  2339                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2340                                  czIntLabel              db      "Interrupt #",0
  2341                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2342                                  czIntEAX                db      "EAX:",0
  2343                                  czIntECX                db      "ECX:",0
  2344                                  czIntEDX                db      "EDX:",0
  2345                                  czIntEBX                db      "EBX:",0
  2346                                  czIntESI                db      "ESI:",0
  2347                                  czIntEDI                db      "EDI:",0
  2348                                  czIntEBP                db      "EBP:",0
  2349                                  czIntESP                db      "ESP:",0
  2350                                  czIntDS                 db      " DS:",0
  2351                                  czIntES                 db      " ES:",0
  2352                                  czIntSS                 db      " SS:",0
  2353                                  czIntCS                 db      " CS:",0
  2354                                  czIntEFLAGS             db      "FLG:",0
  2355                                  czIntEIP                db      "EIP:",0
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  ;
  2358                                  ;       Routine:        DrawTextDialogBox
  2359                                  ;
  2360                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2361                                  ;
  2362                                  ;       In:             CL      upper left column (0-79)
  2363                                  ;                       CH      upper left row (0-24)
  2364                                  ;                       DL      column width, excluding border
  2365                                  ;                       DH      row height, excluding border
  2366                                  ;                       BH      color attribute
  2367                                  ;
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2370                                                          push    esi                                             ;
  2371                                                          push    edi                                             ;
  2372                                                          push    es                                              ;
  2373                                                          push    EGDTCGA                                         ;load CGA selector ...
  2374                                                          pop     es                                              ;... into ES
  2375                                  ;
  2376                                  ;       Compute target display offset
  2377                                  ;
  2378                                                          xor     eax,eax                                         ;zero register
  2379                                                          mov     al,ch                                           ;row
  2380                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2381                                                          mul     ah                                              ;row offset
  2382                                                          add     al,cl                                           ;add column
  2383                                                          adc     ah,0                                            ;add overflow
  2384                                                          add     al,cl                                           ;add column
  2385                                                          adc     ah,0                                            ;add overflow
  2386                                                          mov     edi,eax                                         ;target row offset
  2387                                  ;
  2388                                  ;       Display top border row
  2389                                  ;
  2390                                                          push    edi                                             ;save target row offset
  2391                                                          mov     ah,bh                                           ;attribute
  2392                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2393                                                          stosw                                                   ;display character and attribute
  2394                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2395                                                          xor     ecx,ecx                                         ;zero register
  2396                                                          mov     cl,dl                                           ;width, excluding border
  2397                                                          rep     stosw                                           ;display horizontal border
  2398                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2399                                                          stosw                                                   ;display character and attribute
  2400                                                          pop     edi                                             ;restore target row offset
  2401                                                          add     edi,ECONROWBYTES                                ;next row
  2402                                  ;
  2403                                  ;       Display dialog box body rows
  2404                                  ;
  2405                                                          xor     ecx,ecx                                         ;zero register
  2406                                                          mov     cl,dh                                           ;height, excluding border
  2407                                  .10                     push    ecx                                             ;save remaining rows
  2408                                                          push    edi                                             ;save target row offset
  2409                                                          mov     ah,bh                                           ;attribute
  2410                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2411                                                          stosw                                                   ;display character and attribute
  2412                                                          mov     al,EASCIISPACE                                  ;space
  2413                                                          xor     ecx,ecx                                         ;zero register
  2414                                                          mov     cl,dl                                           ;width, excluding border
  2415                                                          rep     stosw                                           ;display row
  2416                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2417                                                          stosw                                                   ;display character and attribute
  2418                                                          pop     edi                                             ;restore target row offset
  2419                                                          add     edi,ECONROWBYTES                                ;next row
  2420                                                          pop     ecx                                             ;remaining rows
  2421                                                          loop    .10                                             ;next row
  2422                                  ;
  2423                                  ;       Display bottom border row
  2424                                  ;
  2425                                                          push    edi                                             ;save target row offset
  2426                                                          mov     ah,bh                                           ;attribute
  2427                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2428                                                          stosw                                                   ;display character and attribute
  2429                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2430                                                          xor     ecx,ecx                                         ;zero register
  2431                                                          mov     cl,dl                                           ;width, excluding border
  2432                                                          rep     stosw                                           ;display horizontal border
  2433                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2434                                                          stosw                                                   ;display character and attribute
  2435                                                          pop     edi                                             ;restore target row offset
  2436                                                          add     edi,ECONROWBYTES                                ;next row
  2437                                  ;
  2438                                  ;       Restore and return
  2439                                  ;
  2440                                                          pop     es                                              ;restore non-volatile regs
  2441                                                          pop     edi                                             ;
  2442                                                          pop     esi                                             ;
  2443                                                          pop     ecx                                             ;
  2444                                                          ret                                                     ;return
  2445                                  ;=======================================================================================================================
  2446                                  ;
  2447                                  ;       Hardware Device Interupts
  2448                                  ;
  2449                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2450                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2451                                  ;       (BX=2028h).
  2452                                  ;
  2453                                  ;=======================================================================================================================
  2454                                  ;-----------------------------------------------------------------------------------------------------------------------
  2455                                  ;
  2456                                  ;       IRQ0    Clock Tick Interrupt
  2457                                  ;
  2458                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2459                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2460                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2461                                  ;
  2462                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2463                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2464                                  ;
  2465                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2466                                  ;       zero, the floppy disk motors are turned off.
  2467                                  ;
  2468                                  ;-----------------------------------------------------------------------------------------------------------------------
  2469                                                          menter  clocktick                                       ;clock tick interrupt
  2470                                                          push    eax                                             ;save non-volatile regs
  2471                                                          push    edx                                             ;
  2472                                                          push    ds                                              ;
  2473                                  ;
  2474                                  ;       Update the clock tick count and the elapsed days as needed.
  2475                                  ;
  2476                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2477                                                          pop     ds                                              ;... into data segment register
  2478                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2479                                                          inc     eax                                             ;increment clock ticks
  2480                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2481                                                          jb      irq0.10                                         ;no, skip ahead
  2482                                                          inc     byte [wbClockDays]                              ;increment clock days
  2483                                                          xor     eax,eax                                         ;reset clock ticks
  2484                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2485                                  ;
  2486                                  ;       Decrement floppy disk motor timeout.
  2487                                  ;
  2488                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2489                                                          je      irq0.20                                         ;yes, skip ahead
  2490                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2491                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2492                                  ;
  2493                                  ;       Turn off the floppy disk motor if appropriate.
  2494                                  ;
  2495                                                          sti                                                     ;enable maskable interrupts
  2496                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2497                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2498                                                          in      al,dx                                           ;FDC main status byte
  2499                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2500                                                          jnz     irq0.15                                         ;wait while busy
  2501                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2502                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2503                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2504                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2505                                                          out     dx,al                                           ;turn motor off
  2506                                  ;
  2507                                  ;       Signal the end of the hardware interrupt.
  2508                                  ;
  2509                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2510                                  ;
  2511                                  ;       Restore and return.
  2512                                  ;
  2513                                                          pop     ds                                              ;restore modified regs
  2514                                                          pop     edx                                             ;
  2515                                                          pop     eax                                             ;
  2516                                                          iretd                                                   ;return
  2517                                  ;-----------------------------------------------------------------------------------------------------------------------
  2518                                  ;
  2519                                  ;       IRQ1    Keyboard Interrupt
  2520                                  ;
  2521                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2522                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2523                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2524                                  ;       ALL modified registers upon return.
  2525                                  ;
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                                          menter  keyboard                                        ;keyboard interrrupt
  2528                                                          push    eax                                             ;save non-volatile regs
  2529                                                          push    ebx                                             ;
  2530                                                          push    ecx                                             ;
  2531                                                          push    esi                                             ;
  2532                                                          push    ds                                              ;
  2533                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2534                                                          pop     ds                                              ;... into data segment register
  2535                                                          xor     al,al                                           ;zero
  2536                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2537                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2538                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2539                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2540                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2541                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2542                                                          mov     al,' '                                          ;space
  2543                                                          mov     [wbConsoleChar],al                              ;set character to space
  2544                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2545                                                          not     al                                              ;controller timeout mask
  2546                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2547                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2548                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2549                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2550                                                          jz      irq1.140                                        ;yes, skip ahead
  2551                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2552                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2553                                                          mov     ah,al                                           ;copy scan code 0
  2554                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2555                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2556                                                          je      irq1.30                                         ;yes, set flag
  2557                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2558                                                          je      irq1.40                                         ;yes, reset flag
  2559                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2560                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2561                                                          je      irq1.30                                         ;yes, set flag
  2562                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2563                                                          je      irq1.40                                         ;yes, reset flag
  2564                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2565                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2566                                                          je      irq1.30                                         ;yes, set flag
  2567                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2568                                                          je      irq1.40                                         ;yes, reset flag
  2569                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2570                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2571                                                          je      irq1.30                                         ;yes, set flag
  2572                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2573                                                          je      irq1.40                                         ;yes, reset flag
  2574                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2575                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2576                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2577                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2578                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2579                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2580                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2581                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2582                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2583                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2584                                                          jne     irq1.70                                         ;no, skip ahead
  2585                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2586                                                          jz      irq1.140                                        ;yes, skip ahead
  2587                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2588                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2589                                                          mov     ah,al                                           ;copy scan code 1
  2590                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2591                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2592                                                          je      irq1.30                                         ;yes, set flag
  2593                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2594                                                          je      irq1.40                                         ;yes, reset flag
  2595                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2596                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2597                                                          je      irq1.30                                         ;yes, set flag
  2598                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2599                                                          je      irq1.40                                         ;yes, reset flag
  2600                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2601                                                          je      irq1.80                                         ;yes, skip ahead
  2602                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2603                                                          je      irq1.80                                         ;yes, skip ahead
  2604                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2605                                                          je      irq1.10                                         ;yes, continue
  2606                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2607                                                          jne     irq1.20                                         ;no, skip ahead
  2608                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2609                                                          jz      irq1.140                                        ;yes, skip ahead
  2610                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2611                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2612                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2613                                                          jz      irq1.140                                        ;yes, skip ahead
  2614                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2615                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2616                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2617                                  irq1.30                 or      bl,al                                           ;set shift flag
  2618                                                          jmp     irq1.60                                         ;skip ahead
  2619                                  irq1.40                 not     al                                              ;convert flag to mask
  2620                                                          and     bl,al                                           ;reset shift flag
  2621                                                          jmp     irq1.60                                         ;skip ahead
  2622                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2623                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2624                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2625                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2626                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2627                                                          jmp     irq1.150                                        ;finish keyboard handling
  2628                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2629                                                          jne     irq1.80                                         ;no continue
  2630                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2631                                                          jz      irq1.140                                        ;yes, skip ahead
  2632                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2633                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2634                                                          mov     ah,al                                           ;copy scan code 1
  2635                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2636                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2637                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2638                                                          jz      irq1.140                                        ;yes, skip ahead
  2639                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2640                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2641                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2642                                                          jz      irq1.140                                        ;yes, skip ahead
  2643                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2644                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2645                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2646                                                          jz      irq1.140                                        ;yes, skip ahead
  2647                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2648                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2649                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2650                                                          jz      irq1.140                                        ;yes, skip ahead
  2651                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2652                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2653                                                          jmp     irq1.150                                        ;continue
  2654                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2655                                                          test    ah,EKEYBUP                                      ;release code?
  2656                                                          jnz     irq1.130                                        ;yes, skip ahead
  2657                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2658                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2659                                                          jz      irq1.90                                         ;no, skip ahead
  2660                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2661                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2662                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2663                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2664                                                          jz      irq1.100                                        ;no skip ahead
  2665                                                          mov     cl,al                                           ;copy ASCII code
  2666                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2667                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2668                                                          jb      irq1.100                                        ;yes, skip ahead
  2669                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2670                                                          ja      irq1.100                                        ;yes, skip ahead
  2671                                                          xor     al,EASCIICASE                                   ;switch case
  2672                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2673                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2674                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2675                                                          jz      irq1.120                                        ;no, skip ahead
  2676                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2677                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2678                                                          or      edx,eax                                         ;msg id and codes
  2679                                                          xor     ecx,ecx                                         ;null param
  2680                                                          push    eax                                             ;save codes
  2681                                                          call    PutMessage                                      ;put message to console
  2682                                                          pop     eax                                             ;restore codes
  2683                                                          test    al,al                                           ;ASCII translation?
  2684                                                          jz      irq1.130                                        ;no, skip ahead
  2685                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2686                                                          and     eax,0FFFFh                                      ;clear high-order word
  2687                                                          or      edx,eax                                         ;msg id and codes
  2688                                                          xor     ecx,ecx                                         ;null param
  2689                                                          call    PutMessage                                      ;put message to console
  2690                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2691                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2692                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2693                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2694                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2695                                                          pop     ds                                              ;restore non-volatile regs
  2696                                                          pop     esi                                             ;
  2697                                                          pop     ecx                                             ;
  2698                                                          pop     ebx                                             ;
  2699                                                          pop     eax                                             ;
  2700                                                          iretd                                                   ;return
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;       Scan-Code to ASCII Translation Tables
  2703                                  ;-----------------------------------------------------------------------------------------------------------------------
  2704                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2705                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2706                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2707                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2708                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2709                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2710                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2711                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2712                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2713                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2714                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2715                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2716                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2717                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2718                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2719                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2720                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2721                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2722                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2723                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2724                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2725                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2726                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2727                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2728                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2729                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2730                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2731                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2732                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2733                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2734                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2735                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  ;
  2738                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                                          menter  iochannel                                       ;secondary 8259A cascade
  2742                                                          push    eax                                             ;save modified regs
  2743                                                          jmp     hwint                                           ;end interrupt and return
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  ;
  2746                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2747                                  ;
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                                          menter  com2                                            ;serial port 2 interrupt
  2750                                                          push    eax                                             ;save modified regs
  2751                                                          jmp     hwint                                           ;end interrupt and return
  2752                                  ;-----------------------------------------------------------------------------------------------------------------------
  2753                                  ;
  2754                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2755                                  ;
  2756                                  ;-----------------------------------------------------------------------------------------------------------------------
  2757                                                          menter  com1                                            ;serial port 1 interrupt
  2758                                                          push    eax                                             ;save modified regs
  2759                                                          jmp     hwint                                           ;end interrupt and return
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761                                  ;
  2762                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2763                                  ;
  2764                                  ;-----------------------------------------------------------------------------------------------------------------------
  2765                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2766                                                          push    eax                                             ;save modified regs
  2767                                                          jmp     hwint                                           ;end interrupt and return
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  ;
  2770                                  ;       IRQ6    Diskette Hardware Interrupt
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                                          menter  diskette                                        ;floppy disk interrupt
  2774                                                          push    eax                                             ;save non-volatile regs
  2775                                                          push    ds                                              ;
  2776                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2777                                                          pop     ds                                              ;... into DS register
  2778                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2779                                                          or      al,10000000b                                    ;set IRQ flag
  2780                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2781                                                          pop     ds                                              ;restore non-volatile regs
  2782                                                          jmp     hwint                                           ;end primary PIC interrupt
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                  ;
  2785                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2786                                  ;
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2789                                                          push    eax                                             ;save modified regs
  2790                                                          jmp     hwint                                           ;end interrupt and return
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                  ;
  2793                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2794                                  ;
  2795                                  ;-----------------------------------------------------------------------------------------------------------------------
  2796                                                          menter  rtclock                                         ;real-time clock interrupt
  2797                                                          push    eax                                             ;save modified regs
  2798                                                          jmp     hwwint                                          ;end interrupt and return
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                  ;
  2801                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2802                                  ;
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2805                                                          push    eax                                             ;save modified regs
  2806                                                          jmp     hwwint                                          ;end interrupt and return
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                  ;
  2809                                  ;       IRQ10   Reserved Hardware Interrupt
  2810                                  ;
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812                                                          menter  irq10                                           ;reserved
  2813                                                          push    eax                                             ;save modified regs
  2814                                                          jmp     hwwint                                          ;end interrupt and return
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                  ;
  2817                                  ;       IRQ11   Reserved Hardware Interrupt
  2818                                  ;
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                                          menter  irq11                                           ;reserved
  2821                                                          push    eax                                             ;save modified regs
  2822                                                          jmp     hwwint                                          ;end interrupt and return
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                  ;
  2825                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2826                                  ;
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2829                                                          push    eax                                             ;save modified regs
  2830                                                          jmp     hwwint                                          ;end interrupt and return
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                  ;
  2833                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2834                                  ;
  2835                                  ;-----------------------------------------------------------------------------------------------------------------------
  2836                                                          menter  coprocessor                                     ;coprocessor interrupt
  2837                                                          push    eax                                             ;save modified regs
  2838                                                          jmp     hwwint                                          ;end interrupt and return
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840                                  ;
  2841                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2842                                  ;
  2843                                  ;-----------------------------------------------------------------------------------------------------------------------
  2844                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2845                                                          push    eax                                             ;save modified regs
  2846                                                          jmp     hwwint                                          ;end interrupt and return
  2847                                  ;-----------------------------------------------------------------------------------------------------------------------
  2848                                  ;
  2849                                  ;       IRQ15   Reserved Hardware Interrupt
  2850                                  ;
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                                          menter  irq15                                           ;reserved
  2853                                                          push    eax                                             ;save modified regs
  2854                                                          jmp     hwwint                                          ;end interrupt and return
  2855                                  ;-----------------------------------------------------------------------------------------------------------------------
  2856                                  ;
  2857                                  ;       Exit from hardware interrupt
  2858                                  ;
  2859                                  ;-----------------------------------------------------------------------------------------------------------------------
  2860                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2861                                                          jmp     hwint90                                         ;skip ahead
  2862                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2863                                  hwint90                 pop     eax                                             ;restore modified regs
  2864                                                          iretd                                                   ;return from interrupt
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  ;
  2867                                  ;       INT 30h Operating System Software Service Interrupt
  2868                                  ;
  2869                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2870                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2871                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2872                                  ;       the entry address of the specific function from a table.
  2873                                  ;
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                                          menter  svc
  2876                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2877                                                          jae     svc90                                           ;yes, skip ahead
  2878                                                          movzx   eax,al                                          ;function
  2879                                                          shl     eax,2                                           ;offset into table
  2880                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2881                                  svc90                   iretd                                                   ;return from interrupt
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;       Service Request Table
  2885                                  ;
  2886                                  ;
  2887                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2888                                  ;
  2889                                  ;-----------------------------------------------------------------------------------------------------------------------
  2890                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2891                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2892                                                          tsvce   CompareMemory                                   ;compare memory
  2893                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2894                                                          tsvce   FreeMemory                                      ;free memory block
  2895                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2896                                                          tsvce   GetConsoleString                                ;get string input
  2897                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2898                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2899                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2900                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2901                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2902                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2903                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2904                                                          tsvce   PutDayString                                    ;put DD string
  2905                                                          tsvce   PutHourString                                   ;put hh string
  2906                                                          tsvce   PutMinuteString                                 ;put mm string
  2907                                                          tsvce   PutMonthString                                  ;put MM string
  2908                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2909                                                          tsvce   PutSecondString                                 ;put ss string
  2910                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2911                                                          tsvce   PutWeekdayString                                ;put weekday string
  2912                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2913                                                          tsvce   PutYearString                                   ;put YYYY string
  2914                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2915                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2916                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2917                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2918                                                          tsvce   UpperCaseString                                 ;upper-case string
  2919                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2920                                  ;-----------------------------------------------------------------------------------------------------------------------
  2921                                  ;
  2922                                  ;       Service Request Macros
  2923                                  ;
  2924                                  ;       These macros provide positional parameterization of service request calls.
  2925                                  ;
  2926                                  ;-----------------------------------------------------------------------------------------------------------------------
  2927                                  %macro                  allocateMemory 1
  2928                                                          mov     ecx,%1                                          ;bytes to allocate
  2929                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2930                                                          int     _svc                                            ;invoke OS service
  2931                                  %endmacro
  2932                                  %macro                  clearConsoleScreen 0
  2933                                                          mov     al,eClearConsoleScreen                          ;function code
  2934                                                          int     _svc                                            ;invoke OS service
  2935                                  %endmacro
  2936                                  %macro                  compareMemory 0
  2937                                                          mov     al,eCompareMemory                               ;function code
  2938                                                          int     _svc                                            ;invoke OS service
  2939                                  %endmacro
  2940                                  %macro                  decimalToUnsigned 0
  2941                                                          mov     al,eDecimalToUnsigned                           ;function code
  2942                                                          int     _svc                                            ;invoke OS servie
  2943                                  %endmacro
  2944                                  %macro                  freeMemory 1
  2945                                                          mov     edx,%1                                          ;address of memory block
  2946                                                          mov     al,eFreeMemory                                  ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  getBaseMemSize 0
  2950                                                          mov     al,eGetBaseMemSize                              ;function code
  2951                                                          int     _svc                                            ;invoke OS service
  2952                                  %endmacro
  2953                                  %macro                  getConsoleString 4
  2954                                                          mov     edx,%1                                          ;buffer address
  2955                                                          mov     ecx,%2                                          ;max characters
  2956                                                          mov     bh,%3                                           ;echo indicator
  2957                                                          mov     bl,%4                                           ;terminator
  2958                                                          mov     al,eGetConsoleString                            ;function code
  2959                                                          int     _svc                                            ;invoke OS service
  2960                                  %endmacro
  2961                                  %macro                  getExtendedMemSize 0
  2962                                                          mov     al,eGetExtendedMemSize                          ;function code
  2963                                                          int     _svc                                            ;invoke OS service
  2964                                  %endmacro
  2965                                  %macro                  getROMMemSize 0
  2966                                                          mov     al,eGetROMMemSize                               ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  hexadecimalToUnsigned 0
  2970                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2971                                                          int     _svc                                            ;invoke OS service
  2972                                  %endmacro
  2973                                  %macro                  isLeapYear 1
  2974                                                          mov     ebx,%1                                          ;DATETIME addr
  2975                                                          mov     al,eIsLeapYear                                  ;function code
  2976                                                          int     _svc                                            ;invoke OS service
  2977                                  %endmacro
  2978                                  %macro                  placeCursor 0
  2979                                                          mov     al,ePlaceCursor                                 ;function code
  2980                                                          int     _svc                                            ;invoke OS service
  2981                                  %endmacro
  2982                                  %macro                  putConsoleString 1
  2983                                                          mov     edx,%1                                          ;string address
  2984                                                          mov     al,ePutConsoleString                            ;function code
  2985                                                          int     _svc                                            ;invoke OS service
  2986                                  %endmacro
  2987                                  %macro                  putDateString 0
  2988                                                          mov     al,ePutDateString                               ;function code
  2989                                                          int     _svc                                            ;invoke OS service
  2990                                  %endmacro
  2991                                  %macro                  putDateString 2
  2992                                                          mov     ebx,%1                                          ;DATETIME addr
  2993                                                          mov     edx,%2                                          ;output buffer addr
  2994                                                          mov     al,ePutDateString                               ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  putDayString 2
  2998                                                          mov     ebx,%1                                          ;DATETIME addr
  2999                                                          mov     edx,%2                                          ;output buffer addr
  3000                                                          mov     al,ePutDayString                                ;function code
  3001                                                          int     _svc                                            ;invoke OS service
  3002                                  %endmacro
  3003                                  %macro                  putHourString 2
  3004                                                          mov     ebx,%1                                          ;DATETIME addr
  3005                                                          mov     edx,%2                                          ;output buffer addr
  3006                                                          mov     al,ePutHourString                               ;function code
  3007                                                          int     _svc                                            ;invoke OS service
  3008                                  %endmacro
  3009                                  %macro                  putMinuteString 2
  3010                                                          mov     ebx,%1                                          ;DATETIME addr
  3011                                                          mov     edx,%2                                          ;output buffer addr
  3012                                                          mov     al,ePutMinuteString                             ;function code
  3013                                                          int     _svc                                            ;invoke OS service
  3014                                  %endmacro
  3015                                  %macro                  putMonthString 2
  3016                                                          mov     ebx,%1                                          ;DATETIME addr
  3017                                                          mov     edx,%2                                          ;output buffer addr
  3018                                                          mov     al,ePutMonthString                              ;function code
  3019                                                          int     _svc                                            ;invoke OS service
  3020                                  %endmacro
  3021                                  %macro                  putMonthNameString 2
  3022                                                          mov     ebx,%1                                          ;DATETIME addr
  3023                                                          mov     edx,%2                                          ;output buffer addr
  3024                                                          mov     al,ePutMonthNameString                          ;function code
  3025                                                          int     _svc                                            ;invoke OS service
  3026                                  %endmacro
  3027                                  %macro                  putSecondString 2
  3028                                                          mov     ebx,%1                                          ;DATETIME addr
  3029                                                          mov     edx,%2                                          ;output buffer addr
  3030                                                          mov     al,ePutSecondString                             ;function code
  3031                                                          int     _svc                                            ;invoke OS service
  3032                                  %endmacro
  3033                                  %macro                  putTimeString 0
  3034                                                          mov     al,ePutTimeString                               ;function code
  3035                                                          int     _svc                                            ;invoke OS service
  3036                                  %endmacro
  3037                                  %macro                  putTimeString 2
  3038                                                          mov     ebx,%1                                          ;DATETIME addr
  3039                                                          mov     edx,%2                                          ;output buffer addr
  3040                                                          mov     al,ePutTimeString                               ;function code
  3041                                                          int     _svc                                            ;invoke OS service
  3042                                  %endmacro
  3043                                  %macro                  putWeekdayString 2
  3044                                                          mov     ebx,%1                                          ;DATETIME addr
  3045                                                          mov     edx,%2                                          ;output buffer addr
  3046                                                          mov     al,ePutWeekdayString                            ;function code
  3047                                                          int     _svc                                            ;invoke OS service
  3048                                  %endmacro
  3049                                  %macro                  putWeekdayNameString 2
  3050                                                          mov     ebx,%1                                          ;DATETIME addr
  3051                                                          mov     edx,%2                                          ;output buffer addr
  3052                                                          mov     al,ePutWeekdayNameString                        ;function code
  3053                                                          int     _svc                                            ;invoke OS service
  3054                                  %endmacro
  3055                                  %macro                  putYearString 2
  3056                                                          mov     ebx,%1                                          ;DATETIME addr
  3057                                                          mov     edx,%2                                          ;output buffer addr
  3058                                                          mov     al,ePutYearString                               ;function code
  3059                                                          int     _svc                                            ;invoke OS service
  3060                                  %endmacro
  3061                                  %macro                  readRealTimeClock 0
  3062                                                          mov     al,eReadRealTimeClock                           ;function code
  3063                                                          int     _svc                                            ;invoke OS service
  3064                                  %endmacro
  3065                                  %macro                  readRealTimeClock 1
  3066                                                          mov     ebx,%1                                          ;DATETIME addr
  3067                                                          mov     al,eReadRealTimeClock                           ;function code
  3068                                                          int     _svc                                            ;invoke OS service
  3069                                  %endmacro
  3070                                  %macro                  resetSystem 0
  3071                                                          mov     al,eResetSystem                                 ;function code
  3072                                                          int     _svc                                            ;invoke OS service
  3073                                  %endmacro
  3074                                  %macro                  unsignedToDecimalString 0
  3075                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3076                                                          int     _svc                                            ;invoke OS service
  3077                                  %endmacro
  3078                                  %macro                  unsignedToHexadecimal 0
  3079                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3080                                                          int     _svc                                            ;invoke OS service
  3081                                  %endmacro
  3082                                  %macro                  upperCaseString 0
  3083                                                          mov     al,eUpperCaseString                             ;function code
  3084                                                          int     _svc                                            ;invoke OS service
  3085                                  %endmacro
  3086                                  ;=======================================================================================================================
  3087                                  ;
  3088                                  ;       Kernel Function Library
  3089                                  ;
  3090                                  ;=======================================================================================================================
  3091                                  ;=======================================================================================================================
  3092                                  ;
  3093                                  ;       Date and Time Helper Routines
  3094                                  ;
  3095                                  ;       GetYear
  3096                                  ;       IsLeapYear
  3097                                  ;       PutDateString
  3098                                  ;       PutDayString
  3099                                  ;       PutHourString
  3100                                  ;       PutMinuteString
  3101                                  ;       PutMonthString
  3102                                  ;       PutMonthNameString
  3103                                  ;       PutSecondString
  3104                                  ;       PutTimeString
  3105                                  ;       PutWeekdayString
  3106                                  ;       PutWeekdayNameString
  3107                                  ;       PutYearString
  3108                                  ;
  3109                                  ;=======================================================================================================================
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  ;
  3112                                  ;       Routine:        GetYear
  3113                                  ;
  3114                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3115                                  ;
  3116                                  ;       In:             DS:EBX  DATETIME address
  3117                                  ;
  3118                                  ;       Out:            ECX     year
  3119                                  ;
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3122                                                          imul    ecx,100                                         ;century * 100
  3123                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3124                                                          add     ecx,eax                                         ;year (YYYY)
  3125                                                          ret                                                     ;return
  3126                                  ;-----------------------------------------------------------------------------------------------------------------------
  3127                                  ;
  3128                                  ;       Routine:        IsLeapYear
  3129                                  ;
  3130                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3131                                  ;
  3132                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3133                                  ;
  3134                                  ;       Out:            ECX     0 = not a leap year
  3135                                  ;                               1 = leap year
  3136                                  ;
  3137                                  ;-----------------------------------------------------------------------------------------------------------------------
  3138                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3139                                                          mov     eax,ecx                                         ;EAX = YYYY
  3140                                                          xor     ecx,ecx                                         ;assume not leap year
  3141                                                          test    al,00000011b                                    ;multiple of four?
  3142                                                          jnz     .no                                             ;no, branch
  3143                                                          mov     dl,100                                          ;divisor
  3144                                                          div     dl                                              ;divide by 100
  3145                                                          test    ah,ah                                           ;multiple of 100?
  3146                                                          jnz     .yes                                            ;yes, branch
  3147                                                          test    al,00000011b                                    ;multiple of 400?
  3148                                                          jnz     .no                                             ;no, branch
  3149                                  .yes                    inc     ecx                                             ;indicate leap
  3150                                  .no                     ret                                                     ;return
  3151                                  ;-----------------------------------------------------------------------------------------------------------------------
  3152                                  ;
  3153                                  ;       Routine:        PutDateString
  3154                                  ;
  3155                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3156                                  ;                       structure at ds:ebx.
  3157                                  ;
  3158                                  ;       In:             DS:EBX  DATETIME address
  3159                                  ;                       DS:EDX  output buffer address
  3160                                  ;
  3161                                  ;-----------------------------------------------------------------------------------------------------------------------
  3162                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3163                                                          push    edi                                             ;
  3164                                                          push    es                                              ;
  3165                                                          push    ds                                              ;store data selector ...
  3166                                                          pop     es                                              ;... in extra segment reg
  3167                                                          mov     edi,edx                                         ;output buffer address
  3168                                                          mov     cl,10                                           ;divisor
  3169                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3170                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3171                                                          div     cl                                              ;AH = rem; AL = quotient
  3172                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3173                                                          cld                                                     ;forward strings
  3174                                                          stosd                                                   ;store "mm/"nul
  3175                                                          dec     edi                                             ;address of terminator
  3176                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3177                                                          div     cl                                              ;AH = rem; AL = quotient
  3178                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3179                                                          stosd                                                   ;store "dd/"nul
  3180                                                          dec     edi                                             ;address of terminator
  3181                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3182                                                          div     cl                                              ;AH = rem; AL = quotient
  3183                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3184                                                          stosd                                                   ;store "cc/"null
  3185                                                          dec     edi                                             ;address of terminator
  3186                                                          dec     edi                                             ;address of delimiter
  3187                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3188                                                          div     cl                                              ;AH = rem; AL = quotient
  3189                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3190                                                          stosb                                                   ;store quotient
  3191                                                          mov     al,ah                                           ;remainder
  3192                                                          stosb                                                   ;store remainder
  3193                                                          xor     al,al                                           ;null terminator
  3194                                                          stosb                                                   ;store terminator
  3195                                                          pop     es                                              ;restore non-volatile regs
  3196                                                          pop     edi                                             ;
  3197                                                          pop     ecx                                             ;
  3198                                                          ret                                                     ;return
  3199                                  ;-----------------------------------------------------------------------------------------------------------------------
  3200                                  ;
  3201                                  ;       Routine:        PutDayString
  3202                                  ;
  3203                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3204                                  ;                       structure at ds:ebx.
  3205                                  ;
  3206                                  ;       In:             DS:EBX  DATETIME address
  3207                                  ;                       DS:EDX  output buffer address
  3208                                  ;
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3211                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3212                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3213                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3214                                                          pop     ecx                                             ;
  3215                                                          ret                                                     ;return
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  ;
  3218                                  ;       Routine:        PutHourString
  3219                                  ;
  3220                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3221                                  ;                       structure at ds:ebx.
  3222                                  ;
  3223                                  ;       In:             DS:EBX  DATETIME address
  3224                                  ;                       DS:EDX  output buffer address
  3225                                  ;
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3228                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3229                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3230                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3231                                                          pop     ecx                                             ;
  3232                                                          ret                                                     ;return
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  ;
  3235                                  ;       Routine:        PutMinuteString
  3236                                  ;
  3237                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3238                                  ;                       structure at ds:ebx.
  3239                                  ;
  3240                                  ;       In:             DS:EBX  DATETIME address
  3241                                  ;                       DS:EDX  output buffer address
  3242                                  ;
  3243                                  ;-----------------------------------------------------------------------------------------------------------------------
  3244                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3245                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3246                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3247                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3248                                                          pop     ecx                                             ;
  3249                                                          ret                                                     ;return
  3250                                  ;-----------------------------------------------------------------------------------------------------------------------
  3251                                  ;
  3252                                  ;       Routine:        PutMonthString
  3253                                  ;
  3254                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3255                                  ;                       structure at ds:ebx.
  3256                                  ;
  3257                                  ;       In:             DS:EBX  DATETIME address
  3258                                  ;                       DS:EDX  output buffer address
  3259                                  ;
  3260                                  ;-----------------------------------------------------------------------------------------------------------------------
  3261                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3262                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3263                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3264                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3265                                                          pop     ecx                                             ;
  3266                                                          ret                                                     ;return
  3267                                  ;-----------------------------------------------------------------------------------------------------------------------
  3268                                  ;
  3269                                  ;       Routine:        PutMonthNameString
  3270                                  ;
  3271                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3272                                  ;                       structure at ds:ebx.
  3273                                  ;
  3274                                  ;       In:             DS:EBX  DATETIME address
  3275                                  ;                       DS:EDX  output buffer address
  3276                                  ;
  3277                                  ;-----------------------------------------------------------------------------------------------------------------------
  3278                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3279                                                          push    edi                                             ;
  3280                                                          push    ds                                              ;
  3281                                                          push    es                                              ;
  3282                                                          push    ds                                              ;load data selector ...
  3283                                                          pop     es                                              ;... into extra segment
  3284                                                          mov     edi,edx                                         ;output buffer address
  3285                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3286                                                          dec     eax                                             ;month (0-11)
  3287                                                          shl     eax,2                                           ;offset into month name lookup table
  3288                                                          push    cs                                              ;load code selector ...
  3289                                                          pop     ds                                              ;... into data segment
  3290                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3291                                                          cld                                                     ;forward strings
  3292                                  .10                     lodsb                                                   ;name character
  3293                                                          stosb                                                   ;store in output buffer
  3294                                                          test    al,al                                           ;end of string?
  3295                                                          jnz     .10                                             ;no, continue
  3296                                                          pop     es                                              ;restore non-volatile regs
  3297                                                          pop     ds                                              ;
  3298                                                          pop     edi                                             ;
  3299                                                          pop     esi                                             ;
  3300                                                          ret                                                     ;return
  3301                                  ;-----------------------------------------------------------------------------------------------------------------------
  3302                                  ;
  3303                                  ;       Routine:        PutSecondString
  3304                                  ;
  3305                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3306                                  ;                       structure at ds:ebx.
  3307                                  ;
  3308                                  ;       In:             DS:EBX  DATETIME address
  3309                                  ;                       DS:EDX  output buffer address
  3310                                  ;
  3311                                  ;-----------------------------------------------------------------------------------------------------------------------
  3312                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3313                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3314                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3315                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3316                                                          pop     ecx                                             ;
  3317                                                          ret                                                     ;return
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  ;
  3320                                  ;       Routine:        PutTimeString
  3321                                  ;
  3322                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3323                                  ;                       structure at ds:ebx.
  3324                                  ;
  3325                                  ;       In:             DS:EBX  DATETIME address
  3326                                  ;                       DS:EDX  output buffer address
  3327                                  ;
  3328                                  ;-----------------------------------------------------------------------------------------------------------------------
  3329                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3330                                                          push    edi                                             ;
  3331                                                          push    es                                              ;
  3332                                                          push    ds                                              ;store data selector ...
  3333                                                          pop     es                                              ;... in extra segment reg
  3334                                                          mov     edi,edx                                         ;output buffer address
  3335                                                          mov     cl,10                                           ;divisor
  3336                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3337                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3338                                                          div     cl                                              ;ah = rem; al = quotient
  3339                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3340                                                          cld                                                     ;forward strings
  3341                                                          stosd                                                   ;store "mm/"nul
  3342                                                          dec     edi                                             ;address of terminator
  3343                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3344                                                          div     cl                                              ;ah = rem; al = quotient
  3345                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3346                                                          stosd                                                   ;store "dd/"nul
  3347                                                          dec     edi                                             ;address of terminator
  3348                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3349                                                          div     cl                                              ;ah = rem; al = quotient
  3350                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3351                                                          stosb                                                   ;store quotient
  3352                                                          mov     al,ah                                           ;remainder
  3353                                                          stosb                                                   ;store remainder
  3354                                                          xor     al,al                                           ;null terminator
  3355                                                          stosb                                                   ;store terminator
  3356                                                          pop     es                                              ;restore non-volatile regs
  3357                                                          pop     edi                                             ;
  3358                                                          pop     ecx                                             ;
  3359                                                          ret                                                     ;return
  3360                                  ;-----------------------------------------------------------------------------------------------------------------------
  3361                                  ;
  3362                                  ;       Routine:        PutWeekdayString
  3363                                  ;
  3364                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3365                                  ;                       structure at ds:ebx.
  3366                                  ;
  3367                                  ;       In:             DS:EBX  DATETIME address
  3368                                  ;                       DS:EDX  output buffer address
  3369                                  ;
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3372                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3373                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3374                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3375                                                          pop     ecx                                             ;
  3376                                                          ret                                                     ;return
  3377                                  ;-----------------------------------------------------------------------------------------------------------------------
  3378                                  ;
  3379                                  ;       Routine:        PutWeekdayNameString
  3380                                  ;
  3381                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3382                                  ;                       structure at ds:ebx.
  3383                                  ;
  3384                                  ;       In:             DS:EBX  DATETIME address
  3385                                  ;                       DS:EDX  output buffer address
  3386                                  ;
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3389                                                          push    edi                                             ;
  3390                                                          push    ds                                              ;
  3391                                                          push    es                                              ;
  3392                                                          push    ds                                              ;load data selector ...
  3393                                                          pop     es                                              ;... into extra segment
  3394                                                          mov     edi,edx                                         ;output buffer address
  3395                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3396                                                          shl     eax,2                                           ;offset into day name lookup table
  3397                                                          push    cs                                              ;load code selector ...
  3398                                                          pop     ds                                              ;... into data segment
  3399                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3400                                                          cld                                                     ;forward strings
  3401                                  .10                     lodsb                                                   ;name character
  3402                                                          stosb                                                   ;store in output buffer
  3403                                                          test    al,al                                           ;end of string?
  3404                                                          jnz     .10                                             ;no, continue
  3405                                                          pop     es                                              ;restore non-volatile regs
  3406                                                          pop     ds                                              ;
  3407                                                          pop     edi                                             ;
  3408                                                          pop     esi                                             ;
  3409                                                          ret                                                     ;return
  3410                                  ;-----------------------------------------------------------------------------------------------------------------------
  3411                                  ;
  3412                                  ;       Routine:        PutYearString
  3413                                  ;
  3414                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3415                                  ;                       structure at ds:ebx.
  3416                                  ;
  3417                                  ;       In:             DS:EBX  DATETIME address
  3418                                  ;                       DS:EDX  output buffer address
  3419                                  ;
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3422                                                          call    GetYear                                         ;ECX = YYYY
  3423                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3424                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3425                                                          pop     ecx                                             ;restore non-volatile regs
  3426                                                          ret                                                     ;return
  3427                                  ;-----------------------------------------------------------------------------------------------------------------------
  3428                                  ;
  3429                                  ;       Day Names
  3430                                  ;
  3431                                  ;-----------------------------------------------------------------------------------------------------------------------
  3432                                  czSunday                db      "Sunday",0
  3433                                  czMonday                db      "Monday",0
  3434                                  czTuesday               db      "Tuesday",0
  3435                                  czWednesday             db      "Wednesday",0
  3436                                  czThursday              db      "Thursday",0
  3437                                  czFriday                db      "Friday",0
  3438                                  czSaturday              db      "Saturday",0
  3439                                  ;-----------------------------------------------------------------------------------------------------------------------
  3440                                  ;
  3441                                  ;       Month Names
  3442                                  ;
  3443                                  ;-----------------------------------------------------------------------------------------------------------------------
  3444                                  czJanuary               db      "January",0
  3445                                  czFebruary              db      "February",0
  3446                                  czMarch                 db      "March",0
  3447                                  czApril                 db      "April",0
  3448                                  czMay                   db      "May",0
  3449                                  czJune                  db      "June",0
  3450                                  czJuly                  db      "July",0
  3451                                  czAugust                db      "August",0
  3452                                  czSeptember             db      "September",0
  3453                                  czOctober               db      "October",0
  3454                                  czNovember              db      "November",0
  3455                                  czDecember              db      "December",0
  3456                                  ;-----------------------------------------------------------------------------------------------------------------------
  3457                                  ;
  3458                                  ;       Day Names Lookup Table
  3459                                  ;
  3460                                  ;-----------------------------------------------------------------------------------------------------------------------
  3461                                                          align   4
  3462                                  tDayNames               equ     $
  3463                                                          dd      czSunday
  3464                                                          dd      czMonday
  3465                                                          dd      czTuesday
  3466                                                          dd      czWednesday
  3467                                                          dd      czThursday
  3468                                                          dd      czFriday
  3469                                                          dd      czSaturday
  3470                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3471                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3472                                  ;-----------------------------------------------------------------------------------------------------------------------
  3473                                  ;
  3474                                  ;       Month Names Lookup Table
  3475                                  ;
  3476                                  ;-----------------------------------------------------------------------------------------------------------------------
  3477                                                          align   4
  3478                                  tMonthNames             equ     $
  3479                                                          dd      czJanuary
  3480                                                          dd      czFebruary
  3481                                                          dd      czMarch
  3482                                                          dd      czApril
  3483                                                          dd      czMay
  3484                                                          dd      czJune
  3485                                                          dd      czJuly
  3486                                                          dd      czAugust
  3487                                                          dd      czSeptember
  3488                                                          dd      czOctober
  3489                                                          dd      czNovember
  3490                                                          dd      czDecember
  3491                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3492                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3493                                  ;=======================================================================================================================
  3494                                  ;
  3495                                  ;       Memory Helper Routines
  3496                                  ;
  3497                                  ;       AllocateMemory
  3498                                  ;       FreeMemory
  3499                                  ;
  3500                                  ;=======================================================================================================================
  3501                                  ;-----------------------------------------------------------------------------------------------------------------------
  3502                                  ;
  3503                                  ;       Routine:        AllocateMemory
  3504                                  ;
  3505                                  ;       Description:    This routine allocates a memory block for the given task.
  3506                                  ;
  3507                                  ;       In:             ECX     bytes of memory to allocate
  3508                                  ;
  3509                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3510                                  ;                               0       unable to allocate memory
  3511                                  ;
  3512                                  ;-----------------------------------------------------------------------------------------------------------------------
  3513                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3514                                                          push    ecx                                             ;
  3515                                                          push    esi                                             ;
  3516                                                          push    ds                                              ;
  3517                                  ;
  3518                                  ;       Address kernel memory structures
  3519                                  ;
  3520                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3521                                                          pop     ds                                              ;... into data segment reg
  3522                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3523                                  ;
  3524                                  ;       Set requested size to minimum block size if requested size is too small.
  3525                                  ;
  3526                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3527                                                          jae     .10                                             ;no, branch
  3528                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3529                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3530                                  ;
  3531                                  ;       Find the first free memory block large enough to satisfy the request.
  3532                                  ;
  3533                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3534                                  .20                     test    eax,eax                                         ;end of free block chain?
  3535                                                          jz      .220                                            ;yes, branch
  3536                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3537                                                          jbe     .30                                             ;yes, branch
  3538                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3539                                                          jmp     .20                                             ;continue
  3540                                  ;-----------------------------------------------------------------------------------------------------------------------
  3541                                  ;
  3542                                  ;       Address the previous and next free memory blocks.
  3543                                  ;
  3544                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3545                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3546                                  ;
  3547                                  ;       Remove the free memory block from the forward free memory block chain.
  3548                                  ;
  3549                                                          test    ebx,ebx                                         ;any previous free memory block?
  3550                                                          jz      .40                                             ;no, branch
  3551                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3552                                                          jmp     .50                                             ;continue
  3553                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3554                                  ;
  3555                                  ;       Remove the free memory block from the reverse free memory block chain.
  3556                                  ;
  3557                                  .50                     test    edx,edx                                         ;any next free memory block?
  3558                                                          jz      .60                                             ;no, branch
  3559                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3560                                                          jmp     .70                                             ;continue
  3561                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3562                                  ;-----------------------------------------------------------------------------------------------------------------------
  3563                                  ;
  3564                                  ;       Determine if the free memory block can be split.
  3565                                  ;
  3566                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3567                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3568                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3569                                                          jb      .150                                            ;no, branch
  3570                                  ;
  3571                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3572                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3573                                  ;       of the requested memory size.
  3574                                  ;
  3575                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3576                                                          mov     edx,eax                                         ;memory block address
  3577                                                          add     edx,ecx                                         ;address new new next contig block
  3578                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3579                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3580                                  ;
  3581                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3582                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3583                                  ;
  3584                                                          jecxz   .80                                             ;no next contig, branch
  3585                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3586                                                          jmp     .90                                             ;continue
  3587                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3588                                  ;
  3589                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3590                                  ;
  3591                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3592                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3593                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3594                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3595                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3596                                                          xor     ebx,ebx                                         ;zero register
  3597                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3598                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3599                                  ;
  3600                                  ;       Find the proper location in the free block chain for the new free block
  3601                                  ;
  3602                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3603                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3604                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3605                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3606                                                          jbe     .110                                            ;yes, branch
  3607                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3608                                                          jmp     .100                                            ;continue
  3609                                  ;
  3610                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3611                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3612                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3613                                  ;       block of hte next block, if there is one.
  3614                                  ;
  3615                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3616                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3617                                                          jecxz   .120                                            ;branch if no next block
  3618                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3619                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3620                                                          jmp     .130                                            ;continue
  3621                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3622                                  ;
  3623                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3624                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3625                                  ;       last user block pointers if necessary.
  3626                                  ;
  3627                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3628                                                          test    ebx,ebx                                         ;is there a previous block?
  3629                                                          jz      .140                                            ;no, branch
  3630                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3631                                                          jmp     .150                                            ;continue
  3632                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3633                                  ;
  3634                                  ;       Update the newly allocated block's owner and signature.
  3635                                  ;
  3636                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3637                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3638                                                          xor     edx,edx                                         ;zero register
  3639                                                          str     dx                                              ;load the task state register
  3640                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3641                                  ;
  3642                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3643                                  ;
  3644                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3645                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3646                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3647                                                          jb      .180                                            ;branch if block belongs to next task
  3648                                                          je      .170                                            ;branch if block belongs to this task
  3649                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3650                                                          jmp     .160                                            ;continue
  3651                                  ;
  3652                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3653                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3654                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3655                                  ;       place to insert the block.
  3656                                  ;
  3657                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3658                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3659                                                          jbe     .180                                            ;yes, branch
  3660                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3661                                                          test    ecx,ecx                                         ;end of chain?
  3662                                                          jz      .180                                            ;yes, branch
  3663                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3664                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3665                                                          je      .170                                            ;yes, continue search
  3666                                  ;
  3667                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3668                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3669                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3670                                  ;       do have a previous-block, we update that block's next-block pointer.
  3671                                  ;
  3672                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3673                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3674                                                          jecxz   .190                                            ;branch if no next-task block
  3675                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3676                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3677                                                          jmp     .200                                            ;continue
  3678                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3679                                  ;
  3680                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3681                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3682                                  ;       global first and/or last user-block pointers if necessary.
  3683                                  ;
  3684                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3685                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3686                                                          jz      .210                                            ;no, branch
  3687                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3688                                                          jmp     .220                                            ;continue
  3689                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3690                                  ;
  3691                                  ;       Restore registers and return to caller.
  3692                                  ;
  3693                                  .220                    pop     ds                                              ;restore non-volatie regs
  3694                                                          pop     esi                                             ;
  3695                                                          pop     ecx                                             ;
  3696                                                          pop     ebx                                             ;
  3697                                                          ret                                                     ;return
  3698                                  ;-----------------------------------------------------------------------------------------------------------------------
  3699                                  ;
  3700                                  ;       Routine:        FreeMemory
  3701                                  ;
  3702                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3703                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3704                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3705                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3706                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3707                                  ;
  3708                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3709                                  ;
  3710                                  ;       Out:            EAX     -1      invalid memory block
  3711                                  ;                               0       memory block freed
  3712                                  ;
  3713                                  ;-----------------------------------------------------------------------------------------------------------------------
  3714                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3715                                                          push    ecx                                             ;
  3716                                                          push    esi                                             ;
  3717                                                          push    edi                                             ;
  3718                                                          push    ds                                              ;
  3719                                                          push    es                                              ;
  3720                                  ;
  3721                                  ;       Address the root memory structure
  3722                                  ;
  3723                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3724                                                          pop     es                                              ;... into extra segment reg
  3725                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3726                                                          pop     ds                                              ;... into data segment reg
  3727                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3728                                                          mov     edi,edx                                         ;memory block address
  3729                                  ;
  3730                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3731                                  ;
  3732                                                          xor     eax,eax                                         ;indicate success
  3733                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3734                                                          je      .240                                            ;yes, branch
  3735                                                          dec     eax                                             ;indicate failure
  3736                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3737                                                          jne     .240                                            ;no, branch
  3738                                  ;-----------------------------------------------------------------------------------------------------------------------
  3739                                  ;
  3740                                  ;       Unlink the USER memory block.
  3741                                  ;
  3742                                  ;-----------------------------------------------------------------------------------------------------------------------
  3743                                  ;
  3744                                  ;       Set the block signature. Reset owner.
  3745                                  ;
  3746                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3747                                                          xor     eax,eax                                         ;zero register
  3748                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3749                                  ;
  3750                                  ;       Wipe user area.
  3751                                  ;
  3752                                                          push    edi                                             ;save block address
  3753                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3754                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3755                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3756                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3757                                                          rep     stosb                                           ;clear memory
  3758                                                          pop     edi                                             ;restore block address
  3759                                  ;
  3760                                  ;       Address the preceding and following USER memory blocks
  3761                                  ;
  3762                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3763                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3764                                  ;
  3765                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3766                                  ;       pointer to point to the USER block following this block.
  3767                                  ;
  3768                                                          test    ebx,ebx                                         ;is there a previous block?
  3769                                                          jz      .10                                             ;no, branch
  3770                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3771                                                          jmp     .20                                             ;continue
  3772                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3773                                  ;
  3774                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3775                                  ;       pointer to point to the USER block preceding this block.
  3776                                  ;
  3777                                  .20                     jecxz   .30                                             ;branch if no next block
  3778                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3779                                                          jmp     .40                                             ;continue
  3780                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3781                                  ;-----------------------------------------------------------------------------------------------------------------------
  3782                                  ;
  3783                                  ;       Merge with a previous contiguous FREE memory block.
  3784                                  ;
  3785                                  ;-----------------------------------------------------------------------------------------------------------------------
  3786                                  ;
  3787                                  ;       Address the preceding and following contiguous memory blocks.
  3788                                  ;
  3789                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3790                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3791                                  ;
  3792                                  ;       Verify we have a previous contiguous FREE block.
  3793                                  ;
  3794                                                          test    ebx,ebx                                         ;is there a previous block?
  3795                                                          jz      .100                                            ;no, branch
  3796                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3797                                                          jne     .100                                            ;no, branch
  3798                                  ;
  3799                                  ;       Update adjacent block's contiguous pointers.
  3800                                  ;
  3801                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3802                                                          jecxz   .50                                             ;branch if no next contiguous block
  3803                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3804                                                          jmp     .60                                             ;continue
  3805                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3806                                  ;
  3807                                  ;       Update the size of the merged FREE block.
  3808                                  ;
  3809                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3810                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3811                                  ;
  3812                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3813                                  ;
  3814                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3815                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3816                                                          rep     stosb                                           ;clear memory header
  3817                                                          mov     edi,ebx                                         ;current block is now previous block
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819                                  ;
  3820                                  ;       Unlink the previous contiguous FREE memory block
  3821                                  ;
  3822                                  ;-----------------------------------------------------------------------------------------------------------------------
  3823                                  ;
  3824                                  ;       Address the preceding and following USER memory blocks
  3825                                  ;
  3826                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3827                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3828                                  ;
  3829                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3830                                  ;       block pointer.
  3831                                  ;
  3832                                                          test    ebx,ebx                                         ;is there a previous block?
  3833                                                          jz      .70                                             ;no, branch
  3834                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3835                                                          jmp     .80                                             ;branch
  3836                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3837                                  ;
  3838                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3839                                  ;       pointer.
  3840                                  ;
  3841                                  .80                     jecxz   .90                                             ;branch if no next block
  3842                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3843                                                          jmp     .100                                            ;continue
  3844                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3845                                  ;-----------------------------------------------------------------------------------------------------------------------
  3846                                  ;
  3847                                  ;       Merge with a following contiguous FREE memory block.
  3848                                  ;
  3849                                  ;-----------------------------------------------------------------------------------------------------------------------
  3850                                  ;
  3851                                  ;       Verify we have a following contiguous FREE block.
  3852                                  ;
  3853                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3854                                                          jecxz   .170                                            ;branch if no next contiguous block
  3855                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3856                                                          jne     .170                                            ;no, branch
  3857                                  ;
  3858                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3859                                  ;
  3860                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3861                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3862                                  ;
  3863                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3864                                  ;
  3865                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3866                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3867                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3868                                                          jz      .110                                            ;no, branch
  3869                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3870                                                          jmp     .120                                            ;continue
  3871                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3872                                  ;-----------------------------------------------------------------------------------------------------------------------
  3873                                  ;
  3874                                  ;       Unlink the following contiguous FREE memory block
  3875                                  ;
  3876                                  ;-----------------------------------------------------------------------------------------------------------------------
  3877                                  ;
  3878                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3879                                  ;
  3880                                  .120                    push    edi                                             ;save this block
  3881                                                          mov     edi,ecx                                         ;next contiguous block
  3882                                                          push    ecx                                             ;save next contiguous block
  3883                                  ;
  3884                                  ;       Address the preceding and following USER memory blocks
  3885                                  ;
  3886                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3887                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3888                                  ;
  3889                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3890                                  ;       block pointer.
  3891                                  ;
  3892                                                          test    ebx,ebx                                         ;is there a previous block?
  3893                                                          jz      .130                                            ;no, branch
  3894                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3895                                                          jmp     .140                                            ;branch
  3896                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3897                                  ;
  3898                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3899                                  ;       pointer.
  3900                                  ;
  3901                                  .140                    jecxz   .150                                            ;branch if no next block
  3902                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3903                                                          jmp     .160                                            ;continue
  3904                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3905                                  ;
  3906                                  ;       Clear next contiguous block's header
  3907                                  ;
  3908                                  .160                    pop     edi                                             ;next congiguous block pointer
  3909                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3910                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3911                                                          rep     stosb                                           ;clear memory header
  3912                                                          pop     edi                                             ;this block's pointer
  3913                                  ;-----------------------------------------------------------------------------------------------------------------------
  3914                                  ;
  3915                                  ;       Insert the final FREE block back into the block chain.
  3916                                  ;
  3917                                  ;-----------------------------------------------------------------------------------------------------------------------
  3918                                  ;
  3919                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3920                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3921                                  ;       all are smaller in size.
  3922                                  ;
  3923                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3924                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3925                                  .180                    jecxz   .190                                            ;exit if no ptr
  3926                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3927                                                          jb      .190                                            ;yes, branch
  3928                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3929                                                          jmp     .180                                            ;continue
  3930                                  ;
  3931                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3932                                  ;       larger free block. Update the next block's previous block pointer.
  3933                                  ;
  3934                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3935                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3936                                                          jecxz   .200                                            ;branch if no block found
  3937                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3938                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3939                                                          jmp     .210                                            ;continue
  3940                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3941                                  ;
  3942                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3943                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3944                                  ;       next pointer.
  3945                                  ;
  3946                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3947                                                          test    ebx,ebx                                         ;do we have a previous block?
  3948                                                          jz      .220                                            ;no, branch
  3949                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3950                                                          jmp     .230                                            ;continue
  3951                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3952                                  ;
  3953                                  ;       The memory free has completed.
  3954                                  ;
  3955                                  .230                    xor     eax,eax                                         ;indicate success
  3956                                  ;
  3957                                  ;       Restore and return.
  3958                                  ;
  3959                                  .240                    pop     es                                              ;restore non-volatile regs
  3960                                                          pop     ds                                              ;
  3961                                                          pop     edi                                             ;
  3962                                                          pop     esi                                             ;
  3963                                                          pop     ecx                                             ;
  3964                                                          pop     ebx                                             ;
  3965                                                          ret                                                     ;return
  3966                                  ;=======================================================================================================================
  3967                                  ;
  3968                                  ;       String Helper Routines
  3969                                  ;
  3970                                  ;       CompareMemory
  3971                                  ;       UpperCaseString
  3972                                  ;
  3973                                  ;=======================================================================================================================
  3974                                  ;-----------------------------------------------------------------------------------------------------------------------
  3975                                  ;
  3976                                  ;       Routine:        CompareMemory
  3977                                  ;
  3978                                  ;       Description:    This routine compares two byte arrays.
  3979                                  ;
  3980                                  ;       In:             DS:EDX  first source address
  3981                                  ;                       DS:EBX  second source address
  3982                                  ;                       ECX     comparison length
  3983                                  ;
  3984                                  ;       Out:            EDX     first source address
  3985                                  ;                       EBX     second source address
  3986                                  ;                       ECX     0       array 1 = array 2
  3987                                  ;                               <0      array 1 < array 2
  3988                                  ;                               >0      array 1 > array 2
  3989                                  ;
  3990                                  ;-----------------------------------------------------------------------------------------------------------------------
  3991                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3992                                                          push    edi                                             ;
  3993                                                          push    es                                              ;
  3994                                                          push    ds                                              ;copy DS
  3995                                                          pop     es                                              ;... to ES
  3996                                                          mov     esi,edx                                         ;first source address
  3997                                                          mov     edi,ebx                                         ;second source address
  3998                                                          cld                                                     ;forward strings
  3999                                                          rep     cmpsb                                           ;compare bytes
  4000                                                          mov     al,0                                            ;default result
  4001                                                          jz      .10                                             ;branch if arrays equal
  4002                                                          mov     al,1                                            ;positive result
  4003                                                          jnc     .10                                             ;branch if target > source
  4004                                                          mov     al,-1                                           ;negative result
  4005                                  .10                     movsx   ecx,al                                          ;extend sign
  4006                                                          pop     es                                              ;restore non-volatile regs
  4007                                                          pop     edi                                             ;
  4008                                                          pop     esi                                             ;
  4009                                                          ret                                                     ;return
  4010                                  ;-----------------------------------------------------------------------------------------------------------------------
  4011                                  ;
  4012                                  ;       Routine:        UpperCaseString
  4013                                  ;
  4014                                  ;       Description:    This routine places all characters in the given string to upper case.
  4015                                  ;
  4016                                  ;       In:             DS:EDX  string address
  4017                                  ;
  4018                                  ;       Out:            EDX     string address
  4019                                  ;
  4020                                  ;-----------------------------------------------------------------------------------------------------------------------
  4021                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4022                                                          mov     esi,edx                                         ;string address
  4023                                                          cld                                                     ;forward strings
  4024                                  .10                     lodsb                                                   ;string character
  4025                                                          test    al,al                                           ;null?
  4026                                                          jz      .20                                             ;yes, skip ahead
  4027                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4028                                                          jb      .10                                             ;no, continue
  4029                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4030                                                          ja      .10                                             ;no, continue
  4031                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4032                                                          mov     [esi-1],al                                      ;upper character
  4033                                                          jmp     .10                                             ;continue
  4034                                  .20                     pop     esi                                             ;restore non-volatile regs
  4035                                                          ret                                                     ;return
  4036                                  ;=======================================================================================================================
  4037                                  ;
  4038                                  ;       Console Helper Routines
  4039                                  ;
  4040                                  ;       FirstConsoleColumn
  4041                                  ;       GetConsoleChar
  4042                                  ;       GetConsoleString
  4043                                  ;       NextConsoleColumn
  4044                                  ;       NextConsoleRow
  4045                                  ;       PreviousConsoleColumn
  4046                                  ;       PutConsoleChar
  4047                                  ;       PutConsoleHexByte
  4048                                  ;       PutConsoleHexDword
  4049                                  ;       PutConsoleHexWord
  4050                                  ;       PutConsoleOIAChar
  4051                                  ;       PutConsoleOIAShift
  4052                                  ;       PutConsoleString
  4053                                  ;       Yield
  4054                                  ;
  4055                                  ;=======================================================================================================================
  4056                                  ;-----------------------------------------------------------------------------------------------------------------------
  4057                                  ;
  4058                                  ;       Routine:        FirstConsoleColumn
  4059                                  ;
  4060                                  ;       Description:    This routine resets the console column to start of the row.
  4061                                  ;
  4062                                  ;       In:             DS      OS data selector
  4063                                  ;
  4064                                  ;-----------------------------------------------------------------------------------------------------------------------
  4065                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4066                                                          mov     [wbConsoleColumn],al                            ;save column
  4067                                                          ret                                                     ;return
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069                                  ;
  4070                                  ;       Routine:        GetConsoleChar
  4071                                  ;
  4072                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4073                                  ;
  4074                                  ;       Out:            AL      ASCII character code
  4075                                  ;                       AH      keyboard scan code
  4076                                  ;
  4077                                  ;-----------------------------------------------------------------------------------------------------------------------
  4078                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4079                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4080                                                          or      eax,eax                                         ;do we have a message?
  4081                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4082                                                          push    eax                                             ;save key codes
  4083                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4084                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4085                                                          pop     eax                                             ;restore key codes
  4086                                                          jne     GetConsoleChar                                  ;no, try again
  4087                                                          and     eax,0000ffffh                                   ;mask for key codes
  4088                                                          ret                                                     ;return
  4089                                  ;-----------------------------------------------------------------------------------------------------------------------
  4090                                  ;
  4091                                  ;       Routine:        GetConsoleString
  4092                                  ;
  4093                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4094                                  ;
  4095                                  ;       In:             DS:EDX  target buffer address
  4096                                  ;                       ECX     maximum number of characters to accept
  4097                                  ;                       BH      echo to terminal
  4098                                  ;                       BL      terminating character
  4099                                  ;
  4100                                  ;-----------------------------------------------------------------------------------------------------------------------
  4101                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4102                                                          push    esi                                             ;
  4103                                                          push    edi                                             ;
  4104                                                          push    es                                              ;
  4105                                                          push    ds                                              ;load data segment selector ...
  4106                                                          pop     es                                              ;... into extra segment register
  4107                                                          mov     edi,edx                                         ;edi = target buffer
  4108                                                          push    ecx                                             ;save maximum characters
  4109                                                          xor     al,al                                           ;zero register
  4110                                                          cld                                                     ;forward strings
  4111                                                          rep     stosb                                           ;zero fill buffer
  4112                                                          pop     ecx                                             ;maximum characters
  4113                                                          mov     edi,edx                                         ;edi = target buffer
  4114                                                          mov     esi,edx                                         ;esi = target buffer
  4115                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4116                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4117                                                          cmp     al,bl                                           ;is this the terminator?
  4118                                                          je      .50                                             ;yes, exit
  4119                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4120                                                          jne     .30                                             ;no, skip ahead
  4121                                                          cmp     esi,edi                                         ;at start of buffer?
  4122                                                          je      .20                                             ;yes, get next character
  4123                                                          dec     edi                                             ;backup target pointer
  4124                                                          mov     byte [edi],0                                    ;zero previous character
  4125                                                          inc     ecx                                             ;increment remaining chars
  4126                                                          test    bh,1                                            ;echo to console?
  4127                                                          jz      .20                                             ;no, get next character
  4128                                                          call    PreviousConsoleColumn                           ;backup console position
  4129                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4130                                                          call    PutConsoleChar                                  ;write space to console
  4131                                                          call    PlaceCursor                                     ;position the cursor
  4132                                                          jmp     .20                                             ;get next character
  4133                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4134                                                          jb      .20                                             ;no, get another character
  4135                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4136                                                          ja      .20                                             ;no, get another character
  4137                                                          stosb                                                   ;store character in buffer
  4138                                                          test    bh,1                                            ;echo to console?
  4139                                                          jz      .40                                             ;no, skip ahead
  4140                                                          call    PutConsoleChar                                  ;write character to console
  4141                                                          call    NextConsoleColumn                               ;advance console position
  4142                                                          call    PlaceCursor                                     ;position the cursor
  4143                                  .40                     dec     ecx                                             ;decrement remaining chars
  4144                                                          jmp     .10                                             ;next
  4145                                  .50                     xor     al,al                                           ;null
  4146                                                          stosb                                                   ;terminate buffer
  4147                                                          pop     es                                              ;restore non-volatile regs
  4148                                                          pop     edi                                             ;
  4149                                                          pop     esi                                             ;
  4150                                                          pop     ecx                                             ;
  4151                                                          ret                                                     ;return
  4152                                  ;-----------------------------------------------------------------------------------------------------------------------
  4153                                  ;
  4154                                  ;       Routine:        NextConsoleColumn
  4155                                  ;
  4156                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4157                                  ;                       incremented if the end of the current row is reached.
  4158                                  ;
  4159                                  ;       In:             DS      OS data selector
  4160                                  ;
  4161                                  ;-----------------------------------------------------------------------------------------------------------------------
  4162                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4163                                                          inc     al                                              ;increment column
  4164                                                          mov     [wbConsoleColumn],al                            ;save column
  4165                                                          cmp     al,ECONCOLS                                     ;end of row?
  4166                                                          jb      .10                                             ;no, skip ahead
  4167                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4168                                                          call    NextConsoleRow                                  ;line feed to next row
  4169                                  .10                     ret                                                     ;return
  4170                                  ;-----------------------------------------------------------------------------------------------------------------------
  4171                                  ;
  4172                                  ;       Routine:        NextConsoleRow
  4173                                  ;
  4174                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4175                                  ;
  4176                                  ;       In:             DS      OS data selector
  4177                                  ;
  4178                                  ;-----------------------------------------------------------------------------------------------------------------------
  4179                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4180                                                          inc     al                                              ;increment row
  4181                                                          mov     [wbConsoleRow],al                               ;save row
  4182                                                          cmp     al,ECONROWS                                     ;end of screen?
  4183                                                          jb      .10                                             ;no, skip ahead
  4184                                                          call    ScrollConsoleRow                                ;scroll up one row
  4185                                                          mov     al,[wbConsoleRow]                               ;row
  4186                                                          dec     al                                              ;decrement row
  4187                                                          mov     [wbConsoleRow],al                               ;save row
  4188                                  .10                     ret                                                     ;return
  4189                                  ;-----------------------------------------------------------------------------------------------------------------------
  4190                                  ;
  4191                                  ;       Routine:        PreviousConsoleColumn
  4192                                  ;
  4193                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4194                                  ;                       the column is set to the last position in the row and the row is decremented.
  4195                                  ;
  4196                                  ;       In:             DS      OS data selector
  4197                                  ;
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4200                                                          or      al,al                                           ;start of row?
  4201                                                          jnz     .10                                             ;no, skip ahead
  4202                                                          mov     ah,[wbConsoleRow]                               ;current row
  4203                                                          or      ah,ah                                           ;top of screen?
  4204                                                          jz      .20                                             ;yes, exit with no change
  4205                                                          dec     ah                                              ;decrement row
  4206                                                          mov     [wbConsoleRow],ah                               ;save row
  4207                                                          mov     al,ECONCOLS                                     ;set maximum column
  4208                                  .10                     dec     al                                              ;decrement column
  4209                                                          mov     [wbConsoleColumn],al                            ;save column
  4210                                  .20                     ret                                                     ;return
  4211                                  ;-----------------------------------------------------------------------------------------------------------------------
  4212                                  ;
  4213                                  ;       Routine:        PutConsoleChar
  4214                                  ;
  4215                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4216                                  ;
  4217                                  ;       In:             AL      ASCII character
  4218                                  ;                       DS      OS data selector
  4219                                  ;
  4220                                  ;-----------------------------------------------------------------------------------------------------------------------
  4221                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4222                                                          push    es                                              ;
  4223                                                          push    EGDTCGA                                         ;load CGA selector ...
  4224                                                          pop     es                                              ;... into extra segment reg
  4225                                                          mov     cl,[wbConsoleColumn]                            ;column
  4226                                                          mov     ch,[wbConsoleRow]                               ;row
  4227                                                          call    SetConsoleChar                                  ;put character at row, column
  4228                                                          pop     es                                              ;restore non-volatile regs
  4229                                                          pop     ecx                                             ;
  4230                                                          ret                                                     ;return
  4231                                  ;-----------------------------------------------------------------------------------------------------------------------
  4232                                  ;
  4233                                  ;       Routine:        PutConsoleHexByte
  4234                                  ;
  4235                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4236                                  ;
  4237                                  ;       In:             AL      byte value
  4238                                  ;                       CL      column
  4239                                  ;                       CH      row
  4240                                  ;                       DS      OS data selector
  4241                                  ;                       ES      CGA selector
  4242                                  ;
  4243                                  ;-----------------------------------------------------------------------------------------------------------------------
  4244                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4245                                                          mov     bl,al                                           ;save byte value
  4246                                                          shr     al,4                                            ;hi-order nybble
  4247                                                          or      al,030h                                         ;apply ASCII zone
  4248                                                          cmp     al,03ah                                         ;numeric?
  4249                                                          jb      .10                                             ;yes, skip ahead
  4250                                                          add     al,7                                            ;add ASCII offset for alpha
  4251                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4252                                                          mov     al,bl                                           ;byte value
  4253                                                          and     al,0fh                                          ;lo-order nybble
  4254                                                          or      al,30h                                          ;apply ASCII zone
  4255                                                          cmp     al,03ah                                         ;numeric?
  4256                                                          jb      .20                                             ;yes, skip ahead
  4257                                                          add     al,7                                            ;add ASCII offset for alpha
  4258                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4259                                                          pop     ebx                                             ;restore non-volatile regs
  4260                                                          ret                                                     ;return
  4261                                  ;-----------------------------------------------------------------------------------------------------------------------
  4262                                  ;
  4263                                  ;       Routine:        PutConsoleHexDword
  4264                                  ;
  4265                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4266                                  ;
  4267                                  ;       In:             EAX     value
  4268                                  ;                       CL      column
  4269                                  ;                       CH      row
  4270                                  ;                       DS      OS data selector
  4271                                  ;                       ES      CGA selector
  4272                                  ;
  4273                                  ;-----------------------------------------------------------------------------------------------------------------------
  4274                                  PutConsoleHexDword      push    eax
  4275                                                          shr     eax,16
  4276                                                          call    PutConsoleHexWord
  4277                                                          pop     eax
  4278                                                          call    PutConsoleHexWord
  4279                                                          ret
  4280                                  ;-----------------------------------------------------------------------------------------------------------------------
  4281                                  ;
  4282                                  ;       Routine:        PutConsoleHexWord
  4283                                  ;
  4284                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4285                                  ;
  4286                                  ;       In:             EAX     value
  4287                                  ;                       CL      column
  4288                                  ;                       CH      row
  4289                                  ;                       DS      OS data selector
  4290                                  ;                       ES      CGA selector
  4291                                  ;
  4292                                  ;-----------------------------------------------------------------------------------------------------------------------
  4293                                  PutConsoleHexWord       push    eax
  4294                                                          shr     eax,8
  4295                                                          call    PutConsoleHexByte
  4296                                                          pop     eax
  4297                                                          call    PutConsoleHexByte
  4298                                                          ret
  4299                                  ;-----------------------------------------------------------------------------------------------------------------------
  4300                                  ;
  4301                                  ;       Routine:        PutConsoleOIAChar
  4302                                  ;
  4303                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4304                                  ;
  4305                                  ;       In:             DS      OS data selector
  4306                                  ;
  4307                                  ;-----------------------------------------------------------------------------------------------------------------------
  4308                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4309                                                          push    ecx                                             ;
  4310                                                          push    esi                                             ;
  4311                                                          push    ds                                              ;
  4312                                                          push    es                                              ;
  4313                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4314                                                          pop     ds                                              ;... into data segment register
  4315                                                          push    EGDTCGA                                         ;load CGA selector ...
  4316                                                          pop     es                                              ;... into extra segment register
  4317                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4318                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4319                                                          mov     bl,0                                            ;starting column
  4320                                                          mov     ecx,6                                           ;maximum scan codes
  4321                                  .10                     push    ecx                                             ;save remaining count
  4322                                                          mov     ecx,ebx                                         ;row, column
  4323                                                          lodsb                                                   ;read scan code
  4324                                                          or      al,al                                           ;scan code present?
  4325                                                          jz      .20                                             ;no, skip ahead
  4326                                                          call    PutConsoleHexByte                               ;display scan code
  4327                                                          jmp     .30                                             ;continue
  4328                                  .20                     mov     al,' '                                          ;ASCII space
  4329                                                          call    SetConsoleChar                                  ;display space
  4330                                                          mov     al,' '                                          ;ASCII space
  4331                                                          call    SetConsoleChar                                  ;display space
  4332                                  .30                     add     bl,2                                            ;next column (+2)
  4333                                                          pop     ecx                                             ;restore remaining
  4334                                                          loop    .10                                             ;next code
  4335                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4336                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4337                                                          jb      .40                                             ;no, skip ahead
  4338                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4339                                                          ja      .40                                             ;no, skip ahead
  4340                                                          mov     ch,bh                                           ;OIA row
  4341                                                          mov     cl,40                                           ;character display column
  4342                                                          call    SetConsoleChar                                  ;display ASCII character
  4343                                  .40                     pop     es                                              ;restore non-volatile regs
  4344                                                          pop     ds                                              ;
  4345                                                          pop     esi                                             ;
  4346                                                          pop     ecx                                             ;
  4347                                                          pop     ebx                                             ;
  4348                                                          ret                                                     ;return
  4349                                  ;-----------------------------------------------------------------------------------------------------------------------
  4350                                  ;
  4351                                  ;       Routine:        PutConsoleOIAShift
  4352                                  ;
  4353                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4354                                  ;
  4355                                  ;       In:             BL      shift flags
  4356                                  ;                       BH      lock flags
  4357                                  ;                       DS      OS data selector
  4358                                  ;
  4359                                  ;-----------------------------------------------------------------------------------------------------------------------
  4360                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4361                                                          push    es                                              ;
  4362                                                          push    EGDTCGA                                         ;load CGA selector ...
  4363                                                          pop     es                                              ;... into ES register
  4364                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4365                                                          mov     al,EASCIISPACE                                  ;space is default character
  4366                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4367                                                          jz      .10                                             ;no, skip ahead
  4368                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4369                                  .10                     mov     cl,14                                           ;indicator column
  4370                                                          call    SetConsoleChar                                  ;display ASCII character
  4371                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4372                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4373                                                          jz      .20                                             ;no, skip ahead
  4374                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4375                                  .20                     mov     cl,64                                           ;indicator column
  4376                                                          call    SetConsoleChar                                  ;display ASCII character
  4377                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4378                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4379                                                          jz      .30                                             ;no, skip ahead
  4380                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4381                                  .30                     mov     cl,15                                           ;indicator column
  4382                                                          call    SetConsoleChar                                  ;display ASCII character
  4383                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4384                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4385                                                          jz      .40                                             ;no, skip ahead
  4386                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4387                                  .40                     mov     cl,63                                           ;indicator column
  4388                                                          call    SetConsoleChar                                  ;display ASCII character
  4389                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4390                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4391                                                          jz      .50                                             ;no, skip ahead
  4392                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4393                                  .50                     mov     cl,16                                           ;indicator column
  4394                                                          call    SetConsoleChar                                  ;display ASCII character
  4395                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4396                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4397                                                          jz      .60                                             ;no, skip ahead
  4398                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4399                                  .60                     mov     cl,62                                           ;indicator column
  4400                                                          call    SetConsoleChar                                  ;display ASCII character
  4401                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4402                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4403                                                          jz      .70                                             ;no, skip ahead
  4404                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4405                                  .70                     mov     cl,78                                           ;indicator column
  4406                                                          call    SetConsoleChar                                  ;display ASCII character
  4407                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4408                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4409                                                          jz      .80                                             ;no, skip ahead
  4410                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4411                                  .80                     mov     cl,77                                           ;indicator column
  4412                                                          call    SetConsoleChar                                  ;display ASCII character
  4413                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4414                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4415                                                          jz      .90                                             ;no, skip ahead
  4416                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4417                                  .90                     mov     cl,76                                           ;indicator column
  4418                                                          call    SetConsoleChar                                  ;display ASCII character
  4419                                                          pop     es                                              ;restore non-volatile regs
  4420                                                          pop     ecx                                             ;
  4421                                                          ret                                                     ;return
  4422                                  ;-----------------------------------------------------------------------------------------------------------------------
  4423                                  ;
  4424                                  ;       Routine:        PutConsoleString
  4425                                  ;
  4426                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4427                                  ;                       console position as needed.
  4428                                  ;
  4429                                  ;       In:             EDX     source address
  4430                                  ;                       DS      OS data selector
  4431                                  ;
  4432                                  ;-----------------------------------------------------------------------------------------------------------------------
  4433                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4434                                                          mov     esi,edx                                         ;source address
  4435                                                          cld                                                     ;forward strings
  4436                                  .10                     lodsb                                                   ;ASCII character
  4437                                                          or      al,al                                           ;end of string?
  4438                                                          jz      .40                                             ;yes, skip ahead
  4439                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4440                                                          jne     .20                                             ;no, skip ahead
  4441                                                          call    FirstConsoleColumn                              ;move to start of row
  4442                                                          jmp     .10                                             ;next character
  4443                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4444                                                          jne     .30                                             ;no, skip ahead
  4445                                                          call    NextConsoleRow                                  ;move to next row
  4446                                                          jmp     .10                                             ;next character
  4447                                  .30                     call    PutConsoleChar                                  ;output character to console
  4448                                                          call    NextConsoleColumn                               ;advance to next column
  4449                                                          jmp     .10                                             ;next character
  4450                                  .40                     pop     esi                                             ;restore non-volatile regs
  4451                                                          ret                                                     ;return
  4452                                  ;-----------------------------------------------------------------------------------------------------------------------
  4453                                  ;
  4454                                  ;       Routine:        Yield
  4455                                  ;
  4456                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4457                                  ;
  4458                                  ;-----------------------------------------------------------------------------------------------------------------------
  4459                                  Yield                   sti                                                     ;enable maskagle interrupts
  4460                                                          hlt                                                     ;halt until external interrupt
  4461                                                          ret                                                     ;return
  4462                                  ;=======================================================================================================================
  4463                                  ;
  4464                                  ;       Data-Type Conversion Helper Routines
  4465                                  ;
  4466                                  ;       DecimalToUnsigned
  4467                                  ;       HexadecimalToUnsigned
  4468                                  ;       UnsignedToDecimalString
  4469                                  ;       UnsignedToHexadecimal
  4470                                  ;
  4471                                  ;=======================================================================================================================
  4472                                  ;-----------------------------------------------------------------------------------------------------------------------
  4473                                  ;
  4474                                  ;       Routine:        DecimalToUnsigned
  4475                                  ;
  4476                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4477                                  ;
  4478                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4479                                  ;
  4480                                  ;       Output:         EAX     unsigned integer value
  4481                                  ;
  4482                                  ;-----------------------------------------------------------------------------------------------------------------------
  4483                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4484                                                          mov     esi,edx                                         ;source address
  4485                                                          xor     edx,edx                                         ;zero total
  4486                                  .10                     lodsb                                                   ;source byte
  4487                                                          cmp     al,','                                          ;comma?
  4488                                                          je      .10                                             ;yes, ignore
  4489                                                          test    al,al                                           ;end of string?
  4490                                                          jz      .30                                             ;yes, done
  4491                                                          cmp     al,'.'                                          ;decimal point?
  4492                                                          je      .30                                             ;yes, done
  4493                                                          cmp     al,'0'                                          ;numeral?
  4494                                                          jb      .20                                             ;no, invalid string
  4495                                                          cmp     al,'9'                                          ;numeral?
  4496                                                          ja      .20                                             ;no, invalid string
  4497                                                          and     al,00Fh                                         ;mask ASCII zone
  4498                                                          push    eax                                             ;save numeral
  4499                                                          shl     edx,1                                           ;total * 2
  4500                                                          mov     eax,edx                                         ;total * 2
  4501                                                          shl     edx,2                                           ;total * 8
  4502                                                          add     edx,eax                                         ;total * 10
  4503                                                          pop     eax                                             ;restore numeral
  4504                                                          add     edx,eax                                         ;accumulate decimal digit
  4505                                                          xor     eax,eax                                         ;zero register
  4506                                                          jmp     .10                                             ;next
  4507                                  .20                     xor     edx,edx                                         ;zero result on error
  4508                                  .30                     mov     eax,edx                                         ;result
  4509                                                          pop     esi                                             ;restore non-volatile regs
  4510                                                          ret                                                     ;return
  4511                                  ;-----------------------------------------------------------------------------------------------------------------------
  4512                                  ;
  4513                                  ;       Routine:        HexadecimalToUnsigned
  4514                                  ;
  4515                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4516                                  ;
  4517                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4518                                  ;
  4519                                  ;       Output:         EAX     unsigned integer value
  4520                                  ;
  4521                                  ;-----------------------------------------------------------------------------------------------------------------------
  4522                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4523                                                          mov     esi,edx                                         ;source address
  4524                                                          xor     edx,edx                                         ;zero register
  4525                                  .10                     lodsb                                                   ;source byte
  4526                                                          test    al,al                                           ;end of string?
  4527                                                          jz      .30                                             ;yes, branch
  4528                                                          cmp     al,'9'                                          ;hexadecimal?
  4529                                                          jna     .20                                             ;no, skip ahead
  4530                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4531                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4532                                                          shl     edx,4                                           ;previous total x 16
  4533                                                          add     edx,eax                                         ;add prior value x 16
  4534                                                          jmp     .10                                             ;next
  4535                                  .30                     mov     eax,edx                                         ;result
  4536                                                          pop     esi                                             ;restore non-volatile regs
  4537                                                          ret                                                     ;return
  4538                                  ;-----------------------------------------------------------------------------------------------------------------------
  4539                                  ;
  4540                                  ;       Routine:        UnsignedToDecimalString
  4541                                  ;
  4542                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4543                                  ;
  4544                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4545                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4546                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4547                                  ;                       ECX     32-bit binary
  4548                                  ;                       DS:EDX  output buffer address
  4549                                  ;
  4550                                  ;-----------------------------------------------------------------------------------------------------------------------
  4551                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4552                                                          push    ecx                                             ;
  4553                                                          push    edi                                             ;
  4554                                                          push    es                                              ;
  4555                                                          push    ds                                              ;load data selector
  4556                                                          pop     es                                              ;... into extra segment reg
  4557                                                          mov     edi,edx                                         ;output buffer address
  4558                                                          and     bh,00001111b                                    ;zero internal flags
  4559                                                          mov     edx,ecx                                         ;binary
  4560                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4561                                                          call    .30                                             ;divide and store
  4562                                                          mov     ecx,100000000                                   ;10^8 divisor
  4563                                                          call    .10                                             ;divide and store
  4564                                                          mov     ecx,10000000                                    ;10^7 divisor
  4565                                                          call    .30                                             ;divide and store
  4566                                                          mov     ecx,1000000                                     ;10^6 divisor
  4567                                                          call    .30                                             ;divide and store
  4568                                                          mov     ecx,100000                                      ;10^5 divisor
  4569                                                          call    .10                                             ;divide and store
  4570                                                          mov     ecx,10000                                       ;10^4 divisor
  4571                                                          call    .30                                             ;divide and store
  4572                                                          mov     ecx,1000                                        ;10^3 divisor
  4573                                                          call    .30                                             ;divide and store
  4574                                                          mov     ecx,100                                         ;10^2 divisor
  4575                                                          call    .10                                             ;divide and store
  4576                                                          mov     ecx,10                                          ;10^2 divisor
  4577                                                          call    .30                                             ;divide and store
  4578                                                          mov     eax,edx                                         ;10^1 remainder
  4579                                                          call    .40                                             ;store
  4580                                                          xor     al,al                                           ;null terminator
  4581                                                          stosb
  4582                                                          pop     es                                              ;restore non-volatile regs
  4583                                                          pop     edi                                             ;
  4584                                                          pop     ecx                                             ;
  4585                                                          pop     ebx                                             ;
  4586                                                          ret                                                     ;return
  4587                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4588                                                          jz      .30                                             ;no, branch
  4589                                                          test    bh,00000001b                                    ;trim leading zeros?
  4590                                                          jz      .20                                             ;no, store delim
  4591                                                          test    bh,00010000b                                    ;non-zero found?
  4592                                                          jz      .30                                             ;no, branch
  4593                                  .20                     mov     al,','                                          ;delimiter
  4594                                                          stosb                                                   ;store delimiter
  4595                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4596                                                          xor     edx,edx                                         ;zero hi-order
  4597                                                          div     ecx                                             ;divide by power of 10
  4598                                                          test    al,al                                           ;zero?
  4599                                                          jz      .50                                             ;yes, branch
  4600                                                          or      bh,00010000b                                    ;non-zero found
  4601                                  .40                     or      al,30h                                          ;ASCII zone
  4602                                                          stosb                                                   ;store digit
  4603                                                          ret                                                     ;return
  4604                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4605                                                          jz      .40                                             ;no, store and continue
  4606                                                          test    bh,00010000b                                    ;non-zero found?
  4607                                                          jnz     .40                                             ;yes, store and continue
  4608                                                          ret                                                     ;return
  4609                                  ;-----------------------------------------------------------------------------------------------------------------------
  4610                                  ;
  4611                                  ;       Routine:        UnsignedToHexadecimal
  4612                                  ;
  4613                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4614                                  ;
  4615                                  ;       Input:          DS:EDX  output buffer address
  4616                                  ;                       ECX     32-bit binary
  4617                                  ;
  4618                                  ;-----------------------------------------------------------------------------------------------------------------------
  4619                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4620                                                          mov     edi,edx                                         ;output buffer address
  4621                                                          mov     edx,ecx                                         ;32-bit unsigned
  4622                                                          xor     ecx,ecx                                         ;zero register
  4623                                                          mov     cl,8                                            ;nybble count
  4624                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4625                                                          mov     al,dl                                           ;????bbbb
  4626                                                          and     al,0fh                                          ;mask out bits 4-7
  4627                                                          or      al,30h                                          ;mask in ascii zone
  4628                                                          cmp     al,3ah                                          ;A through F?
  4629                                                          jb      .20                                             ;no, skip ahead
  4630                                                          add     al,7                                            ;41h through 46h
  4631                                  .20                     stosb                                                   ;store hexnum
  4632                                                          loop    .10                                             ;next nybble
  4633                                                          xor     al,al                                           ;zero reg
  4634                                                          stosb                                                   ;null terminate
  4635                                                          pop     edi                                             ;restore non-volatile regs
  4636                                                          ret                                                     ;return
  4637                                  ;=======================================================================================================================
  4638                                  ;
  4639                                  ;       Message Queue Helper Routines
  4640                                  ;
  4641                                  ;       GetMessage
  4642                                  ;       PutMessage
  4643                                  ;
  4644                                  ;=======================================================================================================================
  4645                                  ;-----------------------------------------------------------------------------------------------------------------------
  4646                                  ;
  4647                                  ;       Routine:        GetMessage
  4648                                  ;
  4649                                  ;       Description:    This routine reads and removes a message from the message queue.
  4650                                  ;
  4651                                  ;       Out:            EAX     lo-order message data
  4652                                  ;                       EDX     hi-order message data
  4653                                  ;
  4654                                  ;                       CY      0 = message read
  4655                                  ;                               1 = no message to read
  4656                                  ;
  4657                                  ;-----------------------------------------------------------------------------------------------------------------------
  4658                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4659                                                          push    ecx                                             ;
  4660                                                          push    ds                                              ;
  4661                                                          push    ELDTMQ                                          ;load message queue selector ...
  4662                                                          pop     ds                                              ;... into data segment register
  4663                                                          mov     ebx,[MQHead]                                    ;head ptr
  4664                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4665                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4666                                                          or      eax,edx                                         ;is queue empty?
  4667                                                          stc                                                     ;assume queue is emtpy
  4668                                                          jz      .20                                             ;yes, skip ahead
  4669                                                          xor     ecx,ecx                                         ;store zero
  4670                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4671                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4672                                                          add     ebx,8                                           ;next queue element
  4673                                                          and     ebx,03fch                                       ;at end of queue?
  4674                                                          jnz     .10                                             ;no, skip ahead
  4675                                                          mov     bl,8                                            ;reset to 1st entry
  4676                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4677                                                          clc                                                     ;indicate message read
  4678                                  .20                     pop     ds                                              ;restore non-volatile regs
  4679                                                          pop     ecx                                             ;
  4680                                                          pop     ebx                                             ;
  4681                                                          ret                                                     ;return
  4682                                  ;-----------------------------------------------------------------------------------------------------------------------
  4683                                  ;
  4684                                  ;       Routine:        PutMessage
  4685                                  ;
  4686                                  ;       Description:    This routine adda a message to the message queue.
  4687                                  ;
  4688                                  ;       In:             ECX     hi-order data word
  4689                                  ;                       EDX     lo-order data word
  4690                                  ;
  4691                                  ;       Out:            CY      0 = success
  4692                                  ;                               1 = fail: queue is full
  4693                                  ;
  4694                                  ;-----------------------------------------------------------------------------------------------------------------------
  4695                                  PutMessage              push    ds                                              ;save non-volatile regs
  4696                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4697                                                          pop     ds                                              ;... into data segment register
  4698                                                          mov     eax,[MQTail]                                    ;tail ptr
  4699                                                          cmp     dword [eax],0                                   ;is queue full?
  4700                                                          stc                                                     ;assume failure
  4701                                                          jne     .20                                             ;yes, cannot store
  4702                                                          mov     [eax],edx                                       ;store lo-order data
  4703                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4704                                                          add     eax,8                                           ;next queue element adr
  4705                                                          and     eax,03fch                                       ;at end of queue?
  4706                                                          jnz     .10                                             ;no, skip ahead
  4707                                                          mov     al,8                                            ;reset to top of queue
  4708                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4709                                                          clc                                                     ;indicate success
  4710                                  .20                     pop     ds                                              ;restore non-volatile regs
  4711                                                          ret                                                     ;return
  4712                                  ;=======================================================================================================================
  4713                                  ;
  4714                                  ;       Memory-Mapped Video Routines
  4715                                  ;
  4716                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4717                                  ;
  4718                                  ;       ClearConsoleScreen
  4719                                  ;       ScrollConsoleRow
  4720                                  ;       SetConsoleChar
  4721                                  ;       SetConsoleString
  4722                                  ;
  4723                                  ;=======================================================================================================================
  4724                                  ;-----------------------------------------------------------------------------------------------------------------------
  4725                                  ;
  4726                                  ;       Routine:        ClearConsoleScreen
  4727                                  ;
  4728                                  ;       Description:    This routine clears the console (CGA) screen.
  4729                                  ;
  4730                                  ;-----------------------------------------------------------------------------------------------------------------------
  4731                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4732                                                          push    edi                                             ;
  4733                                                          push    ds                                              ;
  4734                                                          push    es                                              ;
  4735                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4736                                                          pop     ds                                              ;... into DS register
  4737                                                          push    EGDTCGA                                         ;load CGA selector ...
  4738                                                          pop     es                                              ;... into ES register
  4739                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4740                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4741                                                          xor     edi,edi                                         ;target offset
  4742                                                          cld                                                     ;forward strings
  4743                                                          rep     stosd                                           ;reset screen body
  4744                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4745                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4746                                                          rep     stosd                                           ;reset OIA line
  4747                                                          xor     al,al                                           ;zero register
  4748                                                          mov     [wbConsoleRow],al                               ;reset console row
  4749                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4750                                                          call    PlaceCursor                                     ;place cursor at current position
  4751                                                          pop     es                                              ;restore non-volatile regs
  4752                                                          pop     ds                                              ;
  4753                                                          pop     edi                                             ;
  4754                                                          pop     ecx                                             ;
  4755                                                          ret                                                     ;return
  4756                                  ;-----------------------------------------------------------------------------------------------------------------------
  4757                                  ;
  4758                                  ;       Routine:        ScrollConsoleRow
  4759                                  ;
  4760                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4761                                  ;
  4762                                  ;-----------------------------------------------------------------------------------------------------------------------
  4763                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4764                                                          push    esi                                             ;
  4765                                                          push    edi                                             ;
  4766                                                          push    ds                                              ;
  4767                                                          push    es                                              ;
  4768                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4769                                                          pop     ds                                              ;... into DS
  4770                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4771                                                          pop     es                                              ;... into ES
  4772                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4773                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4774                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4775                                                          cld                                                     ;forward strings
  4776                                                          rep     movsd                                           ;move 24 lines up
  4777                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4778                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4779                                                          rep     stosd                                           ;clear bottom row
  4780                                                          pop     es                                              ;restore non-volatile regs
  4781                                                          pop     ds                                              ;
  4782                                                          pop     edi                                             ;
  4783                                                          pop     esi                                             ;
  4784                                                          pop     ecx                                             ;
  4785                                                          ret                                                     ;return
  4786                                  ;-----------------------------------------------------------------------------------------------------------------------
  4787                                  ;
  4788                                  ;       Routine:        SetConsoleChar
  4789                                  ;
  4790                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4791                                  ;
  4792                                  ;       In:             AL      ASCII character
  4793                                  ;                       CL      column
  4794                                  ;                       CH      row
  4795                                  ;                       ES      CGA selector
  4796                                  ;
  4797                                  ;       Out:            EAX     last target address written (ES:)
  4798                                  ;                       CL      column + 1
  4799                                  ;
  4800                                  ;-----------------------------------------------------------------------------------------------------------------------
  4801                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4802                                                          movzx   eax,ch                                          ;row
  4803                                                          mov     ah,ECONCOLS                                     ;cols/row
  4804                                                          mul     ah                                              ;row * cols/row
  4805                                                          add     al,cl                                           ;add column
  4806                                                          adc     ah,0                                            ;handle carry
  4807                                                          shl     eax,1                                           ;screen offset
  4808                                                          mov     [es:eax],dl                                     ;store character
  4809                                                          inc     cl                                              ;next column
  4810                                                          ret                                                     ;return
  4811                                  ;-----------------------------------------------------------------------------------------------------------------------
  4812                                  ;
  4813                                  ;       Routine:        SetConsoleString
  4814                                  ;
  4815                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4816                                  ;
  4817                                  ;       In:             ESI     source offset (DS:)
  4818                                  ;                       CL      column
  4819                                  ;                       CH      row
  4820                                  ;                       ES      CGA selector
  4821                                  ;
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4824                                                          cld                                                     ;forward strings
  4825                                  .10                     lodsb                                                   ;next ASCII character
  4826                                                          test    al,al                                           ;end of string?
  4827                                                          jz      .20                                             ;yes, branch
  4828                                                          call    SetConsoleChar                                  ;store character
  4829                                                          jmp     .10                                             ;continue
  4830                                  .20                     pop     esi                                             ;restore non-volatile regs
  4831                                                          ret                                                     ;return
  4832                                  ;=======================================================================================================================
  4833                                  ;
  4834                                  ;       Input/Output Routines
  4835                                  ;
  4836                                  ;       These routines read and/or write directly to ports.
  4837                                  ;
  4838                                  ;       GetBaseMemSize
  4839                                  ;       GetExtendedMemSize
  4840                                  ;       GetROMMemSize
  4841                                  ;       PlaceCursor
  4842                                  ;       PutPrimaryEndOfInt
  4843                                  ;       PutSecondaryEndOfInt
  4844                                  ;       ReadRealTimeClock
  4845                                  ;       ResetSystem
  4846                                  ;       SetKeyboardLamps
  4847                                  ;       WaitForKeyInBuffer
  4848                                  ;       WaitForKeyOutBuffer
  4849                                  ;
  4850                                  ;=======================================================================================================================
  4851                                  ;-----------------------------------------------------------------------------------------------------------------------
  4852                                  ;
  4853                                  ;       Routine:        GetBaseMemSize
  4854                                  ;
  4855                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4856                                  ;
  4857                                  ;       Output:         EAX     base RAM size in bytes
  4858                                  ;
  4859                                  ;-----------------------------------------------------------------------------------------------------------------------
  4860                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4861                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4862                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4863                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4864                                                          mov     ah,al                                           ;save base RAM high
  4865                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4866                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4867                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4868                                                          ret                                                     ;return to caller
  4869                                  ;-----------------------------------------------------------------------------------------------------------------------
  4870                                  ;
  4871                                  ;       Routine:        GetExtendedMemSize
  4872                                  ;
  4873                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4874                                  ;
  4875                                  ;       Output:         EAX     extended RAM size in bytes
  4876                                  ;
  4877                                  ;-----------------------------------------------------------------------------------------------------------------------
  4878                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4879                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4880                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4881                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4882                                                          mov     ah,al                                           ;save extended RAM high
  4883                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4884                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4885                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4886                                                          ret                                                     ;return to caller
  4887                                  ;-----------------------------------------------------------------------------------------------------------------------
  4888                                  ;
  4889                                  ;       Routine:        GetROMMemSize
  4890                                  ;
  4891                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4892                                  ;
  4893                                  ;       Output:         EAX     RAM size in bytes
  4894                                  ;
  4895                                  ;-----------------------------------------------------------------------------------------------------------------------
  4896                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4897                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4898                                                          ret                                                     ;return
  4899                                  ;-----------------------------------------------------------------------------------------------------------------------
  4900                                  ;
  4901                                  ;       Routine:        PlaceCursor
  4902                                  ;
  4903                                  ;       Description:    This routine positions the cursor on the console.
  4904                                  ;
  4905                                  ;       In:             DS      OS data selector
  4906                                  ;
  4907                                  ;-----------------------------------------------------------------------------------------------------------------------
  4908                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4909                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4910                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4911                                                          mul     ah                                              ;row offset
  4912                                                          add     al,[wbConsoleColumn]                            ;add column
  4913                                                          adc     ah,0                                            ;add overflow
  4914                                                          mov     ecx,eax                                         ;screen offset
  4915                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4916                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4917                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4918                                                          out     dx,al                                           ;select register
  4919                                                          inc     edx                                             ;data port
  4920                                                          mov     al,ch                                           ;hi-order cursor loc
  4921                                                          out     dx,al                                           ;store hi-order loc
  4922                                                          dec     edx                                             ;register select port
  4923                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4924                                                          out     dx,al                                           ;select register
  4925                                                          inc     edx                                             ;data port
  4926                                                          mov     al,cl                                           ;lo-order cursor loc
  4927                                                          out     dx,al                                           ;store lo-order loc
  4928                                                          pop     ecx                                             ;restore non-volatile regs
  4929                                                          ret                                                     ;return
  4930                                  ;-----------------------------------------------------------------------------------------------------------------------
  4931                                  ;
  4932                                  ;       Routine:        PutPrimaryEndOfInt
  4933                                  ;
  4934                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4935                                  ;
  4936                                  ;-----------------------------------------------------------------------------------------------------------------------
  4937                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4938                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4939                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4940                                                          ret                                                     ;return
  4941                                  ;-----------------------------------------------------------------------------------------------------------------------
  4942                                  ;
  4943                                  ;       Routine:        PutSecondaryEndOfInt
  4944                                  ;
  4945                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4946                                  ;
  4947                                  ;-----------------------------------------------------------------------------------------------------------------------
  4948                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4949                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4950                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4951                                                          ret                                                     ;return
  4952                                  ;-----------------------------------------------------------------------------------------------------------------------
  4953                                  ;
  4954                                  ;       Routine:        ReadRealTimeClock
  4955                                  ;
  4956                                  ;       Description:    This routine gets current date time from the real-time clock.
  4957                                  ;
  4958                                  ;       In:             DS:EBX  DATETIME structure
  4959                                  ;
  4960                                  ;-----------------------------------------------------------------------------------------------------------------------
  4961                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4962                                                          push    edi                                             ;
  4963                                                          push    es                                              ;
  4964                                                          push    ds                                              ;store data selector ...
  4965                                                          pop     es                                              ;... in es register
  4966                                                          mov     edi,ebx                                         ;date-time structure
  4967                                                          mov     al,ERTCSECONDREG                                ;second register
  4968                                                          out     ERTCREGPORT,al                                  ;select second register
  4969                                                          in      al,ERTCDATAPORT                                 ;read second register
  4970                                                          cld                                                     ;forward strings
  4971                                                          stosb                                                   ;store second value
  4972                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4973                                                          out     ERTCREGPORT,al                                  ;select minute register
  4974                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4975                                                          stosb                                                   ;store minute value
  4976                                                          mov     al,ERTCHOURREG                                  ;hour register
  4977                                                          out     ERTCREGPORT,al                                  ;select hour register
  4978                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4979                                                          stosb                                                   ;store hour value
  4980                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4981                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4982                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4983                                                          stosb                                                   ;store weekday value
  4984                                                          mov     al,ERTCDAYREG                                   ;day register
  4985                                                          out     ERTCREGPORT,al                                  ;select day register
  4986                                                          in      al,ERTCDATAPORT                                 ;read day register
  4987                                                          stosb                                                   ;store day value
  4988                                                          mov     al,ERTCMONTHREG                                 ;month register
  4989                                                          out     ERTCREGPORT,al                                  ;select month register
  4990                                                          in      al,ERTCDATAPORT                                 ;read month register
  4991                                                          stosb                                                   ;store month value
  4992                                                          mov     al,ERTCYEARREG                                  ;year register
  4993                                                          out     ERTCREGPORT,al                                  ;select year register
  4994                                                          in      al,ERTCDATAPORT                                 ;read year register
  4995                                                          stosb                                                   ;store year value
  4996                                                          mov     al,ERTCCENTURYREG                               ;century register
  4997                                                          out     ERTCREGPORT,al                                  ;select century register
  4998                                                          in      al,ERTCDATAPORT                                 ;read century register
  4999                                                          stosb                                                   ;store century value
  5000                                                          mov     al,ERTCSTATUSREG                                ;status register
  5001                                                          out     ERTCREGPORT,al                                  ;select status register
  5002                                                          in      al,ERTCDATAPORT                                 ;read status register
  5003                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  5004                                                          jnz     .20                                             ;skip ahead if binary values
  5005                                                          mov     esi,ebx                                         ;date-time structure address
  5006                                                          mov     edi,ebx                                         ;date-time structure address
  5007                                                          mov     ecx,8                                           ;loop counter
  5008                                  .10                     lodsb                                                   ;BCD value
  5009                                                          mov     ah,al                                           ;BCD value
  5010                                                          and     al,00001111b                                    ;low-order decimal zone
  5011                                                          and     ah,11110000b                                    ;hi-order decimal zone
  5012                                                          shr     ah,1                                            ;hi-order decimal * 8
  5013                                                          add     al,ah                                           ;low-order + hi-order * 8
  5014                                                          shr     ah,2                                            ;hi-order decimal * 2
  5015                                                          add     al,ah                                           ;low-order + hi-order * 10
  5016                                                          stosb                                                   ;replace BCD with binary
  5017                                                          loop    .10                                             ;next value
  5018                                  .20                     pop     es                                              ;restore non-volatile regs
  5019                                                          pop     edi                                             ;
  5020                                                          pop     esi                                             ;
  5021                                                          ret                                                     ;return
  5022                                  ;-----------------------------------------------------------------------------------------------------------------------
  5023                                  ;
  5024                                  ;       Routine:        ResetSystem
  5025                                  ;
  5026                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5027                                  ;
  5028                                  ;       Out:            N/A     This routine does not return.
  5029                                  ;
  5030                                  ;-----------------------------------------------------------------------------------------------------------------------
  5031                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5032                                                          loop    $                                               ;clear interrupts
  5033                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5034                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5035                                  .10                     sti                                                     ;enable maskable interrupts
  5036                                                          hlt                                                     ;halt until interrupt
  5037                                                          jmp     .10                                             ;repeat until reset kicks in
  5038                                  ;-----------------------------------------------------------------------------------------------------------------------
  5039                                  ;
  5040                                  ;       Routine:        SetKeyboardLamps
  5041                                  ;
  5042                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5043                                  ;
  5044                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5045                                  ;
  5046                                  ;-----------------------------------------------------------------------------------------------------------------------
  5047                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5048                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5049                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5050                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5051                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5052                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5053                                                          mov     al,bh                                           ;set/reset lamps value
  5054                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5055                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5056                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5057                                                          ret                                                     ;return
  5058                                  ;-----------------------------------------------------------------------------------------------------------------------
  5059                                  ;
  5060                                  ;       Routine:        WaitForKeyInBuffer
  5061                                  ;
  5062                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5063                                  ;
  5064                                  ;       Out:            ZF      1 = Input buffer ready
  5065                                  ;                               0 = Input buffer not ready after timeout
  5066                                  ;
  5067                                  ;-----------------------------------------------------------------------------------------------------------------------
  5068                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5069                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5070                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5071                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5072                                                          loopnz  .10                                             ;yes, repeat till timeout
  5073                                                          pop     ecx                                             ;restore non-volatile regs
  5074                                                          ret                                                     ;return
  5075                                  ;-----------------------------------------------------------------------------------------------------------------------
  5076                                  ;
  5077                                  ;       Routine:        WaitForKeyOutBuffer
  5078                                  ;
  5079                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5080                                  ;
  5081                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5082                                  ;                               0 = Output buffer empty after timeout
  5083                                  ;
  5084                                  ;-----------------------------------------------------------------------------------------------------------------------
  5085                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5086                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5087                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5088                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5089                                                          loopz   .10                                             ;loop until output buffer bit
  5090                                                          pop     ecx                                             ;restore non-volatile regs
  5091                                                          ret                                                     ;return
  5092                                  ;-----------------------------------------------------------------------------------------------------------------------
  5093                                  ;
  5094                                  ;       End of the Kernel Function Library
  5095                                  ;
  5096                                  ;-----------------------------------------------------------------------------------------------------------------------
  5097                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5098                                  ;=======================================================================================================================
  5099                                  ;
  5100                                  ;       Console Task
  5101                                  ;
  5102                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5103                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5104                                  ;       screen and responds to user commands.
  5105                                  ;
  5106                                  ;=======================================================================================================================
  5107                                  ;-----------------------------------------------------------------------------------------------------------------------
  5108                                  ;
  5109                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5110                                  ;
  5111                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5112                                  ;
  5113                                  ;-----------------------------------------------------------------------------------------------------------------------
  5114                                  section                 constack                                                ;console task stack
  5115                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5119                                  ;
  5120                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5121                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5122                                  ;       16 descriptors. Six are initially defined.
  5123                                  ;
  5124                                  ;-----------------------------------------------------------------------------------------------------------------------
  5125                                  section                 conldt                                                  ;console local descriptors
  5126                                                          dq      004093004780007Fh                               ;04 TSS alias
  5127                                                          dq      004093004700007Fh                               ;0c LDT alias
  5128                                                          dq      00409300400006FFh                               ;14 stack
  5129                                                          dq      00CF93000000FFFFh                               ;1c data
  5130                                                          dq      00409B0050000FFFh                               ;24 code
  5131                                                          dq      00409300480007FFh                               ;2c message queue
  5132                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134                                  ;
  5135                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5136                                  ;
  5137                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5138                                  ;       segment. CS to console code.
  5139                                  ;
  5140                                  ;-----------------------------------------------------------------------------------------------------------------------
  5141                                  section                 contss                                                  ;console task state segment
  5142                                                          dd      0                                               ;00 back-link tss
  5143                                                          dd      0700h                                           ;04 esp ring 0
  5144                                                          dd      0014h                                           ;08 ss ring 0
  5145                                                          dd      0700h                                           ;0c esp ring 1
  5146                                                          dd      0014h                                           ;10 es ring 1
  5147                                                          dd      0700h                                           ;14 esp ring 2
  5148                                                          dd      0014h                                           ;18 ss ring 2
  5149                                                          dd      0                                               ;1c cr ring 3
  5150                                                          dd      0                                               ;20 eip
  5151                                                          dd      0200h                                           ;24 eflags
  5152                                                          dd      0                                               ;28 eax
  5153                                                          dd      0                                               ;2c ecx
  5154                                                          dd      0                                               ;30 edx
  5155                                                          dd      0                                               ;34 ebx
  5156                                                          dd      0700h                                           ;38 esp ring 3
  5157                                                          dd      0                                               ;3c ebp
  5158                                                          dd      0                                               ;40 esi
  5159                                                          dd      0                                               ;44 edi
  5160                                                          dd      001Ch                                           ;48 es
  5161                                                          dd      0024h                                           ;4c cs
  5162                                                          dd      0014h                                           ;50 ss ring 3
  5163                                                          dd      001Ch                                           ;54 ds
  5164                                                          dd      0                                               ;58 fs
  5165                                                          dd      0                                               ;5c gs
  5166                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5167                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5168                                  ;-----------------------------------------------------------------------------------------------------------------------
  5169                                  ;
  5170                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5171                                  ;
  5172                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5173                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5174                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5175                                  ;       event.
  5176                                  ;
  5177                                  ;-----------------------------------------------------------------------------------------------------------------------
  5178                                  section                 conmque                                                 ;console message queue
  5179                                                          dd      8                                               ;head pointer
  5180                                                          dd      8                                               ;tail pointer
  5181                                                          times   510 dd 0                                        ;queue elements
  5182                                  ;-----------------------------------------------------------------------------------------------------------------------
  5183                                  ;
  5184                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5185                                  ;
  5186                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5187                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5188                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5189                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5190                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5191                                  ;       board input, echoing to the console screen and responding to user commands.
  5192                                  ;
  5193                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5194                                  ;
  5195                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5196                                  ;                               |  Real Mode Interrupt Vectors                  |
  5197                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5198                                  ;                               |  Reserved BIOS Memory Area                    |
  5199                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5200                                  ;                               |  Shared Kernel Memory Area                    |
  5201                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5202                                  ;                               |  Global Descriptor Table (GDT)                |
  5203                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5204                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5205                                  ;                       002000  +-----------------------------------------------+
  5206                                  ;                               |  Interrupt Handlers                           |
  5207                                  ;                               |  Kernel Function Library                      |
  5208                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5209                                  ;                               |  Console Task Stack Area                      |
  5210                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5211                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5212                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5213                                  ;                               |  Console Task Task State Segment (TSS)        |
  5214                                  ;                       004800  +-----------------------------------------------+
  5215                                  ;                               |  Console Task Message Queue                   |
  5216                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5217                                  ;                               |  Console Task Code                            |
  5218                                  ;                               |  Console Task Constants                       |
  5219                                  ;                       006000  +===============================================+
  5220                                  ;
  5221                                  ;-----------------------------------------------------------------------------------------------------------------------
  5222                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5223                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5224                                  
  5225                                                          clearConsoleScreen                                      ;clear the console screen
  5226                                                          putConsoleString czTitle                                ;display startup message
  5227                                                          putConsoleString czROMMem                               ;ROM memory label
  5228                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5229                                                          putConsoleString czKB                                   ;Kilobytes
  5230                                                          putConsoleString czNewLine                              ;new line
  5231                                                          putConsoleString czBaseMem                              ;base memory label
  5232                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5233                                                          putConsoleString czKB                                   ;Kilobytes
  5234                                                          putConsoleString czNewLine                              ;new line
  5235                                                          putConsoleString czExtendedMem                          ;extended memory label
  5236                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5237                                                          putConsoleString czKB                                   ;Kilobytes
  5238                                                          putConsoleString czNewLine                              ;new line
  5239                                  
  5240                                                          call    ConInitializeNetwork
  5241                                  
  5242                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5243                                                          placeCursor                                             ;set CRT cursor location
  5244                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5245                                                          putConsoleString czNewLine                              ;newline
  5246                                  
  5247                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5248                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5249                                                          call    ConTakeToken                                    ;handle console input
  5250                                                          mov     edx,wzConsoleToken                              ;token buffer
  5251                                                          call    ConDetermineCommand                             ;determine command number
  5252                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5253                                                          jb      .20                                             ;yes, branch
  5254                                  
  5255                                                          putConsoleString czUnknownCommand                       ;display error message
  5256                                  
  5257                                                          jmp     .10                                             ;next command
  5258                                  .20                     shl     eax,2                                           ;index into jump table
  5259                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5260                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5261                                                          call    eax                                             ;call command handler
  5262                                                          jmp     .10                                             ;next command
  5263                                  ;-----------------------------------------------------------------------------------------------------------------------
  5264                                  ;
  5265                                  ;       Routine:        ConInitializeData
  5266                                  ;
  5267                                  ;       Description:    This routine initializes console task variables.
  5268                                  ;
  5269                                  ;-----------------------------------------------------------------------------------------------------------------------
  5270                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5271                                                          push    edi                                             ;
  5272                                                          push    es                                              ;
  5273                                  ;
  5274                                  ;       Initialize console work areas.
  5275                                  ;
  5276                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5277                                                          pop     es                                              ;... into extra segment register
  5278                                                          mov     edi,ECONDATA                                    ;OS console data address
  5279                                                          xor     al,al                                           ;initialization value
  5280                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5281                                                          cld                                                     ;forward strings
  5282                                                          rep     stosb                                           ;initialize data
  5283                                  ;
  5284                                  ;       Initialize heap size
  5285                                  ;
  5286                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5287                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5288                                  ;
  5289                                  ;       Initialize MEMROOT structure
  5290                                  ;
  5291                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5292                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5293                                                          xor     ecx,ecx                                         ;zero register
  5294                                                          mov     cl,4                                            ;count
  5295                                                          rep     stosd                                           ;store first/last contig and free addrs
  5296                                                          xor     eax,eax                                         ;zero register
  5297                                                          stosd                                                   ;zero first task block
  5298                                                          stosd                                                   ;zero last task block
  5299                                  ;
  5300                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5301                                  ;
  5302                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5303                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5304                                                          stosd                                                   ;store signature
  5305                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5306                                                          stosd                                                   ;store block size
  5307                                                          xor     ecx,ecx                                         ;zero register
  5308                                                          mov     cl,6                                            ;count
  5309                                                          xor     eax,eax                                         ;zero register
  5310                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5311                                  ;
  5312                                  ;       Read memory sizes from ROM
  5313                                  ;
  5314                                                          getROMMemSize                                           ;get ROM memory size
  5315                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5316                                                          mov     ecx,eax                                         ;integer param
  5317                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5318                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5319                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5320                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5321                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5322                                                          mov     ecx,eax                                         ;integer param
  5323                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5324                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5325                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5326                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5327                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5328                                                          mov     ecx,eax                                         ;integer param
  5329                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5330                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5331                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5332                                  ;
  5333                                  ;       Restore and return.
  5334                                  ;
  5335                                                          pop     es                                              ;restore non-volatile regs
  5336                                                          pop     edi                                             ;
  5337                                                          pop     ecx                                             ;
  5338                                                          ret                                                     ;return
  5339                                  ;-----------------------------------------------------------------------------------------------------------------------
  5340                                  ;
  5341                                  ;       Routine:        ConInitializeNetwork
  5342                                  ;
  5343                                  ;       Description:    This routine initializes console network variables.
  5344                                  ;
  5345                                  ;-----------------------------------------------------------------------------------------------------------------------
  5346                                  ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5347                                                          push    ecx                                             ;
  5348                                                          push    esi                                             ;
  5349                                                          push    edi                                             ;
  5350                                  ;
  5351                                  ;       Initialize ETHER structure.
  5352                                  ;
  5353                                                          mov     ebx,wsConsoleEther                              ;ETHER structure address
  5354                                                          call    ConInitEtherContext                             ;initialize ETHER struct
  5355                                  
  5356                                  ;       Initialize variables.
  5357                                  ;       Construct PCI selector.
  5358                                  ;       Read PCI configuration data.
  5359                                  ;
  5360                                  			mov	esi,ebx						;ETHER structure address
  5361                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5362                                                          call    ConInitPCIContext                               ;initialize PCI struct
  5363                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5364                                                          call    ConReadPCIConfigData                            ;read the configuration data
  5365                                  
  5366                                  ;
  5367                                  ;       Proceed to next device is function 0 = -1. Otherwise proceed to next function.
  5368                                  ;
  5369                                                          cmp     eax,-1		                                ;function defined?
  5370                                                          jne     .20                                             ;yes, branch
  5371                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  5372                                                          je      .30                                             ;yes, skip to next device
  5373                                  ;
  5374                                  ;       Exit PCI probe if supported adapter found. Otherwise, proceed to next function.
  5375                                  ;
  5376                                  .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5377                                                          je      .40                                             ;yes, found!
  5378                                  ;
  5379                                  ;       Next function
  5380                                  ;
  5381                                                          call    ConNextPCIFunction                              ;next function
  5382                                                          jb      .10                                             ;continue if no overflow
  5383                                  ;
  5384                                  ;       Next device, bus.
  5385                                  ;
  5386                                  .30                     call    ConNextPCIDevice                                ;next device, bus.
  5387                                                          jb      .10                                             ;continue if no overflow
  5388                                                          jmp     .990                                            ;done, ETHER not found
  5389                                  ;
  5390                                  ;       Notify adapter found
  5391                                  ;       Set hardware flag if supported adapter found.
  5392                                  ;
  5393                                  .40                     putConsoleString czEthernetAdapterFound
  5394                                  
  5395                                                          or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5396                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5397                                                          mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5398                                                          jmp     .990                                            ;done, ETHER found
  5399                                  ;
  5400                                  ;       Setup search of buffer addresses for Memory-mapped I/O address
  5401                                  ;
  5402                                                          mov     byte [ebx+PCI.register],010h          		;offset of first BAR register
  5403                                                          xor     ecx,ecx                                         ;zero reg
  5404                                                          mov     cl,6                                            ;maximum number of BAR
  5405                                  ;
  5406                                  ;       Apply BAR register offset to selector
  5407                                  ;
  5408                                  .50                     mov     eax,[ebx+PCI.selector]                		;selector (register is zero)
  5409                                                          mov     al,[ebx+PCI.register]                 		;next BAR register
  5410                                                          mov     [esi+ETHER.selector],eax                	;save selector
  5411                                  ;
  5412                                  ;       Select and read buffer address register.
  5413                                  ;
  5414                                                          mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port (high)
  5415                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port (low)
  5416                                                          out     dx,eax                                          ;select register
  5417                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5418                                                          in      eax,dx                                          ;read register
  5419                                  ;
  5420                                  ;       Skip BAR if null. Otherwise, test if memory-mapped i/o addr
  5421                                  ;
  5422                                                          test    eax,eax                                         ;BAR has a value?
  5423                                                          jz      .70                                             ;no, branch
  5424                                                          test    al,1                                            ;memory BAR (bit 0=0)
  5425                                                          jnz     .60                                             ;no, branch
  5426                                  ;
  5427                                  ;       Skip if we already have MMIO. Otherwise, mask bits and save.
  5428                                  ;
  5429                                                          cmp     dword [esi+ETHER.mmio],0                        ;do we already have an mmio addr?
  5430                                                          jne     .70                                             ;yes, branch
  5431                                                          and     al,0F8h                                         ;mask out bits 2-0
  5432                                                          mov     [esi+ETHER.mmio],eax                            ;save the memory mapped i/o addr
  5433                                                          jmp     .70                                             ;continue to next BAR
  5434                                  ;
  5435                                  ;       Skip port if we already have one. Otherwise, mask bits and save.
  5436                                  ;
  5437                                  .60                     cmp     dword [esi+ETHER.port],0                        ;do we already have a port?
  5438                                                          jne     .70                                             ;yes, branch
  5439                                                          and     al,0FCh                                         ;zero bits 0,1
  5440                                                          mov     [esi+ETHER.port],eax                            ;save port addr
  5441                                  ;
  5442                                  ;       Next BAR
  5443                                  ;
  5444                                  .70                     add     byte [ebx+PCI.register],4                       ;next BAR register offset
  5445                                                          loop    .50                                             ;look for next BAR
  5446                                  ;
  5447                                  ;       Read interrupt nbr
  5448                                  ;
  5449                                                          mov     eax,[ebp+ETHER.selector]                        ;ethernet device PCI selector
  5450                                                          mov     al,3ch                                          ;interrupt number port addr
  5451                                                          mov     [esi+ETHER.selector],eax                        ;ethernet device PCI select|register
  5452                                                          mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port (high)
  5453                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port (low)
  5454                                                          out     dx,eax                                          ;select register
  5455                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5456                                                          in      eax,dx                                          ;read register
  5457                                                          mov     [esi+ETHER.irq],al                              ;save IRQ
  5458                                  ;
  5459                                  ;       Error if we have no MMIO address
  5460                                  ;
  5461                                                          mov     eax,[esi+ETHER.mmio]                            ;ethernet device memory I/O address
  5462                                                          test    eax,eax                                         ;do we have memory I/O address?
  5463                                                          jnz     .80                                             ;yes, branch
  5464                                  
  5465                                                          putConsoleString czEthernetNotAddressable               ;report not addressable
  5466                                  
  5467                                                          jmp     .990                                            ;done (could do MAC read from EEPROM here)
  5468                                  
  5469                                  .80                     putConsoleString czEthernetAddressable                  ;report addressable
  5470                                  ;
  5471                                  ;       Read MAC address from MMIO
  5472                                  ;
  5473                                                          mov     edx,[esi+ETHER.mmio]                            ;MMIO address
  5474                                                          add     edx,5400h                                       ;MAC address offset
  5475                                                          mov     eax,[edx]                                       ;MAC address lo-order dword
  5476                                                          mov     [esi+ETHER.mac],eax                             ;save
  5477                                                          mov     ax,[edx+4]                                      ;MAC address hi-order word
  5478                                                          mov     [esi+ETHER.mac+4],ax                            ;save
  5479                                  ;
  5480                                  ;       Enable transmission of packets
  5481                                  ;
  5482                                  
  5483                                  
  5484                                  ;
  5485                                  ;       Setup read base address (RDBAL) (2800h)
  5486                                  ;
  5487                                  
  5488                                  ;
  5489                                  ;       Setup receive descriptor table length (2808h)
  5490                                  ;
  5491                                  
  5492                                  ;
  5493                                  ;       Enable receipt of packets
  5494                                  ;
  5495                                                          pushf
  5496                                                          cli
  5497                                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5498                                                          add     edx,0100h                                       ;RCTL register address
  5499                                                          mov     eax,[edx]                                       ;RCTL value
  5500                                                          or      eax,00000002h                                   ;enable
  5501                                                          mov     [edx],eax                                       ;store RCTL value
  5502                                                          popf
  5503                                  ;
  5504                                  ;       Enable board interrupt
  5505                                  ;
  5506                                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5507                                                          add     edx,2818h                                       ;add descriptor tail offset
  5508                                                          mov     eax,2                                           ;buffer number
  5509                                                          mov     [edx],eax                                       ;store buffer number
  5510                                  
  5511                                  
  5512                                  ;-----------------------------------------------------------------------------------------------------------------------
  5513                                  ;       Decprecated code to read MAC from EEPROM
  5514                                  ;-----------------------------------------------------------------------------------------------------------------------
  5515                                  ;                       add     edx,14h                                         ;EERD register (to read EEPROM)
  5516                                  ;                       xor     eax,eax                                         ;0000 0000 0000 0000 0000 0000 0000 0000
  5517                                  ;                       mov     al,1                                            ;dddd dddd dddd dddd aaaa aaaa 000d 0001
  5518                                  ;                       mov     [edx],eax                                       ;start EEPROM read
  5519                                  ;                       mov     ecx,10000h
  5520                                  ;.51                    mov     eax,[edx]
  5521                                  ;                       test    al,010h
  5522                                  ;                       jnz     .52
  5523                                  ;                       loop    .51
  5524                                  ;                       putConsoleString czEthernetEEPROMReadTimeOut
  5525                                  ;                       jmp     .90
  5526                                  ;.52                    shr     eax,16
  5527                                  ;                       mov     [ebx+ETHER.mac],al
  5528                                  ;                       mov     [ebx+ETHER.mac+1],ah
  5529                                  ;                       xor     eax,eax
  5530                                  ;                       mov     ah,1
  5531                                  ;                       mov     al,1
  5532                                  ;                       mov     [edx],eax
  5533                                  ;                       mov     ecx,10000h
  5534                                  ;.53                    mov     eax,[edx]
  5535                                  ;                       test    al,010h
  5536                                  ;                       jnz     .54
  5537                                  ;                       loop    .53
  5538                                  ;                       putConsoleString czEthernetEEPROMReadTimeOut
  5539                                  ;                       jmp     .90
  5540                                  ;.54                    shr     eax,16
  5541                                  ;                       mov     [ebx+ETHER.mac+2],al
  5542                                  ;                       mov     [ebx+ETHER.mac+3],ah
  5543                                  ;                       xor     eax,eax
  5544                                  ;                       mov     ah,2
  5545                                  ;                       mov     al,1
  5546                                  ;                       mov     [edx],eax                                       ;start EEPROM read register 2
  5547                                  ;                       mov     ecx,10000h                                      ;timeout loop
  5548                                  ;.55                    mov     eax,[edx]                                       ;read EERD register
  5549                                  ;                       test    al,010h                                         ;test DONE bit
  5550                                  ;                       jnz     .56                                             ;branch if done
  5551                                  ;                       loop    .55                                             ;continue
  5552                                  ;                       putConsoleString czEthernetEEPROMReadTimeOut
  5553                                  ;                       jmp     .90
  5554                                  ;.56                    shr     eax,16                                          ;AX = MAC addr bytes 5,6
  5555                                  ;                       mov     [ebx+ETHER.mac+4],al                            ;save byte 5
  5556                                  ;                       mov     [ebx+ETHER.mac+5],ah                            ;save byte 6
  5557                                  ;                       putConsoleString czEthernetEEPROMReadOK
  5558                                  ;.60                    jmp     .90                                             ;branch to return
  5559                                  ;-----------------------------------------------------------------------------------------------------------------------
  5560                                  ;       end of EEPROM code
  5561                                  ;-----------------------------------------------------------------------------------------------------------------------
  5562                                  .990                    pop     edi                                             ;restore non-volatile regs
  5563                                                          pop     esi                                             ;
  5564                                                          pop     ecx                                             ;
  5565                                                          pop     ebx                                             ;
  5566                                                          ret                                                     ;return
  5567                                  ;-----------------------------------------------------------------------------------------------------------------------
  5568                                  ;
  5569                                  ;       Routine:        ConInitEtherContext
  5570                                  ;
  5571                                  ;       Description:    This routine zeros an ETHER structure
  5572                                  ;
  5573                                  ;       In:             DS:EBX  ETHER structure address
  5574                                  ;
  5575                                  ;-----------------------------------------------------------------------------------------------------------------------
  5576                                  ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  5577                                                          push    edi                                             ;
  5578                                                          push    es                                              ;
  5579                                  ;
  5580                                  ;       Zero context.
  5581                                  ;
  5582                                                          push    ds                                              ;load data segment...
  5583                                                          pop     es                                              ;...into extra segment
  5584                                                          mov     edi,ebx                                         ;ETHER structure offset
  5585                                                          mov     ecx,EETHERLEN                                   ;ETHER structure length
  5586                                                          xor     al,al                                           ;zero
  5587                                                          cld                                                     ;forward strings
  5588                                                          rep     stosb                                           ;zero structure members
  5589                                  ;
  5590                                  ;       Restore and return.
  5591                                  ;
  5592                                                          pop     es                                              ;restore non-volatile regs
  5593                                                          pop     edi                                             ;
  5594                                                          pop     ecx                                             ;
  5595                                                          ret                                                     ;return
  5596                                  ;-----------------------------------------------------------------------------------------------------------------------
  5597                                  ;
  5598                                  ;       Routine:        ConTakeToken
  5599                                  ;
  5600                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5601                                  ;
  5602                                  ;       In:             DS:EDX  source buffer address
  5603                                  ;                       DS:EBX  target buffer address
  5604                                  ;
  5605                                  ;       Out:            DS:EDX  source buffer address
  5606                                  ;                       DS:EBX  target buffer address
  5607                                  ;
  5608                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5609                                  ;
  5610                                  ;-----------------------------------------------------------------------------------------------------------------------
  5611                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5612                                                          push    edi                                             ;
  5613                                                          push    es                                              ;
  5614                                                          push    ds                                              ;load data segment selector ...
  5615                                                          pop     es                                              ;... into extra segment reg
  5616                                                          mov     esi,edx                                         ;source buffer address
  5617                                                          mov     edi,ebx                                         ;target buffer address
  5618                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5619                                                          cld                                                     ;forward strings
  5620                                  .10                     lodsb                                                   ;load byte
  5621                                                          cmp     al,EASCIISPACE                                  ;space?
  5622                                                          je      .10                                             ;yes, continue
  5623                                                          test    al,al                                           ;end of line?
  5624                                                          jz      .40                                             ;yes, branch
  5625                                  .20                     stosb                                                   ;store byte
  5626                                                          lodsb                                                   ;load byte
  5627                                                          test    al,al                                           ;end of line?
  5628                                                          jz      .40                                             ;no, continue
  5629                                                          cmp     al,EASCIISPACE                                  ;space?
  5630                                                          jne     .20                                             ;no, continue
  5631                                  .30                     lodsb                                                   ;load byte
  5632                                                          cmp     al,EASCIISPACE                                  ;space?
  5633                                                          je      .30                                             ;yes, continue
  5634                                                          dec     esi                                             ;pre-position
  5635                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5636                                                          mov     edi,edx                                         ;source buffer address
  5637                                  .50                     lodsb                                                   ;remaining byte
  5638                                                          stosb                                                   ;move to front of buffer
  5639                                                          test    al,al                                           ;end of line?
  5640                                                          jnz     .50                                             ;no, continue
  5641                                                          pop     es                                              ;restore non-volatile regs
  5642                                                          pop     edi                                             ;
  5643                                                          pop     esi                                             ;
  5644                                                          ret                                                     ;return
  5645                                  ;-----------------------------------------------------------------------------------------------------------------------
  5646                                  ;
  5647                                  ;       Routine:        ConDetermineCommand
  5648                                  ;
  5649                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5650                                  ;
  5651                                  ;       input:          DS:EDX  command address
  5652                                  ;
  5653                                  ;       output:         EAX     >=0     = command nbr
  5654                                  ;                               0       = unknown command
  5655                                  ;
  5656                                  ;-----------------------------------------------------------------------------------------------------------------------
  5657                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5658                                                          push    ecx                                             ;
  5659                                                          push    esi                                             ;
  5660                                                          push    edi                                             ;
  5661                                  
  5662                                                          upperCaseString                                         ;upper-case string at EDX
  5663                                  
  5664                                                          mov     esi,tConCmdTbl                                  ;commands table
  5665                                                          xor     edi,edi                                         ;intialize command number
  5666                                                          cld                                                     ;forward strings
  5667                                  .10                     lodsb                                                   ;command length
  5668                                                          movzx   ecx,al                                          ;command length
  5669                                                          jecxz   .20                                             ;branch if end of table
  5670                                                          mov     ebx,esi                                         ;table entry address
  5671                                                          add     esi,ecx                                         ;next table entry address
  5672                                  
  5673                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5674                                  
  5675                                                          jecxz   .20                                             ;branch if equal
  5676                                                          inc     edi                                             ;increment command nbr
  5677                                                          jmp     .10                                             ;repeat
  5678                                  .20                     mov     eax,edi                                         ;command number
  5679                                                          pop     edi                                             ;restore non-volatile regs
  5680                                                          pop     esi                                             ;
  5681                                                          pop     ecx                                             ;
  5682                                                          pop     ebx                                             ;
  5683                                                          ret                                                     ;return
  5684                                  ;-----------------------------------------------------------------------------------------------------------------------
  5685                                  ;
  5686                                  ;       Routine:        ConClear
  5687                                  ;
  5688                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5689                                  ;
  5690                                  ;-----------------------------------------------------------------------------------------------------------------------
  5691                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5692                                                          ret                                                     ;return
  5693                                  ;-----------------------------------------------------------------------------------------------------------------------
  5694                                  ;
  5695                                  ;       Routine:        ConDate
  5696                                  ;
  5697                                  ;       Description:    This routine handles the DATE command.
  5698                                  ;
  5699                                  ;-----------------------------------------------------------------------------------------------------------------------
  5700                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5701                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5702                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5703                                                          putConsoleString  czNewLine                             ;write newline to console
  5704                                                          ret                                                     ;return
  5705                                  ;-----------------------------------------------------------------------------------------------------------------------
  5706                                  ;
  5707                                  ;       Routine:        ConDay
  5708                                  ;
  5709                                  ;       Description:    This routine handles the DAY command.
  5710                                  ;
  5711                                  ;-----------------------------------------------------------------------------------------------------------------------
  5712                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5713                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5714                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5715                                                          putConsoleString  czNewLine                             ;write newline to console
  5716                                                          ret                                                     ;return
  5717                                  ;-----------------------------------------------------------------------------------------------------------------------
  5718                                  ;
  5719                                  ;       Routine:        ConExit
  5720                                  ;
  5721                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5722                                  ;
  5723                                  ;-----------------------------------------------------------------------------------------------------------------------
  5724                                  ConExit                 resetSystem                                             ;issue system reset
  5725                                                          ret                                                     ;return
  5726                                  ;-----------------------------------------------------------------------------------------------------------------------
  5727                                  ;
  5728                                  ;       Routine:        ConFree
  5729                                  ;
  5730                                  ;       Description:    This routine handles the FREE command.
  5731                                  ;
  5732                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5733                                  ;
  5734                                  ;-----------------------------------------------------------------------------------------------------------------------
  5735                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5736                                                          push    ecx                                             ;
  5737                                                          push    esi                                             ;
  5738                                                          push    edi                                             ;
  5739                                  ;
  5740                                  ;       Get address parameter
  5741                                  ;
  5742                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5743                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5744                                                          call    ConTakeToken                                    ;take first param as token
  5745                                  ;
  5746                                  ;       Convert input parameter from hexadecimal string to binary
  5747                                  ;
  5748                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5749                                                          je      .10                                             ;no, branch
  5750                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5751                                  
  5752                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5753                                  
  5754                                                          test    eax,eax                                         ;valid parameter?
  5755                                                          jz      .10                                             ;no, branch
  5756                                  ;
  5757                                  ;       Free memory block
  5758                                  ;
  5759                                                          freeMemory eax                                          ;free memory
  5760                                  
  5761                                                          cmp     eax,-1                                          ;memory freed?
  5762                                                          je      .10                                             ;no, branch
  5763                                  ;
  5764                                  ;       Indicate memory freed
  5765                                  ;
  5766                                                          putConsoleString czOK                                   ;indicate success
  5767                                  ;
  5768                                  ;       Restore and return
  5769                                  ;
  5770                                  .10                     pop     edi                                             ;restore non-volatile regs
  5771                                                          pop     esi                                             ;
  5772                                                          pop     ecx                                             ;
  5773                                                          pop     ebx                                             ;
  5774                                                          ret                                                     ;return
  5775                                  ;-----------------------------------------------------------------------------------------------------------------------
  5776                                  ;
  5777                                  ;       Routine:        ConHour
  5778                                  ;
  5779                                  ;       Description:    This routine Handles the HOUR command.
  5780                                  ;
  5781                                  ;-----------------------------------------------------------------------------------------------------------------------
  5782                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5783                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5784                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5785                                                          putConsoleString  czNewLine                             ;write newline to console
  5786                                                          ret                                                     ;return
  5787                                  ;-----------------------------------------------------------------------------------------------------------------------
  5788                                  ;
  5789                                  ;       Routine:        ConInt6
  5790                                  ;
  5791                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5792                                  ;
  5793                                  ;-----------------------------------------------------------------------------------------------------------------------
  5794                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5795                                                          ret                                                     ;return (not executed)
  5796                                  ;-----------------------------------------------------------------------------------------------------------------------
  5797                                  ;
  5798                                  ;       Routine:        ConMalloc
  5799                                  ;
  5800                                  ;       Description:    This routine handles the MALLOC command.
  5801                                  ;
  5802                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5803                                  ;
  5804                                  ;-----------------------------------------------------------------------------------------------------------------------
  5805                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5806                                                          push    ecx                                             ;
  5807                                                          push    esi                                             ;
  5808                                                          push    edi                                             ;
  5809                                  ;
  5810                                  ;       Get size parameter
  5811                                  ;
  5812                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5813                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5814                                                          call    ConTakeToken                                    ;take first param as token
  5815                                  ;
  5816                                  ;       Convert input parameter from decimal string to binary
  5817                                  ;
  5818                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5819                                                          je      .10                                             ;no, branch
  5820                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5821                                  
  5822                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5823                                  
  5824                                                          test    eax,eax                                         ;valid parameter?
  5825                                                          jz      .10                                             ;no, branch
  5826                                  ;
  5827                                  ;       Allocate memory block
  5828                                  ;
  5829                                                          allocateMemory eax                                      ;allocate memory
  5830                                  
  5831                                                          test    eax,eax                                         ;memory allocated?
  5832                                                          jz      .10                                             ;no, branch
  5833                                  ;
  5834                                  ;       Report allocated memory block address
  5835                                  ;
  5836                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5837                                                          mov     ecx,eax                                         ;memory address
  5838                                  
  5839                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5840                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5841                                                          putConsoleString czNewLine                              ;display new line
  5842                                  
  5843                                  .10                     pop     edi                                             ;restore non-volatile regs
  5844                                                          pop     esi                                             ;
  5845                                                          pop     ecx                                             ;
  5846                                                          pop     ebx                                             ;
  5847                                                          ret                                                     ;return
  5848                                  ;-----------------------------------------------------------------------------------------------------------------------
  5849                                  ;
  5850                                  ;       Routine:        ConMem
  5851                                  ;
  5852                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5853                                  ;
  5854                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5855                                  ;
  5856                                  ;-----------------------------------------------------------------------------------------------------------------------
  5857                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5858                                                          push    esi                                             ;
  5859                                                          push    edi                                             ;
  5860                                  ;
  5861                                  ;       Update the source address if a parameter is given.
  5862                                  ;
  5863                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5864                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5865                                                          call    ConTakeToken                                    ;take first param as token
  5866                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5867                                                          je      .10                                             ;no, branch
  5868                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5869                                  
  5870                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5871                                  
  5872                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5873                                  ;
  5874                                  ;       Setup source address and row count.
  5875                                  ;
  5876                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5877                                                          xor     ecx,ecx                                         ;zero register
  5878                                                          mov     cl,16                                           ;row count
  5879                                  ;
  5880                                  ;       Start the row with the source address in hexadecimal.
  5881                                  ;
  5882                                  .20                     push    ecx                                             ;save remaining rows
  5883                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5884                                                          mov     edx,edi                                         ;output buffer address
  5885                                                          mov     ecx,esi                                         ;console memory address
  5886                                  
  5887                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5888                                  
  5889                                                          add     edi,8                                           ;end of memory addr hexnum
  5890                                                          mov     al,' '                                          ;ascii space
  5891                                                          stosb                                                   ;store delimiter
  5892                                  ;
  5893                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5894                                  ;
  5895                                                          xor     ecx,ecx                                         ;zero register
  5896                                                          mov     cl,16                                           ;loop count
  5897                                  .30                     push    ecx                                             ;save loop count
  5898                                                          lodsb                                                   ;memory byte
  5899                                                          mov     ah,al                                           ;memory byte
  5900                                                          shr     al,4                                            ;high-order in bits 3-0
  5901                                                          or      al,30h                                          ;apply ascii numeric zone
  5902                                                          cmp     al,3ah                                          ;numeric range?
  5903                                                          jb      .40                                             ;yes, skip ahead
  5904                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5905                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5906                                                          mov     al,ah                                           ;low-order in bits 3-0
  5907                                                          and     al,0fh                                          ;mask out high-order bits
  5908                                                          or      al,30h                                          ;apply ascii numeric zone
  5909                                                          cmp     al,3ah                                          ;numeric range?
  5910                                                          jb      .50                                             ;yes, skip ahead
  5911                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5912                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5913                                                          mov     al,' '                                          ;ascii space
  5914                                                          stosb                                                   ;store ascii space delimiter
  5915                                                          pop     ecx                                             ;loop count
  5916                                                          loop    .30                                             ;next
  5917                                  ;
  5918                                  ;       Output printable ASCII character section for the row.
  5919                                  ;
  5920                                                          sub     esi,16                                          ;reset source pointer
  5921                                                          mov     cl,16                                           ;loop count
  5922                                  .60                     lodsb                                                   ;source byte
  5923                                                          cmp     al,32                                           ;printable? (low-range test)
  5924                                                          jb      .70                                             ;no, skip ahead
  5925                                                          cmp     al,128                                          ;printable? (high-range test)
  5926                                                          jb      .80                                             ;yes, skip ahead
  5927                                  .70                     mov     al,' '                                          ;display space instead of printable
  5928                                  .80                     stosb                                                   ;store printable ascii byte
  5929                                                          loop    .60                                             ;next source byte
  5930                                                          xor     al,al                                           ;nul-terminator
  5931                                                          stosb                                                   ;terminate output line
  5932                                  ;
  5933                                  ;       Display constructed output buffer and newline.
  5934                                  ;
  5935                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5936                                                          putConsoleString czNewLine                              ;display new line
  5937                                  ;
  5938                                  ;       Repeat until all lines displayed and preserve source address.
  5939                                  ;
  5940                                                          pop     ecx                                             ;remaining rows
  5941                                                          loop    .20                                             ;next row
  5942                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5943                                                          pop     edi                                             ;restore regs
  5944                                                          pop     esi                                             ;
  5945                                                          pop     ebx                                             ;
  5946                                                          ret                                                     ;return
  5947                                  ;-----------------------------------------------------------------------------------------------------------------------
  5948                                  ;
  5949                                  ;       Routine:        ConMinute
  5950                                  ;
  5951                                  ;       Description:    This routine Handles the MINUTE command.
  5952                                  ;
  5953                                  ;-----------------------------------------------------------------------------------------------------------------------
  5954                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5955                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5956                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5957                                                          putConsoleString  czNewLine                             ;write newline to console
  5958                                                          ret                                                     ;return
  5959                                  ;-----------------------------------------------------------------------------------------------------------------------
  5960                                  ;
  5961                                  ;       Routine:        ConMonth
  5962                                  ;
  5963                                  ;       Description:    This routine Handles the MONTH command.
  5964                                  ;
  5965                                  ;-----------------------------------------------------------------------------------------------------------------------
  5966                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5967                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5968                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5969                                                          putConsoleString  czNewLine                             ;write newline to console
  5970                                                          ret                                                     ;return
  5971                                  ;-----------------------------------------------------------------------------------------------------------------------
  5972                                  ;
  5973                                  ;       Routine:        ConMonthName
  5974                                  ;
  5975                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5976                                  ;
  5977                                  ;-----------------------------------------------------------------------------------------------------------------------
  5978                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5979                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5980                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5981                                                          putConsoleString   czNewLine                            ;write newline to console
  5982                                                          ret                                                     ;return
  5983                                  ;-----------------------------------------------------------------------------------------------------------------------
  5984                                  ;
  5985                                  ;       Routine:        ConPCIProbe
  5986                                  ;
  5987                                  ;       Description:    This routine handles the PCIProbe command.
  5988                                  ;
  5989                                  ;-----------------------------------------------------------------------------------------------------------------------
  5990                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5991                                  ;
  5992                                  ;       Initialize variables.
  5993                                  ;       Construct PCI selector.
  5994                                  ;       Read PCI configuration data.
  5995                                  ;
  5996                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5997                                                          call    ConInitPCIContext                               ;initialize PCI struct
  5998                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5999                                                          call    ConReadPCIConfigData                            ;read the configuration data
  6000                                  ;
  6001                                  ;       Interpret PCI data value and display finding.
  6002                                  ;
  6003                                                          cmp     eax,-1                                          ;function defined?
  6004                                                          jne     .20                                             ;yes, branch
  6005                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  6006                                                          je      .40                                             ;yes, skip to next device
  6007                                                          jmp     short .30                                       ;no, skip to next function
  6008                                  ;
  6009                                  ;       Build PCI identifying string.
  6010                                  ;       Write identifying string to console.
  6011                                  ;       Determine the vendor and chip.
  6012                                  ;       Write vendor and chip to console.
  6013                                  ;
  6014                                  .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6015                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6016                                                          call    ConInterpretPCIData                             ;update flags based on data
  6017                                  
  6018                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6019                                                          putConsoleString czSpace                                ;space delimiter
  6020                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6021                                                          putConsoleString czSpace                                ;space delimiter
  6022                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6023                                                          putConsoleString czNewLine                              ;display new line
  6024                                  ;
  6025                                  ;       Next function.
  6026                                  ;
  6027                                  .30                     call    ConNextPCIFunction                              ;next function
  6028                                                          jb      .10                                             ;continue if no overflow
  6029                                  ;
  6030                                  ;       Next device, bus.
  6031                                  ;
  6032                                  .40                     call    ConNextPCIDevice                                ;next device, bus
  6033                                                          jb      .10                                             ;continue if no overflow
  6034                                  ;
  6035                                  ;       Restore and return.
  6036                                  ;
  6037                                                          pop     ebx                                             ;restore non-volatile regs
  6038                                                          ret                                                     ;return
  6039                                  ;-----------------------------------------------------------------------------------------------------------------------
  6040                                  ;
  6041                                  ;       Routine:        ConInitPCIContext
  6042                                  ;
  6043                                  ;       Description:    This routine initializes a PCI structure.
  6044                                  ;
  6045                                  ;       In:             DS:EBX  PCI structure address
  6046                                  ;
  6047                                  ;-----------------------------------------------------------------------------------------------------------------------
  6048                                  ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6049                                                          push    edi                                             ;
  6050                                                          push    es                                              ;
  6051                                  ;
  6052                                  ;       Zero context.
  6053                                  ;
  6054                                                          push    ds                                              ;load data segment...
  6055                                                          pop     es                                              ;...into extra segment
  6056                                                          mov     edi,ebx                                         ;PCI structure offset
  6057                                                          mov     ecx,EPCILEN                                     ;PCI structure length
  6058                                                          xor     al,al                                           ;zero
  6059                                                          cld                                                     ;forward strings
  6060                                                          rep     stosb                                           ;zero structure members
  6061                                  ;
  6062                                  ;       Restore and return.
  6063                                  ;
  6064                                                          pop     es                                              ;restore non-volatile regs
  6065                                                          pop     edi                                             ;
  6066                                                          pop     ecx                                             ;
  6067                                                          ret                                                     ;return
  6068                                  ;-----------------------------------------------------------------------------------------------------------------------
  6069                                  ;
  6070                                  ;       Routine:        ConBuildPCISelector
  6071                                  ;
  6072                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6073                                  ;
  6074                                  ;       In:             DS:EBX  PCI structure address
  6075                                  ;
  6076                                  ;       Out:            EAX     bus, device, function, register selector
  6077                                  ;
  6078                                  ;-----------------------------------------------------------------------------------------------------------------------
  6079                                  ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6080                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6081                                                          shl     dl,3                                            ;DL = dddd d000
  6082                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6083                                                          and     al,007h                                         ;AL = 0000 0fff
  6084                                                          or      al,dl                                           ;AL = dddd dfff
  6085                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6086                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6087                                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6088                                                          or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6089                                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6090                                                          ret                                                     ;return
  6091                                  ;-----------------------------------------------------------------------------------------------------------------------
  6092                                  ;
  6093                                  ;       Routine:        ConReadPCIConfigData
  6094                                  ;
  6095                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6096                                  ;
  6097                                  ;       In:             DS:EBX  PCI structure address
  6098                                  ;
  6099                                  ;       Out:            EAX     config data
  6100                                  ;
  6101                                  ;-----------------------------------------------------------------------------------------------------------------------
  6102                                  ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6103                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6104                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6105                                                          out     dx,eax                                          ;select bus, device, function, reg
  6106                                                          mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6107                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6108                                                          in      eax,dx                                          ;read register
  6109                                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6110                                                          ret                                                     ;return
  6111                                  ;-----------------------------------------------------------------------------------------------------------------------
  6112                                  ;
  6113                                  ;       Routine:        ConBuildPCIIdent
  6114                                  ;
  6115                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  6116                                  ;                       Function code values.
  6117                                  ;
  6118                                  ;       In:             DS:EBX  PCI structure address
  6119                                  ;                       DS:EDX  output buffer address 999.99.9\0
  6120                                  ;
  6121                                  ;-----------------------------------------------------------------------------------------------------------------------
  6122                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  6123                                                          push    es                                              ;
  6124                                  ;
  6125                                  ;       Establish addressability
  6126                                  ;
  6127                                                          push    ds                                              ;load data segment...
  6128                                                          pop     es                                              ;...into extra segment reg
  6129                                  ;
  6130                                  ;       Build identifier string (bus.device.function)
  6131                                  ;
  6132                                                          mov     edi,edx                                         ;output buffer address
  6133                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  6134                                                          xor     ah,ah                                           ;zero high-order dividend
  6135                                                          mov     cl,100                                          ;divisor (10^2)
  6136                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  6137                                                          or      al,30h                                          ;apply ASCII zone
  6138                                                          cld                                                     ;forward strings
  6139                                                          stosb                                                   ;store 100's digit
  6140                                                          mov     al,ah                                           ;bus MOD 100
  6141                                                          xor     ah,ah                                           ;zero high-order dividend
  6142                                                          mov     cl,10                                           ;divisor (10^1)
  6143                                                          div     cl                                              ;AL=10's, AH=1's
  6144                                                          or      ax,3030h                                        ;apply ASCII zone
  6145                                                          stosw                                                   ;store 10's and 1's
  6146                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6147                                                          stosb                                                   ;store delimiter
  6148                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  6149                                                          xor     ah,ah                                           ;zero high order dividend
  6150                                                          mov     cl,10                                           ;divisor (10^1)
  6151                                                          div     cl                                              ;AL=10's, AH=1's
  6152                                                          or      ax,3030h                                        ;apply ASCII zone
  6153                                                          stosw                                                   ;store 10's and 1's
  6154                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6155                                                          stosb                                                   ;store delimiter
  6156                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  6157                                                          or      al,30h                                          ;apply ASCII zone
  6158                                                          stosb                                                   ;store 1's
  6159                                                          xor     al,al                                           ;null terminator
  6160                                                          stosb                                                   ;store terminator
  6161                                  ;
  6162                                  ;       Restore and return.
  6163                                  ;
  6164                                                          pop     es                                              ;restore non-volatile regs
  6165                                                          pop     edi                                             ;
  6166                                                          ret                                                     ;return
  6167                                  ;-----------------------------------------------------------------------------------------------------------------------
  6168                                  ;
  6169                                  ;       Routine:        ConInterpretPCIData
  6170                                  ;
  6171                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6172                                  ;
  6173                                  ;       In:             DS:EBX  PCI structure address
  6174                                  ;
  6175                                  ;-----------------------------------------------------------------------------------------------------------------------
  6176                                  ConInterpretPCIData     mov     eax,czApple
  6177                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  6178                                                          jne     .10                                             ;no, branch
  6179                                                          mov     edx,czUSBController
  6180                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  6181                                                          je      .40                                             ;yes, branch
  6182                                                          mov     edx,czOther                                     ;other
  6183                                                          jmp     .40                                             ;continue
  6184                                  .10                     mov     eax,czIntel                                     ;Intel
  6185                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  6186                                                          jne     .20                                             ;no, branch
  6187                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6188                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  6189                                                          je      .40                                             ;yes, branch
  6190                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  6191                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  6192                                                          je      .40                                             ;yes, branch
  6193                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6194                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  6195                                                          je      .40                                             ;yes, branch
  6196                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6197                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  6198                                                          je      .40                                             ;yes, branch
  6199                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6200                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  6201                                                          je      .40                                             ;yes, branch
  6202                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6203                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  6204                                                          je      .40                                             ;yes, branch
  6205                                                          mov     edx,czOther                                     ;other
  6206                                                          jmp     .40                                             ;continue
  6207                                  .20                     mov     eax,czOracle                                    ;Oracle
  6208                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  6209                                                          jne     .30                                             ;no, branch
  6210                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6211                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  6212                                                          je      .40                                             ;yes, branch
  6213                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6214                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  6215                                                          je      .40                                             ;yes, branch
  6216                                                          mov     edx,czOther                                     ;other
  6217                                                          jmp     .40                                             ;continue
  6218                                  .30                     mov     eax,czOther                                     ;other
  6219                                                          mov     edx,czOther                                     ;other
  6220                                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  6221                                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  6222                                                          ret                                                     ;return
  6223                                  ;-----------------------------------------------------------------------------------------------------------------------
  6224                                  ;
  6225                                  ;       Routine:        ConNextPCIFunction
  6226                                  ;
  6227                                  ;       Description:    This routine increments the function of the device.
  6228                                  ;
  6229                                  ;       In:             DS:EBX  PCI structure address
  6230                                  ;
  6231                                  ;       Out:            CY      0 = overflow
  6232                                  ;                               1 = no overflow, continue
  6233                                  ;
  6234                                  ;-----------------------------------------------------------------------------------------------------------------------
  6235                                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6236                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  6237                                                          jb      .10                                             ;no, continue
  6238                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  6239                                  .10                     ret                                                     ;return
  6240                                  ;-----------------------------------------------------------------------------------------------------------------------
  6241                                  ;
  6242                                  ;       Routine:        ConNextPCIDevice
  6243                                  ;
  6244                                  ;       Description:    This routine increments the device of the PCI across buses.
  6245                                  ;
  6246                                  ;       In:             DS:EBX  PCI structure address
  6247                                  ;
  6248                                  ;       Out:            CY      0 = overflow
  6249                                  ;                               1 = no overflow, continue
  6250                                  ;
  6251                                  ;-----------------------------------------------------------------------------------------------------------------------
  6252                                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6253                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  6254                                                          jb      .10                                             ;no, continue
  6255                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  6256                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  6257                                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6258                                                          jb      .10                                             ;no, continue
  6259                                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6260                                  .10                     ret                                                     ;return
  6261                                  ;-----------------------------------------------------------------------------------------------------------------------
  6262                                  ;
  6263                                  ;       Routine:        ConSecond
  6264                                  ;
  6265                                  ;       Description:    This routine Handles the SECOND command.
  6266                                  ;
  6267                                  ;-----------------------------------------------------------------------------------------------------------------------
  6268                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6269                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6270                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6271                                                          putConsoleString  czNewLine                             ;write newline to console
  6272                                                          ret                                                     ;return
  6273                                  ;-----------------------------------------------------------------------------------------------------------------------
  6274                                  ;
  6275                                  ;       Routine:        ConTime
  6276                                  ;
  6277                                  ;       Description:    This routine Handles the TIME command.
  6278                                  ;
  6279                                  ;-----------------------------------------------------------------------------------------------------------------------
  6280                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6281                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6282                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6283                                                          putConsoleString  czNewLine                             ;write newline to console
  6284                                                          ret                                                     ;return
  6285                                  ;-----------------------------------------------------------------------------------------------------------------------
  6286                                  ;
  6287                                  ;       Routine:        ConVersion
  6288                                  ;
  6289                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6290                                  ;
  6291                                  ;-----------------------------------------------------------------------------------------------------------------------
  6292                                  ConVersion              putConsoleString czTitle                                ;display version message
  6293                                                          ret                                                     ;return
  6294                                  ;-----------------------------------------------------------------------------------------------------------------------
  6295                                  ;
  6296                                  ;       Routine:        ConWeekday
  6297                                  ;
  6298                                  ;       Description:    This routine handles the WEEKDAY command.
  6299                                  ;
  6300                                  ;-----------------------------------------------------------------------------------------------------------------------
  6301                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6302                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6303                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6304                                                          putConsoleString  czNewLine                             ;write newline to console
  6305                                                          ret                                                     ;return
  6306                                  ;-----------------------------------------------------------------------------------------------------------------------
  6307                                  ;
  6308                                  ;       Routine:        ConWeekdayName
  6309                                  ;
  6310                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6311                                  ;
  6312                                  ;-----------------------------------------------------------------------------------------------------------------------
  6313                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6314                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6315                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6316                                                          putConsoleString     czNewLine                                  ;write newline to console
  6317                                                          ret                                                             ;return
  6318                                  ;-----------------------------------------------------------------------------------------------------------------------
  6319                                  ;
  6320                                  ;       Routine:        ConYear
  6321                                  ;
  6322                                  ;       Description:    This routine Handles the YEAR command.
  6323                                  ;
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6326                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6327                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6328                                                          putConsoleString  czNewLine                             ;write newline to console
  6329                                                          ret                                                     ;return
  6330                                  ;-----------------------------------------------------------------------------------------------------------------------
  6331                                  ;
  6332                                  ;       Routine:        ConYearIsLeap
  6333                                  ;
  6334                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6335                                  ;
  6336                                  ;-----------------------------------------------------------------------------------------------------------------------
  6337                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6338                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6339                                  
  6340                                                          jecxz   .10                                             ;branch if not leap
  6341                                  
  6342                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6343                                  
  6344                                                          jmp     .20                                             ;continue
  6345                                  
  6346                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6347                                  .20                     ret                                                     ;return
  6348                                  ;-----------------------------------------------------------------------------------------------------------------------
  6349                                  ;
  6350                                  ;       Tables
  6351                                  ;
  6352                                  ;-----------------------------------------------------------------------------------------------------------------------
  6353                                                                                                                  ;---------------------------------------
  6354                                                                                                                  ;  Command Jump Table
  6355                                                                                                                  ;---------------------------------------
  6356                                  tConJmpTbl              equ     $                                               ;command jump table
  6357                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6358                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6359                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6360                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6361                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6362                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6363                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6364                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6365                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6366                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6367                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6368                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6369                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6370                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6371                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6372                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6373                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6374                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6375                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6376                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6377                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6378                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6379                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6380                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6381                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6382                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6383                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6384                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6385                                                                                                                  ;---------------------------------------
  6386                                                                                                                  ;  Command Name Table
  6387                                                                                                                  ;---------------------------------------
  6388                                  tConCmdTbl              equ     $                                               ;command name table
  6389                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6390                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6391                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6392                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6393                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6394                                                          db      8,"VERSION",0                                   ;version command
  6395                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6396                                                          db      7,"MALLOC",0                                    ;malloc command
  6397                                                          db      7,"MEMORY",0                                    ;memory command
  6398                                                          db      7,"MINUTE",0                                    ;minute command
  6399                                                          db      7,"SECOND",0                                    ;second command
  6400                                                          db      6,"CLEAR",0                                     ;clear command
  6401                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6402                                                          db      6,"MONTH",0                                     ;month command
  6403                                                          db      5,"DATE",0                                      ;date command
  6404                                                          db      5,"EXIT",0                                      ;exit command
  6405                                                          db      5,"FREE",0                                      ;free command
  6406                                                          db      5,"HOUR",0                                      ;hour command
  6407                                                          db      5,"INT6",0                                      ;int6 command
  6408                                                          db      5,"QUIT",0                                      ;quit command
  6409                                                          db      5,"TIME",0                                      ;time command
  6410                                                          db      5,"YEAR",0                                      ;year command
  6411                                                          db      4,"CLS",0                                       ;cls command
  6412                                                          db      4,"DAY",0                                       ;day command
  6413                                                          db      4,"MEM",0                                       ;mem command
  6414                                                          db      4,"VER",0                                       ;ver command
  6415                                                          db      0                                               ;end of table
  6416                                  ;-----------------------------------------------------------------------------------------------------------------------
  6417                                  ;
  6418                                  ;       Constants
  6419                                  ;
  6420                                  ;-----------------------------------------------------------------------------------------------------------------------
  6421                                  czApple                 db      "Apple",0                                       ;vendor name string
  6422                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6423                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6424                                  czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6425                                  czEthernetAddressable   db      "Ethernet adapter addressable",13,10,0          ;adapter is mmio addressable
  6426                                  czEthernetNotAddressable db     "Ethernet adapter not addressable",13,10,0      ;adapter is not mmio addressable
  6427                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6428                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6429                                  czKB                    db      "KB",0                                          ;Kilobytes
  6430                                  czNewLine               db      13,10,0                                         ;new line string
  6431                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6432                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6433                                  czOther                 db      "Other",0                                       ;default name string
  6434                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6435                                  czPeriod                db      ".",0                                           ;period delimiter
  6436                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6437                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6438                                  czPrompt                db      ":",0                                           ;prompt string
  6439                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6440                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6441                                  czSpace                 db      " ",0                                           ;space delimiter
  6442                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6443                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6444                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6445                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6446                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6447                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6448                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6449                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6450                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6451                                  %endif
  6452                                  %ifdef BUILDDISK
  6453                                  ;-----------------------------------------------------------------------------------------------------------------------
  6454                                  ;
  6455                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6456                                  ;
  6457                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6458                                  ;
  6459                                  ;-----------------------------------------------------------------------------------------------------------------------
  6460                                  section                 unused                                                  ;unused disk space
  6461                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6462                                  %endif
  6463                                  ;=======================================================================================================================
  6464                                  ;
  6465                                  ;       End of Program Code
  6466                                  ;
  6467                                  ;=======================================================================================================================
