     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.013
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;                       system for PCI expansion BIOS.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EKEYF...        Keyboard status flags
   169                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   170                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   171                                  ;       EMEM...         Memory Management values
   172                                  ;       EMSG...         Message identifers
   173                                  ;
   174                                  ;=======================================================================================================================
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       Hardware-Defined Values
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;
   182                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   183                                  ;
   184                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   185                                  ;       for CGA, EGA, VGA and compatible video modes.
   186                                  ;
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   189                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   190                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   191                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  ;
   194                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   195                                  ;
   196                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   197                                  ;
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   200                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   201                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   202                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   203                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  ;
   206                                  ;       8042 Keyboard Controller                                                EKEYB...
   207                                  ;
   208                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   209                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   210                                  ;
   211                                  ;-----------------------------------------------------------------------------------------------------------------------
   212                                  EKEYBPORTDATA           equ     060h                                            ;data port
   213                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   214                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   215                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   216                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   217                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   218                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   219                                                                                                                  ;---------------------------------------
   220                                                                                                                  ;       Keyboard Scan Codes
   221                                                                                                                  ;---------------------------------------
   222                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   223                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   224                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   225                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   226                                  EKEYBSLASH              equ     035h                                            ;slash
   227                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   228                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   229                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   230                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   231                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   232                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   233                                  EKEYBUP                 equ     080h                                            ;up
   234                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   235                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   236                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   237                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   238                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   239                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   240                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   241                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   242                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   243                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   244                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   245                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  ;
   248                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   249                                  ;
   250                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   251                                  ;       external devices and signals a hardware interrupt to the CPU.
   252                                  ;
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   255                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   256                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   257                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   258                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  ;
   261                                  ;       8253 Programmable Interval Timer                                        EPIT...
   262                                  ;
   263                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   264                                  ;       approximately 18.2 times per second.
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   271                                  ;
   272                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   273                                  ;
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  ERTCREGPORT             equ     070h                                            ;register select port
   276                                  ERTCDATAPORT            equ     071h                                            ;data port
   277                                  ERTCSECONDREG           equ     000h                                            ;second
   278                                  ERTCMINUTEREG           equ     002h                                            ;minute
   279                                  ERTCHOURREG             equ     004h                                            ;hour
   280                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   281                                  ERTCDAYREG              equ     007h                                            ;day
   282                                  ERTCMONTHREG            equ     008h                                            ;month
   283                                  ERTCYEARREG             equ     009h                                            ;year of the century
   284                                  ERTCSTATUSREG           equ     00bh                                            ;status
   285                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   286                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   287                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   288                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   289                                  ERTCCENTURYREG          equ     032h                                            ;century
   290                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;
   293                                  ;       x86 CPU Architecture                                                    ;EX86...
   294                                  ;
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   300                                  ;
   301                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   302                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   303                                  ;
   304                                  ;       0.......        Segment is not present in memory (triggers int 11)
   305                                  ;       1.......        Segment is present in memory
   306                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   307                                  ;       ...0....        Segment is a system segment
   308                                  ;       ...00010                Local Descriptor Table
   309                                  ;       ...00101                Task Gate
   310                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   311                                  ;       ...01100                Call Gate (386)
   312                                  ;       ...01110                Interrupt Gate (386)
   313                                  ;       ...01111                Trap Gate (386)
   314                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   315                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   316                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   317                                  ;
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   320                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   321                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   322                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   323                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   324                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   325                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   326                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       Firmware-Defined Values
   330                                  ;
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;
   334                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   335                                  ;
   336                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   337                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   341                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   342                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   343                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   344                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   345                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   346                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   347                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   348                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   349                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   350                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       Standards-Based Values
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;
   358                                  ;       ASCII                                                                   EASCII...
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   362                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   363                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   364                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   365                                  EASCIISPACE             equ     020h                                            ;space
   366                                  EASCIIPERIOD            equ     02Eh                                            ;period
   367                                  EASCIIUPPERA            equ     041h                                            ;'A'
   368                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   369                                  EASCIILOWERA            equ     061h                                            ;'a'
   370                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   371                                  EASCIITILDE             equ     07Eh                                            ;'~'
   372                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   373                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   374                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   375                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   376                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   377                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   378                                  EASCIICASE              equ     00100000b                                       ;case bit
   379                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  ;
   382                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   383                                  ;
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   386                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   387                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   388                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   389                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   390                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   391                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   392                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   393                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   394                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   395                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   396                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   397                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   398                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   399                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   400                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   401                                  ;-----------------------------------------------------------------------------------------------------------------------
   402                                  ;
   403                                  ;       Operating System Values
   404                                  ;
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;
   408                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   409                                  ;
   410                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   411                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   412                                  ;
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   415                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   416                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   417                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   418                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   419                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   420                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  ;       Console Constants                                                       ECON...
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ECONCOLS                equ     80                                              ;columns per row
   425                                  ECONROWS                equ     24                                              ;console rows
   426                                  ECONOIAROW              equ     24                                              ;operator information area row
   427                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   428                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   429                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   430                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   431                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   436                                  EGDTCGA                 equ     020h                                            ;cga video selector
   437                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   438                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   439                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   440                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   441                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   442                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;       Keyboard Flags                                                          EKEYF...
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   447                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   448                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   449                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   450                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   451                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   452                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   453                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   454                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   455                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   456                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;       Kernel Constants                                                        EKRN...
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   461                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   462                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   463                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   464                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   465                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   470                                  ;-----------------------------------------------------------------------------------------------------------------------
   471                                  ;       Memory Management Constants                                             EMEM...
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   474                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   475                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   476                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  ;       Message Identifiers                                                     EMSG...
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   481                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   482                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   483                                  ;=======================================================================================================================
   484                                  ;
   485                                  ;       Structures
   486                                  ;
   487                                  ;=======================================================================================================================
   488                                  ;-----------------------------------------------------------------------------------------------------------------------
   489                                  ;
   490                                  ;       DATETIME
   491                                  ;
   492                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   493                                  ;
   494                                  ;-----------------------------------------------------------------------------------------------------------------------
   495                                  struc                   DATETIME
   496 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   497 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   498 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   499 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   500 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   501 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   502 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   503 00000007 <res 00000001>          .century                resb    1                                               ;century
   504                                  EDATETIMELEN            equ     ($-.second)
   505                                  endstruc
   506                                  ;-----------------------------------------------------------------------------------------------------------------------
   507                                  ;
   508                                  ;       MEMBLOCK
   509                                  ;
   510                                  ;       The MEMBLOCK structure defines a memory block.
   511                                  ;
   512                                  ;-----------------------------------------------------------------------------------------------------------------------
   513                                  struc                   MEMBLOCK
   514 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   515 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   516 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   517 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   518 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   519 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   520 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   521 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   522                                  EMEMBLOCKLEN            equ     ($-.signature)
   523                                  endstruc
   524                                  ;-----------------------------------------------------------------------------------------------------------------------
   525                                  ;
   526                                  ;       MEMROOT
   527                                  ;
   528                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   529                                  ;
   530                                  ;-----------------------------------------------------------------------------------------------------------------------
   531                                  struc                   MEMROOT
   532 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   533 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   534 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   535 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   536 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   537 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   538                                  EMEMROOTLEN             equ     ($-.firstcontig)
   539                                  endstruc
   540                                  ;-----------------------------------------------------------------------------------------------------------------------
   541                                  ;
   542                                  ;       MQUEUE
   543                                  ;
   544                                  ;       The MQUEUE structure maps memory used for a message queue.
   545                                  ;
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  struc                   MQUEUE
   548 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   549 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   550 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   551                                  endstruc
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ;
   554                                  ;       PCI
   555                                  ;
   556                                  ;       The PCI structure defines a PCI bus, device and function context.
   557                                  ;
   558                                  ;-----------------------------------------------------------------------------------------------------------------------
   559                                  struc                   PCI
   560 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   561 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   562 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   563 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   564 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   565                                  .configdata             equ     $                                               ;data read from port 0CFCh
   566 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   567 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   568 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   569 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   570                                  EPCILEN                 equ     ($-.configdata)
   571                                  endstruc
   572                                  ;-----------------------------------------------------------------------------------------------------------------------
   573                                  ;
   574                                  ;       OSDATA
   575                                  ;
   576                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   577                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   578                                  ;
   579                                  ;-----------------------------------------------------------------------------------------------------------------------
   580                                  struc                   OSDATA
   581 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   582 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   583 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   584 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   585 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   586 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   587 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   588 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   589 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   590 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   591 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   592 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   593 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   594 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   595 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   596 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   597 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   598 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   599 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   600 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   601 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   602 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   603 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   604 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   605 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   606 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   607 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   608 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   609 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   610 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   611 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   612 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   613 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   614 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   615 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   616 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   617 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   618 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   619 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   620 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   621 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   622 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   623 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   624 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   625 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   626 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   627 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   628 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   629 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   630 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   631 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   632 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   633 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   634 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   635 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   636 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   637 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   638 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   639 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   640 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   641 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   642 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   643 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   644 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   645 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   646 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   647 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   648 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   649 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   650 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   651 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   652 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   653 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   654 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   655 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   656 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   657 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   658 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   659 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   660 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   661 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   662 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   663 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   664 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   665 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   666 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   667 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   668 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   669 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   670 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   671 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   672 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   673 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   674 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   675 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   676 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   677 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   678 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   679 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   680 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   681 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   682                                  ;-----------------------------------------------------------------------------------------------------------------------
   683                                  ;
   684                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   685                                  ;
   686                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   687                                  ;
   688                                  ;-----------------------------------------------------------------------------------------------------------------------
   689                                  ECONDATA                equ     ($)
   690 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   691 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   692 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   693 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   694 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   695 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   696 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   697 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   698 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   699 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   700 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   701 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   702 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   703 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   704 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   705 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   706 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   707 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   708 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   709 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   710 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   711 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   712 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   713 00000931 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   714 0000093A <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   715 00000952 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   716 0000095A <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   717                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   718                                  ;-----------------------------------------------------------------------------------------------------------------------
   719                                  ;
   720                                  ;       End of OS Variables
   721                                  ;
   722                                  ;-----------------------------------------------------------------------------------------------------------------------
   723                                  endstruc
   724                                  ;-----------------------------------------------------------------------------------------------------------------------
   725                                  ;
   726                                  ;       Macros
   727                                  ;
   728                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   729                                  ;
   730                                  ;-----------------------------------------------------------------------------------------------------------------------
   731                                  %macro                  mint    1
   732                                  _%1                     equ     ($-$$) / EX86DESCLEN
   733                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   734                                  %endmacro
   735                                  %macro                  mtrap   1
   736                                  _%1                     equ     ($-$$) / EX86DESCLEN
   737                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   738                                  %endmacro
   739                                  %macro                  menter  1
   740                                  ?%1                     equ     ($-$$)
   741                                  %endmacro
   742                                  %macro                  tsvce   1
   743                                  e%1                     equ     ($-tsvc)/4
   744                                                          dd      %1
   745                                  %endmacro
   746                                  %ifdef BUILDBOOT
   747                                  ;=======================================================================================================================
   748                                  ;
   749                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   750                                  ;
   751                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   752                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   753                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   754                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   755                                  ;
   756                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   757                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   758                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   759                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   760                                  ;       immediately followed by a disk parameter table.
   761                                  ;
   762                                  ;=======================================================================================================================
   763                                                          cpu     8086                                            ;assume minimal CPU
   764                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   765                                                          bits    16                                              ;16-bit code at power-up
   766                                  %ifdef BUILDPREP
   767                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   768                                  %else
   769 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   770                                  %endif
   771                                  ;-----------------------------------------------------------------------------------------------------------------------
   772                                  ;
   773                                  ;       Disk Parameter Table
   774                                  ;
   775                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   776                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   777                                  ;
   778                                  ;-----------------------------------------------------------------------------------------------------------------------
   779 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   780 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   781 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   782 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   783 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   784 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   785 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   786 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   787 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   788                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   789 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   790 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   791 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   792                                  ;
   793                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   794                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   795                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   796                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   797                                  ;       given several possible starting values for CS:IP.
   798                                  ;
   799                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   800 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   801                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   802 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   803 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   804 00000025 B104                                            mov     cl,4                                            ;shift count
   805 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   806 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   807 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   808                                  ;
   809                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   810                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   811                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   812                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   813                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   814                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   815                                  ;
   816 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   817 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   818 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   819 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   820 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   821                                  ;
   822                                  ;       Our boot addressability is now set up according to the following diagram.
   823                                  ;
   824                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   825                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   826                                  ;                               |  256 = 100h bytes                             |
   827                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   828                                  ;                               |  Boot Sector (vstart=0100h)                   |
   829                                  ;                               |  1 sector = 512 = 200h bytes                  |
   830                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   831                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   832                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   833                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   834                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   835                                  ;                               |  2 sectors = 1024 = 400h bytes
   836                                  ;                       009400  +-----------------------------------------------+ DS:1900
   837                                  ;
   838                                  ;       On entry, DL indicates the drive being booted from.
   839                                  ;
   840 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   841                                  ;
   842                                  ;       Compute directory i/o buffer address.
   843                                  ;
   844 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   845 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   846 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   847 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   848                                  ;
   849                                  ;       Compute segment where os.com will be loaded.
   850                                  ;
   851 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   852 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   853 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   854 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   855                                  ;
   856                                  ;       Set the video mode to 80 column, 25 row, text.
   857                                  ;
   858 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   859 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   860                                  ;
   861                                  ;       Write a message to the console so we know we have our addressability established.
   862                                  ;
   863 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   864 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   865                                  ;
   866                                  ;       Initialize the number of directory sectors to search.
   867                                  ;
   868 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   869 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   870                                  ;
   871                                  ;       Compute number of directory sectors and initialize overhead count.
   872                                  ;
   873 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   874 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   875 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   876 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   877                                  ;
   878                                  ;       Compute directory entries per sector.
   879                                  ;
   880 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   881 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   882 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   883                                  ;
   884                                  ;       Compute first logical directory sector and update overhead count.
   885                                  ;
   886 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   887 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   888 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   889 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   890 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   891 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   892                                  ;
   893                                  ;       Read directory sector.
   894                                  ;
   895 0000008E B001                    .30                     mov     al,1                                            ;sector count
   896 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   897 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   898 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   899                                  ;
   900                                  ;       Setup variables to search this directory sector.
   901                                  ;
   902 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   903 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   904 000000A1 7603                                            jna     .40                                             ;no, continue
   905 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   906 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   907 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   908 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   909                                  ;
   910                                  ;       Loop through directory sectors searching for kernel program.
   911                                  ;
   912 000000B1 56                      .50                     push    si                                              ;save kernel name address
   913 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   914 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   915 000000B6 FC                                              cld                                                     ;forward strings
   916 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   917 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   918 000000BA 5E                                              pop     si                                              ;restore kernel name address
   919 000000BB 7418                                            je      .60                                             ;exit loop if found
   920 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   921 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   922 000000C2 75ED                                            jnz     .50                                             ;next entry
   923                                  ;
   924                                  ;       Repeat search if we are not at the end of the directory.
   925                                  ;
   926 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   927 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   928 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   929 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   930 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   931                                  ;
   932                                  ;       If we find the kernel program in the directory, read the FAT.
   933                                  ;
   934 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   935 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   936 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   937 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   938 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   939 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   940                                  ;
   941                                  ;       Get the starting cluster of the kernel program and target address.
   942                                  ;
   943 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   944 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   945                                  ;
   946                                  ;       Read each program cluster into RAM.
   947                                  ;
   948 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   949 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   950 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   951 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   952 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   953 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   954 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   955 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   956 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   957                                  ;
   958                                  ;       Update buffer pointer for next cluster.
   959                                  ;
   960 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   961 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   962 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   963 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   964 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   965                                  ;
   966                                  ;       Compute next cluster number.
   967                                  ;
   968 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   969 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   970 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   971 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   972 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   973 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   974 00000120 83E701                                          and     di,1                                            ;get low bit
   975 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   976 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   977 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   978                                  ;
   979                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   980                                  ;
   981 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   982 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   983 00000130 B104                                            mov     cl,4                                            ;shift count
   984 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   985 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   986 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   987 0000013A 75B2                                            jne     .70                                             ;no, continue
   988                                  ;
   989                                  ;       Transfer control to the operating system program.
   990                                  ;
   991 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   992 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   993 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   994                                  ;
   995                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   996                                  ;
   997 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   998 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   999 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1000 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1001 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1002 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1003 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1004 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1005 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1006 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1007                                  ;
  1008                                  ;       Try maxtries times to read sector.
  1009                                  ;
  1010 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1011 00000160 53                      .10                     push    bx                                              ;save buffer address
  1012 00000161 51                                              push    cx                                              ;save retry count
  1013 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1014 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1015 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1016 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1017 0000016F 59                                              pop     cx                                              ;restore retry count
  1018 00000170 5B                                              pop     bx                                              ;restore buffer address
  1019 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1020 00000173 E2EB                                            loop    .10                                             ;retry
  1021                                  ;
  1022                                  ;       Handle disk error: convert to ASCII and store in error string.
  1023                                  ;
  1024 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1025 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1026 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1027 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1028 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1029 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1030 00000183 7203                                            jb      .20                                             ;continue if numeral
  1031 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1032 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1033 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1034 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1035 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1036 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1037 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1038                                  ;
  1039                                  ;       Wait for a key press.
  1040                                  ;
  1041 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1042 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1043 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1044 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1045 0000019F F4                                              hlt                                                     ;wait for interrupt
  1046 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1047                                  ;
  1048                                  ;       Reset the system.
  1049                                  ;
  1050 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1051 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1052 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1053 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1054 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1055                                  ;
  1056                                  ;       Display text message.
  1057                                  ;
  1058 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1059 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1060 000001AC 84C0                                            test    al,al                                           ;end of string?
  1061 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1062 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1063 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1064 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1065 000001B6 C3                      BootReturn              ret                                                     ;return
  1066                                  ;-----------------------------------------------------------------------------------------------------------------------
  1067                                  ;
  1068                                  ;       Constants
  1069                                  ;
  1070                                  ;-----------------------------------------------------------------------------------------------------------------------
  1071 000001B7 90                                              align   2
  1072 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1073 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1073 000001C3 4F4D               
  1074 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1074 000001CE 530D0A00           
  1075 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1075 000001DB 7220               
  1076 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1077 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1077 000001E9 6700               
  1078                                  ;-----------------------------------------------------------------------------------------------------------------------
  1079                                  ;
  1080                                  ;       Work Areas
  1081                                  ;
  1082                                  ;-----------------------------------------------------------------------------------------------------------------------
  1083 000001EB 90                                              align   2
  1084 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1085 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1086 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1087 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1088 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1089                                  wwReadCountCommand      equ     $                                               ;read count and command
  1090 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1091 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1092                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1093 000001F8 00                      wbDrive                 db      0                                               ;drive
  1094 000001F9 00                      wbHead                  db      0                                               ;head
  1095                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1096 000001FA 00                                              db      0                                               ;sector
  1097 000001FB 00                      wbTrack                 db      0                                               ;track
  1098 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1099 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1100                                  %endif
  1101                                  %ifdef BUILDPREP
  1102                                  ;=======================================================================================================================
  1103                                  ;
  1104                                  ;       Diskette Preparation Code
  1105                                  ;
  1106                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1107                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1108                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1109                                  ;
  1110                                  ;=======================================================================================================================
  1111                                  ;
  1112                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1113                                  ;
  1114                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1115                                                          call    BootPrint                                       ;display message
  1116                                  ;
  1117                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1118                                  ;
  1119                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1120                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1121                                                          jnz     .20                                             ;continue if key pressed
  1122                                                          sti                                                     ;enable interrupts
  1123                                                          hlt                                                     ;wait for interrupt
  1124                                                          jmp     .10                                             ;repeat
  1125                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1126                                                          je      .30                                             ;yes, branch
  1127                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1128                                                          jne     .10                                             ;no, repeat
  1129                                                          jmp     .120                                            ;yes, exit program
  1130                                  ;
  1131                                  ;       Display writing-sector message and patch the JMP instruction.
  1132                                  ;
  1133                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1134                                                          call    BootPrint                                       ;display message
  1135                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1136                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1137                                                          mov     [bx],ax                                         ;update the JMP instruction
  1138                                  ;
  1139                                  ;       Try to read the boot sector.
  1140                                  ;
  1141                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1142                                  .40                     push    cx                                              ;save remaining tries
  1143                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1144                                                          mov     dx,0                                            ;head zero, drive zero
  1145                                                          mov     cx,1                                            ;track zero, sector one
  1146                                                          mov     al,1                                            ;one sector
  1147                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1148                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1149                                                          pop     cx                                              ;restore remaining retries
  1150                                                          jnc     .50                                             ;skip ahead if successful
  1151                                                          loop    .40                                             ;try again
  1152                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1153                                                          jmp     .70                                             ;branch to error routine
  1154                                  ;
  1155                                  ;       Copy diskette parms from input buffer to output buffer.
  1156                                  ;
  1157                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1158                                                          add     si,11                                           ;skip over JMP and system ID
  1159                                                          mov     di,Boot                                         ;output buffer address
  1160                                                          add     di,11                                           ;skip over JMP and system ID
  1161                                                          mov     cx,19                                           ;length of diskette parameters
  1162                                                          cld                                                     ;forward string copies
  1163                                                          rep     movsb                                           ;copy diskette parameters
  1164                                  ;
  1165                                  ;       Try to write boot sector to diskette.
  1166                                  ;
  1167                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1168                                  .60                     push    cx                                              ;save remaining tries
  1169                                                          mov     bx,Boot                                         ;output buffer address
  1170                                                          mov     dx,0                                            ;head zero, drive zero
  1171                                                          mov     cx,1                                            ;track zero, sector one
  1172                                                          mov     al,1                                            ;one sector
  1173                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1174                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1175                                                          pop     cx                                              ;restore remaining retries
  1176                                                          jnc     .100                                            ;skip ahead if successful
  1177                                                          loop    .60                                             ;try again
  1178                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1179                                  ;
  1180                                  ;       Convert the error code to ASCII and display the error message.
  1181                                  ;
  1182                                  .70                     push    ax                                              ;save error code
  1183                                                          mov     al,ah                                           ;copy error code
  1184                                                          mov     ah,0                                            ;AX = error code
  1185                                                          mov     dl,10h                                          ;hexadecimal divisor
  1186                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1187                                                          or      ax,03030h                                       ;add ASCII zone digits
  1188                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1189                                                          jb      .80                                             ;yes, continue
  1190                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1191                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1192                                                          jb      .90                                             ;yes, continue
  1193                                                          add     al,7                                            ;no, make ASCII
  1194                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1195                                                          call    BootPrint                                       ;write error message
  1196                                                          pop     ax                                              ;restore error code
  1197                                  ;
  1198                                  ;       Display the completion message.
  1199                                  ;
  1200                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1201                                                          mov     al,ah                                           ;BIOS return code
  1202                                                          cmp     al,0                                            ;success?
  1203                                                          je      .110                                            ;yes, continue
  1204                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1205                                                          cmp     al,1                                            ;disk parameter error?
  1206                                                          je      .110                                            ;yes, continue
  1207                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1208                                                          cmp     al,2                                            ;address mark not found?
  1209                                                          je      .110                                            ;yes, continue
  1210                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1211                                                          cmp     al,3                                            ;protected disk?
  1212                                                          je      .110                                            ;yes, continue
  1213                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1214                                                          cmp     al,6                                            ;diskette removed?
  1215                                                          je      .110                                            ;yes, continue
  1216                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1217                                                          cmp     al,80H                                          ;drive timed out?
  1218                                                          je      .110                                            ;yes, continue
  1219                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1220                                  .110                    call    BootPrint                                       ;display result message
  1221                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1222                                                          int     021h                                            ;terminate DOS program
  1223                                                          ret                                                     ;return (should not execute)
  1224                                  ;-----------------------------------------------------------------------------------------------------------------------
  1225                                  ;
  1226                                  ;       Diskette Preparation Messages
  1227                                  ;
  1228                                  ;-----------------------------------------------------------------------------------------------------------------------
  1229                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1230                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1231                                                          db      13,10
  1232                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1233                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1234                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1235                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1236                                                          db      13,10,0
  1237                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1238                                                          db      13,10,0
  1239                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1240                                                          db      13,10,0
  1241                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1242                                                          db      13,10,0
  1243                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1244                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1245                                                          db      13,10,0
  1246                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1247                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1248                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1249                                                          db      13,10,"and retry."
  1250                                                          db      13,10,0
  1251                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1252                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1253                                                          db      13,10,"using another diskette."
  1254                                                          db      13,10,0
  1255                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1256                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1257                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1258                                                          db      13,10,0
  1259                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1260                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1261                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1262                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1263                                                          db      13,10,"is properly inserted in the diskette drive."
  1264                                                          db      13,10,0
  1265                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1266                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1267                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1268                                                          db      13,10,0
  1269                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1270                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1271                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1272                                                          db      13,10,0
  1273                                  wcPrepInBuf             equ     $
  1274                                  %endif
  1275                                  %ifdef BUILDDISK
  1276                                  ;=======================================================================================================================
  1277                                  ;
  1278                                  ;       File Allocation Tables
  1279                                  ;
  1280                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1281                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1282                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1283                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1284                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1285                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1286                                  ;       the last cluster in the chain.
  1287                                  ;
  1288                                  ;       Every three bytes encode two FAT entries as follows:
  1289                                  ;
  1290                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1291                                  ;
  1292                                  ;=======================================================================================================================
  1293                                  ;-----------------------------------------------------------------------------------------------------------------------
  1294                                  ;
  1295                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1296                                  ;
  1297                                  ;-----------------------------------------------------------------------------------------------------------------------
  1298                                  section                 fat1                                                    ;first copy of FAT
  1299                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1300                                                          db      005h,060h,000h, 007h,080h,000h
  1301                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1302                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1303                                                          db      011h,020h,001h, 013h,040h,001h
  1304                                                          db      015h,060h,001h, 017h,080h,001h
  1305                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1306                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1307                                                          db      021h,020h,002h, 023h,040h,002h
  1308                                                          db      025h,060h,002h, 027h,080h,002h
  1309                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1310                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1311                                  ;-----------------------------------------------------------------------------------------------------------------------
  1312                                  ;
  1313                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1314                                  ;
  1315                                  ;-----------------------------------------------------------------------------------------------------------------------
  1316                                  section                 fat2                                                    ;second copy of FAT
  1317                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1318                                                          db      005h,060h,000h, 007h,080h,000h
  1319                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1320                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1321                                                          db      011h,020h,001h, 013h,040h,001h
  1322                                                          db      015h,060h,001h, 017h,080h,001h
  1323                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1324                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1325                                                          db      021h,020h,002h, 023h,040h,002h
  1326                                                          db      025h,060h,002h, 027h,080h,002h
  1327                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1328                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330                                  ;
  1331                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1332                                  ;
  1333                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1334                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1335                                  ;       copy.
  1336                                  ;
  1337                                  ;-----------------------------------------------------------------------------------------------------------------------
  1338                                  section                 dir                                                     ;diskette directory
  1339                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1340                                                          db      020h                                            ;attribute (archive bit set)
  1341                                                          times   10 db 0                                         ;unused
  1342                                                          dw      0h                                              ;time
  1343                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1344                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1345                                                          dw      2                                               ;first cluster
  1346                                                          dd      05400h                                          ;file size
  1347                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1348                                  %endif
  1349                                  %ifdef BUILDCOM
  1350                                  ;=======================================================================================================================
  1351                                  ;
  1352                                  ;       OS.COM
  1353                                  ;
  1354                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1355                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1356                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1357                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1358                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1359                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1360                                  ;
  1361                                  ;       Our loader addressability is set up according to the following diagram.
  1362                                  ;
  1363                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1364                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1365                                  ;                               |  256 = 100h bytes                             |
  1366                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1367                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1368                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1369                                  ;                       007e00  +-----------------------------------------------+
  1370                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1371                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1372                                  ;                               |                                               |
  1373                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1374                                  ;                               |                                               |
  1375                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1376                                  ;                               |  Loader Code                                  |
  1377                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1378                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1379                                  ;
  1380                                  ;=======================================================================================================================
  1381                                  ;-----------------------------------------------------------------------------------------------------------------------
  1382                                  ;
  1383                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1384                                  ;
  1385                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1386                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1387                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1388                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1389                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1390                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1391                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1392                                  ;       registers.
  1393                                  ;
  1394                                  ;-----------------------------------------------------------------------------------------------------------------------
  1395                                                          cpu     8086                                            ;assume minimal CPU
  1396                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1397                                                          bits    16                                              ;this is 16-bit code
  1398                                  Loader                  push    cs                                              ;use the code segment
  1399                                                          pop     ds                                              ;...as our data segment
  1400                                                          push    cs                                              ;use the code segment
  1401                                                          pop     es                                              ;...as our extra segment
  1402                                  ;
  1403                                  ;       Write a message to the console so we know we have our addressability established.
  1404                                  ;
  1405                                                          mov     si,czStartingMsg                                ;starting message
  1406                                                          call    PutTTYString                                    ;display loader message
  1407                                  ;
  1408                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1409                                  ;
  1410                                                          call    GetCPUType                                      ;AL = cpu type
  1411                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1412                                                          cmp     al,3                                            ;80386+?
  1413                                                          jb      LoaderExit                                      ;no, exit with error message
  1414                                                          cpu     386                                             ;allow 80386 instructions
  1415                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1416                                                          call    PutTTYString                                    ;display message
  1417                                  ;
  1418                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1419                                  ;
  1420                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1421                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1422                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1423                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1424                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1425                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1426                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1427                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1428                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1429                                                          call    PutTTYString                                    ;display message
  1430                                  ;
  1431                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1432                                  ;
  1433                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1434                                                          pop     es                                              ;... as target segment
  1435                                                          xor     di,di                                           ;ES:DI = target address
  1436                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1437                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1438                                                          cld                                                     ;forward strings
  1439                                                          rep     movsb                                           ;copy kernel image
  1440                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1441                                                          call    PutTTYString                                    ;display message
  1442                                  ;
  1443                                  ;       Switch to protected mode.
  1444                                  ;
  1445                                                          xor     si,si                                           ;ES:SI = gdt addr
  1446                                                          mov     ss,si                                           ;protected mode ss
  1447                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1448                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1449                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1450                                                          mov     dx,001Fh                                        ;outer delay loop count
  1451                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1452                                                          loop    $                                               ;wait out pending interrupts
  1453                                                          dec     dx                                              ;restore outer loop count
  1454                                                          jnz     .10                                             ;continue outer loop
  1455                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1456                                  ;
  1457                                  ;       Enable hardware and maskable interrupts.
  1458                                  ;
  1459                                                          xor     al,al                                           ;enable all registers code
  1460                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1461                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1462                                                          sti                                                     ;enable maskable interrupts
  1463                                  ;
  1464                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1465                                  ;
  1466                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1467                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1468                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1469                                  ;-----------------------------------------------------------------------------------------------------------------------
  1470                                  ;
  1471                                  ;       Routine:        LoaderExit
  1472                                  ;
  1473                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1474                                  ;
  1475                                  ;       In:             DS:SI   string address
  1476                                  ;
  1477                                  ;-----------------------------------------------------------------------------------------------------------------------
  1478                                  LoaderExit              call    PutTTYString                                    ;display error message
  1479                                  ;
  1480                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1481                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1482                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1483                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1484                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1485                                  ;
  1486                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1487                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1488                                                          jnz     .40                                             ;exit if key pressed
  1489                                                          sti                                                     ;enable maskable interrupts
  1490                                                          hlt                                                     ;wait for interrupt
  1491                                                          jmp     .30                                             ;repeat until keypress
  1492                                  ;
  1493                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1494                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1495                                  ;       HLT until the system resets.
  1496                                  ;
  1497                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1498                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1499                                  .50                     sti                                                     ;enable maskable interrupts
  1500                                                          hlt                                                     ;stop until reset, int, nmi
  1501                                                          jmp     .50                                             ;loop until restart kicks in
  1502                                  ;-----------------------------------------------------------------------------------------------------------------------
  1503                                  ;
  1504                                  ;       Routine:        GetCPUType
  1505                                  ;
  1506                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1507                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1508                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1509                                  ;
  1510                                  ;       Out:            AX      0 = 808x, v20, etc.
  1511                                  ;                               1 = 80186
  1512                                  ;                               2 = 80286
  1513                                  ;                               3 = 80386
  1514                                  ;
  1515                                  ;-----------------------------------------------------------------------------------------------------------------------
  1516                                  GetCPUType              mov     al,1                                            ;AL = 1
  1517                                                          mov     cl,32                                           ;shift count
  1518                                                          shr     al,cl                                           ;try a 32-bit shift
  1519                                                          or      al,al                                           ;did the shift happen?
  1520                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1521                                                          cpu     186
  1522                                                          push    sp                                              ;save stack pointer
  1523                                                          pop     cx                                              ;...into cx
  1524                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1525                                                          jne     .10                                             ;yes, cpu is 80186
  1526                                                          cpu     286
  1527                                                          inc     ax                                              ;AX = 2
  1528                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1529                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1530                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1531                                                          jz      .10                                             ;yes, cpu is 80286
  1532                                                          inc     ax                                              ;AX = 3
  1533                                  .10                     ret                                                     ;return
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  ;
  1536                                  ;       Routine:        PutTTYString
  1537                                  ;
  1538                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1539                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1540                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1541                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1542                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1543                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1544                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1545                                  ;                       to LODSB is not needed.
  1546                                  ;
  1547                                  ;       In:             DS:SI   address of string
  1548                                  ;
  1549                                  ;       Out:            DF      0
  1550                                  ;                       ZF      1
  1551                                  ;                       AL      0
  1552                                  ;
  1553                                  ;-----------------------------------------------------------------------------------------------------------------------
  1554                                  PutTTYString            cld                                                     ;forward strings
  1555                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1556                                                          test    al,al                                           ;end of string?
  1557                                                          jz      .20                                             ;... yes, exit our loop
  1558                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1559                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1560                                                          jmp     .10                                             ;repeat until done
  1561                                  .20                     ret                                                     ;return
  1562                                  ;-----------------------------------------------------------------------------------------------------------------------
  1563                                  ;
  1564                                  ;       Loader Data
  1565                                  ;
  1566                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1567                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1568                                  ;
  1569                                  ;-----------------------------------------------------------------------------------------------------------------------
  1570                                                          align   2
  1571                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1572                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1573                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1574                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1575                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1576                                                          db      "Please press any key to restart the computer.",13,10,0
  1577                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1578                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1579                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1580                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1581                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1582                                  ;=======================================================================================================================
  1583                                  ;
  1584                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1585                                  ;
  1586                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1587                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1588                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1589                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1590                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1591                                  ;
  1592                                  ;=======================================================================================================================
  1593                                  ;=======================================================================================================================
  1594                                  ;
  1595                                  ;       Kernel Tables
  1596                                  ;
  1597                                  ;=======================================================================================================================
  1598                                  ;-----------------------------------------------------------------------------------------------------------------------
  1599                                  ;
  1600                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1601                                  ;
  1602                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1603                                  ;       first descriptor must be all nulls.
  1604                                  ;
  1605                                  ;       6   5         4         3         2         1         0
  1606                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1607                                  ;       ----------------------------------------------------------------
  1608                                  ;       h......hffffmmmma......ab......................bn..............n
  1609                                  ;
  1610                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1611                                  ;               ffff                                                            flags
  1612                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1613                                  ;                       a......a                                                access
  1614                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1615                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1616                                  ;
  1617                                  ;       00000000                                                                all areas have base addresses below 2^24
  1618                                  ;               0...                                                            single-byte size granularity
  1619                                  ;               1...                                                            4-kilobyte size granularity
  1620                                  ;               .0..                                                            16-bit default for code segments
  1621                                  ;               .1..                                                            32-bit default for code segments
  1622                                  ;               ..0.                                                            intel-reserved; should be zero
  1623                                  ;               ...0                                                            available for operating system use
  1624                                  ;                   0000                                                        segment is less than 2^16 in size
  1625                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1626                                  ;                       1.......                                                segment is present in memory
  1627                                  ;                       .00.....                                                segment is of privilege level 0
  1628                                  ;                       ...0....                                                segment is of system or gate type
  1629                                  ;                       ...00010                                                local decriptor table (LDT)
  1630                                  ;                       ...01001                                                task state segment (TSS) available
  1631                                  ;                       ...01011                                                task state segment (TSS) busy
  1632                                  ;                       ...10...                                                data segment
  1633                                  ;                       ...10011                                                writable data (accessed)
  1634                                  ;                       ...11...                                                code segment
  1635                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1636                                  ;
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  section                 gdt                                                     ;global descriptor table
  1639                                                          dq      0000000000000000h                               ;00 required null selector
  1640                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1641                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1642                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1643                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1644                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1645                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1646                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1647                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1648                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1649                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1650                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1651                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1652                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1653                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1657                                  ;
  1658                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1659                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1660                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1661                                  ;
  1662                                  ;       6   5         4         3         2         1         0
  1663                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1664                                  ;       ----------------------------------------------------------------
  1665                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1666                                  ;
  1667                                  ;       h...h   high-order offset (bits 16-31)
  1668                                  ;       P       present (0=unused interrupt)
  1669                                  ;       zz      descriptor privilege level
  1670                                  ;       S       storage segment (must be zero for IDT)
  1671                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1672                                  ;       S...S   handling code selector in GDT
  1673                                  ;       l...l   lo-order offset (bits 0-15)
  1674                                  ;
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                  section                 idt                                                     ;interrupt descriptor table
  1677                                                          mint    dividebyzero                                    ;00 divide by zero
  1678                                                          mint    singlestep                                      ;01 single step
  1679                                                          mint    nmi                                             ;02 non-maskable
  1680                                                          mint    break                                           ;03 break
  1681                                                          mint    into                                            ;04 into
  1682                                                          mint    bounds                                          ;05 bounds
  1683                                                          mint    badopcode                                       ;06 bad op code
  1684                                                          mint    nocoproc                                        ;07 no coprocessor
  1685                                                          mint    doublefault                                     ;08 double-fault
  1686                                                          mint    operand                                         ;09 operand
  1687                                                          mint    badtss                                          ;0a bad TSS
  1688                                                          mint    notpresent                                      ;0b not-present
  1689                                                          mint    stacklimit                                      ;0c stack limit
  1690                                                          mint    protection                                      ;0d general protection fault
  1691                                                          mint    int14                                           ;0e (reserved)
  1692                                                          mint    int15                                           ;0f (reserved)
  1693                                                          mint    coproccalc                                      ;10 (reserved)
  1694                                                          mint    int17                                           ;11 (reserved)
  1695                                                          mint    int18                                           ;12 (reserved)
  1696                                                          mint    int19                                           ;13 (reserved)
  1697                                                          mint    int20                                           ;14 (reserved)
  1698                                                          mint    int21                                           ;15 (reserved)
  1699                                                          mint    int22                                           ;16 (reserved)
  1700                                                          mint    int23                                           ;17 (reserved)
  1701                                                          mint    int24                                           ;18 (reserved)
  1702                                                          mint    int25                                           ;19 (reserved)
  1703                                                          mint    int26                                           ;1a (reserved)
  1704                                                          mint    int27                                           ;1b (reserved)
  1705                                                          mint    int28                                           ;1c (reserved)
  1706                                                          mint    int29                                           ;1d (reserved)
  1707                                                          mint    int30                                           ;1e (reserved)
  1708                                                          mint    int31                                           ;1f (reserved)
  1709                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1710                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1711                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1712                                                          mtrap   com2                                            ;23 IRQ3 com2
  1713                                                          mtrap   com1                                            ;24 IRQ4 com1
  1714                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1715                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1716                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1717                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1718                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1719                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1720                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1721                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1722                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1723                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1724                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1725                                                          mtrap   svc                                             ;30 OS services
  1726                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1727                                  ;=======================================================================================================================
  1728                                  ;
  1729                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1730                                  ;
  1731                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1732                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1733                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1734                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1735                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1736                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1737                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1738                                  ;
  1739                                  ;=======================================================================================================================
  1740                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1741                                                          cpu     386                                             ;allow 80386 instructions
  1742                                                          bits    32                                              ;this is 32-bit code
  1743                                  ;=======================================================================================================================
  1744                                  ;
  1745                                  ;       CPU Interrupt Handlers
  1746                                  ;
  1747                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1748                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1749                                  ;
  1750                                  ;=======================================================================================================================
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT0    Divide By Zero
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  dividebyzero                                    ;divide by zero
  1757                                                          push    0                                               ;store interrupt nbr
  1758                                                          push    czIntDivideByZero                               ;store message offset
  1759                                                          jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT1    Single Step
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  singlestep                                      ;single step
  1766                                                          push    1                                               ;store interrupt nbr
  1767                                                          push    czIntSingleStep                                 ;store message offset
  1768                                                          jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT2    Non-Maskable Interrupt
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  nmi                                             ;non-maskable
  1775                                                          push    2                                               ;store interrupt nbr
  1776                                                          push    czIntNonMaskable                                ;store message offset
  1777                                                          jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT3    Break
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  break                                           ;break
  1784                                                          push    3                                               ;store interrupt nbr
  1785                                                          push    czIntBreak                                      ;store message offset
  1786                                                          jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT4    Into
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  into                                            ;into
  1793                                                          push    4                                               ;store interrupt nbr
  1794                                                          push    czIntInto                                       ;store message offset
  1795                                                          jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT5    Bounds
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  bounds                                          ;bounds
  1802                                                          push    5                                               ;store interrupt nbr
  1803                                                          push    czIntBounds                                     ;store message offset
  1804                                                          jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT6    Bad Operation Code
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  badopcode                                       ;bad opcode interrupt
  1811                                                          push    6                                               ;store interrupt nbr
  1812                                                          push    czIntBadOpCode                                  ;store message offset
  1813                                                          jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT7    No Coprocessor
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1820                                                          push    7                                               ;store interrupt nbr
  1821                                                          push    czIntNoCoprocessor                              ;store message offset
  1822                                                          jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT8    Double Fault
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  doublefault                                     ;doublefault interrupt
  1829                                                          push    8                                               ;store interrupt nbr
  1830                                                          push    czIntDoubleFault                                ;store message offset
  1831                                                          jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT9    Operand
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  operand                                         ;operand interrupt
  1838                                                          push    9                                               ;store interrupt nbr
  1839                                                          push    czIntOperand                                    ;store message offset
  1840                                                          jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT10   Bad Task State Segment
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  badtss                                          ;bad TSS interrupt
  1847                                                          push    10                                              ;store interrupt nbr
  1848                                                          push    czIntBadTSS                                     ;store message offset
  1849                                                          jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT11   Not Present
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  notpresent                                      ;not present interrupt
  1856                                                          push    11                                              ;store interrupt nbr
  1857                                                          push    czIntNotPresent                                 ;store message offset
  1858                                                          jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT12   Stack Limit
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  stacklimit                                      ;stack limit interrupt
  1865                                                          push    12                                              ;store interrupt nbr
  1866                                                          push    czIntStackLimit                                 ;store message offset
  1867                                                          jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       INT13   General Protection Fault
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                                          menter  protection                                      ;protection fault interrupt
  1874                                                          push    13                                              ;store interrupt nbr
  1875                                                          push    czIntProtection                                 ;store message offset
  1876                                                          jmp     ReportInterrupt                                 ;report interrupt
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;       INT14   Reserved
  1880                                  ;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                                          menter  int14                                           ;(reserved)
  1883                                                          push    14                                              ;store interrupt nbr
  1884                                                          push    czIntReserved                                   ;store message offset
  1885                                                          jmp     ReportInterrupt                                 ;report interrupt
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       INT15   Reserved
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  int15                                           ;(reserved)
  1892                                                          push    15                                              ;store interrupt nbr
  1893                                                          push    czIntReserved                                   ;store message offset
  1894                                                          jmp     ReportInterrupt                                 ;report interrupt
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;       INT16   Coprocessor Calculation
  1898                                  ;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                                          menter  coproccalc                                      ;coprocessor calculation
  1901                                                          push    16                                              ;store interrupt nbr
  1902                                                          push    czIntCoprocessorCalc                            ;store message offset
  1903                                                          jmp     ReportInterrupt                                 ;report interrupt
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;       INT17   Reserved
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                                          menter  int17                                           ;(reserved)
  1910                                                          push    17                                              ;store interrupt nbr
  1911                                                          push    czIntReserved                                   ;store message offset
  1912                                                          jmp     ReportInterrupt                                 ;report interrupt
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       INT18   Reserved
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                                          menter  int18                                           ;(reserved)
  1919                                                          push    18                                              ;store interrupt nbr
  1920                                                          push    czIntReserved                                   ;store message offset
  1921                                                          jmp     ReportInterrupt                                 ;report interrupt
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                  ;
  1924                                  ;       INT19   Reserved
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                                          menter  int19                                           ;(reserved)
  1928                                                          push    19                                              ;store interrupt nbr
  1929                                                          push    czIntReserved                                   ;store message offset
  1930                                                          jmp     ReportInterrupt                                 ;report interrupt
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                  ;
  1933                                  ;       INT20   Reserved
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                                          menter  int20                                           ;(reserved)
  1937                                                          push    20                                              ;store interrupt nbr
  1938                                                          push    czIntReserved                                   ;store message offset
  1939                                                          jmp     ReportInterrupt                                 ;report interrupt
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                  ;
  1942                                  ;       INT21   Reserved
  1943                                  ;
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                                          menter  int21                                           ;(reserved)
  1946                                                          push    21                                              ;store interrupt nbr
  1947                                                          push    czIntReserved                                   ;store message offset
  1948                                                          jmp     ReportInterrupt                                 ;report interrupt
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                  ;
  1951                                  ;       INT22   Reserved
  1952                                  ;
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                                          menter  int22                                           ;(reserved)
  1955                                                          push    22                                              ;store interrupt nbr
  1956                                                          push    czIntReserved                                   ;store message offset
  1957                                                          jmp     ReportInterrupt                                 ;report interrupt
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                  ;
  1960                                  ;       INT23   Reserved
  1961                                  ;
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                                          menter  int23                                           ;(reserved)
  1964                                                          push    23                                              ;store interrupt nbr
  1965                                                          push    czIntReserved                                   ;store message offset
  1966                                                          jmp     ReportInterrupt                                 ;report interrupt
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  ;
  1969                                  ;       INT24   Reserved
  1970                                  ;
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                                          menter  int24                                           ;(reserved)
  1973                                                          push    24                                              ;store interrupt nbr
  1974                                                          push    czIntReserved                                   ;store message offset
  1975                                                          jmp     ReportInterrupt                                 ;report interrupt
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                  ;
  1978                                  ;       INT25   Reserved
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                                          menter  int25                                           ;(reserved)
  1982                                                          push    25                                              ;store interrupt nbr
  1983                                                          push    czIntReserved                                   ;store message offset
  1984                                                          jmp     ReportInterrupt                                 ;report interrupt
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                  ;
  1987                                  ;       INT26   Reserved
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                                          menter  int26                                           ;(reserved)
  1991                                                          push    26                                              ;store interrupt nbr
  1992                                                          push    czIntReserved                                   ;store message offset
  1993                                                          jmp     ReportInterrupt                                 ;report interrupt
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                  ;
  1996                                  ;       INT27   Reserved
  1997                                  ;
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                                          menter  int27                                           ;(reserved)
  2000                                                          push    27                                              ;store interrupt nbr
  2001                                                          push    czIntReserved                                   ;store message offset
  2002                                                          jmp     ReportInterrupt                                 ;report interrupt
  2003                                  ;-----------------------------------------------------------------------------------------------------------------------
  2004                                  ;
  2005                                  ;       INT28   Reserved
  2006                                  ;
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                                          menter  int28                                           ;(reserved)
  2009                                                          push    28                                              ;store interrupt nbr
  2010                                                          push    czIntReserved                                   ;store message offset
  2011                                                          jmp     ReportInterrupt                                 ;report interrupt
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                  ;
  2014                                  ;       INT29   Reserved
  2015                                  ;
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                                          menter  int29                                           ;(reserved)
  2018                                                          push    29                                              ;store interrupt nbr
  2019                                                          push    czIntReserved                                   ;store message offset
  2020                                                          jmp     ReportInterrupt                                 ;report interrupt
  2021                                  ;-----------------------------------------------------------------------------------------------------------------------
  2022                                  ;
  2023                                  ;       INT30   Reserved
  2024                                  ;
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026                                                          menter  int30                                           ;(reserved)
  2027                                                          push    30                                              ;store interrupt nbr
  2028                                                          push    czIntReserved                                   ;store message offset
  2029                                                          jmp     ReportInterrupt                                 ;report interrupt
  2030                                  ;-----------------------------------------------------------------------------------------------------------------------
  2031                                  ;
  2032                                  ;       INT31   Reserved
  2033                                  ;
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                                          menter  int31                                           ;(reserved)
  2036                                                          push    31                                              ;store interrupt nbr
  2037                                                          push    czIntReserved                                   ;store message offset
  2038                                                          jmp     ReportInterrupt                                 ;report interrupt
  2039                                  ;-----------------------------------------------------------------------------------------------------------------------
  2040                                  ;
  2041                                  ;       Routine:        ReportInterrupt
  2042                                  ;
  2043                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2044                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2045                                  ;
  2046                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2047                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2048                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2049                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2050                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2051                                  ;
  2052                                  ;       Out:            N/A             This routine does not exit.
  2053                                  ;
  2054                                  ;-----------------------------------------------------------------------------------------------------------------------
  2055                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2056                                                          push    es                                              ;save ES at time of interrupt
  2057                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2058                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2059                                  ;
  2060                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2061                                  ;
  2062                                  ;                       [EBP+56]        EFLAGS
  2063                                  ;                       [EBP+52]        CS
  2064                                  ;                       [EBP+48]        EIP
  2065                                  ;                       [EBP+44]        interrupt number (0-31)
  2066                                  ;                       [EBP+40]        error message address
  2067                                  ;                       [EBP+36]        DS
  2068                                  ;                       [EBP+32]        ES
  2069                                  ;                       [EBP+28]        EAX
  2070                                  ;                       [EBP+24]        ECX
  2071                                  ;                       [EBP+20]        EDX
  2072                                  ;                       [EBP+16]        EBX
  2073                                  ;                       [EBP+12]        ESP
  2074                                  ;                       [EBP+8]         EBP
  2075                                  ;                       [EBP+4]         ESI
  2076                                  ;                       [EBP+0]         EDI
  2077                                  ;
  2078                                                          push    cs                                              ;load code selector ...
  2079                                                          pop     ds                                              ;... into DS
  2080                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2081                                                          pop     es                                              ;... into ES
  2082                                  ;
  2083                                  ;       Display the interrupt report boundary box
  2084                                  ;
  2085                                                          mov     cl,13                                           ;column
  2086                                                          mov     ch,6                                            ;row
  2087                                                          mov     dl,50                                           ;width
  2088                                                          mov     dh,8                                            ;height
  2089                                                          mov     bh,07h                                          ;attribute
  2090                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2091                                  ;
  2092                                  ;       Display the report header
  2093                                  ;
  2094                                                          mov     cl,15                                           ;column
  2095                                                          mov     ch,7                                            ;row
  2096                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2097                                                          call    SetConsoleString                                ;draw text string
  2098                                  ;
  2099                                  ;       Display the interrupt description label
  2100                                  ;
  2101                                                          mov     cl,15                                           ;column
  2102                                                          mov     ch,8                                            ;row
  2103                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2104                                                          call    SetConsoleString                                ;draw text string
  2105                                  ;
  2106                                  ;       Display the interrupt number
  2107                                  ;
  2108                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2109                                                          mov     cl,26                                           ;column
  2110                                                          mov     ch,8                                            ;row
  2111                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2112                                  ;
  2113                                  ;       Display the interrupt name
  2114                                  ;
  2115                                                          mov     cl,29                                           ;column
  2116                                                          mov     ch,8                                            ;row
  2117                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2118                                                          call    SetConsoleString                                ;display interrupt description
  2119                                  ;
  2120                                  ;       Display the register values header
  2121                                  ;
  2122                                                          mov     cl,15                                           ;column
  2123                                                          mov     ch,10                                           ;row
  2124                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2125                                                          call    SetConsoleString                                ;draw text string
  2126                                  ;
  2127                                  ;       Display the EAX register label and value
  2128                                  ;
  2129                                                          mov     cl,15                                           ;column
  2130                                                          mov     ch,11                                           ;row
  2131                                                          mov     esi,czIntEAX                                    ;register EAX label
  2132                                                          call    SetConsoleString                                ;draw label
  2133                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2134                                                          mov     cl,19                                           ;column
  2135                                                          mov     ch,11                                           ;row
  2136                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2137                                  ;
  2138                                  ;       Display the ECX register label and value
  2139                                  ;
  2140                                                          mov     cl,15                                           ;column
  2141                                                          mov     ch,12                                           ;row
  2142                                                          mov     esi,czIntECX                                    ;label
  2143                                                          call    SetConsoleString                                ;draw label
  2144                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2145                                                          mov     cl,19                                           ;column
  2146                                                          mov     ch,12                                           ;row
  2147                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2148                                  ;
  2149                                  ;       Display the EDX register label and value
  2150                                  ;
  2151                                                          mov     cl,15                                           ;column
  2152                                                          mov     ch,13                                           ;row
  2153                                                          mov     esi,czIntEDX                                    ;label
  2154                                                          call    SetConsoleString                                ;draw label
  2155                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2156                                                          mov     cl,19                                           ;column
  2157                                                          mov     ch,13                                           ;row
  2158                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2159                                  ;
  2160                                  ;       Display the EBX register label and value
  2161                                  ;
  2162                                                          mov     cl,15                                           ;column
  2163                                                          mov     ch,14                                           ;row
  2164                                                          mov     esi,czIntEBX                                    ;label
  2165                                                          call    SetConsoleString                                ;draw label
  2166                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2167                                                          mov     cl,19                                           ;column
  2168                                                          mov     ch,14                                           ;row
  2169                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2170                                  ;
  2171                                  ;       Display the ESI register label and value
  2172                                  ;
  2173                                                          mov     cl,29                                           ;column
  2174                                                          mov     ch,11                                           ;row
  2175                                                          mov     esi,czIntESI                                    ;label
  2176                                                          call    SetConsoleString                                ;draw label
  2177                                                          mov     eax,[ebp+4]                                     ;ESI
  2178                                                          mov     cl,33                                           ;column
  2179                                                          mov     ch,11                                           ;row
  2180                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2181                                  ;
  2182                                  ;       Display the EDI register label and value
  2183                                  ;
  2184                                                          mov     cl,29                                           ;column
  2185                                                          mov     ch,12                                           ;row
  2186                                                          mov     esi,czIntEDI                                    ;label
  2187                                                          call    SetConsoleString                                ;draw label
  2188                                                          mov     eax,[ebp+0]                                     ;EDI
  2189                                                          mov     cl,33                                           ;column
  2190                                                          mov     ch,12                                           ;row
  2191                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2192                                  ;
  2193                                  ;       Display the EBP register label and value
  2194                                  ;
  2195                                                          mov     cl,29                                           ;column
  2196                                                          mov     ch,13                                           ;row
  2197                                                          mov     esi,czIntEBP                                    ;label
  2198                                                          call    SetConsoleString                                ;draw label
  2199                                                          mov     eax,[ebp+8]                                     ;EBP
  2200                                                          mov     cl,33                                           ;column
  2201                                                          mov     ch,13                                           ;row
  2202                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2203                                  ;
  2204                                  ;       Display the DS register label and value
  2205                                  ;
  2206                                                          mov     cl,42                                           ;column
  2207                                                          mov     ch,11                                           ;row
  2208                                                          mov     esi,czIntDS                                     ;label
  2209                                                          call    SetConsoleString                                ;draw label
  2210                                                          xor     eax,eax                                         ;zero register
  2211                                                          mov     ax,[ebp+36]                                     ;DS
  2212                                                          mov     cl,46                                           ;column
  2213                                                          mov     ch,11                                           ;row
  2214                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2215                                  ;
  2216                                  ;       Display the ES register label and value
  2217                                  ;
  2218                                                          mov     cl,42                                           ;column
  2219                                                          mov     ch,12                                           ;row
  2220                                                          mov     esi,czIntES                                     ;label
  2221                                                          call    SetConsoleString                                ;draw label
  2222                                                          xor     eax,eax                                         ;zero register
  2223                                                          mov     ax,[ebp+32]                                     ;ES
  2224                                                          mov     cl,46                                           ;column
  2225                                                          mov     ch,12                                           ;row
  2226                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2227                                  ;
  2228                                  ;       Display the SS register label and value
  2229                                  ;
  2230                                                          mov     cl,42                                           ;column
  2231                                                          mov     ch,13                                           ;row
  2232                                                          mov     esi,czIntSS                                     ;label
  2233                                                          call    SetConsoleString                                ;draw label
  2234                                                          xor     eax,eax                                         ;zero register
  2235                                                          mov     ax,ss                                           ;SS
  2236                                                          mov     cl,46                                           ;column
  2237                                                          mov     ch,13                                           ;row
  2238                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2239                                  ;
  2240                                  ;       Display the CS register lable and value
  2241                                  ;
  2242                                                          mov     cl,42                                           ;column
  2243                                                          mov     ch,14                                           ;row
  2244                                                          mov     esi,czIntCS                                     ;label
  2245                                                          call    SetConsoleString                                ;draw label
  2246                                                          xor     eax,eax                                         ;zero register
  2247                                                          mov     ax,[ebp+52]                                     ;CS
  2248                                                          mov     cl,46                                           ;column
  2249                                                          mov     ch,14                                           ;row
  2250                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2251                                  ;
  2252                                  ;       Display the EFLAGS register label and value
  2253                                  ;
  2254                                                          mov     cl,51                                           ;column
  2255                                                          mov     ch,11                                           ;row
  2256                                                          mov     esi,czIntEFLAGS                                 ;label
  2257                                                          call    SetConsoleString                                ;draw label
  2258                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2259                                                          mov     cl,55                                           ;column
  2260                                                          mov     ch,11                                           ;row
  2261                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2262                                  ;
  2263                                  ;       Display the ESP register label and value
  2264                                  ;
  2265                                                          mov     cl,51                                           ;column
  2266                                                          mov     ch,13                                           ;row
  2267                                                          mov     esi,czIntESP                                    ;label
  2268                                                          call    SetConsoleString                                ;draw label
  2269                                                          mov     eax,[ebp+12]                                    ;ESP
  2270                                                          mov     cl,55                                           ;column
  2271                                                          mov     ch,13                                           ;row
  2272                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2273                                  ;
  2274                                  ;       Display the EIP register label and value
  2275                                  ;
  2276                                                          mov     cl,51                                           ;column
  2277                                                          mov     ch,14                                           ;row
  2278                                                          mov     esi,czIntEIP                                    ;label
  2279                                                          call    SetConsoleString                                ;draw label
  2280                                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2281                                                          mov     cl,55                                           ;column
  2282                                                          mov     ch,14                                           ;row
  2283                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2284                                  ;
  2285                                  ;       Halt and loop until reset
  2286                                  ;
  2287                                  .10                     sti                                                     ;enable maskable interrupts
  2288                                                          hlt                                                     ;halt processor
  2289                                                          jmp     .10                                             ;resume on interrupt
  2290                                  ;-----------------------------------------------------------------------------------------------------------------------
  2291                                  ;
  2292                                  ;       Processor Interrupt Name Strings
  2293                                  ;
  2294                                  ;-----------------------------------------------------------------------------------------------------------------------
  2295                                  czIntDivideByZero       db      "Division by zero",0
  2296                                  czIntSingleStep         db      "Single step",0
  2297                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2298                                  czIntBreak              db      "Break",0
  2299                                  czIntInto               db      "Into",0
  2300                                  czIntBounds             db      "Bounds",0
  2301                                  czIntBadOpCode          db      "Bad Operation Code",0
  2302                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2303                                  czIntDoubleFault        db      "Double Fault",0
  2304                                  czIntOperand            db      "Operand",0
  2305                                  czIntBadTSS             db      "Bad Task State Segment",0
  2306                                  czIntNotPresent         db      "Not Present",0
  2307                                  czIntStackLimit         db      "Stack Limit",0
  2308                                  czIntProtection         db      "General Protection Fault",0
  2309                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2310                                  czIntReserved           db      "Reserved",0
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312                                  ;
  2313                                  ;       Processor Interrupt Handling Strings
  2314                                  ;
  2315                                  ;-----------------------------------------------------------------------------------------------------------------------
  2316                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2317                                  czIntLabel              db      "Interrupt #",0
  2318                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2319                                  czIntEAX                db      "EAX:",0
  2320                                  czIntECX                db      "ECX:",0
  2321                                  czIntEDX                db      "EDX:",0
  2322                                  czIntEBX                db      "EBX:",0
  2323                                  czIntESI                db      "ESI:",0
  2324                                  czIntEDI                db      "EDI:",0
  2325                                  czIntEBP                db      "EBP:",0
  2326                                  czIntESP                db      "ESP:",0
  2327                                  czIntDS                 db      " DS:",0
  2328                                  czIntES                 db      " ES:",0
  2329                                  czIntSS                 db      " SS:",0
  2330                                  czIntCS                 db      " CS:",0
  2331                                  czIntEFLAGS             db      "FLG:",0
  2332                                  czIntEIP                db      "EIP:",0
  2333                                  ;-----------------------------------------------------------------------------------------------------------------------
  2334                                  ;
  2335                                  ;       Routine:        DrawTextDialogBox
  2336                                  ;
  2337                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2338                                  ;
  2339                                  ;       In:             CL      upper left column (0-79)
  2340                                  ;                       CH      upper left row (0-24)
  2341                                  ;                       DL      column width, excluding border
  2342                                  ;                       DH      row height, excluding border
  2343                                  ;                       BH      color attribute
  2344                                  ;
  2345                                  ;-----------------------------------------------------------------------------------------------------------------------
  2346                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2347                                                          push    esi                                             ;
  2348                                                          push    edi                                             ;
  2349                                                          push    es                                              ;
  2350                                                          push    EGDTCGA                                         ;load CGA selector ...
  2351                                                          pop     es                                              ;... into ES
  2352                                  ;
  2353                                  ;       Compute target display offset
  2354                                  ;
  2355                                                          xor     eax,eax                                         ;zero register
  2356                                                          mov     al,ch                                           ;row
  2357                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2358                                                          mul     ah                                              ;row offset
  2359                                                          add     al,cl                                           ;add column
  2360                                                          adc     ah,0                                            ;add overflow
  2361                                                          add     al,cl                                           ;add column
  2362                                                          adc     ah,0                                            ;add overflow
  2363                                                          mov     edi,eax                                         ;target row offset
  2364                                  ;
  2365                                  ;       Display top border row
  2366                                  ;
  2367                                                          push    edi                                             ;save target row offset
  2368                                                          mov     ah,bh                                           ;attribute
  2369                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2370                                                          stosw                                                   ;display character and attribute
  2371                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2372                                                          xor     ecx,ecx                                         ;zero register
  2373                                                          mov     cl,dl                                           ;width, excluding border
  2374                                                          rep     stosw                                           ;display horizontal border
  2375                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2376                                                          stosw                                                   ;display character and attribute
  2377                                                          pop     edi                                             ;restore target row offset
  2378                                                          add     edi,ECONROWBYTES                                ;next row
  2379                                  ;
  2380                                  ;       Display dialog box body rows
  2381                                  ;
  2382                                                          xor     ecx,ecx                                         ;zero register
  2383                                                          mov     cl,dh                                           ;height, excluding border
  2384                                  .10                     push    ecx                                             ;save remaining rows
  2385                                                          push    edi                                             ;save target row offset
  2386                                                          mov     ah,bh                                           ;attribute
  2387                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2388                                                          stosw                                                   ;display character and attribute
  2389                                                          mov     al,EASCIISPACE                                  ;space
  2390                                                          xor     ecx,ecx                                         ;zero register
  2391                                                          mov     cl,dl                                           ;width, excluding border
  2392                                                          rep     stosw                                           ;display row
  2393                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2394                                                          stosw                                                   ;display character and attribute
  2395                                                          pop     edi                                             ;restore target row offset
  2396                                                          add     edi,ECONROWBYTES                                ;next row
  2397                                                          pop     ecx                                             ;remaining rows
  2398                                                          loop    .10                                             ;next row
  2399                                  ;
  2400                                  ;       Display bottom border row
  2401                                  ;
  2402                                                          push    edi                                             ;save target row offset
  2403                                                          mov     ah,bh                                           ;attribute
  2404                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2405                                                          stosw                                                   ;display character and attribute
  2406                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2407                                                          xor     ecx,ecx                                         ;zero register
  2408                                                          mov     cl,dl                                           ;width, excluding border
  2409                                                          rep     stosw                                           ;display horizontal border
  2410                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2411                                                          stosw                                                   ;display character and attribute
  2412                                                          pop     edi                                             ;restore target row offset
  2413                                                          add     edi,ECONROWBYTES                                ;next row
  2414                                  ;
  2415                                  ;       Restore and return
  2416                                  ;
  2417                                                          pop     es                                              ;restore non-volatile regs
  2418                                                          pop     edi                                             ;
  2419                                                          pop     esi                                             ;
  2420                                                          pop     ecx                                             ;
  2421                                                          ret                                                     ;return
  2422                                  ;=======================================================================================================================
  2423                                  ;
  2424                                  ;       Hardware Device Interupts
  2425                                  ;
  2426                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2427                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2428                                  ;       (BX=2028h).
  2429                                  ;
  2430                                  ;=======================================================================================================================
  2431                                  ;-----------------------------------------------------------------------------------------------------------------------
  2432                                  ;
  2433                                  ;       IRQ0    Clock Tick Interrupt
  2434                                  ;
  2435                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2436                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2437                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2438                                  ;
  2439                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2440                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2441                                  ;
  2442                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2443                                  ;       zero, the floppy disk motors are turned off.
  2444                                  ;
  2445                                  ;-----------------------------------------------------------------------------------------------------------------------
  2446                                                          menter  clocktick                                       ;clock tick interrupt
  2447                                                          push    eax                                             ;save non-volatile regs
  2448                                                          push    edx                                             ;
  2449                                                          push    ds                                              ;
  2450                                  ;
  2451                                  ;       Update the clock tick count and the elapsed days as needed.
  2452                                  ;
  2453                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2454                                                          pop     ds                                              ;... into data segment register
  2455                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2456                                                          inc     eax                                             ;increment clock ticks
  2457                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2458                                                          jb      irq0.10                                         ;no, skip ahead
  2459                                                          inc     byte [wbClockDays]                              ;increment clock days
  2460                                                          xor     eax,eax                                         ;reset clock ticks
  2461                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2462                                  ;
  2463                                  ;       Decrement floppy disk motor timeout.
  2464                                  ;
  2465                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2466                                                          je      irq0.20                                         ;yes, skip ahead
  2467                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2468                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2469                                  ;
  2470                                  ;       Turn off the floppy disk motor if appropriate.
  2471                                  ;
  2472                                                          sti                                                     ;enable maskable interrupts
  2473                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2474                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2475                                                          in      al,dx                                           ;FDC main status byte
  2476                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2477                                                          jnz     irq0.15                                         ;wait while busy
  2478                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2479                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2480                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2481                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2482                                                          out     dx,al                                           ;turn motor off
  2483                                  ;
  2484                                  ;       Signal the end of the hardware interrupt.
  2485                                  ;
  2486                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2487                                  ;
  2488                                  ;       Restore and return.
  2489                                  ;
  2490                                                          pop     ds                                              ;restore modified regs
  2491                                                          pop     edx                                             ;
  2492                                                          pop     eax                                             ;
  2493                                                          iretd                                                   ;return
  2494                                  ;-----------------------------------------------------------------------------------------------------------------------
  2495                                  ;
  2496                                  ;       IRQ1    Keyboard Interrupt
  2497                                  ;
  2498                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2499                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2500                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2501                                  ;       ALL modified registers upon return.
  2502                                  ;
  2503                                  ;-----------------------------------------------------------------------------------------------------------------------
  2504                                                          menter  keyboard                                        ;keyboard interrrupt
  2505                                                          push    eax                                             ;save non-volatile regs
  2506                                                          push    ebx                                             ;
  2507                                                          push    ecx                                             ;
  2508                                                          push    esi                                             ;
  2509                                                          push    ds                                              ;
  2510                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2511                                                          pop     ds                                              ;... into data segment register
  2512                                                          xor     al,al                                           ;zero
  2513                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2514                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2515                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2516                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2517                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2518                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2519                                                          mov     al,' '                                          ;space
  2520                                                          mov     [wbConsoleChar],al                              ;set character to space
  2521                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2522                                                          not     al                                              ;controller timeout mask
  2523                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2524                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2525                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2526                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2527                                                          jz      irq1.140                                        ;yes, skip ahead
  2528                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2529                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2530                                                          mov     ah,al                                           ;copy scan code 0
  2531                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2532                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2533                                                          je      irq1.30                                         ;yes, set flag
  2534                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2535                                                          je      irq1.40                                         ;yes, reset flag
  2536                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2537                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2538                                                          je      irq1.30                                         ;yes, set flag
  2539                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2540                                                          je      irq1.40                                         ;yes, reset flag
  2541                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2542                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2543                                                          je      irq1.30                                         ;yes, set flag
  2544                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2545                                                          je      irq1.40                                         ;yes, reset flag
  2546                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2547                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2548                                                          je      irq1.30                                         ;yes, set flag
  2549                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2550                                                          je      irq1.40                                         ;yes, reset flag
  2551                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2552                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2553                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2554                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2555                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2556                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2557                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2558                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2559                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2560                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2561                                                          jne     irq1.70                                         ;no, skip ahead
  2562                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2563                                                          jz      irq1.140                                        ;yes, skip ahead
  2564                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2565                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2566                                                          mov     ah,al                                           ;copy scan code 1
  2567                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2568                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2569                                                          je      irq1.30                                         ;yes, set flag
  2570                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2571                                                          je      irq1.40                                         ;yes, reset flag
  2572                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2573                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2574                                                          je      irq1.30                                         ;yes, set flag
  2575                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2576                                                          je      irq1.40                                         ;yes, reset flag
  2577                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2578                                                          je      irq1.80                                         ;yes, skip ahead
  2579                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2580                                                          je      irq1.80                                         ;yes, skip ahead
  2581                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2582                                                          je      irq1.10                                         ;yes, continue
  2583                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2584                                                          jne     irq1.20                                         ;no, skip ahead
  2585                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2586                                                          jz      irq1.140                                        ;yes, skip ahead
  2587                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2588                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2589                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2590                                                          jz      irq1.140                                        ;yes, skip ahead
  2591                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2592                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2593                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2594                                  irq1.30                 or      bl,al                                           ;set shift flag
  2595                                                          jmp     irq1.60                                         ;skip ahead
  2596                                  irq1.40                 not     al                                              ;convert flag to mask
  2597                                                          and     bl,al                                           ;reset shift flag
  2598                                                          jmp     irq1.60                                         ;skip ahead
  2599                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2600                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2601                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2602                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2603                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2604                                                          jmp     irq1.150                                        ;finish keyboard handling
  2605                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2606                                                          jne     irq1.80                                         ;no continue
  2607                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2608                                                          jz      irq1.140                                        ;yes, skip ahead
  2609                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2610                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2611                                                          mov     ah,al                                           ;copy scan code 1
  2612                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2613                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2614                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2615                                                          jz      irq1.140                                        ;yes, skip ahead
  2616                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2617                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2618                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2619                                                          jz      irq1.140                                        ;yes, skip ahead
  2620                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2621                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2622                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2623                                                          jz      irq1.140                                        ;yes, skip ahead
  2624                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2625                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2626                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2627                                                          jz      irq1.140                                        ;yes, skip ahead
  2628                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2629                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2630                                                          jmp     irq1.150                                        ;continue
  2631                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2632                                                          test    ah,EKEYBUP                                      ;release code?
  2633                                                          jnz     irq1.130                                        ;yes, skip ahead
  2634                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2635                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2636                                                          jz      irq1.90                                         ;no, skip ahead
  2637                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2638                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2639                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2640                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2641                                                          jz      irq1.100                                        ;no skip ahead
  2642                                                          mov     cl,al                                           ;copy ASCII code
  2643                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2644                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2645                                                          jb      irq1.100                                        ;yes, skip ahead
  2646                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2647                                                          ja      irq1.100                                        ;yes, skip ahead
  2648                                                          xor     al,EASCIICASE                                   ;switch case
  2649                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2650                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2651                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2652                                                          jz      irq1.120                                        ;no, skip ahead
  2653                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2654                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2655                                                          or      edx,eax                                         ;msg id and codes
  2656                                                          xor     ecx,ecx                                         ;null param
  2657                                                          push    eax                                             ;save codes
  2658                                                          call    PutMessage                                      ;put message to console
  2659                                                          pop     eax                                             ;restore codes
  2660                                                          test    al,al                                           ;ASCII translation?
  2661                                                          jz      irq1.130                                        ;no, skip ahead
  2662                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2663                                                          and     eax,0FFFFh                                      ;clear high-order word
  2664                                                          or      edx,eax                                         ;msg id and codes
  2665                                                          xor     ecx,ecx                                         ;null param
  2666                                                          call    PutMessage                                      ;put message to console
  2667                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2668                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2669                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2670                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2671                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2672                                                          pop     ds                                              ;restore non-volatile regs
  2673                                                          pop     esi                                             ;
  2674                                                          pop     ecx                                             ;
  2675                                                          pop     ebx                                             ;
  2676                                                          pop     eax                                             ;
  2677                                                          iretd                                                   ;return
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                  ;       Scan-Code to ASCII Translation Tables
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2682                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2683                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2684                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2685                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2686                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2687                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2688                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2689                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2690                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2691                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2692                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2693                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2694                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2695                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2696                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2697                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2698                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2699                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2700                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2701                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2702                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2703                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2704                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2705                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2706                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2707                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2708                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2709                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2710                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2711                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2712                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                  ;
  2715                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2716                                  ;
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                                          menter  iochannel                                       ;secondary 8259A cascade
  2719                                                          push    eax                                             ;save modified regs
  2720                                                          jmp     hwint                                           ;end interrupt and return
  2721                                  ;-----------------------------------------------------------------------------------------------------------------------
  2722                                  ;
  2723                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                                          menter  com2                                            ;serial port 2 interrupt
  2727                                                          push    eax                                             ;save modified regs
  2728                                                          jmp     hwint                                           ;end interrupt and return
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730                                  ;
  2731                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2732                                  ;
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                                          menter  com1                                            ;serial port 1 interrupt
  2735                                                          push    eax                                             ;save modified regs
  2736                                                          jmp     hwint                                           ;end interrupt and return
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                  ;
  2739                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2740                                  ;
  2741                                  ;-----------------------------------------------------------------------------------------------------------------------
  2742                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2743                                                          push    eax                                             ;save modified regs
  2744                                                          jmp     hwint                                           ;end interrupt and return
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                  ;
  2747                                  ;       IRQ6    Diskette Hardware Interrupt
  2748                                  ;
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750                                                          menter  diskette                                        ;floppy disk interrupt
  2751                                                          push    eax                                             ;save non-volatile regs
  2752                                                          push    ds                                              ;
  2753                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2754                                                          pop     ds                                              ;... into DS register
  2755                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2756                                                          or      al,10000000b                                    ;set IRQ flag
  2757                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2758                                                          pop     ds                                              ;restore non-volatile regs
  2759                                                          jmp     hwint                                           ;end primary PIC interrupt
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761                                  ;
  2762                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2763                                  ;
  2764                                  ;-----------------------------------------------------------------------------------------------------------------------
  2765                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2766                                                          push    eax                                             ;save modified regs
  2767                                                          jmp     hwint                                           ;end interrupt and return
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  ;
  2770                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                                          menter  rtclock                                         ;real-time clock interrupt
  2774                                                          push    eax                                             ;save modified regs
  2775                                                          jmp     hwwint                                          ;end interrupt and return
  2776                                  ;-----------------------------------------------------------------------------------------------------------------------
  2777                                  ;
  2778                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2779                                  ;
  2780                                  ;-----------------------------------------------------------------------------------------------------------------------
  2781                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2782                                                          push    eax                                             ;save modified regs
  2783                                                          jmp     hwwint                                          ;end interrupt and return
  2784                                  ;-----------------------------------------------------------------------------------------------------------------------
  2785                                  ;
  2786                                  ;       IRQ10   Reserved Hardware Interrupt
  2787                                  ;
  2788                                  ;-----------------------------------------------------------------------------------------------------------------------
  2789                                                          menter  irq10                                           ;reserved
  2790                                                          push    eax                                             ;save modified regs
  2791                                                          jmp     hwwint                                          ;end interrupt and return
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  ;
  2794                                  ;       IRQ11   Reserved Hardware Interrupt
  2795                                  ;
  2796                                  ;-----------------------------------------------------------------------------------------------------------------------
  2797                                                          menter  irq11                                           ;reserved
  2798                                                          push    eax                                             ;save modified regs
  2799                                                          jmp     hwwint                                          ;end interrupt and return
  2800                                  ;-----------------------------------------------------------------------------------------------------------------------
  2801                                  ;
  2802                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2803                                  ;
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2806                                                          push    eax                                             ;save modified regs
  2807                                                          jmp     hwwint                                          ;end interrupt and return
  2808                                  ;-----------------------------------------------------------------------------------------------------------------------
  2809                                  ;
  2810                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2811                                  ;
  2812                                  ;-----------------------------------------------------------------------------------------------------------------------
  2813                                                          menter  coprocessor                                     ;coprocessor interrupt
  2814                                                          push    eax                                             ;save modified regs
  2815                                                          jmp     hwwint                                          ;end interrupt and return
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  ;
  2818                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2819                                  ;
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2822                                                          push    eax                                             ;save modified regs
  2823                                                          jmp     hwwint                                          ;end interrupt and return
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;
  2826                                  ;       IRQ15   Reserved Hardware Interrupt
  2827                                  ;
  2828                                  ;-----------------------------------------------------------------------------------------------------------------------
  2829                                                          menter  irq15                                           ;reserved
  2830                                                          push    eax                                             ;save modified regs
  2831                                                          jmp     hwwint                                          ;end interrupt and return
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833                                  ;
  2834                                  ;       Exit from hardware interrupt
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2838                                                          jmp     hwint90                                         ;skip ahead
  2839                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2840                                  hwint90                 pop     eax                                             ;restore modified regs
  2841                                                          iretd                                                   ;return from interrupt
  2842                                  ;-----------------------------------------------------------------------------------------------------------------------
  2843                                  ;
  2844                                  ;       INT 30h Operating System Software Service Interrupt
  2845                                  ;
  2846                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2847                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2848                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2849                                  ;       the entry address of the specific function from a table.
  2850                                  ;
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                                          menter  svc
  2853                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2854                                                          jae     svc90                                           ;yes, skip ahead
  2855                                                          movzx   eax,al                                          ;function
  2856                                                          shl     eax,2                                           ;offset into table
  2857                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2858                                  svc90                   iretd                                                   ;return from interrupt
  2859                                  ;-----------------------------------------------------------------------------------------------------------------------
  2860                                  ;
  2861                                  ;       Service Request Table
  2862                                  ;
  2863                                  ;
  2864                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2865                                  ;
  2866                                  ;-----------------------------------------------------------------------------------------------------------------------
  2867                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2868                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2869                                                          tsvce   CompareMemory                                   ;compare memory
  2870                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2871                                                          tsvce   FreeMemory                                      ;free memory block
  2872                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2873                                                          tsvce   GetConsoleString                                ;get string input
  2874                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2875                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2876                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2877                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2878                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2879                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2880                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2881                                                          tsvce   PutDayString                                    ;put DD string
  2882                                                          tsvce   PutHourString                                   ;put hh string
  2883                                                          tsvce   PutMinuteString                                 ;put mm string
  2884                                                          tsvce   PutMonthString                                  ;put MM string
  2885                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2886                                                          tsvce   PutSecondString                                 ;put ss string
  2887                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2888                                                          tsvce   PutWeekdayString                                ;put weekday string
  2889                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2890                                                          tsvce   PutYearString                                   ;put YYYY string
  2891                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2892                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2893                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2894                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2895                                                          tsvce   UpperCaseString                                 ;upper-case string
  2896                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2897                                  ;-----------------------------------------------------------------------------------------------------------------------
  2898                                  ;
  2899                                  ;       Service Request Macros
  2900                                  ;
  2901                                  ;       These macros provide positional parameterization of service request calls.
  2902                                  ;
  2903                                  ;-----------------------------------------------------------------------------------------------------------------------
  2904                                  %macro                  allocateMemory 1
  2905                                                          mov     ecx,%1                                          ;bytes to allocate
  2906                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2907                                                          int     _svc                                            ;invoke OS service
  2908                                  %endmacro
  2909                                  %macro                  clearConsoleScreen 0
  2910                                                          mov     al,eClearConsoleScreen                          ;function code
  2911                                                          int     _svc                                            ;invoke OS service
  2912                                  %endmacro
  2913                                  %macro                  compareMemory 0
  2914                                                          mov     al,eCompareMemory                               ;function code
  2915                                                          int     _svc                                            ;invoke OS service
  2916                                  %endmacro
  2917                                  %macro                  decimalToUnsigned 0
  2918                                                          mov     al,eDecimalToUnsigned                           ;function code
  2919                                                          int     _svc                                            ;invoke OS servie
  2920                                  %endmacro
  2921                                  %macro                  freeMemory 1
  2922                                                          mov     edx,%1                                          ;address of memory block
  2923                                                          mov     al,eFreeMemory                                  ;function code
  2924                                                          int     _svc                                            ;invoke OS service
  2925                                  %endmacro
  2926                                  %macro                  getBaseMemSize 0
  2927                                                          mov     al,eGetBaseMemSize                              ;function code
  2928                                                          int     _svc                                            ;invoke OS service
  2929                                  %endmacro
  2930                                  %macro                  getConsoleString 4
  2931                                                          mov     edx,%1                                          ;buffer address
  2932                                                          mov     ecx,%2                                          ;max characters
  2933                                                          mov     bh,%3                                           ;echo indicator
  2934                                                          mov     bl,%4                                           ;terminator
  2935                                                          mov     al,eGetConsoleString                            ;function code
  2936                                                          int     _svc                                            ;invoke OS service
  2937                                  %endmacro
  2938                                  %macro                  getExtendedMemSize 0
  2939                                                          mov     al,eGetExtendedMemSize                          ;function code
  2940                                                          int     _svc                                            ;invoke OS service
  2941                                  %endmacro
  2942                                  %macro                  getROMMemSize 0
  2943                                                          mov     al,eGetROMMemSize                               ;function code
  2944                                                          int     _svc                                            ;invoke OS service
  2945                                  %endmacro
  2946                                  %macro                  hexadecimalToUnsigned 0
  2947                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2948                                                          int     _svc                                            ;invoke OS service
  2949                                  %endmacro
  2950                                  %macro                  isLeapYear 1
  2951                                                          mov     ebx,%1                                          ;DATETIME addr
  2952                                                          mov     al,eIsLeapYear                                  ;function code
  2953                                                          int     _svc                                            ;invoke OS service
  2954                                  %endmacro
  2955                                  %macro                  placeCursor 0
  2956                                                          mov     al,ePlaceCursor                                 ;function code
  2957                                                          int     _svc                                            ;invoke OS service
  2958                                  %endmacro
  2959                                  %macro                  putConsoleString 1
  2960                                                          mov     edx,%1                                          ;string address
  2961                                                          mov     al,ePutConsoleString                            ;function code
  2962                                                          int     _svc                                            ;invoke OS service
  2963                                  %endmacro
  2964                                  %macro                  putDateString 0
  2965                                                          mov     al,ePutDateString                               ;function code
  2966                                                          int     _svc                                            ;invoke OS service
  2967                                  %endmacro
  2968                                  %macro                  putDateString 2
  2969                                                          mov     ebx,%1                                          ;DATETIME addr
  2970                                                          mov     edx,%2                                          ;output buffer addr
  2971                                                          mov     al,ePutDateString                               ;function code
  2972                                                          int     _svc                                            ;invoke OS service
  2973                                  %endmacro
  2974                                  %macro                  putDayString 2
  2975                                                          mov     ebx,%1                                          ;DATETIME addr
  2976                                                          mov     edx,%2                                          ;output buffer addr
  2977                                                          mov     al,ePutDayString                                ;function code
  2978                                                          int     _svc                                            ;invoke OS service
  2979                                  %endmacro
  2980                                  %macro                  putHourString 2
  2981                                                          mov     ebx,%1                                          ;DATETIME addr
  2982                                                          mov     edx,%2                                          ;output buffer addr
  2983                                                          mov     al,ePutHourString                               ;function code
  2984                                                          int     _svc                                            ;invoke OS service
  2985                                  %endmacro
  2986                                  %macro                  putMinuteString 2
  2987                                                          mov     ebx,%1                                          ;DATETIME addr
  2988                                                          mov     edx,%2                                          ;output buffer addr
  2989                                                          mov     al,ePutMinuteString                             ;function code
  2990                                                          int     _svc                                            ;invoke OS service
  2991                                  %endmacro
  2992                                  %macro                  putMonthString 2
  2993                                                          mov     ebx,%1                                          ;DATETIME addr
  2994                                                          mov     edx,%2                                          ;output buffer addr
  2995                                                          mov     al,ePutMonthString                              ;function code
  2996                                                          int     _svc                                            ;invoke OS service
  2997                                  %endmacro
  2998                                  %macro                  putMonthNameString 2
  2999                                                          mov     ebx,%1                                          ;DATETIME addr
  3000                                                          mov     edx,%2                                          ;output buffer addr
  3001                                                          mov     al,ePutMonthNameString                          ;function code
  3002                                                          int     _svc                                            ;invoke OS service
  3003                                  %endmacro
  3004                                  %macro                  putSecondString 2
  3005                                                          mov     ebx,%1                                          ;DATETIME addr
  3006                                                          mov     edx,%2                                          ;output buffer addr
  3007                                                          mov     al,ePutSecondString                             ;function code
  3008                                                          int     _svc                                            ;invoke OS service
  3009                                  %endmacro
  3010                                  %macro                  putTimeString 0
  3011                                                          mov     al,ePutTimeString                               ;function code
  3012                                                          int     _svc                                            ;invoke OS service
  3013                                  %endmacro
  3014                                  %macro                  putTimeString 2
  3015                                                          mov     ebx,%1                                          ;DATETIME addr
  3016                                                          mov     edx,%2                                          ;output buffer addr
  3017                                                          mov     al,ePutTimeString                               ;function code
  3018                                                          int     _svc                                            ;invoke OS service
  3019                                  %endmacro
  3020                                  %macro                  putWeekdayString 2
  3021                                                          mov     ebx,%1                                          ;DATETIME addr
  3022                                                          mov     edx,%2                                          ;output buffer addr
  3023                                                          mov     al,ePutWeekdayString                            ;function code
  3024                                                          int     _svc                                            ;invoke OS service
  3025                                  %endmacro
  3026                                  %macro                  putWeekdayNameString 2
  3027                                                          mov     ebx,%1                                          ;DATETIME addr
  3028                                                          mov     edx,%2                                          ;output buffer addr
  3029                                                          mov     al,ePutWeekdayNameString                        ;function code
  3030                                                          int     _svc                                            ;invoke OS service
  3031                                  %endmacro
  3032                                  %macro                  putYearString 2
  3033                                                          mov     ebx,%1                                          ;DATETIME addr
  3034                                                          mov     edx,%2                                          ;output buffer addr
  3035                                                          mov     al,ePutYearString                               ;function code
  3036                                                          int     _svc                                            ;invoke OS service
  3037                                  %endmacro
  3038                                  %macro                  readRealTimeClock 0
  3039                                                          mov     al,eReadRealTimeClock                           ;function code
  3040                                                          int     _svc                                            ;invoke OS service
  3041                                  %endmacro
  3042                                  %macro                  readRealTimeClock 1
  3043                                                          mov     ebx,%1                                          ;DATETIME addr
  3044                                                          mov     al,eReadRealTimeClock                           ;function code
  3045                                                          int     _svc                                            ;invoke OS service
  3046                                  %endmacro
  3047                                  %macro                  resetSystem 0
  3048                                                          mov     al,eResetSystem                                 ;function code
  3049                                                          int     _svc                                            ;invoke OS service
  3050                                  %endmacro
  3051                                  %macro                  unsignedToDecimalString 0
  3052                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3053                                                          int     _svc                                            ;invoke OS service
  3054                                  %endmacro
  3055                                  %macro                  unsignedToHexadecimal 0
  3056                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3057                                                          int     _svc                                            ;invoke OS service
  3058                                  %endmacro
  3059                                  %macro                  upperCaseString 0
  3060                                                          mov     al,eUpperCaseString                             ;function code
  3061                                                          int     _svc                                            ;invoke OS service
  3062                                  %endmacro
  3063                                  ;=======================================================================================================================
  3064                                  ;
  3065                                  ;       Kernel Function Library
  3066                                  ;
  3067                                  ;=======================================================================================================================
  3068                                  ;=======================================================================================================================
  3069                                  ;
  3070                                  ;       Date and Time Helper Routines
  3071                                  ;
  3072                                  ;       GetYear
  3073                                  ;       IsLeapYear
  3074                                  ;       PutDateString
  3075                                  ;       PutDayString
  3076                                  ;       PutHourString
  3077                                  ;       PutMinuteString
  3078                                  ;       PutMonthString
  3079                                  ;       PutMonthNameString
  3080                                  ;       PutSecondString
  3081                                  ;       PutTimeString
  3082                                  ;       PutWeekdayString
  3083                                  ;       PutWeekdayNameString
  3084                                  ;       PutYearString
  3085                                  ;
  3086                                  ;=======================================================================================================================
  3087                                  ;-----------------------------------------------------------------------------------------------------------------------
  3088                                  ;
  3089                                  ;       Routine:        GetYear
  3090                                  ;
  3091                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3092                                  ;
  3093                                  ;       In:             DS:EBX  DATETIME address
  3094                                  ;
  3095                                  ;       Out:            ECX     year
  3096                                  ;
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3099                                                          imul    ecx,100                                         ;century * 100
  3100                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3101                                                          add     ecx,eax                                         ;year (YYYY)
  3102                                                          ret                                                     ;return
  3103                                  ;-----------------------------------------------------------------------------------------------------------------------
  3104                                  ;
  3105                                  ;       Routine:        IsLeapYear
  3106                                  ;
  3107                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3108                                  ;
  3109                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3110                                  ;
  3111                                  ;       Out:            ECX     0 = not a leap year
  3112                                  ;                               1 = leap year
  3113                                  ;
  3114                                  ;-----------------------------------------------------------------------------------------------------------------------
  3115                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3116                                                          mov     eax,ecx                                         ;EAX = YYYY
  3117                                                          xor     ecx,ecx                                         ;assume not leap year
  3118                                                          test    al,00000011b                                    ;multiple of four?
  3119                                                          jnz     .no                                             ;no, branch
  3120                                                          mov     dl,100                                          ;divisor
  3121                                                          div     dl                                              ;divide by 100
  3122                                                          test    ah,ah                                           ;multiple of 100?
  3123                                                          jnz     .yes                                            ;yes, branch
  3124                                                          test    al,00000011b                                    ;multiple of 400?
  3125                                                          jnz     .no                                             ;no, branch
  3126                                  .yes                    inc     ecx                                             ;indicate leap
  3127                                  .no                     ret                                                     ;return
  3128                                  ;-----------------------------------------------------------------------------------------------------------------------
  3129                                  ;
  3130                                  ;       Routine:        PutDateString
  3131                                  ;
  3132                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3133                                  ;                       structure at ds:ebx.
  3134                                  ;
  3135                                  ;       In:             DS:EBX  DATETIME address
  3136                                  ;                       DS:EDX  output buffer address
  3137                                  ;
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3140                                                          push    edi                                             ;
  3141                                                          push    es                                              ;
  3142                                                          push    ds                                              ;store data selector ...
  3143                                                          pop     es                                              ;... in extra segment reg
  3144                                                          mov     edi,edx                                         ;output buffer address
  3145                                                          mov     cl,10                                           ;divisor
  3146                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3147                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3148                                                          div     cl                                              ;AH = rem; AL = quotient
  3149                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3150                                                          cld                                                     ;forward strings
  3151                                                          stosd                                                   ;store "mm/"nul
  3152                                                          dec     edi                                             ;address of terminator
  3153                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3154                                                          div     cl                                              ;AH = rem; AL = quotient
  3155                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3156                                                          stosd                                                   ;store "dd/"nul
  3157                                                          dec     edi                                             ;address of terminator
  3158                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3159                                                          div     cl                                              ;AH = rem; AL = quotient
  3160                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3161                                                          stosd                                                   ;store "cc/"null
  3162                                                          dec     edi                                             ;address of terminator
  3163                                                          dec     edi                                             ;address of delimiter
  3164                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3165                                                          div     cl                                              ;AH = rem; AL = quotient
  3166                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3167                                                          stosb                                                   ;store quotient
  3168                                                          mov     al,ah                                           ;remainder
  3169                                                          stosb                                                   ;store remainder
  3170                                                          xor     al,al                                           ;null terminator
  3171                                                          stosb                                                   ;store terminator
  3172                                                          pop     es                                              ;restore non-volatile regs
  3173                                                          pop     edi                                             ;
  3174                                                          pop     ecx                                             ;
  3175                                                          ret                                                     ;return
  3176                                  ;-----------------------------------------------------------------------------------------------------------------------
  3177                                  ;
  3178                                  ;       Routine:        PutDayString
  3179                                  ;
  3180                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3181                                  ;                       structure at ds:ebx.
  3182                                  ;
  3183                                  ;       In:             DS:EBX  DATETIME address
  3184                                  ;                       DS:EDX  output buffer address
  3185                                  ;
  3186                                  ;-----------------------------------------------------------------------------------------------------------------------
  3187                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3188                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3189                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3190                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3191                                                          pop     ecx                                             ;
  3192                                                          ret                                                     ;return
  3193                                  ;-----------------------------------------------------------------------------------------------------------------------
  3194                                  ;
  3195                                  ;       Routine:        PutHourString
  3196                                  ;
  3197                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3198                                  ;                       structure at ds:ebx.
  3199                                  ;
  3200                                  ;       In:             DS:EBX  DATETIME address
  3201                                  ;                       DS:EDX  output buffer address
  3202                                  ;
  3203                                  ;-----------------------------------------------------------------------------------------------------------------------
  3204                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3205                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3206                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3207                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3208                                                          pop     ecx                                             ;
  3209                                                          ret                                                     ;return
  3210                                  ;-----------------------------------------------------------------------------------------------------------------------
  3211                                  ;
  3212                                  ;       Routine:        PutMinuteString
  3213                                  ;
  3214                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3215                                  ;                       structure at ds:ebx.
  3216                                  ;
  3217                                  ;       In:             DS:EBX  DATETIME address
  3218                                  ;                       DS:EDX  output buffer address
  3219                                  ;
  3220                                  ;-----------------------------------------------------------------------------------------------------------------------
  3221                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3222                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3223                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3224                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3225                                                          pop     ecx                                             ;
  3226                                                          ret                                                     ;return
  3227                                  ;-----------------------------------------------------------------------------------------------------------------------
  3228                                  ;
  3229                                  ;       Routine:        PutMonthString
  3230                                  ;
  3231                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3232                                  ;                       structure at ds:ebx.
  3233                                  ;
  3234                                  ;       In:             DS:EBX  DATETIME address
  3235                                  ;                       DS:EDX  output buffer address
  3236                                  ;
  3237                                  ;-----------------------------------------------------------------------------------------------------------------------
  3238                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3239                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3240                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3241                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3242                                                          pop     ecx                                             ;
  3243                                                          ret                                                     ;return
  3244                                  ;-----------------------------------------------------------------------------------------------------------------------
  3245                                  ;
  3246                                  ;       Routine:        PutMonthNameString
  3247                                  ;
  3248                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3249                                  ;                       structure at ds:ebx.
  3250                                  ;
  3251                                  ;       In:             DS:EBX  DATETIME address
  3252                                  ;                       DS:EDX  output buffer address
  3253                                  ;
  3254                                  ;-----------------------------------------------------------------------------------------------------------------------
  3255                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3256                                                          push    edi                                             ;
  3257                                                          push    ds                                              ;
  3258                                                          push    es                                              ;
  3259                                                          push    ds                                              ;load data selector ...
  3260                                                          pop     es                                              ;... into extra segment
  3261                                                          mov     edi,edx                                         ;output buffer address
  3262                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3263                                                          dec     eax                                             ;month (0-11)
  3264                                                          shl     eax,2                                           ;offset into month name lookup table
  3265                                                          push    cs                                              ;load code selector ...
  3266                                                          pop     ds                                              ;... into data segment
  3267                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3268                                                          cld                                                     ;forward strings
  3269                                  .10                     lodsb                                                   ;name character
  3270                                                          stosb                                                   ;store in output buffer
  3271                                                          test    al,al                                           ;end of string?
  3272                                                          jnz     .10                                             ;no, continue
  3273                                                          pop     es                                              ;restore non-volatile regs
  3274                                                          pop     ds                                              ;
  3275                                                          pop     edi                                             ;
  3276                                                          pop     esi                                             ;
  3277                                                          ret                                                     ;return
  3278                                  ;-----------------------------------------------------------------------------------------------------------------------
  3279                                  ;
  3280                                  ;       Routine:        PutSecondString
  3281                                  ;
  3282                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3283                                  ;                       structure at ds:ebx.
  3284                                  ;
  3285                                  ;       In:             DS:EBX  DATETIME address
  3286                                  ;                       DS:EDX  output buffer address
  3287                                  ;
  3288                                  ;-----------------------------------------------------------------------------------------------------------------------
  3289                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3290                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3291                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3292                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3293                                                          pop     ecx                                             ;
  3294                                                          ret                                                     ;return
  3295                                  ;-----------------------------------------------------------------------------------------------------------------------
  3296                                  ;
  3297                                  ;       Routine:        PutTimeString
  3298                                  ;
  3299                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3300                                  ;                       structure at ds:ebx.
  3301                                  ;
  3302                                  ;       In:             DS:EBX  DATETIME address
  3303                                  ;                       DS:EDX  output buffer address
  3304                                  ;
  3305                                  ;-----------------------------------------------------------------------------------------------------------------------
  3306                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3307                                                          push    edi                                             ;
  3308                                                          push    es                                              ;
  3309                                                          push    ds                                              ;store data selector ...
  3310                                                          pop     es                                              ;... in extra segment reg
  3311                                                          mov     edi,edx                                         ;output buffer address
  3312                                                          mov     cl,10                                           ;divisor
  3313                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3314                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3315                                                          div     cl                                              ;ah = rem; al = quotient
  3316                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3317                                                          cld                                                     ;forward strings
  3318                                                          stosd                                                   ;store "mm/"nul
  3319                                                          dec     edi                                             ;address of terminator
  3320                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3321                                                          div     cl                                              ;ah = rem; al = quotient
  3322                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3323                                                          stosd                                                   ;store "dd/"nul
  3324                                                          dec     edi                                             ;address of terminator
  3325                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3326                                                          div     cl                                              ;ah = rem; al = quotient
  3327                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3328                                                          stosb                                                   ;store quotient
  3329                                                          mov     al,ah                                           ;remainder
  3330                                                          stosb                                                   ;store remainder
  3331                                                          xor     al,al                                           ;null terminator
  3332                                                          stosb                                                   ;store terminator
  3333                                                          pop     es                                              ;restore non-volatile regs
  3334                                                          pop     edi                                             ;
  3335                                                          pop     ecx                                             ;
  3336                                                          ret                                                     ;return
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338                                  ;
  3339                                  ;       Routine:        PutWeekdayString
  3340                                  ;
  3341                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3342                                  ;                       structure at ds:ebx.
  3343                                  ;
  3344                                  ;       In:             DS:EBX  DATETIME address
  3345                                  ;                       DS:EDX  output buffer address
  3346                                  ;
  3347                                  ;-----------------------------------------------------------------------------------------------------------------------
  3348                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3349                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3350                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3351                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3352                                                          pop     ecx                                             ;
  3353                                                          ret                                                     ;return
  3354                                  ;-----------------------------------------------------------------------------------------------------------------------
  3355                                  ;
  3356                                  ;       Routine:        PutWeekdayNameString
  3357                                  ;
  3358                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3359                                  ;                       structure at ds:ebx.
  3360                                  ;
  3361                                  ;       In:             DS:EBX  DATETIME address
  3362                                  ;                       DS:EDX  output buffer address
  3363                                  ;
  3364                                  ;-----------------------------------------------------------------------------------------------------------------------
  3365                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3366                                                          push    edi                                             ;
  3367                                                          push    ds                                              ;
  3368                                                          push    es                                              ;
  3369                                                          push    ds                                              ;load data selector ...
  3370                                                          pop     es                                              ;... into extra segment
  3371                                                          mov     edi,edx                                         ;output buffer address
  3372                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3373                                                          shl     eax,2                                           ;offset into day name lookup table
  3374                                                          push    cs                                              ;load code selector ...
  3375                                                          pop     ds                                              ;... into data segment
  3376                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3377                                                          cld                                                     ;forward strings
  3378                                  .10                     lodsb                                                   ;name character
  3379                                                          stosb                                                   ;store in output buffer
  3380                                                          test    al,al                                           ;end of string?
  3381                                                          jnz     .10                                             ;no, continue
  3382                                                          pop     es                                              ;restore non-volatile regs
  3383                                                          pop     ds                                              ;
  3384                                                          pop     edi                                             ;
  3385                                                          pop     esi                                             ;
  3386                                                          ret                                                     ;return
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  ;
  3389                                  ;       Routine:        PutYearString
  3390                                  ;
  3391                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3392                                  ;                       structure at ds:ebx.
  3393                                  ;
  3394                                  ;       In:             DS:EBX  DATETIME address
  3395                                  ;                       DS:EDX  output buffer address
  3396                                  ;
  3397                                  ;-----------------------------------------------------------------------------------------------------------------------
  3398                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3399                                                          call    GetYear                                         ;ECX = YYYY
  3400                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3401                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3402                                                          pop     ecx                                             ;restore non-volatile regs
  3403                                                          ret                                                     ;return
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Day Names
  3407                                  ;
  3408                                  ;-----------------------------------------------------------------------------------------------------------------------
  3409                                  czSunday                db      "Sunday",0
  3410                                  czMonday                db      "Monday",0
  3411                                  czTuesday               db      "Tuesday",0
  3412                                  czWednesday             db      "Wednesday",0
  3413                                  czThursday              db      "Thursday",0
  3414                                  czFriday                db      "Friday",0
  3415                                  czSaturday              db      "Saturday",0
  3416                                  ;-----------------------------------------------------------------------------------------------------------------------
  3417                                  ;
  3418                                  ;       Month Names
  3419                                  ;
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421                                  czJanuary               db      "January",0
  3422                                  czFebruary              db      "February",0
  3423                                  czMarch                 db      "March",0
  3424                                  czApril                 db      "April",0
  3425                                  czMay                   db      "May",0
  3426                                  czJune                  db      "June",0
  3427                                  czJuly                  db      "July",0
  3428                                  czAugust                db      "August",0
  3429                                  czSeptember             db      "September",0
  3430                                  czOctober               db      "October",0
  3431                                  czNovember              db      "November",0
  3432                                  czDecember              db      "December",0
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434                                  ;
  3435                                  ;       Day Names Lookup Table
  3436                                  ;
  3437                                  ;-----------------------------------------------------------------------------------------------------------------------
  3438                                                          align   4
  3439                                  tDayNames               equ     $
  3440                                                          dd      czSunday
  3441                                                          dd      czMonday
  3442                                                          dd      czTuesday
  3443                                                          dd      czWednesday
  3444                                                          dd      czThursday
  3445                                                          dd      czFriday
  3446                                                          dd      czSaturday
  3447                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3448                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ;
  3451                                  ;       Month Names Lookup Table
  3452                                  ;
  3453                                  ;-----------------------------------------------------------------------------------------------------------------------
  3454                                                          align   4
  3455                                  tMonthNames             equ     $
  3456                                                          dd      czJanuary
  3457                                                          dd      czFebruary
  3458                                                          dd      czMarch
  3459                                                          dd      czApril
  3460                                                          dd      czMay
  3461                                                          dd      czJune
  3462                                                          dd      czJuly
  3463                                                          dd      czAugust
  3464                                                          dd      czSeptember
  3465                                                          dd      czOctober
  3466                                                          dd      czNovember
  3467                                                          dd      czDecember
  3468                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3469                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3470                                  ;=======================================================================================================================
  3471                                  ;
  3472                                  ;       Memory Helper Routines
  3473                                  ;
  3474                                  ;       AllocateMemory
  3475                                  ;       FreeMemory
  3476                                  ;
  3477                                  ;=======================================================================================================================
  3478                                  ;-----------------------------------------------------------------------------------------------------------------------
  3479                                  ;
  3480                                  ;       Routine:        AllocateMemory
  3481                                  ;
  3482                                  ;       Description:    This routine allocates a memory block for the given task.
  3483                                  ;
  3484                                  ;       In:             ECX     bytes of memory to allocate
  3485                                  ;
  3486                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3487                                  ;                               0       unable to allocate memory
  3488                                  ;
  3489                                  ;-----------------------------------------------------------------------------------------------------------------------
  3490                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3491                                                          push    ecx                                             ;
  3492                                                          push    esi                                             ;
  3493                                                          push    ds                                              ;
  3494                                  ;
  3495                                  ;       Address kernel memory structures
  3496                                  ;
  3497                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3498                                                          pop     ds                                              ;... into data segment reg
  3499                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3500                                  ;
  3501                                  ;       Set requested size to minimum block size if requested size is too small.
  3502                                  ;
  3503                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3504                                                          jae     .10                                             ;no, branch
  3505                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3506                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3507                                  ;
  3508                                  ;       Find the first free memory block large enough to satisfy the request.
  3509                                  ;
  3510                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3511                                  .20                     test    eax,eax                                         ;end of free block chain?
  3512                                                          jz      .220                                            ;yes, branch
  3513                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3514                                                          jbe     .30                                             ;yes, branch
  3515                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3516                                                          jmp     .20                                             ;continue
  3517                                  ;-----------------------------------------------------------------------------------------------------------------------
  3518                                  ;
  3519                                  ;       Address the previous and next free memory blocks.
  3520                                  ;
  3521                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3522                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3523                                  ;
  3524                                  ;       Remove the free memory block from the forward free memory block chain.
  3525                                  ;
  3526                                                          test    ebx,ebx                                         ;any previous free memory block?
  3527                                                          jz      .40                                             ;no, branch
  3528                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3529                                                          jmp     .50                                             ;continue
  3530                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3531                                  ;
  3532                                  ;       Remove the free memory block from the reverse free memory block chain.
  3533                                  ;
  3534                                  .50                     test    edx,edx                                         ;any next free memory block?
  3535                                                          jz      .60                                             ;no, branch
  3536                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3537                                                          jmp     .70                                             ;continue
  3538                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3539                                  ;-----------------------------------------------------------------------------------------------------------------------
  3540                                  ;
  3541                                  ;       Determine if the free memory block can be split.
  3542                                  ;
  3543                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3544                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3545                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3546                                                          jb      .150                                            ;no, branch
  3547                                  ;
  3548                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3549                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3550                                  ;       of the requested memory size.
  3551                                  ;
  3552                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3553                                                          mov     edx,eax                                         ;memory block address
  3554                                                          add     edx,ecx                                         ;address new new next contig block
  3555                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3556                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3557                                  ;
  3558                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3559                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3560                                  ;
  3561                                                          jecxz   .80                                             ;no next contig, branch
  3562                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3563                                                          jmp     .90                                             ;continue
  3564                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3565                                  ;
  3566                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3567                                  ;
  3568                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3569                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3570                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3571                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3572                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3573                                                          xor     ebx,ebx                                         ;zero register
  3574                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3575                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3576                                  ;
  3577                                  ;       Find the proper location in the free block chain for the new free block
  3578                                  ;
  3579                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3580                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3581                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3582                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3583                                                          jbe     .110                                            ;yes, branch
  3584                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3585                                                          jmp     .100                                            ;continue
  3586                                  ;
  3587                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3588                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3589                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3590                                  ;       block of hte next block, if there is one.
  3591                                  ;
  3592                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3593                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3594                                                          jecxz   .120                                            ;branch if no next block
  3595                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3596                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3597                                                          jmp     .130                                            ;continue
  3598                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3599                                  ;
  3600                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3601                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3602                                  ;       last user block pointers if necessary.
  3603                                  ;
  3604                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3605                                                          test    ebx,ebx                                         ;is there a previous block?
  3606                                                          jz      .140                                            ;no, branch
  3607                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3608                                                          jmp     .150                                            ;continue
  3609                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3610                                  ;
  3611                                  ;       Update the newly allocated block's owner and signature.
  3612                                  ;
  3613                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3614                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3615                                                          xor     edx,edx                                         ;zero register
  3616                                                          str     dx                                              ;load the task state register
  3617                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3618                                  ;
  3619                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3620                                  ;
  3621                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3622                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3623                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3624                                                          jb      .180                                            ;branch if block belongs to next task
  3625                                                          je      .170                                            ;branch if block belongs to this task
  3626                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3627                                                          jmp     .160                                            ;continue
  3628                                  ;
  3629                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3630                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3631                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3632                                  ;       place to insert the block.
  3633                                  ;
  3634                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3635                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3636                                                          jbe     .180                                            ;yes, branch
  3637                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3638                                                          test    ecx,ecx                                         ;end of chain?
  3639                                                          jz      .180                                            ;yes, branch
  3640                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3641                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3642                                                          je      .170                                            ;yes, continue search
  3643                                  ;
  3644                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3645                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3646                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3647                                  ;       do have a previous-block, we update that block's next-block pointer.
  3648                                  ;
  3649                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3650                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3651                                                          jecxz   .190                                            ;branch if no next-task block
  3652                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3653                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3654                                                          jmp     .200                                            ;continue
  3655                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3656                                  ;
  3657                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3658                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3659                                  ;       global first and/or last user-block pointers if necessary.
  3660                                  ;
  3661                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3662                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3663                                                          jz      .210                                            ;no, branch
  3664                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3665                                                          jmp     .220                                            ;continue
  3666                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3667                                  ;
  3668                                  ;       Restore registers and return to caller.
  3669                                  ;
  3670                                  .220                    pop     ds                                              ;restore non-volatie regs
  3671                                                          pop     esi                                             ;
  3672                                                          pop     ecx                                             ;
  3673                                                          pop     ebx                                             ;
  3674                                                          ret                                                     ;return
  3675                                  ;-----------------------------------------------------------------------------------------------------------------------
  3676                                  ;
  3677                                  ;       Routine:        FreeMemory
  3678                                  ;
  3679                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3680                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3681                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3682                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3683                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3684                                  ;
  3685                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3686                                  ;
  3687                                  ;       Out:            EAX     -1      invalid memory block
  3688                                  ;                               0       memory block freed
  3689                                  ;
  3690                                  ;-----------------------------------------------------------------------------------------------------------------------
  3691                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3692                                                          push    ecx                                             ;
  3693                                                          push    esi                                             ;
  3694                                                          push    edi                                             ;
  3695                                                          push    ds                                              ;
  3696                                                          push    es                                              ;
  3697                                  ;
  3698                                  ;       Address the root memory structure
  3699                                  ;
  3700                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3701                                                          pop     es                                              ;... into extra segment reg
  3702                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3703                                                          pop     ds                                              ;... into data segment reg
  3704                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3705                                                          mov     edi,edx                                         ;memory block address
  3706                                  ;
  3707                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3708                                  ;
  3709                                                          xor     eax,eax                                         ;indicate success
  3710                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3711                                                          je      .240                                            ;yes, branch
  3712                                                          dec     eax                                             ;indicate failure
  3713                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3714                                                          jne     .240                                            ;no, branch
  3715                                  ;-----------------------------------------------------------------------------------------------------------------------
  3716                                  ;
  3717                                  ;       Unlink the USER memory block.
  3718                                  ;
  3719                                  ;-----------------------------------------------------------------------------------------------------------------------
  3720                                  ;
  3721                                  ;       Set the block signature. Reset owner.
  3722                                  ;
  3723                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3724                                                          xor     eax,eax                                         ;zero register
  3725                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3726                                  ;
  3727                                  ;       Wipe user area.
  3728                                  ;
  3729                                                          push    edi                                             ;save block address
  3730                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3731                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3732                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3733                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3734                                                          rep     stosb                                           ;clear memory
  3735                                                          pop     edi                                             ;restore block address
  3736                                  ;
  3737                                  ;       Address the preceding and following USER memory blocks
  3738                                  ;
  3739                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3740                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3741                                  ;
  3742                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3743                                  ;       pointer to point to the USER block following this block.
  3744                                  ;
  3745                                                          test    ebx,ebx                                         ;is there a previous block?
  3746                                                          jz      .10                                             ;no, branch
  3747                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3748                                                          jmp     .20                                             ;continue
  3749                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3750                                  ;
  3751                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3752                                  ;       pointer to point to the USER block preceding this block.
  3753                                  ;
  3754                                  .20                     jecxz   .30                                             ;branch if no next block
  3755                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3756                                                          jmp     .40                                             ;continue
  3757                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3758                                  ;-----------------------------------------------------------------------------------------------------------------------
  3759                                  ;
  3760                                  ;       Merge with a previous contiguous FREE memory block.
  3761                                  ;
  3762                                  ;-----------------------------------------------------------------------------------------------------------------------
  3763                                  ;
  3764                                  ;       Address the preceding and following contiguous memory blocks.
  3765                                  ;
  3766                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3767                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3768                                  ;
  3769                                  ;       Verify we have a previous contiguous FREE block.
  3770                                  ;
  3771                                                          test    ebx,ebx                                         ;is there a previous block?
  3772                                                          jz      .100                                            ;no, branch
  3773                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3774                                                          jne     .100                                            ;no, branch
  3775                                  ;
  3776                                  ;       Update adjacent block's contiguous pointers.
  3777                                  ;
  3778                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3779                                                          jecxz   .50                                             ;branch if no next contiguous block
  3780                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3781                                                          jmp     .60                                             ;continue
  3782                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3783                                  ;
  3784                                  ;       Update the size of the merged FREE block.
  3785                                  ;
  3786                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3787                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3788                                  ;
  3789                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3790                                  ;
  3791                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3792                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3793                                                          rep     stosb                                           ;clear memory header
  3794                                                          mov     edi,ebx                                         ;current block is now previous block
  3795                                  ;-----------------------------------------------------------------------------------------------------------------------
  3796                                  ;
  3797                                  ;       Unlink the previous contiguous FREE memory block
  3798                                  ;
  3799                                  ;-----------------------------------------------------------------------------------------------------------------------
  3800                                  ;
  3801                                  ;       Address the preceding and following USER memory blocks
  3802                                  ;
  3803                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3804                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3805                                  ;
  3806                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3807                                  ;       block pointer.
  3808                                  ;
  3809                                                          test    ebx,ebx                                         ;is there a previous block?
  3810                                                          jz      .70                                             ;no, branch
  3811                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3812                                                          jmp     .80                                             ;branch
  3813                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3814                                  ;
  3815                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3816                                  ;       pointer.
  3817                                  ;
  3818                                  .80                     jecxz   .90                                             ;branch if no next block
  3819                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3820                                                          jmp     .100                                            ;continue
  3821                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3822                                  ;-----------------------------------------------------------------------------------------------------------------------
  3823                                  ;
  3824                                  ;       Merge with a following contiguous FREE memory block.
  3825                                  ;
  3826                                  ;-----------------------------------------------------------------------------------------------------------------------
  3827                                  ;
  3828                                  ;       Verify we have a following contiguous FREE block.
  3829                                  ;
  3830                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3831                                                          jecxz   .170                                            ;branch if no next contiguous block
  3832                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3833                                                          jne     .170                                            ;no, branch
  3834                                  ;
  3835                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3836                                  ;
  3837                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3838                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3839                                  ;
  3840                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3841                                  ;
  3842                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3843                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3844                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3845                                                          jz      .110                                            ;no, branch
  3846                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3847                                                          jmp     .120                                            ;continue
  3848                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3849                                  ;-----------------------------------------------------------------------------------------------------------------------
  3850                                  ;
  3851                                  ;       Unlink the following contiguous FREE memory block
  3852                                  ;
  3853                                  ;-----------------------------------------------------------------------------------------------------------------------
  3854                                  ;
  3855                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3856                                  ;
  3857                                  .120                    push    edi                                             ;save this block
  3858                                                          mov     edi,ecx                                         ;next contiguous block
  3859                                                          push    ecx                                             ;save next contiguous block
  3860                                  ;
  3861                                  ;       Address the preceding and following USER memory blocks
  3862                                  ;
  3863                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3864                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3865                                  ;
  3866                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3867                                  ;       block pointer.
  3868                                  ;
  3869                                                          test    ebx,ebx                                         ;is there a previous block?
  3870                                                          jz      .130                                            ;no, branch
  3871                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3872                                                          jmp     .140                                            ;branch
  3873                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3874                                  ;
  3875                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3876                                  ;       pointer.
  3877                                  ;
  3878                                  .140                    jecxz   .150                                            ;branch if no next block
  3879                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3880                                                          jmp     .160                                            ;continue
  3881                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3882                                  ;
  3883                                  ;       Clear next contiguous block's header
  3884                                  ;
  3885                                  .160                    pop     edi                                             ;next congiguous block pointer
  3886                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3887                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3888                                                          rep     stosb                                           ;clear memory header
  3889                                                          pop     edi                                             ;this block's pointer
  3890                                  ;-----------------------------------------------------------------------------------------------------------------------
  3891                                  ;
  3892                                  ;       Insert the final FREE block back into the block chain.
  3893                                  ;
  3894                                  ;-----------------------------------------------------------------------------------------------------------------------
  3895                                  ;
  3896                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3897                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3898                                  ;       all are smaller in size.
  3899                                  ;
  3900                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3901                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3902                                  .180                    jecxz   .190                                            ;exit if no ptr
  3903                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3904                                                          jb      .190                                            ;yes, branch
  3905                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3906                                                          jmp     .180                                            ;continue
  3907                                  ;
  3908                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3909                                  ;       larger free block. Update the next block's previous block pointer.
  3910                                  ;
  3911                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3912                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3913                                                          jecxz   .200                                            ;branch if no block found
  3914                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3915                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3916                                                          jmp     .210                                            ;continue
  3917                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3918                                  ;
  3919                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3920                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3921                                  ;       next pointer.
  3922                                  ;
  3923                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3924                                                          test    ebx,ebx                                         ;do we have a previous block?
  3925                                                          jz      .220                                            ;no, branch
  3926                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3927                                                          jmp     .230                                            ;continue
  3928                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3929                                  ;
  3930                                  ;       The memory free has completed.
  3931                                  ;
  3932                                  .230                    xor     eax,eax                                         ;indicate success
  3933                                  ;
  3934                                  ;       Restore and return.
  3935                                  ;
  3936                                  .240                    pop     es                                              ;restore non-volatile regs
  3937                                                          pop     ds                                              ;
  3938                                                          pop     edi                                             ;
  3939                                                          pop     esi                                             ;
  3940                                                          pop     ecx                                             ;
  3941                                                          pop     ebx                                             ;
  3942                                                          ret                                                     ;return
  3943                                  ;=======================================================================================================================
  3944                                  ;
  3945                                  ;       String Helper Routines
  3946                                  ;
  3947                                  ;       CompareMemory
  3948                                  ;       UpperCaseString
  3949                                  ;
  3950                                  ;=======================================================================================================================
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  ;
  3953                                  ;       Routine:        CompareMemory
  3954                                  ;
  3955                                  ;       Description:    This routine compares two byte arrays.
  3956                                  ;
  3957                                  ;       In:             DS:EDX  first source address
  3958                                  ;                       DS:EBX  second source address
  3959                                  ;                       ECX     comparison length
  3960                                  ;
  3961                                  ;       Out:            EDX     first source address
  3962                                  ;                       EBX     second source address
  3963                                  ;                       ECX     0       array 1 = array 2
  3964                                  ;                               <0      array 1 < array 2
  3965                                  ;                               >0      array 1 > array 2
  3966                                  ;
  3967                                  ;-----------------------------------------------------------------------------------------------------------------------
  3968                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3969                                                          push    edi                                             ;
  3970                                                          push    es                                              ;
  3971                                                          push    ds                                              ;copy DS
  3972                                                          pop     es                                              ;... to ES
  3973                                                          mov     esi,edx                                         ;first source address
  3974                                                          mov     edi,ebx                                         ;second source address
  3975                                                          cld                                                     ;forward strings
  3976                                                          rep     cmpsb                                           ;compare bytes
  3977                                                          mov     al,0                                            ;default result
  3978                                                          jz      .10                                             ;branch if arrays equal
  3979                                                          mov     al,1                                            ;positive result
  3980                                                          jnc     .10                                             ;branch if target > source
  3981                                                          mov     al,-1                                           ;negative result
  3982                                  .10                     movsx   ecx,al                                          ;extend sign
  3983                                                          pop     es                                              ;restore non-volatile regs
  3984                                                          pop     edi                                             ;
  3985                                                          pop     esi                                             ;
  3986                                                          ret                                                     ;return
  3987                                  ;-----------------------------------------------------------------------------------------------------------------------
  3988                                  ;
  3989                                  ;       Routine:        UpperCaseString
  3990                                  ;
  3991                                  ;       Description:    This routine places all characters in the given string to upper case.
  3992                                  ;
  3993                                  ;       In:             DS:EDX  string address
  3994                                  ;
  3995                                  ;       Out:            EDX     string address
  3996                                  ;
  3997                                  ;-----------------------------------------------------------------------------------------------------------------------
  3998                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3999                                                          mov     esi,edx                                         ;string address
  4000                                                          cld                                                     ;forward strings
  4001                                  .10                     lodsb                                                   ;string character
  4002                                                          test    al,al                                           ;null?
  4003                                                          jz      .20                                             ;yes, skip ahead
  4004                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4005                                                          jb      .10                                             ;no, continue
  4006                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4007                                                          ja      .10                                             ;no, continue
  4008                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4009                                                          mov     [esi-1],al                                      ;upper character
  4010                                                          jmp     .10                                             ;continue
  4011                                  .20                     pop     esi                                             ;restore non-volatile regs
  4012                                                          ret                                                     ;return
  4013                                  ;=======================================================================================================================
  4014                                  ;
  4015                                  ;       Console Helper Routines
  4016                                  ;
  4017                                  ;       FirstConsoleColumn
  4018                                  ;       GetConsoleChar
  4019                                  ;       GetConsoleString
  4020                                  ;       NextConsoleColumn
  4021                                  ;       NextConsoleRow
  4022                                  ;       PreviousConsoleColumn
  4023                                  ;       PutConsoleChar
  4024                                  ;       PutConsoleHexByte
  4025                                  ;       PutConsoleHexDword
  4026                                  ;       PutConsoleHexWord
  4027                                  ;       PutConsoleOIAChar
  4028                                  ;       PutConsoleOIAShift
  4029                                  ;       PutConsoleString
  4030                                  ;       Yield
  4031                                  ;
  4032                                  ;=======================================================================================================================
  4033                                  ;-----------------------------------------------------------------------------------------------------------------------
  4034                                  ;
  4035                                  ;       Routine:        FirstConsoleColumn
  4036                                  ;
  4037                                  ;       Description:    This routine resets the console column to start of the row.
  4038                                  ;
  4039                                  ;       In:             DS      OS data selector
  4040                                  ;
  4041                                  ;-----------------------------------------------------------------------------------------------------------------------
  4042                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4043                                                          mov     [wbConsoleColumn],al                            ;save column
  4044                                                          ret                                                     ;return
  4045                                  ;-----------------------------------------------------------------------------------------------------------------------
  4046                                  ;
  4047                                  ;       Routine:        GetConsoleChar
  4048                                  ;
  4049                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4050                                  ;
  4051                                  ;       Out:            AL      ASCII character code
  4052                                  ;                       AH      keyboard scan code
  4053                                  ;
  4054                                  ;-----------------------------------------------------------------------------------------------------------------------
  4055                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4056                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4057                                                          or      eax,eax                                         ;do we have a message?
  4058                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4059                                                          push    eax                                             ;save key codes
  4060                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4061                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4062                                                          pop     eax                                             ;restore key codes
  4063                                                          jne     GetConsoleChar                                  ;no, try again
  4064                                                          and     eax,0000ffffh                                   ;mask for key codes
  4065                                                          ret                                                     ;return
  4066                                  ;-----------------------------------------------------------------------------------------------------------------------
  4067                                  ;
  4068                                  ;       Routine:        GetConsoleString
  4069                                  ;
  4070                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4071                                  ;
  4072                                  ;       In:             DS:EDX  target buffer address
  4073                                  ;                       ECX     maximum number of characters to accept
  4074                                  ;                       BH      echo to terminal
  4075                                  ;                       BL      terminating character
  4076                                  ;
  4077                                  ;-----------------------------------------------------------------------------------------------------------------------
  4078                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4079                                                          push    esi                                             ;
  4080                                                          push    edi                                             ;
  4081                                                          push    es                                              ;
  4082                                                          push    ds                                              ;load data segment selector ...
  4083                                                          pop     es                                              ;... into extra segment register
  4084                                                          mov     edi,edx                                         ;edi = target buffer
  4085                                                          push    ecx                                             ;save maximum characters
  4086                                                          xor     al,al                                           ;zero register
  4087                                                          cld                                                     ;forward strings
  4088                                                          rep     stosb                                           ;zero fill buffer
  4089                                                          pop     ecx                                             ;maximum characters
  4090                                                          mov     edi,edx                                         ;edi = target buffer
  4091                                                          mov     esi,edx                                         ;esi = target buffer
  4092                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4093                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4094                                                          cmp     al,bl                                           ;is this the terminator?
  4095                                                          je      .50                                             ;yes, exit
  4096                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4097                                                          jne     .30                                             ;no, skip ahead
  4098                                                          cmp     esi,edi                                         ;at start of buffer?
  4099                                                          je      .20                                             ;yes, get next character
  4100                                                          dec     edi                                             ;backup target pointer
  4101                                                          mov     byte [edi],0                                    ;zero previous character
  4102                                                          inc     ecx                                             ;increment remaining chars
  4103                                                          test    bh,1                                            ;echo to console?
  4104                                                          jz      .20                                             ;no, get next character
  4105                                                          call    PreviousConsoleColumn                           ;backup console position
  4106                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4107                                                          call    PutConsoleChar                                  ;write space to console
  4108                                                          call    PlaceCursor                                     ;position the cursor
  4109                                                          jmp     .20                                             ;get next character
  4110                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4111                                                          jb      .20                                             ;no, get another character
  4112                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4113                                                          ja      .20                                             ;no, get another character
  4114                                                          stosb                                                   ;store character in buffer
  4115                                                          test    bh,1                                            ;echo to console?
  4116                                                          jz      .40                                             ;no, skip ahead
  4117                                                          call    PutConsoleChar                                  ;write character to console
  4118                                                          call    NextConsoleColumn                               ;advance console position
  4119                                                          call    PlaceCursor                                     ;position the cursor
  4120                                  .40                     dec     ecx                                             ;decrement remaining chars
  4121                                                          jmp     .10                                             ;next
  4122                                  .50                     xor     al,al                                           ;null
  4123                                                          stosb                                                   ;terminate buffer
  4124                                                          pop     es                                              ;restore non-volatile regs
  4125                                                          pop     edi                                             ;
  4126                                                          pop     esi                                             ;
  4127                                                          pop     ecx                                             ;
  4128                                                          ret                                                     ;return
  4129                                  ;-----------------------------------------------------------------------------------------------------------------------
  4130                                  ;
  4131                                  ;       Routine:        NextConsoleColumn
  4132                                  ;
  4133                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4134                                  ;                       incremented if the end of the current row is reached.
  4135                                  ;
  4136                                  ;       In:             DS      OS data selector
  4137                                  ;
  4138                                  ;-----------------------------------------------------------------------------------------------------------------------
  4139                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4140                                                          inc     al                                              ;increment column
  4141                                                          mov     [wbConsoleColumn],al                            ;save column
  4142                                                          cmp     al,ECONCOLS                                     ;end of row?
  4143                                                          jb      .10                                             ;no, skip ahead
  4144                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4145                                                          call    NextConsoleRow                                  ;line feed to next row
  4146                                  .10                     ret                                                     ;return
  4147                                  ;-----------------------------------------------------------------------------------------------------------------------
  4148                                  ;
  4149                                  ;       Routine:        NextConsoleRow
  4150                                  ;
  4151                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4152                                  ;
  4153                                  ;       In:             DS      OS data selector
  4154                                  ;
  4155                                  ;-----------------------------------------------------------------------------------------------------------------------
  4156                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4157                                                          inc     al                                              ;increment row
  4158                                                          mov     [wbConsoleRow],al                               ;save row
  4159                                                          cmp     al,ECONROWS                                     ;end of screen?
  4160                                                          jb      .10                                             ;no, skip ahead
  4161                                                          call    ScrollConsoleRow                                ;scroll up one row
  4162                                                          mov     al,[wbConsoleRow]                               ;row
  4163                                                          dec     al                                              ;decrement row
  4164                                                          mov     [wbConsoleRow],al                               ;save row
  4165                                  .10                     ret                                                     ;return
  4166                                  ;-----------------------------------------------------------------------------------------------------------------------
  4167                                  ;
  4168                                  ;       Routine:        PreviousConsoleColumn
  4169                                  ;
  4170                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4171                                  ;                       the column is set to the last position in the row and the row is decremented.
  4172                                  ;
  4173                                  ;       In:             DS      OS data selector
  4174                                  ;
  4175                                  ;-----------------------------------------------------------------------------------------------------------------------
  4176                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4177                                                          or      al,al                                           ;start of row?
  4178                                                          jnz     .10                                             ;no, skip ahead
  4179                                                          mov     ah,[wbConsoleRow]                               ;current row
  4180                                                          or      ah,ah                                           ;top of screen?
  4181                                                          jz      .20                                             ;yes, exit with no change
  4182                                                          dec     ah                                              ;decrement row
  4183                                                          mov     [wbConsoleRow],ah                               ;save row
  4184                                                          mov     al,ECONCOLS                                     ;set maximum column
  4185                                  .10                     dec     al                                              ;decrement column
  4186                                                          mov     [wbConsoleColumn],al                            ;save column
  4187                                  .20                     ret                                                     ;return
  4188                                  ;-----------------------------------------------------------------------------------------------------------------------
  4189                                  ;
  4190                                  ;       Routine:        PutConsoleChar
  4191                                  ;
  4192                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4193                                  ;
  4194                                  ;       In:             AL      ASCII character
  4195                                  ;                       DS      OS data selector
  4196                                  ;
  4197                                  ;-----------------------------------------------------------------------------------------------------------------------
  4198                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4199                                                          push    es                                              ;
  4200                                                          push    EGDTCGA                                         ;load CGA selector ...
  4201                                                          pop     es                                              ;... into extra segment reg
  4202                                                          mov     cl,[wbConsoleColumn]                            ;column
  4203                                                          mov     ch,[wbConsoleRow]                               ;row
  4204                                                          call    SetConsoleChar                                  ;put character at row, column
  4205                                                          pop     es                                              ;restore non-volatile regs
  4206                                                          pop     ecx                                             ;
  4207                                                          ret                                                     ;return
  4208                                  ;-----------------------------------------------------------------------------------------------------------------------
  4209                                  ;
  4210                                  ;       Routine:        PutConsoleHexByte
  4211                                  ;
  4212                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4213                                  ;
  4214                                  ;       In:             AL      byte value
  4215                                  ;                       CL      column
  4216                                  ;                       CH      row
  4217                                  ;                       DS      OS data selector
  4218                                  ;                       ES      CGA selector
  4219                                  ;
  4220                                  ;-----------------------------------------------------------------------------------------------------------------------
  4221                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4222                                                          shr     al,4                                            ;hi-order nybble
  4223                                                          call    .10                                             ;make ASCII and store
  4224                                                          pop     eax                                             ;byte value
  4225                                                          and     al,0Fh                                          ;lo-order nybble
  4226                                  .10                     or      al,030h                                         ;apply ASCII zone
  4227                                                          cmp     al,03Ah                                         ;numeric?
  4228                                                          jb      .20                                             ;yes, skip ahead
  4229                                                          add     al,7                                            ;add ASCII offset for alpha
  4230                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4231                                                          ret                                                     ;return
  4232                                  ;-----------------------------------------------------------------------------------------------------------------------
  4233                                  ;
  4234                                  ;       Routine:        PutConsoleHexDword
  4235                                  ;
  4236                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4237                                  ;
  4238                                  ;       In:             EAX     value
  4239                                  ;                       CL      column
  4240                                  ;                       CH      row
  4241                                  ;                       DS      OS data selector
  4242                                  ;                       ES      CGA selector
  4243                                  ;
  4244                                  ;-----------------------------------------------------------------------------------------------------------------------
  4245                                  PutConsoleHexDword      push    eax
  4246                                                          shr     eax,16
  4247                                                          call    PutConsoleHexWord
  4248                                                          pop     eax
  4249                                                          call    PutConsoleHexWord
  4250                                                          ret
  4251                                  ;-----------------------------------------------------------------------------------------------------------------------
  4252                                  ;
  4253                                  ;       Routine:        PutConsoleHexWord
  4254                                  ;
  4255                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4256                                  ;
  4257                                  ;       In:             EAX     value
  4258                                  ;                       CL      column
  4259                                  ;                       CH      row
  4260                                  ;                       DS      OS data selector
  4261                                  ;                       ES      CGA selector
  4262                                  ;
  4263                                  ;-----------------------------------------------------------------------------------------------------------------------
  4264                                  PutConsoleHexWord       push    eax
  4265                                                          shr     eax,8
  4266                                                          call    PutConsoleHexByte
  4267                                                          pop     eax
  4268                                                          call    PutConsoleHexByte
  4269                                                          ret
  4270                                  ;-----------------------------------------------------------------------------------------------------------------------
  4271                                  ;
  4272                                  ;       Routine:        PutConsoleOIAChar
  4273                                  ;
  4274                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4275                                  ;
  4276                                  ;       In:             DS      OS data selector
  4277                                  ;
  4278                                  ;-----------------------------------------------------------------------------------------------------------------------
  4279                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4280                                                          push    ecx                                             ;
  4281                                                          push    esi                                             ;
  4282                                                          push    ds                                              ;
  4283                                                          push    es                                              ;
  4284                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4285                                                          pop     ds                                              ;... into data segment register
  4286                                                          push    EGDTCGA                                         ;load CGA selector ...
  4287                                                          pop     es                                              ;... into extra segment register
  4288                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4289                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4290                                                          mov     bl,0                                            ;starting column
  4291                                                          mov     ecx,6                                           ;maximum scan codes
  4292                                  .10                     push    ecx                                             ;save remaining count
  4293                                                          mov     ecx,ebx                                         ;row, column
  4294                                                          lodsb                                                   ;read scan code
  4295                                                          or      al,al                                           ;scan code present?
  4296                                                          jz      .20                                             ;no, skip ahead
  4297                                                          call    PutConsoleHexByte                               ;display scan code
  4298                                                          jmp     .30                                             ;continue
  4299                                  .20                     mov     al,' '                                          ;ASCII space
  4300                                                          call    SetConsoleChar                                  ;display space
  4301                                                          mov     al,' '                                          ;ASCII space
  4302                                                          call    SetConsoleChar                                  ;display space
  4303                                  .30                     add     bl,2                                            ;next column (+2)
  4304                                                          pop     ecx                                             ;restore remaining
  4305                                                          loop    .10                                             ;next code
  4306                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4307                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4308                                                          jb      .40                                             ;no, skip ahead
  4309                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4310                                                          ja      .40                                             ;no, skip ahead
  4311                                                          mov     ch,bh                                           ;OIA row
  4312                                                          mov     cl,40                                           ;character display column
  4313                                                          call    SetConsoleChar                                  ;display ASCII character
  4314                                  .40                     pop     es                                              ;restore non-volatile regs
  4315                                                          pop     ds                                              ;
  4316                                                          pop     esi                                             ;
  4317                                                          pop     ecx                                             ;
  4318                                                          pop     ebx                                             ;
  4319                                                          ret                                                     ;return
  4320                                  ;-----------------------------------------------------------------------------------------------------------------------
  4321                                  ;
  4322                                  ;       Routine:        PutConsoleOIAShift
  4323                                  ;
  4324                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4325                                  ;
  4326                                  ;       In:             BL      shift flags
  4327                                  ;                       BH      lock flags
  4328                                  ;                       DS      OS data selector
  4329                                  ;
  4330                                  ;-----------------------------------------------------------------------------------------------------------------------
  4331                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4332                                                          push    es                                              ;
  4333                                                          push    EGDTCGA                                         ;load CGA selector ...
  4334                                                          pop     es                                              ;... into ES register
  4335                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4336                                                          mov     al,EASCIISPACE                                  ;space is default character
  4337                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4338                                                          jz      .10                                             ;no, skip ahead
  4339                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4340                                  .10                     mov     cl,14                                           ;indicator column
  4341                                                          call    SetConsoleChar                                  ;display ASCII character
  4342                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4343                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4344                                                          jz      .20                                             ;no, skip ahead
  4345                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4346                                  .20                     mov     cl,64                                           ;indicator column
  4347                                                          call    SetConsoleChar                                  ;display ASCII character
  4348                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4349                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4350                                                          jz      .30                                             ;no, skip ahead
  4351                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4352                                  .30                     mov     cl,15                                           ;indicator column
  4353                                                          call    SetConsoleChar                                  ;display ASCII character
  4354                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4355                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4356                                                          jz      .40                                             ;no, skip ahead
  4357                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4358                                  .40                     mov     cl,63                                           ;indicator column
  4359                                                          call    SetConsoleChar                                  ;display ASCII character
  4360                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4361                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4362                                                          jz      .50                                             ;no, skip ahead
  4363                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4364                                  .50                     mov     cl,16                                           ;indicator column
  4365                                                          call    SetConsoleChar                                  ;display ASCII character
  4366                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4367                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4368                                                          jz      .60                                             ;no, skip ahead
  4369                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4370                                  .60                     mov     cl,62                                           ;indicator column
  4371                                                          call    SetConsoleChar                                  ;display ASCII character
  4372                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4373                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4374                                                          jz      .70                                             ;no, skip ahead
  4375                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4376                                  .70                     mov     cl,78                                           ;indicator column
  4377                                                          call    SetConsoleChar                                  ;display ASCII character
  4378                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4379                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4380                                                          jz      .80                                             ;no, skip ahead
  4381                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4382                                  .80                     mov     cl,77                                           ;indicator column
  4383                                                          call    SetConsoleChar                                  ;display ASCII character
  4384                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4385                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4386                                                          jz      .90                                             ;no, skip ahead
  4387                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4388                                  .90                     mov     cl,76                                           ;indicator column
  4389                                                          call    SetConsoleChar                                  ;display ASCII character
  4390                                                          pop     es                                              ;restore non-volatile regs
  4391                                                          pop     ecx                                             ;
  4392                                                          ret                                                     ;return
  4393                                  ;-----------------------------------------------------------------------------------------------------------------------
  4394                                  ;
  4395                                  ;       Routine:        PutConsoleString
  4396                                  ;
  4397                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4398                                  ;                       console position as needed.
  4399                                  ;
  4400                                  ;       In:             EDX     source address
  4401                                  ;                       DS      OS data selector
  4402                                  ;
  4403                                  ;-----------------------------------------------------------------------------------------------------------------------
  4404                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4405                                                          mov     esi,edx                                         ;source address
  4406                                                          cld                                                     ;forward strings
  4407                                  .10                     lodsb                                                   ;ASCII character
  4408                                                          or      al,al                                           ;end of string?
  4409                                                          jz      .40                                             ;yes, skip ahead
  4410                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4411                                                          jne     .20                                             ;no, skip ahead
  4412                                                          call    FirstConsoleColumn                              ;move to start of row
  4413                                                          jmp     .10                                             ;next character
  4414                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4415                                                          jne     .30                                             ;no, skip ahead
  4416                                                          call    NextConsoleRow                                  ;move to next row
  4417                                                          jmp     .10                                             ;next character
  4418                                  .30                     call    PutConsoleChar                                  ;output character to console
  4419                                                          call    NextConsoleColumn                               ;advance to next column
  4420                                                          jmp     .10                                             ;next character
  4421                                  .40                     pop     esi                                             ;restore non-volatile regs
  4422                                                          ret                                                     ;return
  4423                                  ;-----------------------------------------------------------------------------------------------------------------------
  4424                                  ;
  4425                                  ;       Routine:        Yield
  4426                                  ;
  4427                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4428                                  ;
  4429                                  ;-----------------------------------------------------------------------------------------------------------------------
  4430                                  Yield                   sti                                                     ;enable maskagle interrupts
  4431                                                          hlt                                                     ;halt until external interrupt
  4432                                                          ret                                                     ;return
  4433                                  ;=======================================================================================================================
  4434                                  ;
  4435                                  ;       Data-Type Conversion Helper Routines
  4436                                  ;
  4437                                  ;       DecimalToUnsigned
  4438                                  ;       HexadecimalToUnsigned
  4439                                  ;       UnsignedToDecimalString
  4440                                  ;       UnsignedToHexadecimal
  4441                                  ;
  4442                                  ;=======================================================================================================================
  4443                                  ;-----------------------------------------------------------------------------------------------------------------------
  4444                                  ;
  4445                                  ;       Routine:        DecimalToUnsigned
  4446                                  ;
  4447                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4448                                  ;
  4449                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4450                                  ;
  4451                                  ;       Output:         EAX     unsigned integer value
  4452                                  ;
  4453                                  ;-----------------------------------------------------------------------------------------------------------------------
  4454                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4455                                                          mov     esi,edx                                         ;source address
  4456                                                          xor     edx,edx                                         ;zero total
  4457                                  .10                     lodsb                                                   ;source byte
  4458                                                          cmp     al,','                                          ;comma?
  4459                                                          je      .10                                             ;yes, ignore
  4460                                                          test    al,al                                           ;end of string?
  4461                                                          jz      .30                                             ;yes, done
  4462                                                          cmp     al,'.'                                          ;decimal point?
  4463                                                          je      .30                                             ;yes, done
  4464                                                          cmp     al,'0'                                          ;numeral?
  4465                                                          jb      .20                                             ;no, invalid string
  4466                                                          cmp     al,'9'                                          ;numeral?
  4467                                                          ja      .20                                             ;no, invalid string
  4468                                                          and     al,00Fh                                         ;mask ASCII zone
  4469                                                          push    eax                                             ;save numeral
  4470                                                          shl     edx,1                                           ;total * 2
  4471                                                          mov     eax,edx                                         ;total * 2
  4472                                                          shl     edx,2                                           ;total * 8
  4473                                                          add     edx,eax                                         ;total * 10
  4474                                                          pop     eax                                             ;restore numeral
  4475                                                          add     edx,eax                                         ;accumulate decimal digit
  4476                                                          xor     eax,eax                                         ;zero register
  4477                                                          jmp     .10                                             ;next
  4478                                  .20                     xor     edx,edx                                         ;zero result on error
  4479                                  .30                     mov     eax,edx                                         ;result
  4480                                                          pop     esi                                             ;restore non-volatile regs
  4481                                                          ret                                                     ;return
  4482                                  ;-----------------------------------------------------------------------------------------------------------------------
  4483                                  ;
  4484                                  ;       Routine:        HexadecimalToUnsigned
  4485                                  ;
  4486                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4487                                  ;
  4488                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4489                                  ;
  4490                                  ;       Output:         EAX     unsigned integer value
  4491                                  ;
  4492                                  ;-----------------------------------------------------------------------------------------------------------------------
  4493                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4494                                                          mov     esi,edx                                         ;source address
  4495                                                          xor     edx,edx                                         ;zero register
  4496                                  .10                     lodsb                                                   ;source byte
  4497                                                          test    al,al                                           ;end of string?
  4498                                                          jz      .30                                             ;yes, branch
  4499                                                          cmp     al,'9'                                          ;hexadecimal?
  4500                                                          jna     .20                                             ;no, skip ahead
  4501                                                          sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4502                                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4503                                                          shl     edx,4                                           ;previous total x 16
  4504                                                          add     edx,eax                                         ;add prior value x 16
  4505                                                          jmp     .10                                             ;next
  4506                                  .30                     mov     eax,edx                                         ;result
  4507                                                          pop     esi                                             ;restore non-volatile regs
  4508                                                          ret                                                     ;return
  4509                                  ;-----------------------------------------------------------------------------------------------------------------------
  4510                                  ;
  4511                                  ;       Routine:        UnsignedToDecimalString
  4512                                  ;
  4513                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4514                                  ;
  4515                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4516                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4517                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4518                                  ;                       ECX     32-bit binary
  4519                                  ;                       DS:EDX  output buffer address
  4520                                  ;
  4521                                  ;-----------------------------------------------------------------------------------------------------------------------
  4522                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4523                                                          push    ecx                                             ;
  4524                                                          push    edi                                             ;
  4525                                                          push    es                                              ;
  4526                                                          push    ds                                              ;load data selector
  4527                                                          pop     es                                              ;... into extra segment reg
  4528                                                          mov     edi,edx                                         ;output buffer address
  4529                                                          and     bh,00001111b                                    ;zero internal flags
  4530                                                          mov     edx,ecx                                         ;binary
  4531                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4532                                                          call    .30                                             ;divide and store
  4533                                                          mov     ecx,100000000                                   ;10^8 divisor
  4534                                                          call    .10                                             ;divide and store
  4535                                                          mov     ecx,10000000                                    ;10^7 divisor
  4536                                                          call    .30                                             ;divide and store
  4537                                                          mov     ecx,1000000                                     ;10^6 divisor
  4538                                                          call    .30                                             ;divide and store
  4539                                                          mov     ecx,100000                                      ;10^5 divisor
  4540                                                          call    .10                                             ;divide and store
  4541                                                          mov     ecx,10000                                       ;10^4 divisor
  4542                                                          call    .30                                             ;divide and store
  4543                                                          mov     ecx,1000                                        ;10^3 divisor
  4544                                                          call    .30                                             ;divide and store
  4545                                                          mov     ecx,100                                         ;10^2 divisor
  4546                                                          call    .10                                             ;divide and store
  4547                                                          mov     ecx,10                                          ;10^2 divisor
  4548                                                          call    .30                                             ;divide and store
  4549                                                          mov     eax,edx                                         ;10^1 remainder
  4550                                                          call    .40                                             ;store
  4551                                                          xor     al,al                                           ;null terminator
  4552                                                          stosb                                                   ;store in output buffer
  4553                                                          pop     es                                              ;restore non-volatile regs
  4554                                                          pop     edi                                             ;
  4555                                                          pop     ecx                                             ;
  4556                                                          pop     ebx                                             ;
  4557                                                          ret                                                     ;return
  4558                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4559                                                          jz      .30                                             ;no, branch
  4560                                                          test    bh,00000001b                                    ;trim leading zeros?
  4561                                                          jz      .20                                             ;no, store delim
  4562                                                          test    bh,00010000b                                    ;non-zero found?
  4563                                                          jz      .30                                             ;no, branch
  4564                                  .20                     mov     al,','                                          ;delimiter
  4565                                                          stosb                                                   ;store delimiter
  4566                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4567                                                          xor     edx,edx                                         ;zero hi-order
  4568                                                          div     ecx                                             ;divide by power of 10
  4569                                                          test    al,al                                           ;zero?
  4570                                                          jz      .50                                             ;yes, branch
  4571                                                          or      bh,00010000b                                    ;non-zero found
  4572                                  .40                     or      al,030h                                         ;ASCII zone
  4573                                                          stosb                                                   ;store digit
  4574                                                          ret                                                     ;return
  4575                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4576                                                          jz      .40                                             ;no, store and continue
  4577                                                          test    bh,00010000b                                    ;non-zero found?
  4578                                                          jnz     .40                                             ;yes, store and continue
  4579                                                          ret                                                     ;return
  4580                                  ;-----------------------------------------------------------------------------------------------------------------------
  4581                                  ;
  4582                                  ;       Routine:        UnsignedToHexadecimal
  4583                                  ;
  4584                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4585                                  ;
  4586                                  ;       Input:          DS:EDX  output buffer address
  4587                                  ;                       ECX     32-bit binary
  4588                                  ;
  4589                                  ;-----------------------------------------------------------------------------------------------------------------------
  4590                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4591                                                          mov     edi,edx                                         ;output buffer address
  4592                                                          mov     edx,ecx                                         ;32-bit unsigned
  4593                                                          xor     ecx,ecx                                         ;zero register
  4594                                                          mov     cl,8                                            ;nybble count
  4595                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4596                                                          mov     al,dl                                           ;????bbbb
  4597                                                          and     al,00Fh                                         ;mask out bits 4-7
  4598                                                          or      al,030h                                         ;mask in ascii zone
  4599                                                          cmp     al,03Ah                                         ;A through F?
  4600                                                          jb      .20                                             ;no, skip ahead
  4601                                                          add     al,7                                            ;41h through 46h
  4602                                  .20                     stosb                                                   ;store hexnum
  4603                                                          loop    .10                                             ;next nybble
  4604                                                          xor     al,al                                           ;zero reg
  4605                                                          stosb                                                   ;null terminate
  4606                                                          pop     edi                                             ;restore non-volatile regs
  4607                                                          ret                                                     ;return
  4608                                  ;=======================================================================================================================
  4609                                  ;
  4610                                  ;       Message Queue Helper Routines
  4611                                  ;
  4612                                  ;       GetMessage
  4613                                  ;       PutMessage
  4614                                  ;
  4615                                  ;=======================================================================================================================
  4616                                  ;-----------------------------------------------------------------------------------------------------------------------
  4617                                  ;
  4618                                  ;       Routine:        GetMessage
  4619                                  ;
  4620                                  ;       Description:    This routine reads and removes a message from the message queue.
  4621                                  ;
  4622                                  ;       Out:            EAX     lo-order message data
  4623                                  ;                       EDX     hi-order message data
  4624                                  ;
  4625                                  ;                       CY      0 = message read
  4626                                  ;                               1 = no message to read
  4627                                  ;
  4628                                  ;-----------------------------------------------------------------------------------------------------------------------
  4629                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4630                                                          push    ecx                                             ;
  4631                                                          push    ds                                              ;
  4632                                                          push    ELDTMQ                                          ;load message queue selector ...
  4633                                                          pop     ds                                              ;... into data segment register
  4634                                                          mov     ebx,[MQHead]                                    ;head ptr
  4635                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4636                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4637                                                          or      eax,edx                                         ;is queue empty?
  4638                                                          stc                                                     ;assume queue is emtpy
  4639                                                          jz      .20                                             ;yes, skip ahead
  4640                                                          xor     ecx,ecx                                         ;store zero
  4641                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4642                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4643                                                          add     ebx,8                                           ;next queue element
  4644                                                          and     ebx,03FCh                                       ;at end of queue?
  4645                                                          jnz     .10                                             ;no, skip ahead
  4646                                                          mov     bl,8                                            ;reset to 1st entry
  4647                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4648                                                          clc                                                     ;indicate message read
  4649                                  .20                     pop     ds                                              ;restore non-volatile regs
  4650                                                          pop     ecx                                             ;
  4651                                                          pop     ebx                                             ;
  4652                                                          ret                                                     ;return
  4653                                  ;-----------------------------------------------------------------------------------------------------------------------
  4654                                  ;
  4655                                  ;       Routine:        PutMessage
  4656                                  ;
  4657                                  ;       Description:    This routine adda a message to the message queue.
  4658                                  ;
  4659                                  ;       In:             ECX     hi-order data word
  4660                                  ;                       EDX     lo-order data word
  4661                                  ;
  4662                                  ;       Out:            CY      0 = success
  4663                                  ;                               1 = fail: queue is full
  4664                                  ;
  4665                                  ;-----------------------------------------------------------------------------------------------------------------------
  4666                                  PutMessage              push    ds                                              ;save non-volatile regs
  4667                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4668                                                          pop     ds                                              ;... into data segment register
  4669                                                          mov     eax,[MQTail]                                    ;tail ptr
  4670                                                          cmp     dword [eax],0                                   ;is queue full?
  4671                                                          stc                                                     ;assume failure
  4672                                                          jne     .20                                             ;yes, cannot store
  4673                                                          mov     [eax],edx                                       ;store lo-order data
  4674                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4675                                                          add     eax,8                                           ;next queue element adr
  4676                                                          and     eax,03FCh                                       ;at end of queue?
  4677                                                          jnz     .10                                             ;no, skip ahead
  4678                                                          mov     al,8                                            ;reset to top of queue
  4679                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4680                                                          clc                                                     ;indicate success
  4681                                  .20                     pop     ds                                              ;restore non-volatile regs
  4682                                                          ret                                                     ;return
  4683                                  ;=======================================================================================================================
  4684                                  ;
  4685                                  ;       Memory-Mapped Video Routines
  4686                                  ;
  4687                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4688                                  ;
  4689                                  ;       ClearConsoleScreen
  4690                                  ;       ScrollConsoleRow
  4691                                  ;       SetConsoleChar
  4692                                  ;       SetConsoleString
  4693                                  ;
  4694                                  ;=======================================================================================================================
  4695                                  ;-----------------------------------------------------------------------------------------------------------------------
  4696                                  ;
  4697                                  ;       Routine:        ClearConsoleScreen
  4698                                  ;
  4699                                  ;       Description:    This routine clears the console (CGA) screen.
  4700                                  ;
  4701                                  ;-----------------------------------------------------------------------------------------------------------------------
  4702                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4703                                                          push    edi                                             ;
  4704                                                          push    ds                                              ;
  4705                                                          push    es                                              ;
  4706                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4707                                                          pop     ds                                              ;... into DS register
  4708                                                          push    EGDTCGA                                         ;load CGA selector ...
  4709                                                          pop     es                                              ;... into ES register
  4710                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4711                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4712                                                          xor     edi,edi                                         ;target offset
  4713                                                          cld                                                     ;forward strings
  4714                                                          rep     stosd                                           ;reset screen body
  4715                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4716                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4717                                                          rep     stosd                                           ;reset OIA line
  4718                                                          xor     al,al                                           ;zero register
  4719                                                          mov     [wbConsoleRow],al                               ;reset console row
  4720                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4721                                                          call    PlaceCursor                                     ;place cursor at current position
  4722                                                          pop     es                                              ;restore non-volatile regs
  4723                                                          pop     ds                                              ;
  4724                                                          pop     edi                                             ;
  4725                                                          pop     ecx                                             ;
  4726                                                          ret                                                     ;return
  4727                                  ;-----------------------------------------------------------------------------------------------------------------------
  4728                                  ;
  4729                                  ;       Routine:        ScrollConsoleRow
  4730                                  ;
  4731                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4732                                  ;
  4733                                  ;-----------------------------------------------------------------------------------------------------------------------
  4734                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4735                                                          push    esi                                             ;
  4736                                                          push    edi                                             ;
  4737                                                          push    ds                                              ;
  4738                                                          push    es                                              ;
  4739                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4740                                                          pop     ds                                              ;... into DS
  4741                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4742                                                          pop     es                                              ;... into ES
  4743                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4744                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4745                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4746                                                          cld                                                     ;forward strings
  4747                                                          rep     movsd                                           ;move 24 lines up
  4748                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4749                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4750                                                          rep     stosd                                           ;clear bottom row
  4751                                                          pop     es                                              ;restore non-volatile regs
  4752                                                          pop     ds                                              ;
  4753                                                          pop     edi                                             ;
  4754                                                          pop     esi                                             ;
  4755                                                          pop     ecx                                             ;
  4756                                                          ret                                                     ;return
  4757                                  ;-----------------------------------------------------------------------------------------------------------------------
  4758                                  ;
  4759                                  ;       Routine:        SetConsoleChar
  4760                                  ;
  4761                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4762                                  ;
  4763                                  ;       In:             AL      ASCII character
  4764                                  ;                       CL      column
  4765                                  ;                       CH      row
  4766                                  ;                       ES      CGA selector
  4767                                  ;
  4768                                  ;       Out:            EAX     last target address written (ES:)
  4769                                  ;                       CL      column + 1
  4770                                  ;
  4771                                  ;-----------------------------------------------------------------------------------------------------------------------
  4772                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4773                                                          movzx   eax,ch                                          ;row
  4774                                                          mov     ah,ECONCOLS                                     ;cols/row
  4775                                                          mul     ah                                              ;row * cols/row
  4776                                                          add     al,cl                                           ;add column
  4777                                                          adc     ah,0                                            ;handle carry
  4778                                                          shl     eax,1                                           ;screen offset
  4779                                                          mov     [es:eax],dl                                     ;store character
  4780                                                          inc     cl                                              ;next column
  4781                                                          ret                                                     ;return
  4782                                  ;-----------------------------------------------------------------------------------------------------------------------
  4783                                  ;
  4784                                  ;       Routine:        SetConsoleString
  4785                                  ;
  4786                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4787                                  ;
  4788                                  ;       In:             ESI     source offset (DS:)
  4789                                  ;                       CL      column
  4790                                  ;                       CH      row
  4791                                  ;                       ES      CGA selector
  4792                                  ;
  4793                                  ;-----------------------------------------------------------------------------------------------------------------------
  4794                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4795                                                          cld                                                     ;forward strings
  4796                                  .10                     lodsb                                                   ;next ASCII character
  4797                                                          test    al,al                                           ;end of string?
  4798                                                          jz      .20                                             ;yes, branch
  4799                                                          call    SetConsoleChar                                  ;store character
  4800                                                          jmp     .10                                             ;continue
  4801                                  .20                     pop     esi                                             ;restore non-volatile regs
  4802                                                          ret                                                     ;return
  4803                                  ;=======================================================================================================================
  4804                                  ;
  4805                                  ;       Input/Output Routines
  4806                                  ;
  4807                                  ;       These routines read and/or write directly to ports.
  4808                                  ;
  4809                                  ;       GetBaseMemSize
  4810                                  ;       GetExtendedMemSize
  4811                                  ;       GetROMMemSize
  4812                                  ;       PlaceCursor
  4813                                  ;       PutPrimaryEndOfInt
  4814                                  ;       PutSecondaryEndOfInt
  4815                                  ;       ReadRealTimeClock
  4816                                  ;       ResetSystem
  4817                                  ;       SetKeyboardLamps
  4818                                  ;       WaitForKeyInBuffer
  4819                                  ;       WaitForKeyOutBuffer
  4820                                  ;
  4821                                  ;=======================================================================================================================
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  ;
  4824                                  ;       Routine:        GetBaseMemSize
  4825                                  ;
  4826                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4827                                  ;
  4828                                  ;       Output:         EAX     base RAM size in bytes
  4829                                  ;
  4830                                  ;-----------------------------------------------------------------------------------------------------------------------
  4831                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4832                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4833                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4834                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4835                                                          mov     ah,al                                           ;save base RAM high
  4836                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4837                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4838                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4839                                                          ret                                                     ;return to caller
  4840                                  ;-----------------------------------------------------------------------------------------------------------------------
  4841                                  ;
  4842                                  ;       Routine:        GetExtendedMemSize
  4843                                  ;
  4844                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4845                                  ;
  4846                                  ;       Output:         EAX     extended RAM size in bytes
  4847                                  ;
  4848                                  ;-----------------------------------------------------------------------------------------------------------------------
  4849                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4850                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4851                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4852                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4853                                                          mov     ah,al                                           ;save extended RAM high
  4854                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4855                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4856                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4857                                                          ret                                                     ;return to caller
  4858                                  ;-----------------------------------------------------------------------------------------------------------------------
  4859                                  ;
  4860                                  ;       Routine:        GetROMMemSize
  4861                                  ;
  4862                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4863                                  ;
  4864                                  ;       Output:         EAX     RAM size in bytes
  4865                                  ;
  4866                                  ;-----------------------------------------------------------------------------------------------------------------------
  4867                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4868                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4869                                                          ret                                                     ;return
  4870                                  ;-----------------------------------------------------------------------------------------------------------------------
  4871                                  ;
  4872                                  ;       Routine:        PlaceCursor
  4873                                  ;
  4874                                  ;       Description:    This routine positions the cursor on the console.
  4875                                  ;
  4876                                  ;       In:             DS      OS data selector
  4877                                  ;
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4880                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4881                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4882                                                          mul     ah                                              ;row offset
  4883                                                          add     al,[wbConsoleColumn]                            ;add column
  4884                                                          adc     ah,0                                            ;add overflow
  4885                                                          mov     ecx,eax                                         ;screen offset
  4886                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4887                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4888                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4889                                                          out     dx,al                                           ;select register
  4890                                                          inc     edx                                             ;data port
  4891                                                          mov     al,ch                                           ;hi-order cursor loc
  4892                                                          out     dx,al                                           ;store hi-order loc
  4893                                                          dec     edx                                             ;register select port
  4894                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4895                                                          out     dx,al                                           ;select register
  4896                                                          inc     edx                                             ;data port
  4897                                                          mov     al,cl                                           ;lo-order cursor loc
  4898                                                          out     dx,al                                           ;store lo-order loc
  4899                                                          pop     ecx                                             ;restore non-volatile regs
  4900                                                          ret                                                     ;return
  4901                                  ;-----------------------------------------------------------------------------------------------------------------------
  4902                                  ;
  4903                                  ;       Routine:        PutPrimaryEndOfInt
  4904                                  ;
  4905                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4906                                  ;
  4907                                  ;-----------------------------------------------------------------------------------------------------------------------
  4908                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4909                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4910                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4911                                                          ret                                                     ;return
  4912                                  ;-----------------------------------------------------------------------------------------------------------------------
  4913                                  ;
  4914                                  ;       Routine:        PutSecondaryEndOfInt
  4915                                  ;
  4916                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4917                                  ;
  4918                                  ;-----------------------------------------------------------------------------------------------------------------------
  4919                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4920                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4921                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4922                                                          ret                                                     ;return
  4923                                  ;-----------------------------------------------------------------------------------------------------------------------
  4924                                  ;
  4925                                  ;       Routine:        ReadRealTimeClock
  4926                                  ;
  4927                                  ;       Description:    This routine gets current date time from the real-time clock.
  4928                                  ;
  4929                                  ;       In:             DS:EBX  DATETIME structure
  4930                                  ;
  4931                                  ;-----------------------------------------------------------------------------------------------------------------------
  4932                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4933                                                          push    edi                                             ;
  4934                                                          push    es                                              ;
  4935                                                          push    ds                                              ;store data selector ...
  4936                                                          pop     es                                              ;... in es register
  4937                                                          mov     edi,ebx                                         ;date-time structure
  4938                                                          mov     al,ERTCSECONDREG                                ;second register
  4939                                                          out     ERTCREGPORT,al                                  ;select second register
  4940                                                          in      al,ERTCDATAPORT                                 ;read second register
  4941                                                          cld                                                     ;forward strings
  4942                                                          stosb                                                   ;store second value
  4943                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4944                                                          out     ERTCREGPORT,al                                  ;select minute register
  4945                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4946                                                          stosb                                                   ;store minute value
  4947                                                          mov     al,ERTCHOURREG                                  ;hour register
  4948                                                          out     ERTCREGPORT,al                                  ;select hour register
  4949                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4950                                                          stosb                                                   ;store hour value
  4951                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4952                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4953                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4954                                                          stosb                                                   ;store weekday value
  4955                                                          mov     al,ERTCDAYREG                                   ;day register
  4956                                                          out     ERTCREGPORT,al                                  ;select day register
  4957                                                          in      al,ERTCDATAPORT                                 ;read day register
  4958                                                          stosb                                                   ;store day value
  4959                                                          mov     al,ERTCMONTHREG                                 ;month register
  4960                                                          out     ERTCREGPORT,al                                  ;select month register
  4961                                                          in      al,ERTCDATAPORT                                 ;read month register
  4962                                                          stosb                                                   ;store month value
  4963                                                          mov     al,ERTCYEARREG                                  ;year register
  4964                                                          out     ERTCREGPORT,al                                  ;select year register
  4965                                                          in      al,ERTCDATAPORT                                 ;read year register
  4966                                                          stosb                                                   ;store year value
  4967                                                          mov     al,ERTCCENTURYREG                               ;century register
  4968                                                          out     ERTCREGPORT,al                                  ;select century register
  4969                                                          in      al,ERTCDATAPORT                                 ;read century register
  4970                                                          stosb                                                   ;store century value
  4971                                                          mov     al,ERTCSTATUSREG                                ;status register
  4972                                                          out     ERTCREGPORT,al                                  ;select status register
  4973                                                          in      al,ERTCDATAPORT                                 ;read status register
  4974                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4975                                                          jnz     .20                                             ;skip ahead if binary values
  4976                                                          mov     esi,ebx                                         ;date-time structure address
  4977                                                          mov     edi,ebx                                         ;date-time structure address
  4978                                                          mov     ecx,8                                           ;loop counter
  4979                                  .10                     lodsb                                                   ;BCD value
  4980                                                          mov     ah,al                                           ;BCD value
  4981                                                          and     al,00001111b                                    ;low-order decimal zone
  4982                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4983                                                          shr     ah,1                                            ;hi-order decimal * 8
  4984                                                          add     al,ah                                           ;low-order + hi-order * 8
  4985                                                          shr     ah,2                                            ;hi-order decimal * 2
  4986                                                          add     al,ah                                           ;low-order + hi-order * 10
  4987                                                          stosb                                                   ;replace BCD with binary
  4988                                                          loop    .10                                             ;next value
  4989                                  .20                     pop     es                                              ;restore non-volatile regs
  4990                                                          pop     edi                                             ;
  4991                                                          pop     esi                                             ;
  4992                                                          ret                                                     ;return
  4993                                  ;-----------------------------------------------------------------------------------------------------------------------
  4994                                  ;
  4995                                  ;       Routine:        ResetSystem
  4996                                  ;
  4997                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4998                                  ;
  4999                                  ;       Out:            N/A     This routine does not return.
  5000                                  ;
  5001                                  ;-----------------------------------------------------------------------------------------------------------------------
  5002                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5003                                                          loop    $                                               ;clear interrupts
  5004                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5005                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5006                                  .10                     sti                                                     ;enable maskable interrupts
  5007                                                          hlt                                                     ;halt until interrupt
  5008                                                          jmp     .10                                             ;repeat until reset kicks in
  5009                                  ;-----------------------------------------------------------------------------------------------------------------------
  5010                                  ;
  5011                                  ;       Routine:        SetKeyboardLamps
  5012                                  ;
  5013                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5014                                  ;
  5015                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5016                                  ;
  5017                                  ;-----------------------------------------------------------------------------------------------------------------------
  5018                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5019                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5020                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5021                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5022                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5023                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5024                                                          mov     al,bh                                           ;set/reset lamps value
  5025                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5026                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5027                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5028                                                          ret                                                     ;return
  5029                                  ;-----------------------------------------------------------------------------------------------------------------------
  5030                                  ;
  5031                                  ;       Routine:        WaitForKeyInBuffer
  5032                                  ;
  5033                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5034                                  ;
  5035                                  ;       Out:            ZF      1 = Input buffer ready
  5036                                  ;                               0 = Input buffer not ready after timeout
  5037                                  ;
  5038                                  ;-----------------------------------------------------------------------------------------------------------------------
  5039                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5040                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5041                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5042                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5043                                                          loopnz  .10                                             ;yes, repeat till timeout
  5044                                                          pop     ecx                                             ;restore non-volatile regs
  5045                                                          ret                                                     ;return
  5046                                  ;-----------------------------------------------------------------------------------------------------------------------
  5047                                  ;
  5048                                  ;       Routine:        WaitForKeyOutBuffer
  5049                                  ;
  5050                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5051                                  ;
  5052                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5053                                  ;                               0 = Output buffer empty after timeout
  5054                                  ;
  5055                                  ;-----------------------------------------------------------------------------------------------------------------------
  5056                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5057                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5058                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5059                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5060                                                          loopz   .10                                             ;loop until output buffer bit
  5061                                                          pop     ecx                                             ;restore non-volatile regs
  5062                                                          ret                                                     ;return
  5063                                  ;-----------------------------------------------------------------------------------------------------------------------
  5064                                  ;
  5065                                  ;       End of the Kernel Function Library
  5066                                  ;
  5067                                  ;-----------------------------------------------------------------------------------------------------------------------
  5068                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5069                                  ;=======================================================================================================================
  5070                                  ;
  5071                                  ;       Console Task
  5072                                  ;
  5073                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5074                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5075                                  ;       screen and responds to user commands.
  5076                                  ;
  5077                                  ;=======================================================================================================================
  5078                                  ;-----------------------------------------------------------------------------------------------------------------------
  5079                                  ;
  5080                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5081                                  ;
  5082                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5083                                  ;
  5084                                  ;-----------------------------------------------------------------------------------------------------------------------
  5085                                  section                 constack                                                ;console task stack
  5086                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5087                                  ;-----------------------------------------------------------------------------------------------------------------------
  5088                                  ;
  5089                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5090                                  ;
  5091                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5092                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5093                                  ;       16 descriptors. Six are initially defined.
  5094                                  ;
  5095                                  ;-----------------------------------------------------------------------------------------------------------------------
  5096                                  section                 conldt                                                  ;console local descriptors
  5097                                                          dq      004093004780007Fh                               ;04 TSS alias
  5098                                                          dq      004093004700007Fh                               ;0c LDT alias
  5099                                                          dq      00409300400006FFh                               ;14 stack
  5100                                                          dq      00CF93000000FFFFh                               ;1c data
  5101                                                          dq      00409B0050000FFFh                               ;24 code
  5102                                                          dq      00409300480007FFh                               ;2c message queue
  5103                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5104                                  ;-----------------------------------------------------------------------------------------------------------------------
  5105                                  ;
  5106                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5107                                  ;
  5108                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5109                                  ;       segment. CS to console code.
  5110                                  ;
  5111                                  ;-----------------------------------------------------------------------------------------------------------------------
  5112                                  section                 contss                                                  ;console task state segment
  5113                                                          dd      0                                               ;00 back-link tss
  5114                                                          dd      0700h                                           ;04 esp ring 0
  5115                                                          dd      0014h                                           ;08 ss ring 0
  5116                                                          dd      0700h                                           ;0c esp ring 1
  5117                                                          dd      0014h                                           ;10 es ring 1
  5118                                                          dd      0700h                                           ;14 esp ring 2
  5119                                                          dd      0014h                                           ;18 ss ring 2
  5120                                                          dd      0                                               ;1c cr ring 3
  5121                                                          dd      0                                               ;20 eip
  5122                                                          dd      0200h                                           ;24 eflags
  5123                                                          dd      0                                               ;28 eax
  5124                                                          dd      0                                               ;2c ecx
  5125                                                          dd      0                                               ;30 edx
  5126                                                          dd      0                                               ;34 ebx
  5127                                                          dd      0700h                                           ;38 esp ring 3
  5128                                                          dd      0                                               ;3c ebp
  5129                                                          dd      0                                               ;40 esi
  5130                                                          dd      0                                               ;44 edi
  5131                                                          dd      001Ch                                           ;48 es
  5132                                                          dd      0024h                                           ;4c cs
  5133                                                          dd      0014h                                           ;50 ss ring 3
  5134                                                          dd      001Ch                                           ;54 ds
  5135                                                          dd      0                                               ;58 fs
  5136                                                          dd      0                                               ;5c gs
  5137                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5138                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5139                                  ;-----------------------------------------------------------------------------------------------------------------------
  5140                                  ;
  5141                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5142                                  ;
  5143                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5144                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5145                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5146                                  ;       event.
  5147                                  ;
  5148                                  ;-----------------------------------------------------------------------------------------------------------------------
  5149                                  section                 conmque                                                 ;console message queue
  5150                                                          dd      8                                               ;head pointer
  5151                                                          dd      8                                               ;tail pointer
  5152                                                          times   510 dd 0                                        ;queue elements
  5153                                  ;-----------------------------------------------------------------------------------------------------------------------
  5154                                  ;
  5155                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5156                                  ;
  5157                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5158                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5159                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5160                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5161                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5162                                  ;       board input, echoing to the console screen and responding to user commands.
  5163                                  ;
  5164                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5165                                  ;
  5166                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5167                                  ;                               |  Real Mode Interrupt Vectors                  |
  5168                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5169                                  ;                               |  Reserved BIOS Memory Area                    |
  5170                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5171                                  ;                               |  Shared Kernel Memory Area                    |
  5172                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5173                                  ;                               |  Global Descriptor Table (GDT)                |
  5174                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5175                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5176                                  ;                       002000  +-----------------------------------------------+
  5177                                  ;                               |  Interrupt Handlers                           |
  5178                                  ;                               |  Kernel Function Library                      |
  5179                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5180                                  ;                               |  Console Task Stack Area                      |
  5181                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5182                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5183                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5184                                  ;                               |  Console Task Task State Segment (TSS)        |
  5185                                  ;                       004800  +-----------------------------------------------+
  5186                                  ;                               |  Console Task Message Queue                   |
  5187                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5188                                  ;                               |  Console Task Code                            |
  5189                                  ;                               |  Console Task Constants                       |
  5190                                  ;                       006000  +===============================================+
  5191                                  ;
  5192                                  ;-----------------------------------------------------------------------------------------------------------------------
  5193                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5194                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5195                                                          clearConsoleScreen                                      ;clear the console screen
  5196                                                          putConsoleString czTitle                                ;display startup message
  5197                                                          putConsoleString czBaseMem                              ;base memory label
  5198                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5199                                                          putConsoleString czKB                                   ;Kilobytes
  5200                                                          call    ConPutNewLine                                   ;new line
  5201                                                          putConsoleString czROMMem                               ;ROM memory label
  5202                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5203                                                          putConsoleString czKB                                   ;Kilobytes
  5204                                                          call    ConPutNewLine                                   ;new line
  5205                                                          putConsoleString czExtendedMem                          ;extended memory label
  5206                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5207                                                          putConsoleString czKB                                   ;Kilobytes
  5208                                                          call    ConPutNewLine                                   ;new line
  5209                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5210                                                          placeCursor                                             ;set CRT cursor location
  5211                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5212                                                          call    ConPutNewLine                                   ;newline
  5213                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5214                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5215                                                          call    ConTakeToken                                    ;handle console input
  5216                                                          mov     edx,wzConsoleToken                              ;token buffer
  5217                                                          call    ConDetermineCommand                             ;determine command number
  5218                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5219                                                          jb      .20                                             ;yes, branch
  5220                                                          putConsoleString czUnknownCommand                       ;display error message
  5221                                                          jmp     .10                                             ;next command
  5222                                  .20                     shl     eax,2                                           ;index into jump table
  5223                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5224                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5225                                                          call    eax                                             ;call command handler
  5226                                                          jmp     .10                                             ;next command
  5227                                  ;-----------------------------------------------------------------------------------------------------------------------
  5228                                  ;
  5229                                  ;       Routine:        ConInitializeData
  5230                                  ;
  5231                                  ;       Description:    This routine initializes console task variables.
  5232                                  ;
  5233                                  ;-----------------------------------------------------------------------------------------------------------------------
  5234                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5235                                                          push    edi                                             ;
  5236                                                          push    es                                              ;
  5237                                  ;
  5238                                  ;       Initialize console work areas.
  5239                                  ;
  5240                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5241                                                          pop     es                                              ;... into extra segment register
  5242                                                          mov     edi,ECONDATA                                    ;OS console data address
  5243                                                          xor     al,al                                           ;initialization value
  5244                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5245                                                          cld                                                     ;forward strings
  5246                                                          rep     stosb                                           ;initialize data
  5247                                  ;
  5248                                  ;       Initialize heap size
  5249                                  ;
  5250                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5251                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5252                                  ;
  5253                                  ;       Initialize MEMROOT structure
  5254                                  ;
  5255                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5256                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5257                                                          xor     ecx,ecx                                         ;zero register
  5258                                                          mov     cl,4                                            ;count
  5259                                                          rep     stosd                                           ;store first/last contig and free addrs
  5260                                                          xor     eax,eax                                         ;zero register
  5261                                                          stosd                                                   ;zero first task block
  5262                                                          stosd                                                   ;zero last task block
  5263                                  ;
  5264                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5265                                  ;
  5266                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5267                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5268                                                          stosd                                                   ;store signature
  5269                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5270                                                          stosd                                                   ;store block size
  5271                                                          xor     ecx,ecx                                         ;zero register
  5272                                                          mov     cl,6                                            ;count
  5273                                                          xor     eax,eax                                         ;zero register
  5274                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5275                                  ;
  5276                                  ;       Read memory sizes from ROM
  5277                                  ;
  5278                                                          getROMMemSize                                           ;get ROM memory size
  5279                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5280                                                          mov     ecx,eax                                         ;integer param
  5281                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5282                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5283                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5284                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5285                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5286                                                          mov     ecx,eax                                         ;integer param
  5287                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5288                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5289                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5290                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5291                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5292                                                          mov     ecx,eax                                         ;integer param
  5293                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5294                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5295                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5296                                  ;
  5297                                  ;       Restore and return.
  5298                                  ;
  5299                                                          pop     es                                              ;restore non-volatile regs
  5300                                                          pop     edi                                             ;
  5301                                                          pop     ecx                                             ;
  5302                                                          ret                                                     ;return
  5303                                  ;-----------------------------------------------------------------------------------------------------------------------
  5304                                  ;
  5305                                  ;       Routine:        ConPutNewLine
  5306                                  ;
  5307                                  ;       Description:    Write a new-line to the console.
  5308                                  ;
  5309                                  ;-----------------------------------------------------------------------------------------------------------------------
  5310                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  5311                                                          ret                                                     ;return
  5312                                  ;-----------------------------------------------------------------------------------------------------------------------
  5313                                  ;
  5314                                  ;       Routine:        ConInitPCIContext
  5315                                  ;
  5316                                  ;       Description:    This routine initializes a PCI structure.
  5317                                  ;
  5318                                  ;       In:             DS:EBX  PCI structure address
  5319                                  ;
  5320                                  ;-----------------------------------------------------------------------------------------------------------------------
  5321                                  ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  5322                                                          push    edi                                             ;
  5323                                                          push    es                                              ;
  5324                                  ;
  5325                                  ;       Zero context.
  5326                                  ;
  5327                                                          push    ds                                              ;load data segment...
  5328                                                          pop     es                                              ;...into extra segment
  5329                                                          mov     edi,ebx                                         ;PCI structure offset
  5330                                                          mov     ecx,EPCILEN                                     ;PCI structure length
  5331                                                          xor     al,al                                           ;zero
  5332                                                          cld                                                     ;forward strings
  5333                                                          rep     stosb                                           ;zero structure members
  5334                                  ;
  5335                                  ;       Restore and return.
  5336                                  ;
  5337                                                          pop     es                                              ;restore non-volatile regs
  5338                                                          pop     edi                                             ;
  5339                                                          pop     ecx                                             ;
  5340                                                          ret                                                     ;return
  5341                                  ;-----------------------------------------------------------------------------------------------------------------------
  5342                                  ;
  5343                                  ;       Routine:        ConBuildPCISelector
  5344                                  ;
  5345                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  5346                                  ;
  5347                                  ;       In:             DS:EBX  PCI structure address
  5348                                  ;
  5349                                  ;       Out:            EAX     bus, device, function, register selector
  5350                                  ;
  5351                                  ;-----------------------------------------------------------------------------------------------------------------------
  5352                                  ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  5353                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  5354                                                          shl     dl,3                                            ;DL = dddd d000
  5355                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  5356                                                          and     al,007h                                         ;AL = 0000 0fff
  5357                                                          or      al,dl                                           ;AL = dddd dfff
  5358                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5359                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5360                                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  5361                                                          or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  5362                                                          mov     [ebx+PCI.selector],eax                          ;set selector
  5363                                                          ret                                                     ;return
  5364                                  ;-----------------------------------------------------------------------------------------------------------------------
  5365                                  ;
  5366                                  ;       Routine:        ConReadPCIConfigData
  5367                                  ;
  5368                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  5369                                  ;
  5370                                  ;       In:             DS:EBX  PCI structure address
  5371                                  ;
  5372                                  ;       Out:            EAX     config data
  5373                                  ;
  5374                                  ;-----------------------------------------------------------------------------------------------------------------------
  5375                                  ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  5376                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  5377                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5378                                                          out     dx,eax                                          ;select bus, device, function, reg
  5379                                                          mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  5380                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  5381                                                          in      eax,dx                                          ;read register
  5382                                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  5383                                                          ret                                                     ;return
  5384                                  ;-----------------------------------------------------------------------------------------------------------------------
  5385                                  ;
  5386                                  ;       Routine:        ConNextPCIFunction
  5387                                  ;
  5388                                  ;       Description:    This routine increments the function of the device.
  5389                                  ;
  5390                                  ;       In:             DS:EBX  PCI structure address
  5391                                  ;
  5392                                  ;       Out:            CY      0 = overflow
  5393                                  ;                               1 = no overflow, continue
  5394                                  ;
  5395                                  ;-----------------------------------------------------------------------------------------------------------------------
  5396                                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  5397                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  5398                                                          jb      .10                                             ;no, continue
  5399                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  5400                                  .10                     ret                                                     ;return
  5401                                  ;-----------------------------------------------------------------------------------------------------------------------
  5402                                  ;
  5403                                  ;       Routine:        ConNextPCIDevice
  5404                                  ;
  5405                                  ;       Description:    This routine increments the device of the PCI across buses.
  5406                                  ;
  5407                                  ;       In:             DS:EBX  PCI structure address
  5408                                  ;
  5409                                  ;       Out:            CY      0 = overflow
  5410                                  ;                               1 = no overflow, continue
  5411                                  ;
  5412                                  ;-----------------------------------------------------------------------------------------------------------------------
  5413                                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  5414                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  5415                                                          jb      .10                                             ;no, continue
  5416                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  5417                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  5418                                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  5419                                                          jb      .10                                             ;no, continue
  5420                                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  5421                                  .10                     ret                                                     ;return
  5422                                  ;-----------------------------------------------------------------------------------------------------------------------
  5423                                  ;
  5424                                  ;       Routine:        ConTakeToken
  5425                                  ;
  5426                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5427                                  ;
  5428                                  ;       In:             DS:EDX  source buffer address
  5429                                  ;                       DS:EBX  target buffer address
  5430                                  ;
  5431                                  ;       Out:            DS:EDX  source buffer address
  5432                                  ;                       DS:EBX  target buffer address
  5433                                  ;
  5434                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5435                                  ;
  5436                                  ;-----------------------------------------------------------------------------------------------------------------------
  5437                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5438                                                          push    edi                                             ;
  5439                                                          push    es                                              ;
  5440                                                          push    ds                                              ;load data segment selector ...
  5441                                                          pop     es                                              ;... into extra segment reg
  5442                                                          mov     esi,edx                                         ;source buffer address
  5443                                                          mov     edi,ebx                                         ;target buffer address
  5444                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5445                                                          cld                                                     ;forward strings
  5446                                  .10                     lodsb                                                   ;load byte
  5447                                                          cmp     al,EASCIISPACE                                  ;space?
  5448                                                          je      .10                                             ;yes, continue
  5449                                                          test    al,al                                           ;end of line?
  5450                                                          jz      .40                                             ;yes, branch
  5451                                  .20                     stosb                                                   ;store byte
  5452                                                          lodsb                                                   ;load byte
  5453                                                          test    al,al                                           ;end of line?
  5454                                                          jz      .40                                             ;no, continue
  5455                                                          cmp     al,EASCIISPACE                                  ;space?
  5456                                                          jne     .20                                             ;no, continue
  5457                                  .30                     lodsb                                                   ;load byte
  5458                                                          cmp     al,EASCIISPACE                                  ;space?
  5459                                                          je      .30                                             ;yes, continue
  5460                                                          dec     esi                                             ;pre-position
  5461                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5462                                                          mov     edi,edx                                         ;source buffer address
  5463                                  .50                     lodsb                                                   ;remaining byte
  5464                                                          stosb                                                   ;move to front of buffer
  5465                                                          test    al,al                                           ;end of line?
  5466                                                          jnz     .50                                             ;no, continue
  5467                                                          pop     es                                              ;restore non-volatile regs
  5468                                                          pop     edi                                             ;
  5469                                                          pop     esi                                             ;
  5470                                                          ret                                                     ;return
  5471                                  ;-----------------------------------------------------------------------------------------------------------------------
  5472                                  ;
  5473                                  ;       Routine:        ConDetermineCommand
  5474                                  ;
  5475                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5476                                  ;
  5477                                  ;       input:          DS:EDX  command address
  5478                                  ;
  5479                                  ;       output:         EAX     >=0     = command nbr
  5480                                  ;                               0       = unknown command
  5481                                  ;
  5482                                  ;-----------------------------------------------------------------------------------------------------------------------
  5483                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5484                                                          push    ecx                                             ;
  5485                                                          push    esi                                             ;
  5486                                                          push    edi                                             ;
  5487                                                          upperCaseString                                         ;upper-case string at EDX
  5488                                                          mov     esi,tConCmdTbl                                  ;commands table
  5489                                                          xor     edi,edi                                         ;intialize command number
  5490                                                          cld                                                     ;forward strings
  5491                                  .10                     lodsb                                                   ;command length
  5492                                                          movzx   ecx,al                                          ;command length
  5493                                                          jecxz   .20                                             ;branch if end of table
  5494                                                          mov     ebx,esi                                         ;table entry address
  5495                                                          add     esi,ecx                                         ;next table entry address
  5496                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5497                                                          jecxz   .20                                             ;branch if equal
  5498                                                          inc     edi                                             ;increment command nbr
  5499                                                          jmp     .10                                             ;repeat
  5500                                  .20                     mov     eax,edi                                         ;command number
  5501                                                          pop     edi                                             ;restore non-volatile regs
  5502                                                          pop     esi                                             ;
  5503                                                          pop     ecx                                             ;
  5504                                                          pop     ebx                                             ;
  5505                                                          ret                                                     ;return
  5506                                  ;-----------------------------------------------------------------------------------------------------------------------
  5507                                  ;
  5508                                  ;       Routine:        ConClear
  5509                                  ;
  5510                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5511                                  ;
  5512                                  ;-----------------------------------------------------------------------------------------------------------------------
  5513                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5514                                                          ret                                                     ;return
  5515                                  ;-----------------------------------------------------------------------------------------------------------------------
  5516                                  ;
  5517                                  ;       Routine:        ConDate
  5518                                  ;
  5519                                  ;       Description:    This routine handles the DATE command.
  5520                                  ;
  5521                                  ;-----------------------------------------------------------------------------------------------------------------------
  5522                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5523                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5524                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5525                                                          call    ConPutNewLine                                   ;write newline to console
  5526                                                          ret                                                     ;return
  5527                                  ;-----------------------------------------------------------------------------------------------------------------------
  5528                                  ;
  5529                                  ;       Routine:        ConDay
  5530                                  ;
  5531                                  ;       Description:    This routine handles the DAY command.
  5532                                  ;
  5533                                  ;-----------------------------------------------------------------------------------------------------------------------
  5534                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5535                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5536                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5537                                                          call    ConPutNewLine                                   ;write newline to console
  5538                                                          ret                                                     ;return
  5539                                  ;-----------------------------------------------------------------------------------------------------------------------
  5540                                  ;
  5541                                  ;       Routine:        ConExit
  5542                                  ;
  5543                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5544                                  ;
  5545                                  ;-----------------------------------------------------------------------------------------------------------------------
  5546                                  ConExit                 resetSystem                                             ;issue system reset
  5547                                                          ret                                                     ;return
  5548                                  ;-----------------------------------------------------------------------------------------------------------------------
  5549                                  ;
  5550                                  ;       Routine:        ConFree
  5551                                  ;
  5552                                  ;       Description:    This routine handles the FREE command.
  5553                                  ;
  5554                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5555                                  ;
  5556                                  ;-----------------------------------------------------------------------------------------------------------------------
  5557                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5558                                                          push    ecx                                             ;
  5559                                                          push    esi                                             ;
  5560                                                          push    edi                                             ;
  5561                                  ;
  5562                                  ;       Get address parameter
  5563                                  ;
  5564                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5565                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5566                                                          call    ConTakeToken                                    ;take first param as token
  5567                                  ;
  5568                                  ;       Convert input parameter from hexadecimal string to binary
  5569                                  ;
  5570                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5571                                                          je      .10                                             ;no, branch
  5572                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5573                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5574                                                          test    eax,eax                                         ;valid parameter?
  5575                                                          jz      .10                                             ;no, branch
  5576                                  ;
  5577                                  ;       Free memory block
  5578                                  ;
  5579                                                          freeMemory eax                                          ;free memory
  5580                                                          cmp     eax,-1                                          ;memory freed?
  5581                                                          je      .10                                             ;no, branch
  5582                                  ;
  5583                                  ;       Indicate memory freed
  5584                                  ;
  5585                                                          putConsoleString czOK                                   ;indicate success
  5586                                  ;
  5587                                  ;       Restore and return
  5588                                  ;
  5589                                  .10                     pop     edi                                             ;restore non-volatile regs
  5590                                                          pop     esi                                             ;
  5591                                                          pop     ecx                                             ;
  5592                                                          pop     ebx                                             ;
  5593                                                          ret                                                     ;return
  5594                                  ;-----------------------------------------------------------------------------------------------------------------------
  5595                                  ;
  5596                                  ;       Routine:        ConHour
  5597                                  ;
  5598                                  ;       Description:    This routine Handles the HOUR command.
  5599                                  ;
  5600                                  ;-----------------------------------------------------------------------------------------------------------------------
  5601                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5602                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5603                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5604                                                          call    ConPutNewLine                                   ;write newline to console
  5605                                                          ret                                                     ;return
  5606                                  ;-----------------------------------------------------------------------------------------------------------------------
  5607                                  ;
  5608                                  ;       Routine:        ConInt6
  5609                                  ;
  5610                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5611                                  ;
  5612                                  ;-----------------------------------------------------------------------------------------------------------------------
  5613                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5614                                                          ret                                                     ;return (not executed)
  5615                                  ;-----------------------------------------------------------------------------------------------------------------------
  5616                                  ;
  5617                                  ;       Routine:        ConMalloc
  5618                                  ;
  5619                                  ;       Description:    This routine handles the MALLOC command.
  5620                                  ;
  5621                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5622                                  ;
  5623                                  ;-----------------------------------------------------------------------------------------------------------------------
  5624                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5625                                                          push    ecx                                             ;
  5626                                                          push    esi                                             ;
  5627                                                          push    edi                                             ;
  5628                                  ;
  5629                                  ;       Get size parameter
  5630                                  ;
  5631                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5632                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5633                                                          call    ConTakeToken                                    ;take first param as token
  5634                                  ;
  5635                                  ;       Convert input parameter from decimal string to binary
  5636                                  ;
  5637                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5638                                                          je      .10                                             ;no, branch
  5639                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5640                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5641                                                          test    eax,eax                                         ;valid parameter?
  5642                                                          jz      .10                                             ;no, branch
  5643                                  ;
  5644                                  ;       Allocate memory block
  5645                                  ;
  5646                                                          allocateMemory eax                                      ;allocate memory
  5647                                                          test    eax,eax                                         ;memory allocated?
  5648                                                          jz      .10                                             ;no, branch
  5649                                  ;
  5650                                  ;       Report allocated memory block address
  5651                                  ;
  5652                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5653                                                          mov     ecx,eax                                         ;memory address
  5654                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5655                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5656                                                          call    ConPutNewLine                                   ;display new line
  5657                                  .10                     pop     edi                                             ;restore non-volatile regs
  5658                                                          pop     esi                                             ;
  5659                                                          pop     ecx                                             ;
  5660                                                          pop     ebx                                             ;
  5661                                                          ret                                                     ;return
  5662                                  ;-----------------------------------------------------------------------------------------------------------------------
  5663                                  ;
  5664                                  ;       Routine:        ConMem
  5665                                  ;
  5666                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5667                                  ;
  5668                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5669                                  ;
  5670                                  ;-----------------------------------------------------------------------------------------------------------------------
  5671                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5672                                                          push    esi                                             ;
  5673                                                          push    edi                                             ;
  5674                                  ;
  5675                                  ;       Update the source address if a parameter is given.
  5676                                  ;
  5677                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5678                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5679                                                          call    ConTakeToken                                    ;take first param as token
  5680                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5681                                                          je      .10                                             ;no, branch
  5682                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5683                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5684                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5685                                  ;
  5686                                  ;       Setup source address and row count.
  5687                                  ;
  5688                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5689                                                          xor     ecx,ecx                                         ;zero register
  5690                                                          mov     cl,16                                           ;row count
  5691                                  ;
  5692                                  ;       Start the row with the source address in hexadecimal.
  5693                                  ;
  5694                                  .20                     push    ecx                                             ;save remaining rows
  5695                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5696                                                          mov     edx,edi                                         ;output buffer address
  5697                                                          mov     ecx,esi                                         ;console memory address
  5698                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5699                                                          add     edi,8                                           ;end of memory addr hexnum
  5700                                                          mov     al,' '                                          ;ascii space
  5701                                                          stosb                                                   ;store delimiter
  5702                                  ;
  5703                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5704                                  ;
  5705                                                          xor     ecx,ecx                                         ;zero register
  5706                                                          mov     cl,16                                           ;loop count
  5707                                  .30                     push    ecx                                             ;save loop count
  5708                                                          lodsb                                                   ;memory byte
  5709                                                          mov     ah,al                                           ;memory byte
  5710                                                          shr     al,4                                            ;high-order in bits 3-0
  5711                                                          or      al,30h                                          ;apply ascii numeric zone
  5712                                                          cmp     al,3ah                                          ;numeric range?
  5713                                                          jb      .40                                             ;yes, skip ahead
  5714                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5715                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5716                                                          mov     al,ah                                           ;low-order in bits 3-0
  5717                                                          and     al,0fh                                          ;mask out high-order bits
  5718                                                          or      al,30h                                          ;apply ascii numeric zone
  5719                                                          cmp     al,3ah                                          ;numeric range?
  5720                                                          jb      .50                                             ;yes, skip ahead
  5721                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5722                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5723                                                          mov     al,' '                                          ;ascii space
  5724                                                          stosb                                                   ;store ascii space delimiter
  5725                                                          pop     ecx                                             ;loop count
  5726                                                          loop    .30                                             ;next
  5727                                  ;
  5728                                  ;       Output printable ASCII character section for the row.
  5729                                  ;
  5730                                                          sub     esi,16                                          ;reset source pointer
  5731                                                          mov     cl,16                                           ;loop count
  5732                                  .60                     lodsb                                                   ;source byte
  5733                                                          cmp     al,32                                           ;printable? (low-range test)
  5734                                                          jb      .70                                             ;no, skip ahead
  5735                                                          cmp     al,128                                          ;printable? (high-range test)
  5736                                                          jb      .80                                             ;yes, skip ahead
  5737                                  .70                     mov     al,' '                                          ;display space instead of printable
  5738                                  .80                     stosb                                                   ;store printable ascii byte
  5739                                                          loop    .60                                             ;next source byte
  5740                                                          xor     al,al                                           ;nul-terminator
  5741                                                          stosb                                                   ;terminate output line
  5742                                  ;
  5743                                  ;       Display constructed output buffer and newline.
  5744                                  ;
  5745                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5746                                                          call    ConPutNewLine                                   ;display new line
  5747                                  ;
  5748                                  ;       Repeat until all lines displayed and preserve source address.
  5749                                  ;
  5750                                                          pop     ecx                                             ;remaining rows
  5751                                                          loop    .20                                             ;next row
  5752                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5753                                                          pop     edi                                             ;restore regs
  5754                                                          pop     esi                                             ;
  5755                                                          pop     ebx                                             ;
  5756                                                          ret                                                     ;return
  5757                                  ;-----------------------------------------------------------------------------------------------------------------------
  5758                                  ;
  5759                                  ;       Routine:        ConMinute
  5760                                  ;
  5761                                  ;       Description:    This routine Handles the MINUTE command.
  5762                                  ;
  5763                                  ;-----------------------------------------------------------------------------------------------------------------------
  5764                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5765                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5766                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5767                                                          call    ConPutNewLine                                   ;write newline to console
  5768                                                          ret                                                     ;return
  5769                                  ;-----------------------------------------------------------------------------------------------------------------------
  5770                                  ;
  5771                                  ;       Routine:        ConMonth
  5772                                  ;
  5773                                  ;       Description:    This routine Handles the MONTH command.
  5774                                  ;
  5775                                  ;-----------------------------------------------------------------------------------------------------------------------
  5776                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5777                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5778                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5779                                                          call    ConPutNewLine                                   ;write newline to console
  5780                                                          ret                                                     ;return
  5781                                  ;-----------------------------------------------------------------------------------------------------------------------
  5782                                  ;
  5783                                  ;       Routine:        ConMonthName
  5784                                  ;
  5785                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5786                                  ;
  5787                                  ;-----------------------------------------------------------------------------------------------------------------------
  5788                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5789                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5790                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5791                                                          call    ConPutNewLine                                   ;write newline to console
  5792                                                          ret                                                     ;return
  5793                                  ;-----------------------------------------------------------------------------------------------------------------------
  5794                                  ;
  5795                                  ;       Routine:        ConPCIProbe
  5796                                  ;
  5797                                  ;       Description:    This routine handles the PCIProbe command.
  5798                                  ;
  5799                                  ;-----------------------------------------------------------------------------------------------------------------------
  5800                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5801                                  ;
  5802                                  ;       Initialize variables.
  5803                                  ;       Construct PCI selector.
  5804                                  ;       Read PCI configuration data.
  5805                                  ;
  5806                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5807                                                          call    ConInitPCIContext                               ;initialize PCI struct
  5808                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5809                                                          call    ConReadPCIConfigData                            ;read the configuration data
  5810                                  ;
  5811                                  ;       Interpret PCI data value and display finding.
  5812                                  ;
  5813                                                          cmp     eax,-1                                          ;function defined?
  5814                                                          jne     .20                                             ;yes, branch
  5815                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  5816                                                          je      .40                                             ;yes, skip to next device
  5817                                                          jmp     short .30                                       ;no, skip to next function
  5818                                  ;
  5819                                  ;       Build PCI identifying string.
  5820                                  ;       Write identifying string to console.
  5821                                  ;       Determine the vendor and chip.
  5822                                  ;       Write vendor and chip to console.
  5823                                  ;
  5824                                  .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  5825                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5826                                                          call    ConInterpretPCIData                             ;update flags based on data
  5827                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  5828                                                          putConsoleString czSpace                                ;space delimiter
  5829                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  5830                                                          putConsoleString czSpace                                ;space delimiter
  5831                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  5832                                                          call    ConPutNewLine                                   ;display new line
  5833                                  ;
  5834                                  ;       Next function.
  5835                                  ;
  5836                                  .30                     call    ConNextPCIFunction                              ;next function
  5837                                                          jb      .10                                             ;continue if no overflow
  5838                                  ;
  5839                                  ;       Next device, bus.
  5840                                  ;
  5841                                  .40                     call    ConNextPCIDevice                                ;next device, bus
  5842                                                          jb      .10                                             ;continue if no overflow
  5843                                  ;
  5844                                  ;       Restore and return.
  5845                                  ;
  5846                                                          pop     ebx                                             ;restore non-volatile regs
  5847                                                          ret                                                     ;return
  5848                                  ;-----------------------------------------------------------------------------------------------------------------------
  5849                                  ;
  5850                                  ;       Routine:        ConBuildPCIIdent
  5851                                  ;
  5852                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5853                                  ;                       Function code values.
  5854                                  ;
  5855                                  ;       In:             DS:EBX  PCI structure address
  5856                                  ;                       DS:EDX  output buffer address 999.99.9\0
  5857                                  ;
  5858                                  ;-----------------------------------------------------------------------------------------------------------------------
  5859                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5860                                                          push    es                                              ;
  5861                                  ;
  5862                                  ;       Establish addressability
  5863                                  ;
  5864                                                          push    ds                                              ;load data segment...
  5865                                                          pop     es                                              ;...into extra segment reg
  5866                                  ;
  5867                                  ;       Build identifier string (bus.device.function)
  5868                                  ;
  5869                                                          mov     edi,edx                                         ;output buffer address
  5870                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  5871                                                          xor     ah,ah                                           ;zero high-order dividend
  5872                                                          mov     cl,100                                          ;divisor (10^2)
  5873                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  5874                                                          or      al,30h                                          ;apply ASCII zone
  5875                                                          cld                                                     ;forward strings
  5876                                                          stosb                                                   ;store 100's digit
  5877                                                          mov     al,ah                                           ;bus MOD 100
  5878                                                          xor     ah,ah                                           ;zero high-order dividend
  5879                                                          mov     cl,10                                           ;divisor (10^1)
  5880                                                          div     cl                                              ;AL=10's, AH=1's
  5881                                                          or      ax,3030h                                        ;apply ASCII zone
  5882                                                          stosw                                                   ;store 10's and 1's
  5883                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5884                                                          stosb                                                   ;store delimiter
  5885                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  5886                                                          xor     ah,ah                                           ;zero high order dividend
  5887                                                          mov     cl,10                                           ;divisor (10^1)
  5888                                                          div     cl                                              ;AL=10's, AH=1's
  5889                                                          or      ax,3030h                                        ;apply ASCII zone
  5890                                                          stosw                                                   ;store 10's and 1's
  5891                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5892                                                          stosb                                                   ;store delimiter
  5893                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  5894                                                          or      al,30h                                          ;apply ASCII zone
  5895                                                          stosb                                                   ;store 1's
  5896                                                          xor     al,al                                           ;null terminator
  5897                                                          stosb                                                   ;store terminator
  5898                                  ;
  5899                                  ;       Restore and return.
  5900                                  ;
  5901                                                          pop     es                                              ;restore non-volatile regs
  5902                                                          pop     edi                                             ;
  5903                                                          ret                                                     ;return
  5904                                  ;-----------------------------------------------------------------------------------------------------------------------
  5905                                  ;
  5906                                  ;       Routine:        ConInterpretPCIData
  5907                                  ;
  5908                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  5909                                  ;
  5910                                  ;       In:             DS:EBX  PCI structure address
  5911                                  ;
  5912                                  ;-----------------------------------------------------------------------------------------------------------------------
  5913                                  ConInterpretPCIData     mov     eax,czApple
  5914                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  5915                                                          jne     .10                                             ;no, branch
  5916                                                          mov     edx,czUSBController
  5917                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  5918                                                          je      .40                                             ;yes, branch
  5919                                                          mov     edx,czOther                                     ;other
  5920                                                          jmp     .40                                             ;continue
  5921                                  .10                     mov     eax,czIntel                                     ;Intel
  5922                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  5923                                                          jne     .20                                             ;no, branch
  5924                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  5925                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  5926                                                          je      .40                                             ;yes, branch
  5927                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  5928                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  5929                                                          je      .40                                             ;yes, branch
  5930                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  5931                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  5932                                                          je      .40                                             ;yes, branch
  5933                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  5934                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  5935                                                          je      .40                                             ;yes, branch
  5936                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  5937                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  5938                                                          je      .40                                             ;yes, branch
  5939                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  5940                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  5941                                                          je      .40                                             ;yes, branch
  5942                                                          mov     edx,czOther                                     ;other
  5943                                                          jmp     .40                                             ;continue
  5944                                  .20                     mov     eax,czOracle                                    ;Oracle
  5945                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  5946                                                          jne     .30                                             ;no, branch
  5947                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  5948                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  5949                                                          je      .40                                             ;yes, branch
  5950                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  5951                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  5952                                                          je      .40                                             ;yes, branch
  5953                                                          mov     edx,czOther                                     ;other
  5954                                                          jmp     .40                                             ;continue
  5955                                  .30                     mov     eax,czOther                                     ;other
  5956                                                          mov     edx,czOther                                     ;other
  5957                                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  5958                                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  5959                                                          ret                                                     ;return
  5960                                  ;-----------------------------------------------------------------------------------------------------------------------
  5961                                  ;
  5962                                  ;       Routine:        ConSecond
  5963                                  ;
  5964                                  ;       Description:    This routine Handles the SECOND command.
  5965                                  ;
  5966                                  ;-----------------------------------------------------------------------------------------------------------------------
  5967                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5968                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5969                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5970                                                          call    ConPutNewLine                                   ;write newline to console
  5971                                                          ret                                                     ;return
  5972                                  ;-----------------------------------------------------------------------------------------------------------------------
  5973                                  ;
  5974                                  ;       Routine:        ConTime
  5975                                  ;
  5976                                  ;       Description:    This routine Handles the TIME command.
  5977                                  ;
  5978                                  ;-----------------------------------------------------------------------------------------------------------------------
  5979                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5980                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5981                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5982                                                          call    ConPutNewLine                                   ;write newline to console
  5983                                                          ret                                                     ;return
  5984                                  ;-----------------------------------------------------------------------------------------------------------------------
  5985                                  ;
  5986                                  ;       Routine:        ConVersion
  5987                                  ;
  5988                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5989                                  ;
  5990                                  ;-----------------------------------------------------------------------------------------------------------------------
  5991                                  ConVersion              putConsoleString czTitle                                ;display version message
  5992                                                          ret                                                     ;return
  5993                                  ;-----------------------------------------------------------------------------------------------------------------------
  5994                                  ;
  5995                                  ;       Routine:        ConWeekday
  5996                                  ;
  5997                                  ;       Description:    This routine handles the WEEKDAY command.
  5998                                  ;
  5999                                  ;-----------------------------------------------------------------------------------------------------------------------
  6000                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6001                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6002                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6003                                                          call    ConPutNewLine                                   ;write newline to console
  6004                                                          ret                                                     ;return
  6005                                  ;-----------------------------------------------------------------------------------------------------------------------
  6006                                  ;
  6007                                  ;       Routine:        ConWeekdayName
  6008                                  ;
  6009                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6010                                  ;
  6011                                  ;-----------------------------------------------------------------------------------------------------------------------
  6012                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6013                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6014                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6015                                                          call    ConPutNewLine                                           ;write newline to console
  6016                                                          ret                                                             ;return
  6017                                  ;-----------------------------------------------------------------------------------------------------------------------
  6018                                  ;
  6019                                  ;       Routine:        ConYear
  6020                                  ;
  6021                                  ;       Description:    This routine Handles the YEAR command.
  6022                                  ;
  6023                                  ;-----------------------------------------------------------------------------------------------------------------------
  6024                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6025                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6026                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6027                                                          call    ConPutNewLine                                   ;write newline to console
  6028                                                          ret                                                     ;return
  6029                                  ;-----------------------------------------------------------------------------------------------------------------------
  6030                                  ;
  6031                                  ;       Routine:        ConYearIsLeap
  6032                                  ;
  6033                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6034                                  ;
  6035                                  ;-----------------------------------------------------------------------------------------------------------------------
  6036                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6037                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6038                                                          jecxz   .10                                             ;branch if not leap
  6039                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6040                                                          jmp     .20                                             ;continue
  6041                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6042                                  .20                     ret                                                     ;return
  6043                                  ;-----------------------------------------------------------------------------------------------------------------------
  6044                                  ;
  6045                                  ;       Tables
  6046                                  ;
  6047                                  ;-----------------------------------------------------------------------------------------------------------------------
  6048                                                                                                                  ;---------------------------------------
  6049                                                                                                                  ;  Command Jump Table
  6050                                                                                                                  ;---------------------------------------
  6051                                  tConJmpTbl              equ     $                                               ;command jump table
  6052                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6053                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6054                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6055                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6056                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6057                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6058                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6059                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6060                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6061                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6062                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6063                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6064                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6065                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6066                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6067                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6068                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6069                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6070                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6071                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6072                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6073                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6074                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6075                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6076                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6077                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6078                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6079                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6080                                                                                                                  ;---------------------------------------
  6081                                                                                                                  ;  Command Name Table
  6082                                                                                                                  ;---------------------------------------
  6083                                  tConCmdTbl              equ     $                                               ;command name table
  6084                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6085                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6086                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6087                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6088                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6089                                                          db      8,"VERSION",0                                   ;version command
  6090                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6091                                                          db      7,"MALLOC",0                                    ;malloc command
  6092                                                          db      7,"MEMORY",0                                    ;memory command
  6093                                                          db      7,"MINUTE",0                                    ;minute command
  6094                                                          db      7,"SECOND",0                                    ;second command
  6095                                                          db      6,"CLEAR",0                                     ;clear command
  6096                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6097                                                          db      6,"MONTH",0                                     ;month command
  6098                                                          db      5,"DATE",0                                      ;date command
  6099                                                          db      5,"EXIT",0                                      ;exit command
  6100                                                          db      5,"FREE",0                                      ;free command
  6101                                                          db      5,"HOUR",0                                      ;hour command
  6102                                                          db      5,"INT6",0                                      ;int6 command
  6103                                                          db      5,"QUIT",0                                      ;quit command
  6104                                                          db      5,"TIME",0                                      ;time command
  6105                                                          db      5,"YEAR",0                                      ;year command
  6106                                                          db      4,"CLS",0                                       ;cls command
  6107                                                          db      4,"DAY",0                                       ;day command
  6108                                                          db      4,"MEM",0                                       ;mem command
  6109                                                          db      4,"VER",0                                       ;ver command
  6110                                                          db      0                                               ;end of table
  6111                                  ;-----------------------------------------------------------------------------------------------------------------------
  6112                                  ;
  6113                                  ;       Constants
  6114                                  ;
  6115                                  ;-----------------------------------------------------------------------------------------------------------------------
  6116                                  czApple                 db      "Apple",0                                       ;vendor name string
  6117                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6118                                  czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  6119                                  czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  6120                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6121                                  czKB                    db      "KB",0                                          ;Kilobytes
  6122                                  czNewLine               db      13,10,0                                         ;new line string
  6123                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6124                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6125                                  czOther                 db      "Other",0                                       ;default name string
  6126                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6127                                  czPeriod                db      ".",0                                           ;period delimiter
  6128                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6129                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6130                                  czPrompt                db      ":",0                                           ;prompt string
  6131                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6132                                  czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  6133                                  czSpace                 db      " ",0                                           ;space delimiter
  6134                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6135                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6136                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6137                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6138                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6139                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6140                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6141                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6142                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6143                                  %endif
  6144                                  %ifdef BUILDDISK
  6145                                  ;-----------------------------------------------------------------------------------------------------------------------
  6146                                  ;
  6147                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6148                                  ;
  6149                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6150                                  ;
  6151                                  ;-----------------------------------------------------------------------------------------------------------------------
  6152                                  section                 unused                                                  ;unused disk space
  6153                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6154                                  %endif
  6155                                  ;=======================================================================================================================
  6156                                  ;
  6157                                  ;       End of Program Code
  6158                                  ;
  6159                                  ;=======================================================================================================================
