     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to report the ethernet adapter memory address
     8                                  ;                       and port, if found.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIPERIOD            equ     02Eh                                            ;period
   368                                  EASCIIUPPERA            equ     041h                                            ;'A'
   369                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   370                                  EASCIILOWERA            equ     061h                                            ;'a'
   371                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   372                                  EASCIITILDE             equ     07Eh                                            ;'~'
   373                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   374                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   375                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   376                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   377                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   378                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   379                                  EASCIICASE              equ     00100000b                                       ;case bit
   380                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  ;
   383                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   384                                  ;
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EPCIPORTCONFIGADDR      equ     0CF8h                                           ;PCI Configuration Address Port
   387                                  EPCIPORTCONFIGDATA      equ     0CFCh                                           ;PCI Configuration Data Port
   388                                  EPCIVENDORAPPLE         equ     106Bh                                           ;Apple
   389                                  EPCIVENDORINTEL         equ     8086h                                           ;Intel
   390                                  EPCIVENDORORACLE        equ     80EEh                                           ;Oracle
   391                                  EPCIAPPLEUSB            equ     003Fh                                           ;USB Controller
   392                                  EPCIINTELPRO1000MT      equ     100Fh                                           ;Pro/1000 MT Ethernet Adapter
   393                                  EPCIINTELPCIMEM         equ     1237h                                           ;PCI & Memory
   394                                  EPCIINTELAD1881         equ     2415h                                           ;Aureal AD1881 SOUNDMAX
   395                                  EPCIINTELPIIX3          equ     7000h                                           ;PIIX3 PCI-to-ISA Bridge (Triton II)
   396                                  EPCIINTEL82371AB        equ     7111h                                           ;82371AB/EB PCI Bus Master IDE Cntrlr
   397                                  EPCIINTELPIIX4          equ     7113h                                           ;PIIX4/4E/4M Power Mgmt Cntrlr
   398                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   399                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  ;
   402                                  ;       Operating System Values
   403                                  ;
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;
   407                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   408                                  ;
   409                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   410                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   411                                  ;
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   414                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   415                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   416                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   417                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   418                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   419                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;       Console Constants                                                       ECON...
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ECONCOLS                equ     80                                              ;columns per row
   424                                  ECONROWS                equ     24                                              ;console rows
   425                                  ECONOIAROW              equ     24                                              ;operator information area row
   426                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   427                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   428                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   429                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   430                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   435                                  EGDTCGA                 equ     020h                                            ;cga video selector
   436                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   437                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   438                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   439                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   440                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   441                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  ;       Hardware Flags                                                          EHWF...
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  ;       Keyboard Flags                                                          EKEYF...
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   450                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   451                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   452                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   453                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   454                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   455                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   456                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   457                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   458                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   459                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   460                                  ;-----------------------------------------------------------------------------------------------------------------------
   461                                  ;       Kernel Constants                                                        EKRN...
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   464                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   465                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   466                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   467                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   468                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;       Memory Management Constants                                             EMEM...
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   477                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   478                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   479                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  ;       Message Identifiers                                                     EMSG...
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   484                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   485                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   486                                  ;=======================================================================================================================
   487                                  ;
   488                                  ;       Structures
   489                                  ;
   490                                  ;=======================================================================================================================
   491                                  ;-----------------------------------------------------------------------------------------------------------------------
   492                                  ;
   493                                  ;       DATETIME
   494                                  ;
   495                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   496                                  ;
   497                                  ;-----------------------------------------------------------------------------------------------------------------------
   498                                  struc                   DATETIME
   499 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   500 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   501 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   502 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   503 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   504 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   505 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   506 00000007 <res 00000001>          .century                resb    1                                               ;century
   507                                  EDATETIMELEN            equ     ($-.second)
   508                                  endstruc
   509                                  ;-----------------------------------------------------------------------------------------------------------------------
   510                                  ;
   511                                  ;       MEMBLOCK
   512                                  ;
   513                                  ;       The MEMBLOCK structure defines a memory block.
   514                                  ;
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516                                  struc                   MEMBLOCK
   517 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   518 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   519 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   520 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   521 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   522 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   523 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   524 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   525                                  EMEMBLOCKLEN            equ     ($-.signature)
   526                                  endstruc
   527                                  ;-----------------------------------------------------------------------------------------------------------------------
   528                                  ;
   529                                  ;       MEMROOT
   530                                  ;
   531                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   532                                  ;
   533                                  ;-----------------------------------------------------------------------------------------------------------------------
   534                                  struc                   MEMROOT
   535 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   536 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   537 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   538 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   539 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   540 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   541                                  EMEMROOTLEN             equ     ($-.firstcontig)
   542                                  endstruc
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;       MQUEUE
   546                                  ;
   547                                  ;       The MQUEUE structure maps memory used for a message queue.
   548                                  ;
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  struc                   MQUEUE
   551 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   552 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   553 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   554                                  endstruc
   555                                  ;-----------------------------------------------------------------------------------------------------------------------
   556                                  ;
   557                                  ;       PCI
   558                                  ;
   559                                  ;       The PCI structure defines a PCI bus, device and function context.
   560                                  ;
   561                                  ;-----------------------------------------------------------------------------------------------------------------------
   562                                  struc                   PCI
   563                                  .configdata             equ     $                                               ;data read from port 0CFCh
   564 00000000 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   565 00000002 <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   566 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff 0000 0000
   567 00000008 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   568 00000009 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   569 0000000A <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   570 0000000B <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   571 0000000C <res 00000004>          .bar0                   resd    1                                               ;base address register 0
   572 00000010 <res 00000004>          .bar1                   resd    1                                               ;base address register 1
   573 00000014 <res 00000004>          .bar2                   resd    1                                               ;base address register 2
   574 00000018 <res 00000004>          .bar3                   resd    1                                               ;base address register 3
   575 0000001C <res 00000004>          .bar4                   resd    1                                               ;base address register 4
   576 00000020 <res 00000004>          .bar5                   resd    1                                               ;base address register 5
   577                                  EPCILEN                 equ     ($-.configdata)
   578                                  endstruc
   579                                  ;-----------------------------------------------------------------------------------------------------------------------
   580                                  ;
   581                                  ;       OSDATA
   582                                  ;
   583                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   584                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   585                                  ;
   586                                  ;-----------------------------------------------------------------------------------------------------------------------
   587                                  struc                   OSDATA
   588 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   589 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   590 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   591 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   592 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   593 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   594 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   595 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   596 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   597 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   598 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   599 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   600 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   601 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   602 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   603 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   604 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   605 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   606 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   607 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   608 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   609 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   610 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   611 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   612 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   613 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   614 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   615 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   616 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   617 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   618 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   619 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   620 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   621 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   622 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   623 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   624 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   625 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   626 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   627 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   628 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   629 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   630 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   631 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   632 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   633 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   634 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   635 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   636 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   637 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   638 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   639 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   640 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   641 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   642 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   643 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   644 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   645 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   646 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   647 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   648 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   649 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   650 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   651 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   652 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   653 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   654 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   655 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   656 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   657 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   658 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   659 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   660 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   661 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   662 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   663 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   664 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   665 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   666 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   667 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   668 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   669 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   670 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   671 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   672 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   673 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   674 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   675 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   676 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   677 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   678 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   679 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   680 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   681 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   682 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   683 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   684 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   685 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   686 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   687 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   688 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   689                                  ;-----------------------------------------------------------------------------------------------------------------------
   690                                  ;
   691                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   692                                  ;
   693                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   694                                  ;
   695                                  ;-----------------------------------------------------------------------------------------------------------------------
   696                                  ECONDATA                equ     ($)
   697 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   698 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   699 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   700 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   701 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   702 00000814 <res 00000004>          wdConsolePCIVendorStr   resd    1                                               ;PCI vendor name string addr
   703 00000818 <res 00000004>          wdConsolePCIChipStr     resd    1                                               ;PCI device name string addr
   704 0000081C <res 00000004>          wdConsoleEthernetDevice resd    1                                               ;PCI ethernet adapter selector
   705 00000820 <res 00000004>          wdConsoleEthernetMem    resd    1                                               ;PCI ethernet memory mapped i/o address
   706 00000824 <res 00000004>          wdConsoleEthernetPort   resd    1                                               ;PCI ethernet i/o port
   707 00000828 <res 00000004>          wdConsoleEthernetCtrl   resd    1                                               ;PCI ethernet control register value
   708 0000082C <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   709 0000082D <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   710 0000082E <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   711 0000082F <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   712 00000830 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   713 00000831 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   714 00000832 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   715 00000833 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   716 00000834 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   717 00000835 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   718 00000836 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   719 00000837 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   720 00000838 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   721 00000839 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   722 00000889 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   723 000008D9 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   724 00000929 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   725 00000934 <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   726 0000093F <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   727 0000094A <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   728 00000962 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   729 0000096A <res 00000024>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   730                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   731                                  ;-----------------------------------------------------------------------------------------------------------------------
   732                                  ;
   733                                  ;       End of OS Variables
   734                                  ;
   735                                  ;-----------------------------------------------------------------------------------------------------------------------
   736                                  endstruc
   737                                  ;-----------------------------------------------------------------------------------------------------------------------
   738                                  ;
   739                                  ;       Macros
   740                                  ;
   741                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   742                                  ;
   743                                  ;-----------------------------------------------------------------------------------------------------------------------
   744                                  %macro                  mint    1
   745                                  _%1                     equ     ($-$$) / EX86DESCLEN
   746                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   747                                  %endmacro
   748                                  %macro                  mtrap   1
   749                                  _%1                     equ     ($-$$) / EX86DESCLEN
   750                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   751                                  %endmacro
   752                                  %macro                  menter  1
   753                                  ?%1                     equ     ($-$$)
   754                                  %endmacro
   755                                  %macro                  tsvce   1
   756                                  e%1                     equ     ($-tsvc)/4
   757                                                          dd      %1
   758                                  %endmacro
   759                                  %ifdef BUILDBOOT
   760                                  ;=======================================================================================================================
   761                                  ;
   762                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   763                                  ;
   764                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   765                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   766                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   767                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   768                                  ;
   769                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   770                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   771                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   772                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   773                                  ;       immediately followed by a disk parameter table.
   774                                  ;
   775                                  ;=======================================================================================================================
   776                                                          cpu     8086                                            ;assume minimal CPU
   777                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   778                                                          bits    16                                              ;16-bit code at power-up
   779                                  %ifdef BUILDPREP
   780                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   781                                  %else
   782 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   783                                  %endif
   784                                  ;-----------------------------------------------------------------------------------------------------------------------
   785                                  ;
   786                                  ;       Disk Parameter Table
   787                                  ;
   788                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   789                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   790                                  ;
   791                                  ;-----------------------------------------------------------------------------------------------------------------------
   792 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   793 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   794 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   795 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   796 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   797 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   798 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   799 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   800 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   801                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   802 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   803 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   804 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   805                                  ;
   806                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   807                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   808                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   809                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   810                                  ;       given several possible starting values for CS:IP.
   811                                  ;
   812                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   813 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   814                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   815 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   816 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   817 00000025 B104                                            mov     cl,4                                            ;shift count
   818 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   819 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   820 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   821                                  ;
   822                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   823                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   824                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   825                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   826                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   827                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   828                                  ;
   829 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   830 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   831 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   832 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   833 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   834                                  ;
   835                                  ;       Our boot addressability is now set up according to the following diagram.
   836                                  ;
   837                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   838                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   839                                  ;                               |  256 = 100h bytes                             |
   840                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   841                                  ;                               |  Boot Sector (vstart=0100h)                   |
   842                                  ;                               |  1 sector = 512 = 200h bytes                  |
   843                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   844                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   845                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   846                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   847                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   848                                  ;                               |  2 sectors = 1024 = 400h bytes
   849                                  ;                       009400  +-----------------------------------------------+ DS:1900
   850                                  ;
   851                                  ;       On entry, DL indicates the drive being booted from.
   852                                  ;
   853 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   854                                  ;
   855                                  ;       Compute directory i/o buffer address.
   856                                  ;
   857 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   858 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   859 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   860 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   861                                  ;
   862                                  ;       Compute segment where os.com will be loaded.
   863                                  ;
   864 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   865 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   866 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   867 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   868                                  ;
   869                                  ;       Set the video mode to 80 column, 25 row, text.
   870                                  ;
   871 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   872 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   873                                  ;
   874                                  ;       Write a message to the console so we know we have our addressability established.
   875                                  ;
   876 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   877 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   878                                  ;
   879                                  ;       Initialize the number of directory sectors to search.
   880                                  ;
   881 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   882 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   883                                  ;
   884                                  ;       Compute number of directory sectors and initialize overhead count.
   885                                  ;
   886 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   887 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   888 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   889 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   890                                  ;
   891                                  ;       Compute directory entries per sector.
   892                                  ;
   893 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   894 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   895 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   896                                  ;
   897                                  ;       Compute first logical directory sector and update overhead count.
   898                                  ;
   899 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   900 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   901 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   902 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   903 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   904 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   905                                  ;
   906                                  ;       Read directory sector.
   907                                  ;
   908 0000008E B001                    .30                     mov     al,1                                            ;sector count
   909 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   910 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   911 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   912                                  ;
   913                                  ;       Setup variables to search this directory sector.
   914                                  ;
   915 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   916 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   917 000000A1 7603                                            jna     .40                                             ;no, continue
   918 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   919 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   920 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   921 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   922                                  ;
   923                                  ;       Loop through directory sectors searching for kernel program.
   924                                  ;
   925 000000B1 56                      .50                     push    si                                              ;save kernel name address
   926 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   927 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   928 000000B6 FC                                              cld                                                     ;forward strings
   929 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   930 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   931 000000BA 5E                                              pop     si                                              ;restore kernel name address
   932 000000BB 7418                                            je      .60                                             ;exit loop if found
   933 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   934 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   935 000000C2 75ED                                            jnz     .50                                             ;next entry
   936                                  ;
   937                                  ;       Repeat search if we are not at the end of the directory.
   938                                  ;
   939 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   940 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   941 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   942 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   943 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   944                                  ;
   945                                  ;       If we find the kernel program in the directory, read the FAT.
   946                                  ;
   947 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   948 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   949 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   950 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   951 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   952 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   953                                  ;
   954                                  ;       Get the starting cluster of the kernel program and target address.
   955                                  ;
   956 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   957 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   958                                  ;
   959                                  ;       Read each program cluster into RAM.
   960                                  ;
   961 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   962 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   963 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   964 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   965 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   966 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   967 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   968 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   969 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   970                                  ;
   971                                  ;       Update buffer pointer for next cluster.
   972                                  ;
   973 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   974 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   975 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   976 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   977 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   978                                  ;
   979                                  ;       Compute next cluster number.
   980                                  ;
   981 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   982 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   983 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   984 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   985 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   986 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   987 00000120 83E701                                          and     di,1                                            ;get low bit
   988 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   989 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   990 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   991                                  ;
   992                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   993                                  ;
   994 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   995 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   996 00000130 B104                                            mov     cl,4                                            ;shift count
   997 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   998 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   999 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1000 0000013A 75B2                                            jne     .70                                             ;no, continue
  1001                                  ;
  1002                                  ;       Transfer control to the operating system program.
  1003                                  ;
  1004 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1005 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1006 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1007                                  ;
  1008                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1009                                  ;
  1010 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1011 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1012 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1013 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1014 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1015 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1016 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1017 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1018 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1019 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1020                                  ;
  1021                                  ;       Try maxtries times to read sector.
  1022                                  ;
  1023 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1024 00000160 53                      .10                     push    bx                                              ;save buffer address
  1025 00000161 51                                              push    cx                                              ;save retry count
  1026 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1027 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1028 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1029 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1030 0000016F 59                                              pop     cx                                              ;restore retry count
  1031 00000170 5B                                              pop     bx                                              ;restore buffer address
  1032 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1033 00000173 E2EB                                            loop    .10                                             ;retry
  1034                                  ;
  1035                                  ;       Handle disk error: convert to ASCII and store in error string.
  1036                                  ;
  1037 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1038 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1039 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1040 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1041 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1042 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1043 00000183 7203                                            jb      .20                                             ;continue if numeral
  1044 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1045 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1046 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1047 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1048 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1049 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1050 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1051                                  ;
  1052                                  ;       Wait for a key press.
  1053                                  ;
  1054 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1055 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1056 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1057 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1058 0000019F F4                                              hlt                                                     ;wait for interrupt
  1059 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1060                                  ;
  1061                                  ;       Reset the system.
  1062                                  ;
  1063 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1064 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1065 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1066 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1067 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1068                                  ;
  1069                                  ;       Display text message.
  1070                                  ;
  1071 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1072 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1073 000001AC 84C0                                            test    al,al                                           ;end of string?
  1074 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1075 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1076 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1077 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1078 000001B6 C3                      BootReturn              ret                                                     ;return
  1079                                  ;-----------------------------------------------------------------------------------------------------------------------
  1080                                  ;
  1081                                  ;       Constants
  1082                                  ;
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084 000001B7 90                                              align   2
  1085 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1086 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1086 000001C3 4F4D               
  1087 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1087 000001CE 530D0A00           
  1088 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1088 000001DB 7220               
  1089 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1090 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1090 000001E9 6700               
  1091                                  ;-----------------------------------------------------------------------------------------------------------------------
  1092                                  ;
  1093                                  ;       Work Areas
  1094                                  ;
  1095                                  ;-----------------------------------------------------------------------------------------------------------------------
  1096 000001EB 90                                              align   2
  1097 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1098 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1099 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1100 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1101 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1102                                  wwReadCountCommand      equ     $                                               ;read count and command
  1103 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1104 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1105                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1106 000001F8 00                      wbDrive                 db      0                                               ;drive
  1107 000001F9 00                      wbHead                  db      0                                               ;head
  1108                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1109 000001FA 00                                              db      0                                               ;sector
  1110 000001FB 00                      wbTrack                 db      0                                               ;track
  1111 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1112 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1113                                  %endif
  1114                                  %ifdef BUILDPREP
  1115                                  ;=======================================================================================================================
  1116                                  ;
  1117                                  ;       Diskette Preparation Code
  1118                                  ;
  1119                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1120                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1121                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1122                                  ;
  1123                                  ;=======================================================================================================================
  1124                                  ;
  1125                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1126                                  ;
  1127                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1128                                                          call    BootPrint                                       ;display message
  1129                                  ;
  1130                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1131                                  ;
  1132                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1133                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1134                                                          jnz     .20                                             ;continue if key pressed
  1135                                                          sti                                                     ;enable interrupts
  1136                                                          hlt                                                     ;wait for interrupt
  1137                                                          jmp     .10                                             ;repeat
  1138                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1139                                                          je      .30                                             ;yes, branch
  1140                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1141                                                          jne     .10                                             ;no, repeat
  1142                                                          jmp     .120                                            ;yes, exit program
  1143                                  ;
  1144                                  ;       Display writing-sector message and patch the JMP instruction.
  1145                                  ;
  1146                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1147                                                          call    BootPrint                                       ;display message
  1148                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1149                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1150                                                          mov     [bx],ax                                         ;update the JMP instruction
  1151                                  ;
  1152                                  ;       Try to read the boot sector.
  1153                                  ;
  1154                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1155                                  .40                     push    cx                                              ;save remaining tries
  1156                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1157                                                          mov     dx,0                                            ;head zero, drive zero
  1158                                                          mov     cx,1                                            ;track zero, sector one
  1159                                                          mov     al,1                                            ;one sector
  1160                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1161                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1162                                                          pop     cx                                              ;restore remaining retries
  1163                                                          jnc     .50                                             ;skip ahead if successful
  1164                                                          loop    .40                                             ;try again
  1165                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1166                                                          jmp     .70                                             ;branch to error routine
  1167                                  ;
  1168                                  ;       Copy diskette parms from input buffer to output buffer.
  1169                                  ;
  1170                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1171                                                          add     si,11                                           ;skip over JMP and system ID
  1172                                                          mov     di,Boot                                         ;output buffer address
  1173                                                          add     di,11                                           ;skip over JMP and system ID
  1174                                                          mov     cx,19                                           ;length of diskette parameters
  1175                                                          cld                                                     ;forward string copies
  1176                                                          rep     movsb                                           ;copy diskette parameters
  1177                                  ;
  1178                                  ;       Try to write boot sector to diskette.
  1179                                  ;
  1180                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1181                                  .60                     push    cx                                              ;save remaining tries
  1182                                                          mov     bx,Boot                                         ;output buffer address
  1183                                                          mov     dx,0                                            ;head zero, drive zero
  1184                                                          mov     cx,1                                            ;track zero, sector one
  1185                                                          mov     al,1                                            ;one sector
  1186                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1187                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1188                                                          pop     cx                                              ;restore remaining retries
  1189                                                          jnc     .100                                            ;skip ahead if successful
  1190                                                          loop    .60                                             ;try again
  1191                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1192                                  ;
  1193                                  ;       Convert the error code to ASCII and display the error message.
  1194                                  ;
  1195                                  .70                     push    ax                                              ;save error code
  1196                                                          mov     al,ah                                           ;copy error code
  1197                                                          mov     ah,0                                            ;AX = error code
  1198                                                          mov     dl,10h                                          ;hexadecimal divisor
  1199                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1200                                                          or      ax,03030h                                       ;add ASCII zone digits
  1201                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1202                                                          jb      .80                                             ;yes, continue
  1203                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1204                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1205                                                          jb      .90                                             ;yes, continue
  1206                                                          add     al,7                                            ;no, make ASCII
  1207                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1208                                                          call    BootPrint                                       ;write error message
  1209                                                          pop     ax                                              ;restore error code
  1210                                  ;
  1211                                  ;       Display the completion message.
  1212                                  ;
  1213                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1214                                                          mov     al,ah                                           ;BIOS return code
  1215                                                          cmp     al,0                                            ;success?
  1216                                                          je      .110                                            ;yes, continue
  1217                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1218                                                          cmp     al,1                                            ;disk parameter error?
  1219                                                          je      .110                                            ;yes, continue
  1220                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1221                                                          cmp     al,2                                            ;address mark not found?
  1222                                                          je      .110                                            ;yes, continue
  1223                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1224                                                          cmp     al,3                                            ;protected disk?
  1225                                                          je      .110                                            ;yes, continue
  1226                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1227                                                          cmp     al,6                                            ;diskette removed?
  1228                                                          je      .110                                            ;yes, continue
  1229                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1230                                                          cmp     al,80H                                          ;drive timed out?
  1231                                                          je      .110                                            ;yes, continue
  1232                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1233                                  .110                    call    BootPrint                                       ;display result message
  1234                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1235                                                          int     021h                                            ;terminate DOS program
  1236                                                          ret                                                     ;return (should not execute)
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                  ;
  1239                                  ;       Diskette Preparation Messages
  1240                                  ;
  1241                                  ;-----------------------------------------------------------------------------------------------------------------------
  1242                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1243                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1244                                                          db      13,10
  1245                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1246                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1247                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1248                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1249                                                          db      13,10,0
  1250                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1251                                                          db      13,10,0
  1252                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1253                                                          db      13,10,0
  1254                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1255                                                          db      13,10,0
  1256                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1257                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1258                                                          db      13,10,0
  1259                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1260                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1261                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1262                                                          db      13,10,"and retry."
  1263                                                          db      13,10,0
  1264                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1265                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1266                                                          db      13,10,"using another diskette."
  1267                                                          db      13,10,0
  1268                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1269                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1270                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1271                                                          db      13,10,0
  1272                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1273                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1274                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1275                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1276                                                          db      13,10,"is properly inserted in the diskette drive."
  1277                                                          db      13,10,0
  1278                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1279                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1280                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1281                                                          db      13,10,0
  1282                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1283                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1284                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1285                                                          db      13,10,0
  1286                                  wcPrepInBuf             equ     $
  1287                                  %endif
  1288                                  %ifdef BUILDDISK
  1289                                  ;=======================================================================================================================
  1290                                  ;
  1291                                  ;       File Allocation Tables
  1292                                  ;
  1293                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1294                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1295                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1296                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1297                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1298                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1299                                  ;       the last cluster in the chain.
  1300                                  ;
  1301                                  ;       Every three bytes encode two FAT entries as follows:
  1302                                  ;
  1303                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1304                                  ;
  1305                                  ;=======================================================================================================================
  1306                                  ;-----------------------------------------------------------------------------------------------------------------------
  1307                                  ;
  1308                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1309                                  ;
  1310                                  ;-----------------------------------------------------------------------------------------------------------------------
  1311                                  section                 fat1                                                    ;first copy of FAT
  1312                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1313                                                          db      005h,060h,000h, 007h,080h,000h
  1314                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1315                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1316                                                          db      011h,020h,001h, 013h,040h,001h
  1317                                                          db      015h,060h,001h, 017h,080h,001h
  1318                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1319                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1320                                                          db      021h,020h,002h, 023h,040h,002h
  1321                                                          db      025h,060h,002h, 027h,080h,002h
  1322                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1323                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  ;
  1326                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1327                                  ;
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                  section                 fat2                                                    ;second copy of FAT
  1330                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1331                                                          db      005h,060h,000h, 007h,080h,000h
  1332                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1333                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1334                                                          db      011h,020h,001h, 013h,040h,001h
  1335                                                          db      015h,060h,001h, 017h,080h,001h
  1336                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1337                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1338                                                          db      021h,020h,002h, 023h,040h,002h
  1339                                                          db      025h,060h,002h, 027h,080h,002h
  1340                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1341                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1342                                  ;-----------------------------------------------------------------------------------------------------------------------
  1343                                  ;
  1344                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1345                                  ;
  1346                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1347                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1348                                  ;       copy.
  1349                                  ;
  1350                                  ;-----------------------------------------------------------------------------------------------------------------------
  1351                                  section                 dir                                                     ;diskette directory
  1352                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1353                                                          db      020h                                            ;attribute (archive bit set)
  1354                                                          times   10 db 0                                         ;unused
  1355                                                          dw      0h                                              ;time
  1356                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1357                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1358                                                          dw      2                                               ;first cluster
  1359                                                          dd      05400h                                          ;file size
  1360                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1361                                  %endif
  1362                                  %ifdef BUILDCOM
  1363                                  ;=======================================================================================================================
  1364                                  ;
  1365                                  ;       OS.COM
  1366                                  ;
  1367                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1368                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1369                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1370                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1371                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1372                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1373                                  ;
  1374                                  ;       Our loader addressability is set up according to the following diagram.
  1375                                  ;
  1376                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1377                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1378                                  ;                               |  256 = 100h bytes                             |
  1379                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1380                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1381                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1382                                  ;                       007e00  +-----------------------------------------------+
  1383                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1384                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1385                                  ;                               |                                               |
  1386                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1387                                  ;                               |                                               |
  1388                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1389                                  ;                               |  Loader Code                                  |
  1390                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1391                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1392                                  ;
  1393                                  ;=======================================================================================================================
  1394                                  ;-----------------------------------------------------------------------------------------------------------------------
  1395                                  ;
  1396                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1397                                  ;
  1398                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1399                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1400                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1401                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1402                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1403                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1404                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1405                                  ;       registers.
  1406                                  ;
  1407                                  ;-----------------------------------------------------------------------------------------------------------------------
  1408                                                          cpu     8086                                            ;assume minimal CPU
  1409                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1410                                                          bits    16                                              ;this is 16-bit code
  1411                                  Loader                  push    cs                                              ;use the code segment
  1412                                                          pop     ds                                              ;...as our data segment
  1413                                                          push    cs                                              ;use the code segment
  1414                                                          pop     es                                              ;...as our extra segment
  1415                                  ;
  1416                                  ;       Write a message to the console so we know we have our addressability established.
  1417                                  ;
  1418                                                          mov     si,czStartingMsg                                ;starting message
  1419                                                          call    PutTTYString                                    ;display loader message
  1420                                  ;
  1421                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1422                                  ;
  1423                                                          call    GetCPUType                                      ;AL = cpu type
  1424                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1425                                                          cmp     al,3                                            ;80386+?
  1426                                                          jb      LoaderExit                                      ;no, exit with error message
  1427                                                          cpu     386                                             ;allow 80386 instructions
  1428                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1429                                                          call    PutTTYString                                    ;display message
  1430                                  ;
  1431                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1432                                  ;
  1433                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1434                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1435                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1436                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1437                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1438                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1439                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1440                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1441                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1442                                                          call    PutTTYString                                    ;display message
  1443                                  ;
  1444                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1445                                  ;
  1446                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1447                                                          pop     es                                              ;... as target segment
  1448                                                          xor     di,di                                           ;ES:DI = target address
  1449                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1450                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1451                                                          cld                                                     ;forward strings
  1452                                                          rep     movsb                                           ;copy kernel image
  1453                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1454                                                          call    PutTTYString                                    ;display message
  1455                                  ;
  1456                                  ;       Switch to protected mode.
  1457                                  ;
  1458                                                          xor     si,si                                           ;ES:SI = gdt addr
  1459                                                          mov     ss,si                                           ;protected mode ss
  1460                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1461                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1462                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1463                                                          mov     dx,001Fh                                        ;outer delay loop count
  1464                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1465                                                          loop    $                                               ;wait out pending interrupts
  1466                                                          dec     dx                                              ;restore outer loop count
  1467                                                          jnz     .10                                             ;continue outer loop
  1468                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1469                                  ;
  1470                                  ;       Enable hardware and maskable interrupts.
  1471                                  ;
  1472                                                          xor     al,al                                           ;enable all registers code
  1473                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1474                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1475                                                          sti                                                     ;enable maskable interrupts
  1476                                  ;
  1477                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1478                                  ;
  1479                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1480                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1481                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1482                                  ;-----------------------------------------------------------------------------------------------------------------------
  1483                                  ;
  1484                                  ;       Routine:        LoaderExit
  1485                                  ;
  1486                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1487                                  ;
  1488                                  ;       In:             DS:SI   string address
  1489                                  ;
  1490                                  ;-----------------------------------------------------------------------------------------------------------------------
  1491                                  LoaderExit              call    PutTTYString                                    ;display error message
  1492                                  ;
  1493                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1494                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1495                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1496                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1497                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1498                                  ;
  1499                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1500                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1501                                                          jnz     .40                                             ;exit if key pressed
  1502                                                          sti                                                     ;enable maskable interrupts
  1503                                                          hlt                                                     ;wait for interrupt
  1504                                                          jmp     .30                                             ;repeat until keypress
  1505                                  ;
  1506                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1507                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1508                                  ;       HLT until the system resets.
  1509                                  ;
  1510                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1511                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1512                                  .50                     sti                                                     ;enable maskable interrupts
  1513                                                          hlt                                                     ;stop until reset, int, nmi
  1514                                                          jmp     .50                                             ;loop until restart kicks in
  1515                                  ;-----------------------------------------------------------------------------------------------------------------------
  1516                                  ;
  1517                                  ;       Routine:        GetCPUType
  1518                                  ;
  1519                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1520                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1521                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1522                                  ;
  1523                                  ;       Out:            AX      0 = 808x, v20, etc.
  1524                                  ;                               1 = 80186
  1525                                  ;                               2 = 80286
  1526                                  ;                               3 = 80386
  1527                                  ;
  1528                                  ;-----------------------------------------------------------------------------------------------------------------------
  1529                                  GetCPUType              mov     al,1                                            ;AL = 1
  1530                                                          mov     cl,32                                           ;shift count
  1531                                                          shr     al,cl                                           ;try a 32-bit shift
  1532                                                          or      al,al                                           ;did the shift happen?
  1533                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1534                                                          cpu     186
  1535                                                          push    sp                                              ;save stack pointer
  1536                                                          pop     cx                                              ;...into cx
  1537                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1538                                                          jne     .10                                             ;yes, cpu is 80186
  1539                                                          cpu     286
  1540                                                          inc     ax                                              ;AX = 2
  1541                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1542                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1543                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1544                                                          jz      .10                                             ;yes, cpu is 80286
  1545                                                          inc     ax                                              ;AX = 3
  1546                                  .10                     ret                                                     ;return
  1547                                  ;-----------------------------------------------------------------------------------------------------------------------
  1548                                  ;
  1549                                  ;       Routine:        PutTTYString
  1550                                  ;
  1551                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1552                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1553                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1554                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1555                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1556                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1557                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1558                                  ;                       to LODSB is not needed.
  1559                                  ;
  1560                                  ;       In:             DS:SI   address of string
  1561                                  ;
  1562                                  ;       Out:            DF      0
  1563                                  ;                       ZF      1
  1564                                  ;                       AL      0
  1565                                  ;
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                  PutTTYString            cld                                                     ;forward strings
  1568                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1569                                                          test    al,al                                           ;end of string?
  1570                                                          jz      .20                                             ;... yes, exit our loop
  1571                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1572                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1573                                                          jmp     .10                                             ;repeat until done
  1574                                  .20                     ret                                                     ;return
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                  ;
  1577                                  ;       Loader Data
  1578                                  ;
  1579                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1580                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1581                                  ;
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                                          align   2
  1584                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1585                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1586                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1587                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1588                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1589                                                          db      "Please press any key to restart the computer.",13,10,0
  1590                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1591                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1592                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1593                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1594                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1595                                  ;=======================================================================================================================
  1596                                  ;
  1597                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1598                                  ;
  1599                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1600                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1601                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1602                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1603                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1604                                  ;
  1605                                  ;=======================================================================================================================
  1606                                  ;=======================================================================================================================
  1607                                  ;
  1608                                  ;       Kernel Tables
  1609                                  ;
  1610                                  ;=======================================================================================================================
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  ;
  1613                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1614                                  ;
  1615                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1616                                  ;       first descriptor must be all nulls.
  1617                                  ;
  1618                                  ;       6   5         4         3         2         1         0
  1619                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1620                                  ;       ----------------------------------------------------------------
  1621                                  ;       h......hffffmmmma......ab......................bn..............n
  1622                                  ;
  1623                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1624                                  ;               ffff                                                            flags
  1625                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1626                                  ;                       a......a                                                access
  1627                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1628                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1629                                  ;
  1630                                  ;       00000000                                                                all areas have base addresses below 2^24
  1631                                  ;               0...                                                            single-byte size granularity
  1632                                  ;               1...                                                            4-kilobyte size granularity
  1633                                  ;               .0..                                                            16-bit default for code segments
  1634                                  ;               .1..                                                            32-bit default for code segments
  1635                                  ;               ..0.                                                            intel-reserved; should be zero
  1636                                  ;               ...0                                                            available for operating system use
  1637                                  ;                   0000                                                        segment is less than 2^16 in size
  1638                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1639                                  ;                       1.......                                                segment is present in memory
  1640                                  ;                       .00.....                                                segment is of privilege level 0
  1641                                  ;                       ...0....                                                segment is of system or gate type
  1642                                  ;                       ...00010                                                local decriptor table (LDT)
  1643                                  ;                       ...01001                                                task state segment (TSS) available
  1644                                  ;                       ...01011                                                task state segment (TSS) busy
  1645                                  ;                       ...10...                                                data segment
  1646                                  ;                       ...10011                                                writable data (accessed)
  1647                                  ;                       ...11...                                                code segment
  1648                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  section                 gdt                                                     ;global descriptor table
  1652                                                          dq      0000000000000000h                               ;00 required null selector
  1653                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1654                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1655                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1656                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1657                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1658                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1659                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1660                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1661                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1662                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1663                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1664                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1665                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1666                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1670                                  ;
  1671                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1672                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1673                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1674                                  ;
  1675                                  ;       6   5         4         3         2         1         0
  1676                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1677                                  ;       ----------------------------------------------------------------
  1678                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1679                                  ;
  1680                                  ;       h...h   high-order offset (bits 16-31)
  1681                                  ;       P       present (0=unused interrupt)
  1682                                  ;       zz      descriptor privilege level
  1683                                  ;       S       storage segment (must be zero for IDT)
  1684                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1685                                  ;       S...S   handling code selector in GDT
  1686                                  ;       l...l   lo-order offset (bits 0-15)
  1687                                  ;
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  section                 idt                                                     ;interrupt descriptor table
  1690                                                          mint    dividebyzero                                    ;00 divide by zero
  1691                                                          mint    singlestep                                      ;01 single step
  1692                                                          mint    nmi                                             ;02 non-maskable
  1693                                                          mint    break                                           ;03 break
  1694                                                          mint    into                                            ;04 into
  1695                                                          mint    bounds                                          ;05 bounds
  1696                                                          mint    badopcode                                       ;06 bad op code
  1697                                                          mint    nocoproc                                        ;07 no coprocessor
  1698                                                          mint    doublefault                                     ;08 double-fault
  1699                                                          mint    operand                                         ;09 operand
  1700                                                          mint    badtss                                          ;0a bad TSS
  1701                                                          mint    notpresent                                      ;0b not-present
  1702                                                          mint    stacklimit                                      ;0c stack limit
  1703                                                          mint    protection                                      ;0d general protection fault
  1704                                                          mint    int14                                           ;0e (reserved)
  1705                                                          mint    int15                                           ;0f (reserved)
  1706                                                          mint    coproccalc                                      ;10 (reserved)
  1707                                                          mint    int17                                           ;11 (reserved)
  1708                                                          mint    int18                                           ;12 (reserved)
  1709                                                          mint    int19                                           ;13 (reserved)
  1710                                                          mint    int20                                           ;14 (reserved)
  1711                                                          mint    int21                                           ;15 (reserved)
  1712                                                          mint    int22                                           ;16 (reserved)
  1713                                                          mint    int23                                           ;17 (reserved)
  1714                                                          mint    int24                                           ;18 (reserved)
  1715                                                          mint    int25                                           ;19 (reserved)
  1716                                                          mint    int26                                           ;1a (reserved)
  1717                                                          mint    int27                                           ;1b (reserved)
  1718                                                          mint    int28                                           ;1c (reserved)
  1719                                                          mint    int29                                           ;1d (reserved)
  1720                                                          mint    int30                                           ;1e (reserved)
  1721                                                          mint    int31                                           ;1f (reserved)
  1722                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1723                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1724                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1725                                                          mtrap   com2                                            ;23 IRQ3 com2
  1726                                                          mtrap   com1                                            ;24 IRQ4 com1
  1727                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1728                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1729                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1730                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1731                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1732                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1733                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1734                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1735                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1736                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1737                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1738                                                          mtrap   svc                                             ;30 OS services
  1739                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1740                                  ;=======================================================================================================================
  1741                                  ;
  1742                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1743                                  ;
  1744                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1745                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1746                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1747                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1748                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1749                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1750                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1751                                  ;
  1752                                  ;=======================================================================================================================
  1753                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1754                                                          cpu     386                                             ;allow 80386 instructions
  1755                                                          bits    32                                              ;this is 32-bit code
  1756                                  ;=======================================================================================================================
  1757                                  ;
  1758                                  ;       CPU Interrupt Handlers
  1759                                  ;
  1760                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1761                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1762                                  ;
  1763                                  ;=======================================================================================================================
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                  ;
  1766                                  ;       INT0    Divide By Zero
  1767                                  ;
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                                          menter  dividebyzero                                    ;divide by zero
  1770                                                          push    0                                               ;store interrupt nbr
  1771                                                          push    czIntDivideByZero                               ;store message offset
  1772                                                          jmp     ReportInterrupt                                 ;report interrupt
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;       INT1    Single Step
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                                          menter  singlestep                                      ;single step
  1779                                                          push    1                                               ;store interrupt nbr
  1780                                                          push    czIntSingleStep                                 ;store message offset
  1781                                                          jmp     ReportInterrupt                                 ;report interrupt
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;       INT2    Non-Maskable Interrupt
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                                          menter  nmi                                             ;non-maskable
  1788                                                          push    2                                               ;store interrupt nbr
  1789                                                          push    czIntNonMaskable                                ;store message offset
  1790                                                          jmp     ReportInterrupt                                 ;report interrupt
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;       INT3    Break
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                                          menter  break                                           ;break
  1797                                                          push    3                                               ;store interrupt nbr
  1798                                                          push    czIntBreak                                      ;store message offset
  1799                                                          jmp     ReportInterrupt                                 ;report interrupt
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;       INT4    Into
  1803                                  ;
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                                          menter  into                                            ;into
  1806                                                          push    4                                               ;store interrupt nbr
  1807                                                          push    czIntInto                                       ;store message offset
  1808                                                          jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT5    Bounds
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  bounds                                          ;bounds
  1815                                                          push    5                                               ;store interrupt nbr
  1816                                                          push    czIntBounds                                     ;store message offset
  1817                                                          jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT6    Bad Operation Code
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  badopcode                                       ;bad opcode interrupt
  1824                                                          push    6                                               ;store interrupt nbr
  1825                                                          push    czIntBadOpCode                                  ;store message offset
  1826                                                          jmp     ReportInterrupt                                 ;report interrupt
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       INT7    No Coprocessor
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1833                                                          push    7                                               ;store interrupt nbr
  1834                                                          push    czIntNoCoprocessor                              ;store message offset
  1835                                                          jmp     ReportInterrupt                                 ;report interrupt
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;       INT8    Double Fault
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                                          menter  doublefault                                     ;doublefault interrupt
  1842                                                          push    8                                               ;store interrupt nbr
  1843                                                          push    czIntDoubleFault                                ;store message offset
  1844                                                          jmp     ReportInterrupt                                 ;report interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;       INT9    Operand
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                                          menter  operand                                         ;operand interrupt
  1851                                                          push    9                                               ;store interrupt nbr
  1852                                                          push    czIntOperand                                    ;store message offset
  1853                                                          jmp     ReportInterrupt                                 ;report interrupt
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;       INT10   Bad Task State Segment
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                                          menter  badtss                                          ;bad TSS interrupt
  1860                                                          push    10                                              ;store interrupt nbr
  1861                                                          push    czIntBadTSS                                     ;store message offset
  1862                                                          jmp     ReportInterrupt                                 ;report interrupt
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;       INT11   Not Present
  1866                                  ;
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                                          menter  notpresent                                      ;not present interrupt
  1869                                                          push    11                                              ;store interrupt nbr
  1870                                                          push    czIntNotPresent                                 ;store message offset
  1871                                                          jmp     ReportInterrupt                                 ;report interrupt
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  ;
  1874                                  ;       INT12   Stack Limit
  1875                                  ;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                                          menter  stacklimit                                      ;stack limit interrupt
  1878                                                          push    12                                              ;store interrupt nbr
  1879                                                          push    czIntStackLimit                                 ;store message offset
  1880                                                          jmp     ReportInterrupt                                 ;report interrupt
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       INT13   General Protection Fault
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  protection                                      ;protection fault interrupt
  1887                                                          push    13                                              ;store interrupt nbr
  1888                                                          push    czIntProtection                                 ;store message offset
  1889                                                          jmp     ReportInterrupt                                 ;report interrupt
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       INT14   Reserved
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  int14                                           ;(reserved)
  1896                                                          push    14                                              ;store interrupt nbr
  1897                                                          push    czIntReserved                                   ;store message offset
  1898                                                          jmp     ReportInterrupt                                 ;report interrupt
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;       INT15   Reserved
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                                          menter  int15                                           ;(reserved)
  1905                                                          push    15                                              ;store interrupt nbr
  1906                                                          push    czIntReserved                                   ;store message offset
  1907                                                          jmp     ReportInterrupt                                 ;report interrupt
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  ;
  1910                                  ;       INT16   Coprocessor Calculation
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                                          menter  coproccalc                                      ;coprocessor calculation
  1914                                                          push    16                                              ;store interrupt nbr
  1915                                                          push    czIntCoprocessorCalc                            ;store message offset
  1916                                                          jmp     ReportInterrupt                                 ;report interrupt
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  ;
  1919                                  ;       INT17   Reserved
  1920                                  ;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                                          menter  int17                                           ;(reserved)
  1923                                                          push    17                                              ;store interrupt nbr
  1924                                                          push    czIntReserved                                   ;store message offset
  1925                                                          jmp     ReportInterrupt                                 ;report interrupt
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  ;
  1928                                  ;       INT18   Reserved
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  int18                                           ;(reserved)
  1932                                                          push    18                                              ;store interrupt nbr
  1933                                                          push    czIntReserved                                   ;store message offset
  1934                                                          jmp     ReportInterrupt                                 ;report interrupt
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       INT19   Reserved
  1938                                  ;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                                          menter  int19                                           ;(reserved)
  1941                                                          push    19                                              ;store interrupt nbr
  1942                                                          push    czIntReserved                                   ;store message offset
  1943                                                          jmp     ReportInterrupt                                 ;report interrupt
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;       INT20   Reserved
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                                          menter  int20                                           ;(reserved)
  1950                                                          push    20                                              ;store interrupt nbr
  1951                                                          push    czIntReserved                                   ;store message offset
  1952                                                          jmp     ReportInterrupt                                 ;report interrupt
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                  ;
  1955                                  ;       INT21   Reserved
  1956                                  ;
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                                          menter  int21                                           ;(reserved)
  1959                                                          push    21                                              ;store interrupt nbr
  1960                                                          push    czIntReserved                                   ;store message offset
  1961                                                          jmp     ReportInterrupt                                 ;report interrupt
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                  ;
  1964                                  ;       INT22   Reserved
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                                          menter  int22                                           ;(reserved)
  1968                                                          push    22                                              ;store interrupt nbr
  1969                                                          push    czIntReserved                                   ;store message offset
  1970                                                          jmp     ReportInterrupt                                 ;report interrupt
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;       INT23   Reserved
  1974                                  ;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                                          menter  int23                                           ;(reserved)
  1977                                                          push    23                                              ;store interrupt nbr
  1978                                                          push    czIntReserved                                   ;store message offset
  1979                                                          jmp     ReportInterrupt                                 ;report interrupt
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  ;
  1982                                  ;       INT24   Reserved
  1983                                  ;
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                                          menter  int24                                           ;(reserved)
  1986                                                          push    24                                              ;store interrupt nbr
  1987                                                          push    czIntReserved                                   ;store message offset
  1988                                                          jmp     ReportInterrupt                                 ;report interrupt
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;       INT25   Reserved
  1992                                  ;
  1993                                  ;-----------------------------------------------------------------------------------------------------------------------
  1994                                                          menter  int25                                           ;(reserved)
  1995                                                          push    25                                              ;store interrupt nbr
  1996                                                          push    czIntReserved                                   ;store message offset
  1997                                                          jmp     ReportInterrupt                                 ;report interrupt
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                  ;
  2000                                  ;       INT26   Reserved
  2001                                  ;
  2002                                  ;-----------------------------------------------------------------------------------------------------------------------
  2003                                                          menter  int26                                           ;(reserved)
  2004                                                          push    26                                              ;store interrupt nbr
  2005                                                          push    czIntReserved                                   ;store message offset
  2006                                                          jmp     ReportInterrupt                                 ;report interrupt
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  ;
  2009                                  ;       INT27   Reserved
  2010                                  ;
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                                          menter  int27                                           ;(reserved)
  2013                                                          push    27                                              ;store interrupt nbr
  2014                                                          push    czIntReserved                                   ;store message offset
  2015                                                          jmp     ReportInterrupt                                 ;report interrupt
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;
  2018                                  ;       INT28   Reserved
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                                          menter  int28                                           ;(reserved)
  2022                                                          push    28                                              ;store interrupt nbr
  2023                                                          push    czIntReserved                                   ;store message offset
  2024                                                          jmp     ReportInterrupt                                 ;report interrupt
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026                                  ;
  2027                                  ;       INT29   Reserved
  2028                                  ;
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                                          menter  int29                                           ;(reserved)
  2031                                                          push    29                                              ;store interrupt nbr
  2032                                                          push    czIntReserved                                   ;store message offset
  2033                                                          jmp     ReportInterrupt                                 ;report interrupt
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;
  2036                                  ;       INT30   Reserved
  2037                                  ;
  2038                                  ;-----------------------------------------------------------------------------------------------------------------------
  2039                                                          menter  int30                                           ;(reserved)
  2040                                                          push    30                                              ;store interrupt nbr
  2041                                                          push    czIntReserved                                   ;store message offset
  2042                                                          jmp     ReportInterrupt                                 ;report interrupt
  2043                                  ;-----------------------------------------------------------------------------------------------------------------------
  2044                                  ;
  2045                                  ;       INT31   Reserved
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048                                                          menter  int31                                           ;(reserved)
  2049                                                          push    31                                              ;store interrupt nbr
  2050                                                          push    czIntReserved                                   ;store message offset
  2051                                                          jmp     ReportInterrupt                                 ;report interrupt
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  ;
  2054                                  ;       Routine:        ReportInterrupt
  2055                                  ;
  2056                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2057                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2058                                  ;
  2059                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2060                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2061                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2062                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2063                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2064                                  ;
  2065                                  ;       Out:            N/A             This routine does not exit.
  2066                                  ;
  2067                                  ;-----------------------------------------------------------------------------------------------------------------------
  2068                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2069                                                          push    es                                              ;save ES at time of interrupt
  2070                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2071                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2072                                  ;
  2073                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2074                                  ;
  2075                                  ;                       [EBP+56]        EFLAGS
  2076                                  ;                       [EBP+52]        CS
  2077                                  ;                       [EBP+48]        EIP
  2078                                  ;                       [EBP+44]        interrupt number (0-31)
  2079                                  ;                       [EBP+40]        error message address
  2080                                  ;                       [EBP+36]        DS
  2081                                  ;                       [EBP+32]        ES
  2082                                  ;                       [EBP+28]        EAX
  2083                                  ;                       [EBP+24]        ECX
  2084                                  ;                       [EBP+20]        EDX
  2085                                  ;                       [EBP+16]        EBX
  2086                                  ;                       [EBP+12]        ESP
  2087                                  ;                       [EBP+8]         EBP
  2088                                  ;                       [EBP+4]         ESI
  2089                                  ;                       [EBP+0]         EDI
  2090                                  ;
  2091                                                          push    cs                                              ;load code selector ...
  2092                                                          pop     ds                                              ;... into DS
  2093                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2094                                                          pop     es                                              ;... into ES
  2095                                  ;
  2096                                  ;       Display the interrupt report boundary box
  2097                                  ;
  2098                                                          mov     cl,13                                           ;column
  2099                                                          mov     ch,6                                            ;row
  2100                                                          mov     dl,50                                           ;width
  2101                                                          mov     dh,8                                            ;height
  2102                                                          mov     bh,07h                                          ;attribute
  2103                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2104                                  ;
  2105                                  ;       Display the report header
  2106                                  ;
  2107                                                          mov     cl,15                                           ;column
  2108                                                          mov     ch,7                                            ;row
  2109                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2110                                                          call    SetConsoleString                                ;draw text string
  2111                                  ;
  2112                                  ;       Display the interrupt description label
  2113                                  ;
  2114                                                          mov     cl,15                                           ;column
  2115                                                          mov     ch,8                                            ;row
  2116                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2117                                                          call    SetConsoleString                                ;draw text string
  2118                                  ;
  2119                                  ;       Display the interrupt number
  2120                                  ;
  2121                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2122                                                          mov     cl,26                                           ;column
  2123                                                          mov     ch,8                                            ;row
  2124                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2125                                  ;
  2126                                  ;       Display the interrupt name
  2127                                  ;
  2128                                                          mov     cl,29                                           ;column
  2129                                                          mov     ch,8                                            ;row
  2130                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2131                                                          call    SetConsoleString                                ;display interrupt description
  2132                                  ;
  2133                                  ;       Display the register values header
  2134                                  ;
  2135                                                          mov     cl,15                                           ;column
  2136                                                          mov     ch,10                                           ;row
  2137                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2138                                                          call    SetConsoleString                                ;draw text string
  2139                                  ;
  2140                                  ;       Display the EAX register label and value
  2141                                  ;
  2142                                                          mov     cl,15                                           ;column
  2143                                                          mov     ch,11                                           ;row
  2144                                                          mov     esi,czIntEAX                                    ;register EAX label
  2145                                                          call    SetConsoleString                                ;draw label
  2146                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2147                                                          mov     cl,19                                           ;column
  2148                                                          mov     ch,11                                           ;row
  2149                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2150                                  ;
  2151                                  ;       Display the ECX register label and value
  2152                                  ;
  2153                                                          mov     cl,15                                           ;column
  2154                                                          mov     ch,12                                           ;row
  2155                                                          mov     esi,czIntECX                                    ;label
  2156                                                          call    SetConsoleString                                ;draw label
  2157                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2158                                                          mov     cl,19                                           ;column
  2159                                                          mov     ch,12                                           ;row
  2160                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2161                                  ;
  2162                                  ;       Display the EDX register label and value
  2163                                  ;
  2164                                                          mov     cl,15                                           ;column
  2165                                                          mov     ch,13                                           ;row
  2166                                                          mov     esi,czIntEDX                                    ;label
  2167                                                          call    SetConsoleString                                ;draw label
  2168                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2169                                                          mov     cl,19                                           ;column
  2170                                                          mov     ch,13                                           ;row
  2171                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2172                                  ;
  2173                                  ;       Display the EBX register label and value
  2174                                  ;
  2175                                                          mov     cl,15                                           ;column
  2176                                                          mov     ch,14                                           ;row
  2177                                                          mov     esi,czIntEBX                                    ;label
  2178                                                          call    SetConsoleString                                ;draw label
  2179                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2180                                                          mov     cl,19                                           ;column
  2181                                                          mov     ch,14                                           ;row
  2182                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2183                                  ;
  2184                                  ;       Display the ESI register label and value
  2185                                  ;
  2186                                                          mov     cl,29                                           ;column
  2187                                                          mov     ch,11                                           ;row
  2188                                                          mov     esi,czIntESI                                    ;label
  2189                                                          call    SetConsoleString                                ;draw label
  2190                                                          mov     eax,[ebp+4]                                     ;ESI
  2191                                                          mov     cl,33                                           ;column
  2192                                                          mov     ch,11                                           ;row
  2193                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2194                                  ;
  2195                                  ;       Display the EDI register label and value
  2196                                  ;
  2197                                                          mov     cl,29                                           ;column
  2198                                                          mov     ch,12                                           ;row
  2199                                                          mov     esi,czIntEDI                                    ;label
  2200                                                          call    SetConsoleString                                ;draw label
  2201                                                          mov     eax,[ebp+0]                                     ;EDI
  2202                                                          mov     cl,33                                           ;column
  2203                                                          mov     ch,12                                           ;row
  2204                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2205                                  ;
  2206                                  ;       Display the EBP register label and value
  2207                                  ;
  2208                                                          mov     cl,29                                           ;column
  2209                                                          mov     ch,13                                           ;row
  2210                                                          mov     esi,czIntEBP                                    ;label
  2211                                                          call    SetConsoleString                                ;draw label
  2212                                                          mov     eax,[ebp+8]                                     ;EBP
  2213                                                          mov     cl,33                                           ;column
  2214                                                          mov     ch,13                                           ;row
  2215                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2216                                  ;
  2217                                  ;       Display the DS register label and value
  2218                                  ;
  2219                                                          mov     cl,42                                           ;column
  2220                                                          mov     ch,11                                           ;row
  2221                                                          mov     esi,czIntDS                                     ;label
  2222                                                          call    SetConsoleString                                ;draw label
  2223                                                          xor     eax,eax                                         ;zero register
  2224                                                          mov     ax,[ebp+36]                                     ;DS
  2225                                                          mov     cl,46                                           ;column
  2226                                                          mov     ch,11                                           ;row
  2227                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2228                                  ;
  2229                                  ;       Display the ES register label and value
  2230                                  ;
  2231                                                          mov     cl,42                                           ;column
  2232                                                          mov     ch,12                                           ;row
  2233                                                          mov     esi,czIntES                                     ;label
  2234                                                          call    SetConsoleString                                ;draw label
  2235                                                          xor     eax,eax                                         ;zero register
  2236                                                          mov     ax,[ebp+32]                                     ;ES
  2237                                                          mov     cl,46                                           ;column
  2238                                                          mov     ch,12                                           ;row
  2239                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2240                                  ;
  2241                                  ;       Display the SS register label and value
  2242                                  ;
  2243                                                          mov     cl,42                                           ;column
  2244                                                          mov     ch,13                                           ;row
  2245                                                          mov     esi,czIntSS                                     ;label
  2246                                                          call    SetConsoleString                                ;draw label
  2247                                                          xor     eax,eax                                         ;zero register
  2248                                                          mov     ax,ss                                           ;SS
  2249                                                          mov     cl,46                                           ;column
  2250                                                          mov     ch,13                                           ;row
  2251                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2252                                  ;
  2253                                  ;       Display the CS register lable and value
  2254                                  ;
  2255                                                          mov     cl,42                                           ;column
  2256                                                          mov     ch,14                                           ;row
  2257                                                          mov     esi,czIntCS                                     ;label
  2258                                                          call    SetConsoleString                                ;draw label
  2259                                                          xor     eax,eax                                         ;zero register
  2260                                                          mov     ax,[ebp+52]                                     ;CS
  2261                                                          mov     cl,46                                           ;column
  2262                                                          mov     ch,14                                           ;row
  2263                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2264                                  ;
  2265                                  ;       Display the EFLAGS register label and value
  2266                                  ;
  2267                                                          mov     cl,51                                           ;column
  2268                                                          mov     ch,11                                           ;row
  2269                                                          mov     esi,czIntEFLAGS                                 ;label
  2270                                                          call    SetConsoleString                                ;draw label
  2271                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2272                                                          mov     cl,55                                           ;column
  2273                                                          mov     ch,11                                           ;row
  2274                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2275                                  ;
  2276                                  ;       Display the ESP register label and value
  2277                                  ;
  2278                                                          mov     cl,51                                           ;column
  2279                                                          mov     ch,13                                           ;row
  2280                                                          mov     esi,czIntESP                                    ;label
  2281                                                          call    SetConsoleString                                ;draw label
  2282                                                          mov     eax,[ebp+12]                                    ;ESP
  2283                                                          mov     cl,55                                           ;column
  2284                                                          mov     ch,13                                           ;row
  2285                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2286                                  ;
  2287                                  ;       Display the EIP register label and value
  2288                                  ;
  2289                                                          mov     cl,51                                           ;column
  2290                                                          mov     ch,14                                           ;row
  2291                                                          mov     esi,czIntEIP                                    ;label
  2292                                                          call    SetConsoleString                                ;draw label
  2293                                                          mov     eax,[ebp+48]                                    ;EIP
  2294                                                          mov     cl,55                                           ;column
  2295                                                          mov     ch,14                                           ;row
  2296                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2297                                  ;
  2298                                  ;       Halt and loop until reset
  2299                                  ;
  2300                                  .10                     sti                                                     ;enable maskable interrupts
  2301                                                          hlt                                                     ;halt processor
  2302                                                          jmp     .10                                             ;resume on interrupt
  2303                                  ;-----------------------------------------------------------------------------------------------------------------------
  2304                                  ;
  2305                                  ;       Processor Interrupt Name Strings
  2306                                  ;
  2307                                  ;-----------------------------------------------------------------------------------------------------------------------
  2308                                  czIntDivideByZero       db      "Division by zero",0
  2309                                  czIntSingleStep         db      "Single step",0
  2310                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2311                                  czIntBreak              db      "Break",0
  2312                                  czIntInto               db      "Into",0
  2313                                  czIntBounds             db      "Bounds",0
  2314                                  czIntBadOpCode          db      "Bad Operation Code",0
  2315                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2316                                  czIntDoubleFault        db      "Double Fault",0
  2317                                  czIntOperand            db      "Operand",0
  2318                                  czIntBadTSS             db      "Bad Task State Segment",0
  2319                                  czIntNotPresent         db      "Not Present",0
  2320                                  czIntStackLimit         db      "Stack Limit",0
  2321                                  czIntProtection         db      "General Protection Fault",0
  2322                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2323                                  czIntReserved           db      "Reserved",0
  2324                                  ;-----------------------------------------------------------------------------------------------------------------------
  2325                                  ;
  2326                                  ;       Processor Interrupt Handling Strings
  2327                                  ;
  2328                                  ;-----------------------------------------------------------------------------------------------------------------------
  2329                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2330                                  czIntLabel              db      "Interrupt #",0
  2331                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2332                                  czIntEAX                db      "EAX:",0
  2333                                  czIntECX                db      "ECX:",0
  2334                                  czIntEDX                db      "EDX:",0
  2335                                  czIntEBX                db      "EBX:",0
  2336                                  czIntESI                db      "ESI:",0
  2337                                  czIntEDI                db      "EDI:",0
  2338                                  czIntEBP                db      "EBP:",0
  2339                                  czIntESP                db      "ESP:",0
  2340                                  czIntDS                 db      " DS:",0
  2341                                  czIntES                 db      " ES:",0
  2342                                  czIntSS                 db      " SS:",0
  2343                                  czIntCS                 db      " CS:",0
  2344                                  czIntEFLAGS             db      "FLG:",0
  2345                                  czIntEIP                db      "EIP:",0
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       Routine:        DrawTextDialogBox
  2349                                  ;
  2350                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2351                                  ;
  2352                                  ;       In:             CL      upper left column (0-79)
  2353                                  ;                       CH      upper left row (0-24)
  2354                                  ;                       DL      column width, excluding border
  2355                                  ;                       DH      row height, excluding border
  2356                                  ;                       BH      color attribute
  2357                                  ;
  2358                                  ;-----------------------------------------------------------------------------------------------------------------------
  2359                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2360                                                          push    esi                                             ;
  2361                                                          push    edi                                             ;
  2362                                                          push    es                                              ;
  2363                                                          push    EGDTCGA                                         ;load CGA selector ...
  2364                                                          pop     es                                              ;... into ES
  2365                                  ;
  2366                                  ;       Compute target display offset
  2367                                  ;
  2368                                                          xor     eax,eax                                         ;zero register
  2369                                                          mov     al,ch                                           ;row
  2370                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2371                                                          mul     ah                                              ;row offset
  2372                                                          add     al,cl                                           ;add column
  2373                                                          adc     ah,0                                            ;add overflow
  2374                                                          add     al,cl                                           ;add column
  2375                                                          adc     ah,0                                            ;add overflow
  2376                                                          mov     edi,eax                                         ;target row offset
  2377                                  ;
  2378                                  ;       Display top border row
  2379                                  ;
  2380                                                          push    edi                                             ;save target row offset
  2381                                                          mov     ah,bh                                           ;attribute
  2382                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2383                                                          stosw                                                   ;display character and attribute
  2384                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2385                                                          xor     ecx,ecx                                         ;zero register
  2386                                                          mov     cl,dl                                           ;width, excluding border
  2387                                                          rep     stosw                                           ;display horizontal border
  2388                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2389                                                          stosw                                                   ;display character and attribute
  2390                                                          pop     edi                                             ;restore target row offset
  2391                                                          add     edi,ECONROWBYTES                                ;next row
  2392                                  ;
  2393                                  ;       Display dialog box body rows
  2394                                  ;
  2395                                                          xor     ecx,ecx                                         ;zero register
  2396                                                          mov     cl,dh                                           ;height, excluding border
  2397                                  .10                     push    ecx                                             ;save remaining rows
  2398                                                          push    edi                                             ;save target row offset
  2399                                                          mov     ah,bh                                           ;attribute
  2400                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2401                                                          stosw                                                   ;display character and attribute
  2402                                                          mov     al,EASCIISPACE                                  ;space
  2403                                                          xor     ecx,ecx                                         ;zero register
  2404                                                          mov     cl,dl                                           ;width, excluding border
  2405                                                          rep     stosw                                           ;display row
  2406                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2407                                                          stosw                                                   ;display character and attribute
  2408                                                          pop     edi                                             ;restore target row offset
  2409                                                          add     edi,ECONROWBYTES                                ;next row
  2410                                                          pop     ecx                                             ;remaining rows
  2411                                                          loop    .10                                             ;next row
  2412                                  ;
  2413                                  ;       Display bottom border row
  2414                                  ;
  2415                                                          push    edi                                             ;save target row offset
  2416                                                          mov     ah,bh                                           ;attribute
  2417                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2418                                                          stosw                                                   ;display character and attribute
  2419                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2420                                                          xor     ecx,ecx                                         ;zero register
  2421                                                          mov     cl,dl                                           ;width, excluding border
  2422                                                          rep     stosw                                           ;display horizontal border
  2423                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2424                                                          stosw                                                   ;display character and attribute
  2425                                                          pop     edi                                             ;restore target row offset
  2426                                                          add     edi,ECONROWBYTES                                ;next row
  2427                                  ;
  2428                                  ;       Restore and return
  2429                                  ;
  2430                                                          pop     es                                              ;restore non-volatile regs
  2431                                                          pop     edi                                             ;
  2432                                                          pop     esi                                             ;
  2433                                                          pop     ecx                                             ;
  2434                                                          ret                                                     ;return
  2435                                  ;=======================================================================================================================
  2436                                  ;
  2437                                  ;       Hardware Device Interupts
  2438                                  ;
  2439                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2440                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2441                                  ;       (BX=2028h).
  2442                                  ;
  2443                                  ;=======================================================================================================================
  2444                                  ;-----------------------------------------------------------------------------------------------------------------------
  2445                                  ;
  2446                                  ;       IRQ0    Clock Tick Interrupt
  2447                                  ;
  2448                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2449                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2450                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2451                                  ;
  2452                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2453                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2454                                  ;
  2455                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2456                                  ;       zero, the floppy disk motors are turned off.
  2457                                  ;
  2458                                  ;-----------------------------------------------------------------------------------------------------------------------
  2459                                                          menter  clocktick                                       ;clock tick interrupt
  2460                                                          push    eax                                             ;save non-volatile regs
  2461                                                          push    edx                                             ;
  2462                                                          push    ds                                              ;
  2463                                  ;
  2464                                  ;       Update the clock tick count and the elapsed days as needed.
  2465                                  ;
  2466                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2467                                                          pop     ds                                              ;... into data segment register
  2468                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2469                                                          inc     eax                                             ;increment clock ticks
  2470                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2471                                                          jb      irq0.10                                         ;no, skip ahead
  2472                                                          inc     byte [wbClockDays]                              ;increment clock days
  2473                                                          xor     eax,eax                                         ;reset clock ticks
  2474                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2475                                  ;
  2476                                  ;       Decrement floppy disk motor timeout.
  2477                                  ;
  2478                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2479                                                          je      irq0.20                                         ;yes, skip ahead
  2480                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2481                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2482                                  ;
  2483                                  ;       Turn off the floppy disk motor if appropriate.
  2484                                  ;
  2485                                                          sti                                                     ;enable maskable interrupts
  2486                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2487                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2488                                                          in      al,dx                                           ;FDC main status byte
  2489                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2490                                                          jnz     irq0.15                                         ;wait while busy
  2491                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2492                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2493                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2494                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2495                                                          out     dx,al                                           ;turn motor off
  2496                                  ;
  2497                                  ;       Signal the end of the hardware interrupt.
  2498                                  ;
  2499                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2500                                  ;
  2501                                  ;       Restore and return.
  2502                                  ;
  2503                                                          pop     ds                                              ;restore modified regs
  2504                                                          pop     edx                                             ;
  2505                                                          pop     eax                                             ;
  2506                                                          iretd                                                   ;return
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  ;
  2509                                  ;       IRQ1    Keyboard Interrupt
  2510                                  ;
  2511                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2512                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2513                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2514                                  ;       ALL modified registers upon return.
  2515                                  ;
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                                          menter  keyboard                                        ;keyboard interrrupt
  2518                                                          push    eax                                             ;save non-volatile regs
  2519                                                          push    ebx                                             ;
  2520                                                          push    ecx                                             ;
  2521                                                          push    esi                                             ;
  2522                                                          push    ds                                              ;
  2523                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2524                                                          pop     ds                                              ;... into data segment register
  2525                                                          xor     al,al                                           ;zero
  2526                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2527                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2528                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2529                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2530                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2531                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2532                                                          mov     al,' '                                          ;space
  2533                                                          mov     [wbConsoleChar],al                              ;set character to space
  2534                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2535                                                          not     al                                              ;controller timeout mask
  2536                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2537                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2538                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2539                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2540                                                          jz      irq1.140                                        ;yes, skip ahead
  2541                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2542                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2543                                                          mov     ah,al                                           ;copy scan code 0
  2544                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2545                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2546                                                          je      irq1.30                                         ;yes, set flag
  2547                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2548                                                          je      irq1.40                                         ;yes, reset flag
  2549                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2550                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2551                                                          je      irq1.30                                         ;yes, set flag
  2552                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2553                                                          je      irq1.40                                         ;yes, reset flag
  2554                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2555                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2556                                                          je      irq1.30                                         ;yes, set flag
  2557                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2558                                                          je      irq1.40                                         ;yes, reset flag
  2559                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2560                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2561                                                          je      irq1.30                                         ;yes, set flag
  2562                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2563                                                          je      irq1.40                                         ;yes, reset flag
  2564                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2565                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2566                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2567                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2568                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2569                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2570                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2571                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2572                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2573                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2574                                                          jne     irq1.70                                         ;no, skip ahead
  2575                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2576                                                          jz      irq1.140                                        ;yes, skip ahead
  2577                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2578                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2579                                                          mov     ah,al                                           ;copy scan code 1
  2580                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2581                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2582                                                          je      irq1.30                                         ;yes, set flag
  2583                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2584                                                          je      irq1.40                                         ;yes, reset flag
  2585                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2586                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2587                                                          je      irq1.30                                         ;yes, set flag
  2588                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2589                                                          je      irq1.40                                         ;yes, reset flag
  2590                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2591                                                          je      irq1.80                                         ;yes, skip ahead
  2592                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2593                                                          je      irq1.80                                         ;yes, skip ahead
  2594                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2595                                                          je      irq1.10                                         ;yes, continue
  2596                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2597                                                          jne     irq1.20                                         ;no, skip ahead
  2598                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2599                                                          jz      irq1.140                                        ;yes, skip ahead
  2600                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2601                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2602                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2603                                                          jz      irq1.140                                        ;yes, skip ahead
  2604                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2605                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2606                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2607                                  irq1.30                 or      bl,al                                           ;set shift flag
  2608                                                          jmp     irq1.60                                         ;skip ahead
  2609                                  irq1.40                 not     al                                              ;convert flag to mask
  2610                                                          and     bl,al                                           ;reset shift flag
  2611                                                          jmp     irq1.60                                         ;skip ahead
  2612                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2613                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2614                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2615                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2616                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2617                                                          jmp     irq1.150                                        ;finish keyboard handling
  2618                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2619                                                          jne     irq1.80                                         ;no continue
  2620                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2621                                                          jz      irq1.140                                        ;yes, skip ahead
  2622                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2623                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2624                                                          mov     ah,al                                           ;copy scan code 1
  2625                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2626                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2627                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2628                                                          jz      irq1.140                                        ;yes, skip ahead
  2629                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2630                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2631                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2632                                                          jz      irq1.140                                        ;yes, skip ahead
  2633                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2634                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2635                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2636                                                          jz      irq1.140                                        ;yes, skip ahead
  2637                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2638                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2639                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2640                                                          jz      irq1.140                                        ;yes, skip ahead
  2641                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2642                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2643                                                          jmp     irq1.150                                        ;continue
  2644                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2645                                                          test    ah,EKEYBUP                                      ;release code?
  2646                                                          jnz     irq1.130                                        ;yes, skip ahead
  2647                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2648                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2649                                                          jz      irq1.90                                         ;no, skip ahead
  2650                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2651                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2652                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2653                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2654                                                          jz      irq1.100                                        ;no skip ahead
  2655                                                          mov     cl,al                                           ;copy ASCII code
  2656                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2657                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2658                                                          jb      irq1.100                                        ;yes, skip ahead
  2659                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2660                                                          ja      irq1.100                                        ;yes, skip ahead
  2661                                                          xor     al,EASCIICASE                                   ;switch case
  2662                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2663                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2664                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2665                                                          jz      irq1.120                                        ;no, skip ahead
  2666                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2667                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2668                                                          or      edx,eax                                         ;msg id and codes
  2669                                                          xor     ecx,ecx                                         ;null param
  2670                                                          push    eax                                             ;save codes
  2671                                                          call    PutMessage                                      ;put message to console
  2672                                                          pop     eax                                             ;restore codes
  2673                                                          test    al,al                                           ;ASCII translation?
  2674                                                          jz      irq1.130                                        ;no, skip ahead
  2675                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2676                                                          and     eax,0FFFFh                                      ;clear high-order word
  2677                                                          or      edx,eax                                         ;msg id and codes
  2678                                                          xor     ecx,ecx                                         ;null param
  2679                                                          call    PutMessage                                      ;put message to console
  2680                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2681                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2682                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2683                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2684                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2685                                                          pop     ds                                              ;restore non-volatile regs
  2686                                                          pop     esi                                             ;
  2687                                                          pop     ecx                                             ;
  2688                                                          pop     ebx                                             ;
  2689                                                          pop     eax                                             ;
  2690                                                          iretd                                                   ;return
  2691                                  ;-----------------------------------------------------------------------------------------------------------------------
  2692                                  ;       Scan-Code to ASCII Translation Tables
  2693                                  ;-----------------------------------------------------------------------------------------------------------------------
  2694                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2695                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2696                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2697                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2698                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2699                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2700                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2701                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2702                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2703                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2704                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2705                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2706                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2707                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2708                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2709                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2710                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2711                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2712                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2713                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2714                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2715                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2716                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2717                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2718                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2719                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2720                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2721                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2722                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2723                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2724                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2725                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2726                                  ;-----------------------------------------------------------------------------------------------------------------------
  2727                                  ;
  2728                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2729                                  ;
  2730                                  ;-----------------------------------------------------------------------------------------------------------------------
  2731                                                          menter  iochannel                                       ;secondary 8259A cascade
  2732                                                          push    eax                                             ;save modified regs
  2733                                                          jmp     hwint                                           ;end interrupt and return
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                  ;
  2736                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2737                                  ;
  2738                                  ;-----------------------------------------------------------------------------------------------------------------------
  2739                                                          menter  com2                                            ;serial port 2 interrupt
  2740                                                          push    eax                                             ;save modified regs
  2741                                                          jmp     hwint                                           ;end interrupt and return
  2742                                  ;-----------------------------------------------------------------------------------------------------------------------
  2743                                  ;
  2744                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2745                                  ;
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747                                                          menter  com1                                            ;serial port 1 interrupt
  2748                                                          push    eax                                             ;save modified regs
  2749                                                          jmp     hwint                                           ;end interrupt and return
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                  ;
  2752                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2753                                  ;
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2756                                                          push    eax                                             ;save modified regs
  2757                                                          jmp     hwint                                           ;end interrupt and return
  2758                                  ;-----------------------------------------------------------------------------------------------------------------------
  2759                                  ;
  2760                                  ;       IRQ6    Diskette Hardware Interrupt
  2761                                  ;
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                                          menter  diskette                                        ;floppy disk interrupt
  2764                                                          push    eax                                             ;save non-volatile regs
  2765                                                          push    ds                                              ;
  2766                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2767                                                          pop     ds                                              ;... into DS register
  2768                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2769                                                          or      al,10000000b                                    ;set IRQ flag
  2770                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2771                                                          pop     ds                                              ;restore non-volatile regs
  2772                                                          jmp     hwint                                           ;end primary PIC interrupt
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                  ;
  2775                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2776                                  ;
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2779                                                          push    eax                                             ;save modified regs
  2780                                                          jmp     hwint                                           ;end interrupt and return
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                  ;
  2783                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2784                                  ;
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786                                                          menter  rtclock                                         ;real-time clock interrupt
  2787                                                          push    eax                                             ;save modified regs
  2788                                                          jmp     hwwint                                          ;end interrupt and return
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790                                  ;
  2791                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2792                                  ;
  2793                                  ;-----------------------------------------------------------------------------------------------------------------------
  2794                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2795                                                          push    eax                                             ;save modified regs
  2796                                                          jmp     hwwint                                          ;end interrupt and return
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                  ;
  2799                                  ;       IRQ10   Reserved Hardware Interrupt
  2800                                  ;
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                                          menter  irq10                                           ;reserved
  2803                                                          push    eax                                             ;save modified regs
  2804                                                          jmp     hwwint                                          ;end interrupt and return
  2805                                  ;-----------------------------------------------------------------------------------------------------------------------
  2806                                  ;
  2807                                  ;       IRQ11   Reserved Hardware Interrupt
  2808                                  ;
  2809                                  ;-----------------------------------------------------------------------------------------------------------------------
  2810                                                          menter  irq11                                           ;reserved
  2811                                                          push    eax                                             ;save modified regs
  2812                                                          jmp     hwwint                                          ;end interrupt and return
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ;
  2815                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2816                                  ;
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2819                                                          push    eax                                             ;save modified regs
  2820                                                          jmp     hwwint                                          ;end interrupt and return
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  ;
  2823                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2824                                  ;
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                                          menter  coprocessor                                     ;coprocessor interrupt
  2827                                                          push    eax                                             ;save modified regs
  2828                                                          jmp     hwwint                                          ;end interrupt and return
  2829                                  ;-----------------------------------------------------------------------------------------------------------------------
  2830                                  ;
  2831                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2832                                  ;
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2835                                                          push    eax                                             ;save modified regs
  2836                                                          jmp     hwwint                                          ;end interrupt and return
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                  ;
  2839                                  ;       IRQ15   Reserved Hardware Interrupt
  2840                                  ;
  2841                                  ;-----------------------------------------------------------------------------------------------------------------------
  2842                                                          menter  irq15                                           ;reserved
  2843                                                          push    eax                                             ;save modified regs
  2844                                                          jmp     hwwint                                          ;end interrupt and return
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  ;
  2847                                  ;       Exit from hardware interrupt
  2848                                  ;
  2849                                  ;-----------------------------------------------------------------------------------------------------------------------
  2850                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2851                                                          jmp     hwint90                                         ;skip ahead
  2852                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2853                                  hwint90                 pop     eax                                             ;restore modified regs
  2854                                                          iretd                                                   ;return from interrupt
  2855                                  ;-----------------------------------------------------------------------------------------------------------------------
  2856                                  ;
  2857                                  ;       INT 30h Operating System Software Service Interrupt
  2858                                  ;
  2859                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2860                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2861                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2862                                  ;       the entry address of the specific function from a table.
  2863                                  ;
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                                          menter  svc
  2866                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2867                                                          jae     svc90                                           ;yes, skip ahead
  2868                                                          movzx   eax,al                                          ;function
  2869                                                          shl     eax,2                                           ;offset into table
  2870                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2871                                  svc90                   iretd                                                   ;return from interrupt
  2872                                  ;-----------------------------------------------------------------------------------------------------------------------
  2873                                  ;
  2874                                  ;       Service Request Table
  2875                                  ;
  2876                                  ;
  2877                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2878                                  ;
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2881                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2882                                                          tsvce   CompareMemory                                   ;compare memory
  2883                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2884                                                          tsvce   FreeMemory                                      ;free memory block
  2885                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2886                                                          tsvce   GetConsoleString                                ;get string input
  2887                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2888                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2889                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2890                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2891                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2892                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2893                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2894                                                          tsvce   PutDayString                                    ;put DD string
  2895                                                          tsvce   PutHourString                                   ;put hh string
  2896                                                          tsvce   PutMinuteString                                 ;put mm string
  2897                                                          tsvce   PutMonthString                                  ;put MM string
  2898                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2899                                                          tsvce   PutSecondString                                 ;put ss string
  2900                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2901                                                          tsvce   PutWeekdayString                                ;put weekday string
  2902                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2903                                                          tsvce   PutYearString                                   ;put YYYY string
  2904                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2905                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2906                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2907                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2908                                                          tsvce   UpperCaseString                                 ;upper-case string
  2909                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2910                                  ;-----------------------------------------------------------------------------------------------------------------------
  2911                                  ;
  2912                                  ;       Service Request Macros
  2913                                  ;
  2914                                  ;       These macros provide positional parameterization of service request calls.
  2915                                  ;
  2916                                  ;-----------------------------------------------------------------------------------------------------------------------
  2917                                  %macro                  allocateMemory 1
  2918                                                          mov     ecx,%1                                          ;bytes to allocate
  2919                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2920                                                          int     _svc                                            ;invoke OS service
  2921                                  %endmacro
  2922                                  %macro                  clearConsoleScreen 0
  2923                                                          mov     al,eClearConsoleScreen                          ;function code
  2924                                                          int     _svc                                            ;invoke OS service
  2925                                  %endmacro
  2926                                  %macro                  compareMemory 0
  2927                                                          mov     al,eCompareMemory                               ;function code
  2928                                                          int     _svc                                            ;invoke OS service
  2929                                  %endmacro
  2930                                  %macro                  decimalToUnsigned 0
  2931                                                          mov     al,eDecimalToUnsigned                           ;function code
  2932                                                          int     _svc                                            ;invoke OS servie
  2933                                  %endmacro
  2934                                  %macro                  freeMemory 1
  2935                                                          mov     edx,%1                                          ;address of memory block
  2936                                                          mov     al,eFreeMemory                                  ;function code
  2937                                                          int     _svc                                            ;invoke OS service
  2938                                  %endmacro
  2939                                  %macro                  getBaseMemSize 0
  2940                                                          mov     al,eGetBaseMemSize                              ;function code
  2941                                                          int     _svc                                            ;invoke OS service
  2942                                  %endmacro
  2943                                  %macro                  getConsoleString 4
  2944                                                          mov     edx,%1                                          ;buffer address
  2945                                                          mov     ecx,%2                                          ;max characters
  2946                                                          mov     bh,%3                                           ;echo indicator
  2947                                                          mov     bl,%4                                           ;terminator
  2948                                                          mov     al,eGetConsoleString                            ;function code
  2949                                                          int     _svc                                            ;invoke OS service
  2950                                  %endmacro
  2951                                  %macro                  getExtendedMemSize 0
  2952                                                          mov     al,eGetExtendedMemSize                          ;function code
  2953                                                          int     _svc                                            ;invoke OS service
  2954                                  %endmacro
  2955                                  %macro                  getROMMemSize 0
  2956                                                          mov     al,eGetROMMemSize                               ;function code
  2957                                                          int     _svc                                            ;invoke OS service
  2958                                  %endmacro
  2959                                  %macro                  hexadecimalToUnsigned 0
  2960                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2961                                                          int     _svc                                            ;invoke OS service
  2962                                  %endmacro
  2963                                  %macro                  isLeapYear 1
  2964                                                          mov     ebx,%1                                          ;DATETIME addr
  2965                                                          mov     al,eIsLeapYear                                  ;function code
  2966                                                          int     _svc                                            ;invoke OS service
  2967                                  %endmacro
  2968                                  %macro                  placeCursor 0
  2969                                                          mov     al,ePlaceCursor                                 ;function code
  2970                                                          int     _svc                                            ;invoke OS service
  2971                                  %endmacro
  2972                                  %macro                  putConsoleString 1
  2973                                                          mov     edx,%1                                          ;string address
  2974                                                          mov     al,ePutConsoleString                            ;function code
  2975                                                          int     _svc                                            ;invoke OS service
  2976                                  %endmacro
  2977                                  %macro                  putDateString 0
  2978                                                          mov     al,ePutDateString                               ;function code
  2979                                                          int     _svc                                            ;invoke OS service
  2980                                  %endmacro
  2981                                  %macro                  putDateString 2
  2982                                                          mov     ebx,%1                                          ;DATETIME addr
  2983                                                          mov     edx,%2                                          ;output buffer addr
  2984                                                          mov     al,ePutDateString                               ;function code
  2985                                                          int     _svc                                            ;invoke OS service
  2986                                  %endmacro
  2987                                  %macro                  putDayString 2
  2988                                                          mov     ebx,%1                                          ;DATETIME addr
  2989                                                          mov     edx,%2                                          ;output buffer addr
  2990                                                          mov     al,ePutDayString                                ;function code
  2991                                                          int     _svc                                            ;invoke OS service
  2992                                  %endmacro
  2993                                  %macro                  putHourString 2
  2994                                                          mov     ebx,%1                                          ;DATETIME addr
  2995                                                          mov     edx,%2                                          ;output buffer addr
  2996                                                          mov     al,ePutHourString                               ;function code
  2997                                                          int     _svc                                            ;invoke OS service
  2998                                  %endmacro
  2999                                  %macro                  putMinuteString 2
  3000                                                          mov     ebx,%1                                          ;DATETIME addr
  3001                                                          mov     edx,%2                                          ;output buffer addr
  3002                                                          mov     al,ePutMinuteString                             ;function code
  3003                                                          int     _svc                                            ;invoke OS service
  3004                                  %endmacro
  3005                                  %macro                  putMonthString 2
  3006                                                          mov     ebx,%1                                          ;DATETIME addr
  3007                                                          mov     edx,%2                                          ;output buffer addr
  3008                                                          mov     al,ePutMonthString                              ;function code
  3009                                                          int     _svc                                            ;invoke OS service
  3010                                  %endmacro
  3011                                  %macro                  putMonthNameString 2
  3012                                                          mov     ebx,%1                                          ;DATETIME addr
  3013                                                          mov     edx,%2                                          ;output buffer addr
  3014                                                          mov     al,ePutMonthNameString                          ;function code
  3015                                                          int     _svc                                            ;invoke OS service
  3016                                  %endmacro
  3017                                  %macro                  putSecondString 2
  3018                                                          mov     ebx,%1                                          ;DATETIME addr
  3019                                                          mov     edx,%2                                          ;output buffer addr
  3020                                                          mov     al,ePutSecondString                             ;function code
  3021                                                          int     _svc                                            ;invoke OS service
  3022                                  %endmacro
  3023                                  %macro                  putTimeString 0
  3024                                                          mov     al,ePutTimeString                               ;function code
  3025                                                          int     _svc                                            ;invoke OS service
  3026                                  %endmacro
  3027                                  %macro                  putTimeString 2
  3028                                                          mov     ebx,%1                                          ;DATETIME addr
  3029                                                          mov     edx,%2                                          ;output buffer addr
  3030                                                          mov     al,ePutTimeString                               ;function code
  3031                                                          int     _svc                                            ;invoke OS service
  3032                                  %endmacro
  3033                                  %macro                  putWeekdayString 2
  3034                                                          mov     ebx,%1                                          ;DATETIME addr
  3035                                                          mov     edx,%2                                          ;output buffer addr
  3036                                                          mov     al,ePutWeekdayString                            ;function code
  3037                                                          int     _svc                                            ;invoke OS service
  3038                                  %endmacro
  3039                                  %macro                  putWeekdayNameString 2
  3040                                                          mov     ebx,%1                                          ;DATETIME addr
  3041                                                          mov     edx,%2                                          ;output buffer addr
  3042                                                          mov     al,ePutWeekdayNameString                        ;function code
  3043                                                          int     _svc                                            ;invoke OS service
  3044                                  %endmacro
  3045                                  %macro                  putYearString 2
  3046                                                          mov     ebx,%1                                          ;DATETIME addr
  3047                                                          mov     edx,%2                                          ;output buffer addr
  3048                                                          mov     al,ePutYearString                               ;function code
  3049                                                          int     _svc                                            ;invoke OS service
  3050                                  %endmacro
  3051                                  %macro                  readRealTimeClock 0
  3052                                                          mov     al,eReadRealTimeClock                           ;function code
  3053                                                          int     _svc                                            ;invoke OS service
  3054                                  %endmacro
  3055                                  %macro                  readRealTimeClock 1
  3056                                                          mov     ebx,%1                                          ;DATETIME addr
  3057                                                          mov     al,eReadRealTimeClock                           ;function code
  3058                                                          int     _svc                                            ;invoke OS service
  3059                                  %endmacro
  3060                                  %macro                  resetSystem 0
  3061                                                          mov     al,eResetSystem                                 ;function code
  3062                                                          int     _svc                                            ;invoke OS service
  3063                                  %endmacro
  3064                                  %macro                  unsignedToDecimalString 0
  3065                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3066                                                          int     _svc                                            ;invoke OS service
  3067                                  %endmacro
  3068                                  %macro                  unsignedToHexadecimal 0
  3069                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3070                                                          int     _svc                                            ;invoke OS service
  3071                                  %endmacro
  3072                                  %macro                  upperCaseString 0
  3073                                                          mov     al,eUpperCaseString                             ;function code
  3074                                                          int     _svc                                            ;invoke OS service
  3075                                  %endmacro
  3076                                  ;=======================================================================================================================
  3077                                  ;
  3078                                  ;       Kernel Function Library
  3079                                  ;
  3080                                  ;=======================================================================================================================
  3081                                  ;=======================================================================================================================
  3082                                  ;
  3083                                  ;       Date and Time Helper Routines
  3084                                  ;
  3085                                  ;       GetYear
  3086                                  ;       IsLeapYear
  3087                                  ;       PutDateString
  3088                                  ;       PutDayString
  3089                                  ;       PutHourString
  3090                                  ;       PutMinuteString
  3091                                  ;       PutMonthString
  3092                                  ;       PutMonthNameString
  3093                                  ;       PutSecondString
  3094                                  ;       PutTimeString
  3095                                  ;       PutWeekdayString
  3096                                  ;       PutWeekdayNameString
  3097                                  ;       PutYearString
  3098                                  ;
  3099                                  ;=======================================================================================================================
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101                                  ;
  3102                                  ;       Routine:        GetYear
  3103                                  ;
  3104                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3105                                  ;
  3106                                  ;       In:             DS:EBX  DATETIME address
  3107                                  ;
  3108                                  ;       Out:            ECX     year
  3109                                  ;
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3112                                                          imul    ecx,100                                         ;century * 100
  3113                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3114                                                          add     ecx,eax                                         ;year (YYYY)
  3115                                                          ret                                                     ;return
  3116                                  ;-----------------------------------------------------------------------------------------------------------------------
  3117                                  ;
  3118                                  ;       Routine:        IsLeapYear
  3119                                  ;
  3120                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3121                                  ;
  3122                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3123                                  ;
  3124                                  ;       Out:            ECX     0 = not a leap year
  3125                                  ;                               1 = leap year
  3126                                  ;
  3127                                  ;-----------------------------------------------------------------------------------------------------------------------
  3128                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3129                                                          mov     eax,ecx                                         ;EAX = YYYY
  3130                                                          xor     ecx,ecx                                         ;assume not leap year
  3131                                                          test    al,00000011b                                    ;multiple of four?
  3132                                                          jnz     .no                                             ;no, branch
  3133                                                          mov     dl,100                                          ;divisor
  3134                                                          div     dl                                              ;divide by 100
  3135                                                          test    ah,ah                                           ;multiple of 100?
  3136                                                          jnz     .yes                                            ;yes, branch
  3137                                                          test    al,00000011b                                    ;multiple of 400?
  3138                                                          jnz     .no                                             ;no, branch
  3139                                  .yes                    inc     ecx                                             ;indicate leap
  3140                                  .no                     ret                                                     ;return
  3141                                  ;-----------------------------------------------------------------------------------------------------------------------
  3142                                  ;
  3143                                  ;       Routine:        PutDateString
  3144                                  ;
  3145                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3146                                  ;                       structure at ds:ebx.
  3147                                  ;
  3148                                  ;       In:             DS:EBX  DATETIME address
  3149                                  ;                       DS:EDX  output buffer address
  3150                                  ;
  3151                                  ;-----------------------------------------------------------------------------------------------------------------------
  3152                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3153                                                          push    edi                                             ;
  3154                                                          push    es                                              ;
  3155                                                          push    ds                                              ;store data selector ...
  3156                                                          pop     es                                              ;... in extra segment reg
  3157                                                          mov     edi,edx                                         ;output buffer address
  3158                                                          mov     cl,10                                           ;divisor
  3159                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3160                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3161                                                          div     cl                                              ;AH = rem; AL = quotient
  3162                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3163                                                          cld                                                     ;forward strings
  3164                                                          stosd                                                   ;store "mm/"nul
  3165                                                          dec     edi                                             ;address of terminator
  3166                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3167                                                          div     cl                                              ;AH = rem; AL = quotient
  3168                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3169                                                          stosd                                                   ;store "dd/"nul
  3170                                                          dec     edi                                             ;address of terminator
  3171                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3172                                                          div     cl                                              ;AH = rem; AL = quotient
  3173                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3174                                                          stosd                                                   ;store "cc/"null
  3175                                                          dec     edi                                             ;address of terminator
  3176                                                          dec     edi                                             ;address of delimiter
  3177                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3178                                                          div     cl                                              ;AH = rem; AL = quotient
  3179                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3180                                                          stosb                                                   ;store quotient
  3181                                                          mov     al,ah                                           ;remainder
  3182                                                          stosb                                                   ;store remainder
  3183                                                          xor     al,al                                           ;null terminator
  3184                                                          stosb                                                   ;store terminator
  3185                                                          pop     es                                              ;restore non-volatile regs
  3186                                                          pop     edi                                             ;
  3187                                                          pop     ecx                                             ;
  3188                                                          ret                                                     ;return
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                  ;
  3191                                  ;       Routine:        PutDayString
  3192                                  ;
  3193                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3194                                  ;                       structure at ds:ebx.
  3195                                  ;
  3196                                  ;       In:             DS:EBX  DATETIME address
  3197                                  ;                       DS:EDX  output buffer address
  3198                                  ;
  3199                                  ;-----------------------------------------------------------------------------------------------------------------------
  3200                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3201                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3202                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3203                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3204                                                          pop     ecx                                             ;
  3205                                                          ret                                                     ;return
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207                                  ;
  3208                                  ;       Routine:        PutHourString
  3209                                  ;
  3210                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3211                                  ;                       structure at ds:ebx.
  3212                                  ;
  3213                                  ;       In:             DS:EBX  DATETIME address
  3214                                  ;                       DS:EDX  output buffer address
  3215                                  ;
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3218                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3219                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3220                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3221                                                          pop     ecx                                             ;
  3222                                                          ret                                                     ;return
  3223                                  ;-----------------------------------------------------------------------------------------------------------------------
  3224                                  ;
  3225                                  ;       Routine:        PutMinuteString
  3226                                  ;
  3227                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3228                                  ;                       structure at ds:ebx.
  3229                                  ;
  3230                                  ;       In:             DS:EBX  DATETIME address
  3231                                  ;                       DS:EDX  output buffer address
  3232                                  ;
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3235                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3236                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3237                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3238                                                          pop     ecx                                             ;
  3239                                                          ret                                                     ;return
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241                                  ;
  3242                                  ;       Routine:        PutMonthString
  3243                                  ;
  3244                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3245                                  ;                       structure at ds:ebx.
  3246                                  ;
  3247                                  ;       In:             DS:EBX  DATETIME address
  3248                                  ;                       DS:EDX  output buffer address
  3249                                  ;
  3250                                  ;-----------------------------------------------------------------------------------------------------------------------
  3251                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3252                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3253                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3254                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3255                                                          pop     ecx                                             ;
  3256                                                          ret                                                     ;return
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  ;
  3259                                  ;       Routine:        PutMonthNameString
  3260                                  ;
  3261                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3262                                  ;                       structure at ds:ebx.
  3263                                  ;
  3264                                  ;       In:             DS:EBX  DATETIME address
  3265                                  ;                       DS:EDX  output buffer address
  3266                                  ;
  3267                                  ;-----------------------------------------------------------------------------------------------------------------------
  3268                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3269                                                          push    edi                                             ;
  3270                                                          push    ds                                              ;
  3271                                                          push    es                                              ;
  3272                                                          push    ds                                              ;load data selector ...
  3273                                                          pop     es                                              ;... into extra segment
  3274                                                          mov     edi,edx                                         ;output buffer address
  3275                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3276                                                          dec     eax                                             ;month (0-11)
  3277                                                          shl     eax,2                                           ;offset into month name lookup table
  3278                                                          push    cs                                              ;load code selector ...
  3279                                                          pop     ds                                              ;... into data segment
  3280                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3281                                                          cld                                                     ;forward strings
  3282                                  .10                     lodsb                                                   ;name character
  3283                                                          stosb                                                   ;store in output buffer
  3284                                                          test    al,al                                           ;end of string?
  3285                                                          jnz     .10                                             ;no, continue
  3286                                                          pop     es                                              ;restore non-volatile regs
  3287                                                          pop     ds                                              ;
  3288                                                          pop     edi                                             ;
  3289                                                          pop     esi                                             ;
  3290                                                          ret                                                     ;return
  3291                                  ;-----------------------------------------------------------------------------------------------------------------------
  3292                                  ;
  3293                                  ;       Routine:        PutSecondString
  3294                                  ;
  3295                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3296                                  ;                       structure at ds:ebx.
  3297                                  ;
  3298                                  ;       In:             DS:EBX  DATETIME address
  3299                                  ;                       DS:EDX  output buffer address
  3300                                  ;
  3301                                  ;-----------------------------------------------------------------------------------------------------------------------
  3302                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3303                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3304                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3305                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3306                                                          pop     ecx                                             ;
  3307                                                          ret                                                     ;return
  3308                                  ;-----------------------------------------------------------------------------------------------------------------------
  3309                                  ;
  3310                                  ;       Routine:        PutTimeString
  3311                                  ;
  3312                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3313                                  ;                       structure at ds:ebx.
  3314                                  ;
  3315                                  ;       In:             DS:EBX  DATETIME address
  3316                                  ;                       DS:EDX  output buffer address
  3317                                  ;
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3320                                                          push    edi                                             ;
  3321                                                          push    es                                              ;
  3322                                                          push    ds                                              ;store data selector ...
  3323                                                          pop     es                                              ;... in extra segment reg
  3324                                                          mov     edi,edx                                         ;output buffer address
  3325                                                          mov     cl,10                                           ;divisor
  3326                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3327                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3328                                                          div     cl                                              ;ah = rem; al = quotient
  3329                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3330                                                          cld                                                     ;forward strings
  3331                                                          stosd                                                   ;store "mm/"nul
  3332                                                          dec     edi                                             ;address of terminator
  3333                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3334                                                          div     cl                                              ;ah = rem; al = quotient
  3335                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3336                                                          stosd                                                   ;store "dd/"nul
  3337                                                          dec     edi                                             ;address of terminator
  3338                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3339                                                          div     cl                                              ;ah = rem; al = quotient
  3340                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3341                                                          stosb                                                   ;store quotient
  3342                                                          mov     al,ah                                           ;remainder
  3343                                                          stosb                                                   ;store remainder
  3344                                                          xor     al,al                                           ;null terminator
  3345                                                          stosb                                                   ;store terminator
  3346                                                          pop     es                                              ;restore non-volatile regs
  3347                                                          pop     edi                                             ;
  3348                                                          pop     ecx                                             ;
  3349                                                          ret                                                     ;return
  3350                                  ;-----------------------------------------------------------------------------------------------------------------------
  3351                                  ;
  3352                                  ;       Routine:        PutWeekdayString
  3353                                  ;
  3354                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3355                                  ;                       structure at ds:ebx.
  3356                                  ;
  3357                                  ;       In:             DS:EBX  DATETIME address
  3358                                  ;                       DS:EDX  output buffer address
  3359                                  ;
  3360                                  ;-----------------------------------------------------------------------------------------------------------------------
  3361                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3362                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3363                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3364                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3365                                                          pop     ecx                                             ;
  3366                                                          ret                                                     ;return
  3367                                  ;-----------------------------------------------------------------------------------------------------------------------
  3368                                  ;
  3369                                  ;       Routine:        PutWeekdayNameString
  3370                                  ;
  3371                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3372                                  ;                       structure at ds:ebx.
  3373                                  ;
  3374                                  ;       In:             DS:EBX  DATETIME address
  3375                                  ;                       DS:EDX  output buffer address
  3376                                  ;
  3377                                  ;-----------------------------------------------------------------------------------------------------------------------
  3378                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3379                                                          push    edi                                             ;
  3380                                                          push    ds                                              ;
  3381                                                          push    es                                              ;
  3382                                                          push    ds                                              ;load data selector ...
  3383                                                          pop     es                                              ;... into extra segment
  3384                                                          mov     edi,edx                                         ;output buffer address
  3385                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3386                                                          shl     eax,2                                           ;offset into day name lookup table
  3387                                                          push    cs                                              ;load code selector ...
  3388                                                          pop     ds                                              ;... into data segment
  3389                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3390                                                          cld                                                     ;forward strings
  3391                                  .10                     lodsb                                                   ;name character
  3392                                                          stosb                                                   ;store in output buffer
  3393                                                          test    al,al                                           ;end of string?
  3394                                                          jnz     .10                                             ;no, continue
  3395                                                          pop     es                                              ;restore non-volatile regs
  3396                                                          pop     ds                                              ;
  3397                                                          pop     edi                                             ;
  3398                                                          pop     esi                                             ;
  3399                                                          ret                                                     ;return
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  ;
  3402                                  ;       Routine:        PutYearString
  3403                                  ;
  3404                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3405                                  ;                       structure at ds:ebx.
  3406                                  ;
  3407                                  ;       In:             DS:EBX  DATETIME address
  3408                                  ;                       DS:EDX  output buffer address
  3409                                  ;
  3410                                  ;-----------------------------------------------------------------------------------------------------------------------
  3411                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3412                                                          call    GetYear                                         ;ECX = YYYY
  3413                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3414                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3415                                                          pop     ecx                                             ;restore non-volatile regs
  3416                                                          ret                                                     ;return
  3417                                  ;-----------------------------------------------------------------------------------------------------------------------
  3418                                  ;
  3419                                  ;       Day Names
  3420                                  ;
  3421                                  ;-----------------------------------------------------------------------------------------------------------------------
  3422                                  czSunday                db      "Sunday",0
  3423                                  czMonday                db      "Monday",0
  3424                                  czTuesday               db      "Tuesday",0
  3425                                  czWednesday             db      "Wednesday",0
  3426                                  czThursday              db      "Thursday",0
  3427                                  czFriday                db      "Friday",0
  3428                                  czSaturday              db      "Saturday",0
  3429                                  ;-----------------------------------------------------------------------------------------------------------------------
  3430                                  ;
  3431                                  ;       Month Names
  3432                                  ;
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434                                  czJanuary               db      "January",0
  3435                                  czFebruary              db      "February",0
  3436                                  czMarch                 db      "March",0
  3437                                  czApril                 db      "April",0
  3438                                  czMay                   db      "May",0
  3439                                  czJune                  db      "June",0
  3440                                  czJuly                  db      "July",0
  3441                                  czAugust                db      "August",0
  3442                                  czSeptember             db      "September",0
  3443                                  czOctober               db      "October",0
  3444                                  czNovember              db      "November",0
  3445                                  czDecember              db      "December",0
  3446                                  ;-----------------------------------------------------------------------------------------------------------------------
  3447                                  ;
  3448                                  ;       Day Names Lookup Table
  3449                                  ;
  3450                                  ;-----------------------------------------------------------------------------------------------------------------------
  3451                                                          align   4
  3452                                  tDayNames               equ     $
  3453                                                          dd      czSunday
  3454                                                          dd      czMonday
  3455                                                          dd      czTuesday
  3456                                                          dd      czWednesday
  3457                                                          dd      czThursday
  3458                                                          dd      czFriday
  3459                                                          dd      czSaturday
  3460                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3461                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3462                                  ;-----------------------------------------------------------------------------------------------------------------------
  3463                                  ;
  3464                                  ;       Month Names Lookup Table
  3465                                  ;
  3466                                  ;-----------------------------------------------------------------------------------------------------------------------
  3467                                                          align   4
  3468                                  tMonthNames             equ     $
  3469                                                          dd      czJanuary
  3470                                                          dd      czFebruary
  3471                                                          dd      czMarch
  3472                                                          dd      czApril
  3473                                                          dd      czMay
  3474                                                          dd      czJune
  3475                                                          dd      czJuly
  3476                                                          dd      czAugust
  3477                                                          dd      czSeptember
  3478                                                          dd      czOctober
  3479                                                          dd      czNovember
  3480                                                          dd      czDecember
  3481                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3482                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3483                                  ;=======================================================================================================================
  3484                                  ;
  3485                                  ;       Memory Helper Routines
  3486                                  ;
  3487                                  ;       AllocateMemory
  3488                                  ;       FreeMemory
  3489                                  ;
  3490                                  ;=======================================================================================================================
  3491                                  ;-----------------------------------------------------------------------------------------------------------------------
  3492                                  ;
  3493                                  ;       Routine:        AllocateMemory
  3494                                  ;
  3495                                  ;       Description:    This routine allocates a memory block for the given task.
  3496                                  ;
  3497                                  ;       In:             ECX     bytes of memory to allocate
  3498                                  ;
  3499                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3500                                  ;                               0       unable to allocate memory
  3501                                  ;
  3502                                  ;-----------------------------------------------------------------------------------------------------------------------
  3503                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3504                                                          push    ecx                                             ;
  3505                                                          push    esi                                             ;
  3506                                                          push    ds                                              ;
  3507                                  ;
  3508                                  ;       Address kernel memory structures
  3509                                  ;
  3510                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3511                                                          pop     ds                                              ;... into data segment reg
  3512                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3513                                  ;
  3514                                  ;       Set requested size to minimum block size if requested size is too small.
  3515                                  ;
  3516                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3517                                                          jae     .10                                             ;no, branch
  3518                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3519                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3520                                  ;
  3521                                  ;       Find the first free memory block large enough to satisfy the request.
  3522                                  ;
  3523                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3524                                  .20                     test    eax,eax                                         ;end of free block chain?
  3525                                                          jz      .220                                            ;yes, branch
  3526                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3527                                                          jbe     .30                                             ;yes, branch
  3528                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3529                                                          jmp     .20                                             ;continue
  3530                                  ;-----------------------------------------------------------------------------------------------------------------------
  3531                                  ;
  3532                                  ;       Address the previous and next free memory blocks.
  3533                                  ;
  3534                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3535                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3536                                  ;
  3537                                  ;       Remove the free memory block from the forward free memory block chain.
  3538                                  ;
  3539                                                          test    ebx,ebx                                         ;any previous free memory block?
  3540                                                          jz      .40                                             ;no, branch
  3541                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3542                                                          jmp     .50                                             ;continue
  3543                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3544                                  ;
  3545                                  ;       Remove the free memory block from the reverse free memory block chain.
  3546                                  ;
  3547                                  .50                     test    edx,edx                                         ;any next free memory block?
  3548                                                          jz      .60                                             ;no, branch
  3549                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3550                                                          jmp     .70                                             ;continue
  3551                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3552                                  ;-----------------------------------------------------------------------------------------------------------------------
  3553                                  ;
  3554                                  ;       Determine if the free memory block can be split.
  3555                                  ;
  3556                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3557                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3558                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3559                                                          jb      .150                                            ;no, branch
  3560                                  ;
  3561                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3562                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3563                                  ;       of the requested memory size.
  3564                                  ;
  3565                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3566                                                          mov     edx,eax                                         ;memory block address
  3567                                                          add     edx,ecx                                         ;address new new next contig block
  3568                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3569                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3570                                  ;
  3571                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3572                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3573                                  ;
  3574                                                          jecxz   .80                                             ;no next contig, branch
  3575                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3576                                                          jmp     .90                                             ;continue
  3577                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3578                                  ;
  3579                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3580                                  ;
  3581                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3582                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3583                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3584                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3585                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3586                                                          xor     ebx,ebx                                         ;zero register
  3587                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3588                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3589                                  ;
  3590                                  ;       Find the proper location in the free block chain for the new free block
  3591                                  ;
  3592                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3593                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3594                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3595                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3596                                                          jbe     .110                                            ;yes, branch
  3597                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3598                                                          jmp     .100                                            ;continue
  3599                                  ;
  3600                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3601                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3602                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3603                                  ;       block of hte next block, if there is one.
  3604                                  ;
  3605                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3606                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3607                                                          jecxz   .120                                            ;branch if no next block
  3608                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3609                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3610                                                          jmp     .130                                            ;continue
  3611                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3612                                  ;
  3613                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3614                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3615                                  ;       last user block pointers if necessary.
  3616                                  ;
  3617                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3618                                                          test    ebx,ebx                                         ;is there a previous block?
  3619                                                          jz      .140                                            ;no, branch
  3620                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3621                                                          jmp     .150                                            ;continue
  3622                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3623                                  ;
  3624                                  ;       Update the newly allocated block's owner and signature.
  3625                                  ;
  3626                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3627                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3628                                                          xor     edx,edx                                         ;zero register
  3629                                                          str     dx                                              ;load the task state register
  3630                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3631                                  ;
  3632                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3633                                  ;
  3634                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3635                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3636                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3637                                                          jb      .180                                            ;branch if block belongs to next task
  3638                                                          je      .170                                            ;branch if block belongs to this task
  3639                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3640                                                          jmp     .160                                            ;continue
  3641                                  ;
  3642                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3643                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3644                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3645                                  ;       place to insert the block.
  3646                                  ;
  3647                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3648                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3649                                                          jbe     .180                                            ;yes, branch
  3650                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3651                                                          test    ecx,ecx                                         ;end of chain?
  3652                                                          jz      .180                                            ;yes, branch
  3653                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3654                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3655                                                          je      .170                                            ;yes, continue search
  3656                                  ;
  3657                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3658                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3659                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3660                                  ;       do have a previous-block, we update that block's next-block pointer.
  3661                                  ;
  3662                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3663                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3664                                                          jecxz   .190                                            ;branch if no next-task block
  3665                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3666                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3667                                                          jmp     .200                                            ;continue
  3668                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3669                                  ;
  3670                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3671                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3672                                  ;       global first and/or last user-block pointers if necessary.
  3673                                  ;
  3674                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3675                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3676                                                          jz      .210                                            ;no, branch
  3677                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3678                                                          jmp     .220                                            ;continue
  3679                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3680                                  ;
  3681                                  ;       Restore registers and return to caller.
  3682                                  ;
  3683                                  .220                    pop     ds                                              ;restore non-volatie regs
  3684                                                          pop     esi                                             ;
  3685                                                          pop     ecx                                             ;
  3686                                                          pop     ebx                                             ;
  3687                                                          ret                                                     ;return
  3688                                  ;-----------------------------------------------------------------------------------------------------------------------
  3689                                  ;
  3690                                  ;       Routine:        FreeMemory
  3691                                  ;
  3692                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3693                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3694                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3695                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3696                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3697                                  ;
  3698                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3699                                  ;
  3700                                  ;       Out:            EAX     -1      invalid memory block
  3701                                  ;                               0       memory block freed
  3702                                  ;
  3703                                  ;-----------------------------------------------------------------------------------------------------------------------
  3704                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3705                                                          push    ecx                                             ;
  3706                                                          push    esi                                             ;
  3707                                                          push    edi                                             ;
  3708                                                          push    ds                                              ;
  3709                                                          push    es                                              ;
  3710                                  ;
  3711                                  ;       Address the root memory structure
  3712                                  ;
  3713                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3714                                                          pop     es                                              ;... into extra segment reg
  3715                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3716                                                          pop     ds                                              ;... into data segment reg
  3717                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3718                                                          mov     edi,edx                                         ;memory block address
  3719                                  ;
  3720                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3721                                  ;
  3722                                                          xor     eax,eax                                         ;indicate success
  3723                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3724                                                          je      .240                                            ;yes, branch
  3725                                                          dec     eax                                             ;indicate failure
  3726                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3727                                                          jne     .240                                            ;no, branch
  3728                                  ;-----------------------------------------------------------------------------------------------------------------------
  3729                                  ;
  3730                                  ;       Unlink the USER memory block.
  3731                                  ;
  3732                                  ;-----------------------------------------------------------------------------------------------------------------------
  3733                                  ;
  3734                                  ;       Set the block signature. Reset owner.
  3735                                  ;
  3736                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3737                                                          xor     eax,eax                                         ;zero register
  3738                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3739                                  ;
  3740                                  ;       Wipe user area.
  3741                                  ;
  3742                                                          push    edi                                             ;save block address
  3743                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3744                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3745                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3746                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3747                                                          rep     stosb                                           ;clear memory
  3748                                                          pop     edi                                             ;restore block address
  3749                                  ;
  3750                                  ;       Address the preceding and following USER memory blocks
  3751                                  ;
  3752                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3753                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3754                                  ;
  3755                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3756                                  ;       pointer to point to the USER block following this block.
  3757                                  ;
  3758                                                          test    ebx,ebx                                         ;is there a previous block?
  3759                                                          jz      .10                                             ;no, branch
  3760                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3761                                                          jmp     .20                                             ;continue
  3762                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3763                                  ;
  3764                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3765                                  ;       pointer to point to the USER block preceding this block.
  3766                                  ;
  3767                                  .20                     jecxz   .30                                             ;branch if no next block
  3768                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3769                                                          jmp     .40                                             ;continue
  3770                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3771                                  ;-----------------------------------------------------------------------------------------------------------------------
  3772                                  ;
  3773                                  ;       Merge with a previous contiguous FREE memory block.
  3774                                  ;
  3775                                  ;-----------------------------------------------------------------------------------------------------------------------
  3776                                  ;
  3777                                  ;       Address the preceding and following contiguous memory blocks.
  3778                                  ;
  3779                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3780                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3781                                  ;
  3782                                  ;       Verify we have a previous contiguous FREE block.
  3783                                  ;
  3784                                                          test    ebx,ebx                                         ;is there a previous block?
  3785                                                          jz      .100                                            ;no, branch
  3786                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3787                                                          jne     .100                                            ;no, branch
  3788                                  ;
  3789                                  ;       Update adjacent block's contiguous pointers.
  3790                                  ;
  3791                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3792                                                          jecxz   .50                                             ;branch if no next contiguous block
  3793                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3794                                                          jmp     .60                                             ;continue
  3795                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3796                                  ;
  3797                                  ;       Update the size of the merged FREE block.
  3798                                  ;
  3799                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3800                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3801                                  ;
  3802                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3803                                  ;
  3804                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3805                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3806                                                          rep     stosb                                           ;clear memory header
  3807                                                          mov     edi,ebx                                         ;current block is now previous block
  3808                                  ;-----------------------------------------------------------------------------------------------------------------------
  3809                                  ;
  3810                                  ;       Unlink the previous contiguous FREE memory block
  3811                                  ;
  3812                                  ;-----------------------------------------------------------------------------------------------------------------------
  3813                                  ;
  3814                                  ;       Address the preceding and following USER memory blocks
  3815                                  ;
  3816                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3817                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3818                                  ;
  3819                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3820                                  ;       block pointer.
  3821                                  ;
  3822                                                          test    ebx,ebx                                         ;is there a previous block?
  3823                                                          jz      .70                                             ;no, branch
  3824                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3825                                                          jmp     .80                                             ;branch
  3826                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3827                                  ;
  3828                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3829                                  ;       pointer.
  3830                                  ;
  3831                                  .80                     jecxz   .90                                             ;branch if no next block
  3832                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3833                                                          jmp     .100                                            ;continue
  3834                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3835                                  ;-----------------------------------------------------------------------------------------------------------------------
  3836                                  ;
  3837                                  ;       Merge with a following contiguous FREE memory block.
  3838                                  ;
  3839                                  ;-----------------------------------------------------------------------------------------------------------------------
  3840                                  ;
  3841                                  ;       Verify we have a following contiguous FREE block.
  3842                                  ;
  3843                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3844                                                          jecxz   .170                                            ;branch if no next contiguous block
  3845                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3846                                                          jne     .170                                            ;no, branch
  3847                                  ;
  3848                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3849                                  ;
  3850                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3851                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3852                                  ;
  3853                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3854                                  ;
  3855                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3856                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3857                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3858                                                          jz      .110                                            ;no, branch
  3859                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3860                                                          jmp     .120                                            ;continue
  3861                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3862                                  ;-----------------------------------------------------------------------------------------------------------------------
  3863                                  ;
  3864                                  ;       Unlink the following contiguous FREE memory block
  3865                                  ;
  3866                                  ;-----------------------------------------------------------------------------------------------------------------------
  3867                                  ;
  3868                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3869                                  ;
  3870                                  .120                    push    edi                                             ;save this block
  3871                                                          mov     edi,ecx                                         ;next contiguous block
  3872                                                          push    ecx                                             ;save next contiguous block
  3873                                  ;
  3874                                  ;       Address the preceding and following USER memory blocks
  3875                                  ;
  3876                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3877                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3878                                  ;
  3879                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3880                                  ;       block pointer.
  3881                                  ;
  3882                                                          test    ebx,ebx                                         ;is there a previous block?
  3883                                                          jz      .130                                            ;no, branch
  3884                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3885                                                          jmp     .140                                            ;branch
  3886                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3887                                  ;
  3888                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3889                                  ;       pointer.
  3890                                  ;
  3891                                  .140                    jecxz   .150                                            ;branch if no next block
  3892                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3893                                                          jmp     .160                                            ;continue
  3894                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3895                                  ;
  3896                                  ;       Clear next contiguous block's header
  3897                                  ;
  3898                                  .160                    pop     edi                                             ;next congiguous block pointer
  3899                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3900                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3901                                                          rep     stosb                                           ;clear memory header
  3902                                                          pop     edi                                             ;this block's pointer
  3903                                  ;-----------------------------------------------------------------------------------------------------------------------
  3904                                  ;
  3905                                  ;       Insert the final FREE block back into the block chain.
  3906                                  ;
  3907                                  ;-----------------------------------------------------------------------------------------------------------------------
  3908                                  ;
  3909                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3910                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3911                                  ;       all are smaller in size.
  3912                                  ;
  3913                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3914                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3915                                  .180                    jecxz   .190                                            ;exit if no ptr
  3916                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3917                                                          jb      .190                                            ;yes, branch
  3918                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3919                                                          jmp     .180                                            ;continue
  3920                                  ;
  3921                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3922                                  ;       larger free block. Update the next block's previous block pointer.
  3923                                  ;
  3924                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3925                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3926                                                          jecxz   .200                                            ;branch if no block found
  3927                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3928                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3929                                                          jmp     .210                                            ;continue
  3930                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3931                                  ;
  3932                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3933                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3934                                  ;       next pointer.
  3935                                  ;
  3936                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3937                                                          test    ebx,ebx                                         ;do we have a previous block?
  3938                                                          jz      .220                                            ;no, branch
  3939                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3940                                                          jmp     .230                                            ;continue
  3941                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3942                                  ;
  3943                                  ;       The memory free has completed.
  3944                                  ;
  3945                                  .230                    xor     eax,eax                                         ;indicate success
  3946                                  ;
  3947                                  ;       Restore and return.
  3948                                  ;
  3949                                  .240                    pop     es                                              ;restore non-volatile regs
  3950                                                          pop     ds                                              ;
  3951                                                          pop     edi                                             ;
  3952                                                          pop     esi                                             ;
  3953                                                          pop     ecx                                             ;
  3954                                                          pop     ebx                                             ;
  3955                                                          ret                                                     ;return
  3956                                  ;=======================================================================================================================
  3957                                  ;
  3958                                  ;       String Helper Routines
  3959                                  ;
  3960                                  ;       CompareMemory
  3961                                  ;       UpperCaseString
  3962                                  ;
  3963                                  ;=======================================================================================================================
  3964                                  ;-----------------------------------------------------------------------------------------------------------------------
  3965                                  ;
  3966                                  ;       Routine:        CompareMemory
  3967                                  ;
  3968                                  ;       Description:    This routine compares two byte arrays.
  3969                                  ;
  3970                                  ;       In:             DS:EDX  first source address
  3971                                  ;                       DS:EBX  second source address
  3972                                  ;                       ECX     comparison length
  3973                                  ;
  3974                                  ;       Out:            EDX     first source address
  3975                                  ;                       EBX     second source address
  3976                                  ;                       ECX     0       array 1 = array 2
  3977                                  ;                               <0      array 1 < array 2
  3978                                  ;                               >0      array 1 > array 2
  3979                                  ;
  3980                                  ;-----------------------------------------------------------------------------------------------------------------------
  3981                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3982                                                          push    edi                                             ;
  3983                                                          push    es                                              ;
  3984                                                          push    ds                                              ;copy DS
  3985                                                          pop     es                                              ;... to ES
  3986                                                          mov     esi,edx                                         ;first source address
  3987                                                          mov     edi,ebx                                         ;second source address
  3988                                                          cld                                                     ;forward strings
  3989                                                          rep     cmpsb                                           ;compare bytes
  3990                                                          mov     al,0                                            ;default result
  3991                                                          jz      .10                                             ;branch if arrays equal
  3992                                                          mov     al,1                                            ;positive result
  3993                                                          jnc     .10                                             ;branch if target > source
  3994                                                          mov     al,-1                                           ;negative result
  3995                                  .10                     movsx   ecx,al                                          ;extend sign
  3996                                                          pop     es                                              ;restore non-volatile regs
  3997                                                          pop     edi                                             ;
  3998                                                          pop     esi                                             ;
  3999                                                          ret                                                     ;return
  4000                                  ;-----------------------------------------------------------------------------------------------------------------------
  4001                                  ;
  4002                                  ;       Routine:        UpperCaseString
  4003                                  ;
  4004                                  ;       Description:    This routine places all characters in the given string to upper case.
  4005                                  ;
  4006                                  ;       In:             DS:EDX  string address
  4007                                  ;
  4008                                  ;       Out:            EDX     string address
  4009                                  ;
  4010                                  ;-----------------------------------------------------------------------------------------------------------------------
  4011                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4012                                                          mov     esi,edx                                         ;string address
  4013                                                          cld                                                     ;forward strings
  4014                                  .10                     lodsb                                                   ;string character
  4015                                                          test    al,al                                           ;null?
  4016                                                          jz      .20                                             ;yes, skip ahead
  4017                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4018                                                          jb      .10                                             ;no, continue
  4019                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4020                                                          ja      .10                                             ;no, continue
  4021                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4022                                                          mov     [esi-1],al                                      ;upper character
  4023                                                          jmp     .10                                             ;continue
  4024                                  .20                     pop     esi                                             ;restore non-volatile regs
  4025                                                          ret                                                     ;return
  4026                                  ;=======================================================================================================================
  4027                                  ;
  4028                                  ;       Console Helper Routines
  4029                                  ;
  4030                                  ;       FirstConsoleColumn
  4031                                  ;       GetConsoleChar
  4032                                  ;       GetConsoleString
  4033                                  ;       NextConsoleColumn
  4034                                  ;       NextConsoleRow
  4035                                  ;       PreviousConsoleColumn
  4036                                  ;       PutConsoleChar
  4037                                  ;       PutConsoleHexByte
  4038                                  ;       PutConsoleHexDword
  4039                                  ;       PutConsoleHexWord
  4040                                  ;       PutConsoleOIAChar
  4041                                  ;       PutConsoleOIAShift
  4042                                  ;       PutConsoleString
  4043                                  ;       Yield
  4044                                  ;
  4045                                  ;=======================================================================================================================
  4046                                  ;-----------------------------------------------------------------------------------------------------------------------
  4047                                  ;
  4048                                  ;       Routine:        FirstConsoleColumn
  4049                                  ;
  4050                                  ;       Description:    This routine resets the console column to start of the row.
  4051                                  ;
  4052                                  ;       In:             DS      OS data selector
  4053                                  ;
  4054                                  ;-----------------------------------------------------------------------------------------------------------------------
  4055                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4056                                                          mov     [wbConsoleColumn],al                            ;save column
  4057                                                          ret                                                     ;return
  4058                                  ;-----------------------------------------------------------------------------------------------------------------------
  4059                                  ;
  4060                                  ;       Routine:        GetConsoleChar
  4061                                  ;
  4062                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4063                                  ;
  4064                                  ;       Out:            AL      ASCII character code
  4065                                  ;                       AH      keyboard scan code
  4066                                  ;
  4067                                  ;-----------------------------------------------------------------------------------------------------------------------
  4068                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4069                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4070                                                          or      eax,eax                                         ;do we have a message?
  4071                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4072                                                          push    eax                                             ;save key codes
  4073                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4074                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4075                                                          pop     eax                                             ;restore key codes
  4076                                                          jne     GetConsoleChar                                  ;no, try again
  4077                                                          and     eax,0000ffffh                                   ;mask for key codes
  4078                                                          ret                                                     ;return
  4079                                  ;-----------------------------------------------------------------------------------------------------------------------
  4080                                  ;
  4081                                  ;       Routine:        GetConsoleString
  4082                                  ;
  4083                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4084                                  ;
  4085                                  ;       In:             DS:EDX  target buffer address
  4086                                  ;                       ECX     maximum number of characters to accept
  4087                                  ;                       BH      echo to terminal
  4088                                  ;                       BL      terminating character
  4089                                  ;
  4090                                  ;-----------------------------------------------------------------------------------------------------------------------
  4091                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4092                                                          push    esi                                             ;
  4093                                                          push    edi                                             ;
  4094                                                          push    es                                              ;
  4095                                                          push    ds                                              ;load data segment selector ...
  4096                                                          pop     es                                              ;... into extra segment register
  4097                                                          mov     edi,edx                                         ;edi = target buffer
  4098                                                          push    ecx                                             ;save maximum characters
  4099                                                          xor     al,al                                           ;zero register
  4100                                                          cld                                                     ;forward strings
  4101                                                          rep     stosb                                           ;zero fill buffer
  4102                                                          pop     ecx                                             ;maximum characters
  4103                                                          mov     edi,edx                                         ;edi = target buffer
  4104                                                          mov     esi,edx                                         ;esi = target buffer
  4105                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4106                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4107                                                          cmp     al,bl                                           ;is this the terminator?
  4108                                                          je      .50                                             ;yes, exit
  4109                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4110                                                          jne     .30                                             ;no, skip ahead
  4111                                                          cmp     esi,edi                                         ;at start of buffer?
  4112                                                          je      .20                                             ;yes, get next character
  4113                                                          dec     edi                                             ;backup target pointer
  4114                                                          mov     byte [edi],0                                    ;zero previous character
  4115                                                          inc     ecx                                             ;increment remaining chars
  4116                                                          test    bh,1                                            ;echo to console?
  4117                                                          jz      .20                                             ;no, get next character
  4118                                                          call    PreviousConsoleColumn                           ;backup console position
  4119                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4120                                                          call    PutConsoleChar                                  ;write space to console
  4121                                                          call    PlaceCursor                                     ;position the cursor
  4122                                                          jmp     .20                                             ;get next character
  4123                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4124                                                          jb      .20                                             ;no, get another character
  4125                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4126                                                          ja      .20                                             ;no, get another character
  4127                                                          stosb                                                   ;store character in buffer
  4128                                                          test    bh,1                                            ;echo to console?
  4129                                                          jz      .40                                             ;no, skip ahead
  4130                                                          call    PutConsoleChar                                  ;write character to console
  4131                                                          call    NextConsoleColumn                               ;advance console position
  4132                                                          call    PlaceCursor                                     ;position the cursor
  4133                                  .40                     dec     ecx                                             ;decrement remaining chars
  4134                                                          jmp     .10                                             ;next
  4135                                  .50                     xor     al,al                                           ;null
  4136                                                          stosb                                                   ;terminate buffer
  4137                                                          pop     es                                              ;restore non-volatile regs
  4138                                                          pop     edi                                             ;
  4139                                                          pop     esi                                             ;
  4140                                                          pop     ecx                                             ;
  4141                                                          ret                                                     ;return
  4142                                  ;-----------------------------------------------------------------------------------------------------------------------
  4143                                  ;
  4144                                  ;       Routine:        NextConsoleColumn
  4145                                  ;
  4146                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4147                                  ;                       incremented if the end of the current row is reached.
  4148                                  ;
  4149                                  ;       In:             DS      OS data selector
  4150                                  ;
  4151                                  ;-----------------------------------------------------------------------------------------------------------------------
  4152                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4153                                                          inc     al                                              ;increment column
  4154                                                          mov     [wbConsoleColumn],al                            ;save column
  4155                                                          cmp     al,ECONCOLS                                     ;end of row?
  4156                                                          jb      .10                                             ;no, skip ahead
  4157                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4158                                                          call    NextConsoleRow                                  ;line feed to next row
  4159                                  .10                     ret                                                     ;return
  4160                                  ;-----------------------------------------------------------------------------------------------------------------------
  4161                                  ;
  4162                                  ;       Routine:        NextConsoleRow
  4163                                  ;
  4164                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4165                                  ;
  4166                                  ;       In:             DS      OS data selector
  4167                                  ;
  4168                                  ;-----------------------------------------------------------------------------------------------------------------------
  4169                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4170                                                          inc     al                                              ;increment row
  4171                                                          mov     [wbConsoleRow],al                               ;save row
  4172                                                          cmp     al,ECONROWS                                     ;end of screen?
  4173                                                          jb      .10                                             ;no, skip ahead
  4174                                                          call    ScrollConsoleRow                                ;scroll up one row
  4175                                                          mov     al,[wbConsoleRow]                               ;row
  4176                                                          dec     al                                              ;decrement row
  4177                                                          mov     [wbConsoleRow],al                               ;save row
  4178                                  .10                     ret                                                     ;return
  4179                                  ;-----------------------------------------------------------------------------------------------------------------------
  4180                                  ;
  4181                                  ;       Routine:        PreviousConsoleColumn
  4182                                  ;
  4183                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4184                                  ;                       the column is set to the last position in the row and the row is decremented.
  4185                                  ;
  4186                                  ;       In:             DS      OS data selector
  4187                                  ;
  4188                                  ;-----------------------------------------------------------------------------------------------------------------------
  4189                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4190                                                          or      al,al                                           ;start of row?
  4191                                                          jnz     .10                                             ;no, skip ahead
  4192                                                          mov     ah,[wbConsoleRow]                               ;current row
  4193                                                          or      ah,ah                                           ;top of screen?
  4194                                                          jz      .20                                             ;yes, exit with no change
  4195                                                          dec     ah                                              ;decrement row
  4196                                                          mov     [wbConsoleRow],ah                               ;save row
  4197                                                          mov     al,ECONCOLS                                     ;set maximum column
  4198                                  .10                     dec     al                                              ;decrement column
  4199                                                          mov     [wbConsoleColumn],al                            ;save column
  4200                                  .20                     ret                                                     ;return
  4201                                  ;-----------------------------------------------------------------------------------------------------------------------
  4202                                  ;
  4203                                  ;       Routine:        PutConsoleChar
  4204                                  ;
  4205                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4206                                  ;
  4207                                  ;       In:             AL      ASCII character
  4208                                  ;                       DS      OS data selector
  4209                                  ;
  4210                                  ;-----------------------------------------------------------------------------------------------------------------------
  4211                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4212                                                          push    es                                              ;
  4213                                                          push    EGDTCGA                                         ;load CGA selector ...
  4214                                                          pop     es                                              ;... into extra segment reg
  4215                                                          mov     cl,[wbConsoleColumn]                            ;column
  4216                                                          mov     ch,[wbConsoleRow]                               ;row
  4217                                                          call    SetConsoleChar                                  ;put character at row, column
  4218                                                          pop     es                                              ;restore non-volatile regs
  4219                                                          pop     ecx                                             ;
  4220                                                          ret                                                     ;return
  4221                                  ;-----------------------------------------------------------------------------------------------------------------------
  4222                                  ;
  4223                                  ;       Routine:        PutConsoleHexByte
  4224                                  ;
  4225                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4226                                  ;
  4227                                  ;       In:             AL      byte value
  4228                                  ;                       CL      column
  4229                                  ;                       CH      row
  4230                                  ;                       DS      OS data selector
  4231                                  ;                       ES      CGA selector
  4232                                  ;
  4233                                  ;-----------------------------------------------------------------------------------------------------------------------
  4234                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4235                                                          mov     bl,al                                           ;save byte value
  4236                                                          shr     al,4                                            ;hi-order nybble
  4237                                                          or      al,030h                                         ;apply ASCII zone
  4238                                                          cmp     al,03ah                                         ;numeric?
  4239                                                          jb      .10                                             ;yes, skip ahead
  4240                                                          add     al,7                                            ;add ASCII offset for alpha
  4241                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4242                                                          mov     al,bl                                           ;byte value
  4243                                                          and     al,0fh                                          ;lo-order nybble
  4244                                                          or      al,30h                                          ;apply ASCII zone
  4245                                                          cmp     al,03ah                                         ;numeric?
  4246                                                          jb      .20                                             ;yes, skip ahead
  4247                                                          add     al,7                                            ;add ASCII offset for alpha
  4248                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4249                                                          pop     ebx                                             ;restore non-volatile regs
  4250                                                          ret                                                     ;return
  4251                                  ;-----------------------------------------------------------------------------------------------------------------------
  4252                                  ;
  4253                                  ;       Routine:        PutConsoleHexDword
  4254                                  ;
  4255                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4256                                  ;
  4257                                  ;       In:             EAX     value
  4258                                  ;                       CL      column
  4259                                  ;                       CH      row
  4260                                  ;                       DS      OS data selector
  4261                                  ;                       ES      CGA selector
  4262                                  ;
  4263                                  ;-----------------------------------------------------------------------------------------------------------------------
  4264                                  PutConsoleHexDword      push    eax
  4265                                                          shr     eax,16
  4266                                                          call    PutConsoleHexWord
  4267                                                          pop     eax
  4268                                                          call    PutConsoleHexWord
  4269                                                          ret
  4270                                  ;-----------------------------------------------------------------------------------------------------------------------
  4271                                  ;
  4272                                  ;       Routine:        PutConsoleHexWord
  4273                                  ;
  4274                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4275                                  ;
  4276                                  ;       In:             EAX     value
  4277                                  ;                       CL      column
  4278                                  ;                       CH      row
  4279                                  ;                       DS      OS data selector
  4280                                  ;                       ES      CGA selector
  4281                                  ;
  4282                                  ;-----------------------------------------------------------------------------------------------------------------------
  4283                                  PutConsoleHexWord       push    eax
  4284                                                          shr     eax,8
  4285                                                          call    PutConsoleHexByte
  4286                                                          pop     eax
  4287                                                          call    PutConsoleHexByte
  4288                                                          ret
  4289                                  ;-----------------------------------------------------------------------------------------------------------------------
  4290                                  ;
  4291                                  ;       Routine:        PutConsoleOIAChar
  4292                                  ;
  4293                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4294                                  ;
  4295                                  ;       In:             DS      OS data selector
  4296                                  ;
  4297                                  ;-----------------------------------------------------------------------------------------------------------------------
  4298                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4299                                                          push    ecx                                             ;
  4300                                                          push    esi                                             ;
  4301                                                          push    ds                                              ;
  4302                                                          push    es                                              ;
  4303                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4304                                                          pop     ds                                              ;... into data segment register
  4305                                                          push    EGDTCGA                                         ;load CGA selector ...
  4306                                                          pop     es                                              ;... into extra segment register
  4307                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4308                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4309                                                          mov     bl,0                                            ;starting column
  4310                                                          mov     ecx,6                                           ;maximum scan codes
  4311                                  .10                     push    ecx                                             ;save remaining count
  4312                                                          mov     ecx,ebx                                         ;row, column
  4313                                                          lodsb                                                   ;read scan code
  4314                                                          or      al,al                                           ;scan code present?
  4315                                                          jz      .20                                             ;no, skip ahead
  4316                                                          call    PutConsoleHexByte                               ;display scan code
  4317                                                          jmp     .30                                             ;continue
  4318                                  .20                     mov     al,' '                                          ;ASCII space
  4319                                                          call    SetConsoleChar                                  ;display space
  4320                                                          mov     al,' '                                          ;ASCII space
  4321                                                          call    SetConsoleChar                                  ;display space
  4322                                  .30                     add     bl,2                                            ;next column (+2)
  4323                                                          pop     ecx                                             ;restore remaining
  4324                                                          loop    .10                                             ;next code
  4325                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4326                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4327                                                          jb      .40                                             ;no, skip ahead
  4328                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4329                                                          ja      .40                                             ;no, skip ahead
  4330                                                          mov     ch,bh                                           ;OIA row
  4331                                                          mov     cl,40                                           ;character display column
  4332                                                          call    SetConsoleChar                                  ;display ASCII character
  4333                                  .40                     pop     es                                              ;restore non-volatile regs
  4334                                                          pop     ds                                              ;
  4335                                                          pop     esi                                             ;
  4336                                                          pop     ecx                                             ;
  4337                                                          pop     ebx                                             ;
  4338                                                          ret                                                     ;return
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340                                  ;
  4341                                  ;       Routine:        PutConsoleOIAShift
  4342                                  ;
  4343                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4344                                  ;
  4345                                  ;       In:             BL      shift flags
  4346                                  ;                       BH      lock flags
  4347                                  ;                       DS      OS data selector
  4348                                  ;
  4349                                  ;-----------------------------------------------------------------------------------------------------------------------
  4350                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4351                                                          push    es                                              ;
  4352                                                          push    EGDTCGA                                         ;load CGA selector ...
  4353                                                          pop     es                                              ;... into ES register
  4354                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4355                                                          mov     al,EASCIISPACE                                  ;space is default character
  4356                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4357                                                          jz      .10                                             ;no, skip ahead
  4358                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4359                                  .10                     mov     cl,14                                           ;indicator column
  4360                                                          call    SetConsoleChar                                  ;display ASCII character
  4361                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4362                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4363                                                          jz      .20                                             ;no, skip ahead
  4364                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4365                                  .20                     mov     cl,64                                           ;indicator column
  4366                                                          call    SetConsoleChar                                  ;display ASCII character
  4367                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4368                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4369                                                          jz      .30                                             ;no, skip ahead
  4370                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4371                                  .30                     mov     cl,15                                           ;indicator column
  4372                                                          call    SetConsoleChar                                  ;display ASCII character
  4373                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4374                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4375                                                          jz      .40                                             ;no, skip ahead
  4376                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4377                                  .40                     mov     cl,63                                           ;indicator column
  4378                                                          call    SetConsoleChar                                  ;display ASCII character
  4379                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4380                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4381                                                          jz      .50                                             ;no, skip ahead
  4382                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4383                                  .50                     mov     cl,16                                           ;indicator column
  4384                                                          call    SetConsoleChar                                  ;display ASCII character
  4385                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4386                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4387                                                          jz      .60                                             ;no, skip ahead
  4388                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4389                                  .60                     mov     cl,62                                           ;indicator column
  4390                                                          call    SetConsoleChar                                  ;display ASCII character
  4391                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4392                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4393                                                          jz      .70                                             ;no, skip ahead
  4394                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4395                                  .70                     mov     cl,78                                           ;indicator column
  4396                                                          call    SetConsoleChar                                  ;display ASCII character
  4397                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4398                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4399                                                          jz      .80                                             ;no, skip ahead
  4400                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4401                                  .80                     mov     cl,77                                           ;indicator column
  4402                                                          call    SetConsoleChar                                  ;display ASCII character
  4403                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4404                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4405                                                          jz      .90                                             ;no, skip ahead
  4406                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4407                                  .90                     mov     cl,76                                           ;indicator column
  4408                                                          call    SetConsoleChar                                  ;display ASCII character
  4409                                                          pop     es                                              ;restore non-volatile regs
  4410                                                          pop     ecx                                             ;
  4411                                                          ret                                                     ;return
  4412                                  ;-----------------------------------------------------------------------------------------------------------------------
  4413                                  ;
  4414                                  ;       Routine:        PutConsoleString
  4415                                  ;
  4416                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4417                                  ;                       console position as needed.
  4418                                  ;
  4419                                  ;       In:             EDX     source address
  4420                                  ;                       DS      OS data selector
  4421                                  ;
  4422                                  ;-----------------------------------------------------------------------------------------------------------------------
  4423                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4424                                                          mov     esi,edx                                         ;source address
  4425                                                          cld                                                     ;forward strings
  4426                                  .10                     lodsb                                                   ;ASCII character
  4427                                                          or      al,al                                           ;end of string?
  4428                                                          jz      .40                                             ;yes, skip ahead
  4429                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4430                                                          jne     .20                                             ;no, skip ahead
  4431                                                          call    FirstConsoleColumn                              ;move to start of row
  4432                                                          jmp     .10                                             ;next character
  4433                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4434                                                          jne     .30                                             ;no, skip ahead
  4435                                                          call    NextConsoleRow                                  ;move to next row
  4436                                                          jmp     .10                                             ;next character
  4437                                  .30                     call    PutConsoleChar                                  ;output character to console
  4438                                                          call    NextConsoleColumn                               ;advance to next column
  4439                                                          jmp     .10                                             ;next character
  4440                                  .40                     pop     esi                                             ;restore non-volatile regs
  4441                                                          ret                                                     ;return
  4442                                  ;-----------------------------------------------------------------------------------------------------------------------
  4443                                  ;
  4444                                  ;       Routine:        Yield
  4445                                  ;
  4446                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4447                                  ;
  4448                                  ;-----------------------------------------------------------------------------------------------------------------------
  4449                                  Yield                   sti                                                     ;enable maskagle interrupts
  4450                                                          hlt                                                     ;halt until external interrupt
  4451                                                          ret                                                     ;return
  4452                                  ;=======================================================================================================================
  4453                                  ;
  4454                                  ;       Data-Type Conversion Helper Routines
  4455                                  ;
  4456                                  ;       DecimalToUnsigned
  4457                                  ;       HexadecimalToUnsigned
  4458                                  ;       UnsignedToDecimalString
  4459                                  ;       UnsignedToHexadecimal
  4460                                  ;
  4461                                  ;=======================================================================================================================
  4462                                  ;-----------------------------------------------------------------------------------------------------------------------
  4463                                  ;
  4464                                  ;       Routine:        DecimalToUnsigned
  4465                                  ;
  4466                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4467                                  ;
  4468                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4469                                  ;
  4470                                  ;       Output:         EAX     unsigned integer value
  4471                                  ;
  4472                                  ;-----------------------------------------------------------------------------------------------------------------------
  4473                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4474                                                          mov     esi,edx                                         ;source address
  4475                                                          xor     edx,edx                                         ;zero total
  4476                                  .10                     lodsb                                                   ;source byte
  4477                                                          cmp     al,','                                          ;comma?
  4478                                                          je      .10                                             ;yes, ignore
  4479                                                          test    al,al                                           ;end of string?
  4480                                                          jz      .30                                             ;yes, done
  4481                                                          cmp     al,'.'                                          ;decimal point?
  4482                                                          je      .30                                             ;yes, done
  4483                                                          cmp     al,'0'                                          ;numeral?
  4484                                                          jb      .20                                             ;no, invalid string
  4485                                                          cmp     al,'9'                                          ;numeral?
  4486                                                          ja      .20                                             ;no, invalid string
  4487                                                          and     al,00Fh                                         ;mask ASCII zone
  4488                                                          push    eax                                             ;save numeral
  4489                                                          shl     edx,1                                           ;total * 2
  4490                                                          mov     eax,edx                                         ;total * 2
  4491                                                          shl     edx,2                                           ;total * 8
  4492                                                          add     edx,eax                                         ;total * 10
  4493                                                          pop     eax                                             ;restore numeral
  4494                                                          add     edx,eax                                         ;accumulate decimal digit
  4495                                                          xor     eax,eax                                         ;zero register
  4496                                                          jmp     .10                                             ;next
  4497                                  .20                     xor     edx,edx                                         ;zero result on error
  4498                                  .30                     mov     eax,edx                                         ;result
  4499                                                          pop     esi                                             ;restore non-volatile regs
  4500                                                          ret                                                     ;return
  4501                                  ;-----------------------------------------------------------------------------------------------------------------------
  4502                                  ;
  4503                                  ;       Routine:        HexadecimalToUnsigned
  4504                                  ;
  4505                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4506                                  ;
  4507                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4508                                  ;
  4509                                  ;       Output:         EAX     unsigned integer value
  4510                                  ;
  4511                                  ;-----------------------------------------------------------------------------------------------------------------------
  4512                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4513                                                          mov     esi,edx                                         ;source address
  4514                                                          xor     edx,edx                                         ;zero register
  4515                                  .10                     lodsb                                                   ;source byte
  4516                                                          test    al,al                                           ;end of string?
  4517                                                          jz      .30                                             ;yes, branch
  4518                                                          cmp     al,'9'                                          ;hexadecimal?
  4519                                                          jna     .20                                             ;no, skip ahead
  4520                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4521                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4522                                                          shl     edx,4                                           ;previous total x 16
  4523                                                          add     edx,eax                                         ;add prior value x 16
  4524                                                          jmp     .10                                             ;next
  4525                                  .30                     mov     eax,edx                                         ;result
  4526                                                          pop     esi                                             ;restore non-volatile regs
  4527                                                          ret                                                     ;return
  4528                                  ;-----------------------------------------------------------------------------------------------------------------------
  4529                                  ;
  4530                                  ;       Routine:        UnsignedToDecimalString
  4531                                  ;
  4532                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4533                                  ;
  4534                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4535                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4536                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4537                                  ;                       ECX     32-bit binary
  4538                                  ;                       DS:EDX  output buffer address
  4539                                  ;
  4540                                  ;-----------------------------------------------------------------------------------------------------------------------
  4541                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4542                                                          push    ecx                                             ;
  4543                                                          push    edi                                             ;
  4544                                                          push    es                                              ;
  4545                                                          push    ds                                              ;load data selector
  4546                                                          pop     es                                              ;... into extra segment reg
  4547                                                          mov     edi,edx                                         ;output buffer address
  4548                                                          and     bh,00001111b                                    ;zero internal flags
  4549                                                          mov     edx,ecx                                         ;binary
  4550                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4551                                                          call    .30                                             ;divide and store
  4552                                                          mov     ecx,100000000                                   ;10^8 divisor
  4553                                                          call    .10                                             ;divide and store
  4554                                                          mov     ecx,10000000                                    ;10^7 divisor
  4555                                                          call    .30                                             ;divide and store
  4556                                                          mov     ecx,1000000                                     ;10^6 divisor
  4557                                                          call    .30                                             ;divide and store
  4558                                                          mov     ecx,100000                                      ;10^5 divisor
  4559                                                          call    .10                                             ;divide and store
  4560                                                          mov     ecx,10000                                       ;10^4 divisor
  4561                                                          call    .30                                             ;divide and store
  4562                                                          mov     ecx,1000                                        ;10^3 divisor
  4563                                                          call    .30                                             ;divide and store
  4564                                                          mov     ecx,100                                         ;10^2 divisor
  4565                                                          call    .10                                             ;divide and store
  4566                                                          mov     ecx,10                                          ;10^2 divisor
  4567                                                          call    .30                                             ;divide and store
  4568                                                          mov     eax,edx                                         ;10^1 remainder
  4569                                                          call    .40                                             ;store
  4570                                                          xor     al,al                                           ;null terminator
  4571                                                          stosb
  4572                                                          pop     es                                              ;restore non-volatile regs
  4573                                                          pop     edi                                             ;
  4574                                                          pop     ecx                                             ;
  4575                                                          pop     ebx                                             ;
  4576                                                          ret                                                     ;return
  4577                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4578                                                          jz      .30                                             ;no, branch
  4579                                                          test    bh,00000001b                                    ;trim leading zeros?
  4580                                                          jz      .20                                             ;no, store delim
  4581                                                          test    bh,00010000b                                    ;non-zero found?
  4582                                                          jz      .30                                             ;no, branch
  4583                                  .20                     mov     al,','                                          ;delimiter
  4584                                                          stosb                                                   ;store delimiter
  4585                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4586                                                          xor     edx,edx                                         ;zero hi-order
  4587                                                          div     ecx                                             ;divide by power of 10
  4588                                                          test    al,al                                           ;zero?
  4589                                                          jz      .50                                             ;yes, branch
  4590                                                          or      bh,00010000b                                    ;non-zero found
  4591                                  .40                     or      al,30h                                          ;ASCII zone
  4592                                                          stosb                                                   ;store digit
  4593                                                          ret                                                     ;return
  4594                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4595                                                          jz      .40                                             ;no, store and continue
  4596                                                          test    bh,00010000b                                    ;non-zero found?
  4597                                                          jnz     .40                                             ;yes, store and continue
  4598                                                          ret                                                     ;return
  4599                                  ;-----------------------------------------------------------------------------------------------------------------------
  4600                                  ;
  4601                                  ;       Routine:        UnsignedToHexadecimal
  4602                                  ;
  4603                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4604                                  ;
  4605                                  ;       Input:          DS:EDX  output buffer address
  4606                                  ;                       ECX     32-bit binary
  4607                                  ;
  4608                                  ;-----------------------------------------------------------------------------------------------------------------------
  4609                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4610                                                          mov     edi,edx                                         ;output buffer address
  4611                                                          mov     edx,ecx                                         ;32-bit unsigned
  4612                                                          xor     ecx,ecx                                         ;zero register
  4613                                                          mov     cl,8                                            ;nybble count
  4614                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4615                                                          mov     al,dl                                           ;????bbbb
  4616                                                          and     al,0fh                                          ;mask out bits 4-7
  4617                                                          or      al,30h                                          ;mask in ascii zone
  4618                                                          cmp     al,3ah                                          ;A through F?
  4619                                                          jb      .20                                             ;no, skip ahead
  4620                                                          add     al,7                                            ;41h through 46h
  4621                                  .20                     stosb                                                   ;store hexnum
  4622                                                          loop    .10                                             ;next nybble
  4623                                                          xor     al,al                                           ;zero reg
  4624                                                          stosb                                                   ;null terminate
  4625                                                          pop     edi                                             ;restore non-volatile regs
  4626                                                          ret                                                     ;return
  4627                                  ;=======================================================================================================================
  4628                                  ;
  4629                                  ;       Message Queue Helper Routines
  4630                                  ;
  4631                                  ;       GetMessage
  4632                                  ;       PutMessage
  4633                                  ;
  4634                                  ;=======================================================================================================================
  4635                                  ;-----------------------------------------------------------------------------------------------------------------------
  4636                                  ;
  4637                                  ;       Routine:        GetMessage
  4638                                  ;
  4639                                  ;       Description:    This routine reads and removes a message from the message queue.
  4640                                  ;
  4641                                  ;       Out:            EAX     lo-order message data
  4642                                  ;                       EDX     hi-order message data
  4643                                  ;
  4644                                  ;                       CY      0 = message read
  4645                                  ;                               1 = no message to read
  4646                                  ;
  4647                                  ;-----------------------------------------------------------------------------------------------------------------------
  4648                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4649                                                          push    ecx                                             ;
  4650                                                          push    ds                                              ;
  4651                                                          push    ELDTMQ                                          ;load message queue selector ...
  4652                                                          pop     ds                                              ;... into data segment register
  4653                                                          mov     ebx,[MQHead]                                    ;head ptr
  4654                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4655                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4656                                                          or      eax,edx                                         ;is queue empty?
  4657                                                          stc                                                     ;assume queue is emtpy
  4658                                                          jz      .20                                             ;yes, skip ahead
  4659                                                          xor     ecx,ecx                                         ;store zero
  4660                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4661                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4662                                                          add     ebx,8                                           ;next queue element
  4663                                                          and     ebx,03fch                                       ;at end of queue?
  4664                                                          jnz     .10                                             ;no, skip ahead
  4665                                                          mov     bl,8                                            ;reset to 1st entry
  4666                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4667                                                          clc                                                     ;indicate message read
  4668                                  .20                     pop     ds                                              ;restore non-volatile regs
  4669                                                          pop     ecx                                             ;
  4670                                                          pop     ebx                                             ;
  4671                                                          ret                                                     ;return
  4672                                  ;-----------------------------------------------------------------------------------------------------------------------
  4673                                  ;
  4674                                  ;       Routine:        PutMessage
  4675                                  ;
  4676                                  ;       Description:    This routine adda a message to the message queue.
  4677                                  ;
  4678                                  ;       In:             ECX     hi-order data word
  4679                                  ;                       EDX     lo-order data word
  4680                                  ;
  4681                                  ;       Out:            CY      0 = success
  4682                                  ;                               1 = fail: queue is full
  4683                                  ;
  4684                                  ;-----------------------------------------------------------------------------------------------------------------------
  4685                                  PutMessage              push    ds                                              ;save non-volatile regs
  4686                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4687                                                          pop     ds                                              ;... into data segment register
  4688                                                          mov     eax,[MQTail]                                    ;tail ptr
  4689                                                          cmp     dword [eax],0                                   ;is queue full?
  4690                                                          stc                                                     ;assume failure
  4691                                                          jne     .20                                             ;yes, cannot store
  4692                                                          mov     [eax],edx                                       ;store lo-order data
  4693                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4694                                                          add     eax,8                                           ;next queue element adr
  4695                                                          and     eax,03fch                                       ;at end of queue?
  4696                                                          jnz     .10                                             ;no, skip ahead
  4697                                                          mov     al,8                                            ;reset to top of queue
  4698                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4699                                                          clc                                                     ;indicate success
  4700                                  .20                     pop     ds                                              ;restore non-volatile regs
  4701                                                          ret                                                     ;return
  4702                                  ;=======================================================================================================================
  4703                                  ;
  4704                                  ;       Memory-Mapped Video Routines
  4705                                  ;
  4706                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4707                                  ;
  4708                                  ;       ClearConsoleScreen
  4709                                  ;       ScrollConsoleRow
  4710                                  ;       SetConsoleChar
  4711                                  ;       SetConsoleString
  4712                                  ;
  4713                                  ;=======================================================================================================================
  4714                                  ;-----------------------------------------------------------------------------------------------------------------------
  4715                                  ;
  4716                                  ;       Routine:        ClearConsoleScreen
  4717                                  ;
  4718                                  ;       Description:    This routine clears the console (CGA) screen.
  4719                                  ;
  4720                                  ;-----------------------------------------------------------------------------------------------------------------------
  4721                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4722                                                          push    edi                                             ;
  4723                                                          push    ds                                              ;
  4724                                                          push    es                                              ;
  4725                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4726                                                          pop     ds                                              ;... into DS register
  4727                                                          push    EGDTCGA                                         ;load CGA selector ...
  4728                                                          pop     es                                              ;... into ES register
  4729                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4730                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4731                                                          xor     edi,edi                                         ;target offset
  4732                                                          cld                                                     ;forward strings
  4733                                                          rep     stosd                                           ;reset screen body
  4734                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4735                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4736                                                          rep     stosd                                           ;reset OIA line
  4737                                                          xor     al,al                                           ;zero register
  4738                                                          mov     [wbConsoleRow],al                               ;reset console row
  4739                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4740                                                          call    PlaceCursor                                     ;place cursor at current position
  4741                                                          pop     es                                              ;restore non-volatile regs
  4742                                                          pop     ds                                              ;
  4743                                                          pop     edi                                             ;
  4744                                                          pop     ecx                                             ;
  4745                                                          ret                                                     ;return
  4746                                  ;-----------------------------------------------------------------------------------------------------------------------
  4747                                  ;
  4748                                  ;       Routine:        ScrollConsoleRow
  4749                                  ;
  4750                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4751                                  ;
  4752                                  ;-----------------------------------------------------------------------------------------------------------------------
  4753                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4754                                                          push    esi                                             ;
  4755                                                          push    edi                                             ;
  4756                                                          push    ds                                              ;
  4757                                                          push    es                                              ;
  4758                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4759                                                          pop     ds                                              ;... into DS
  4760                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4761                                                          pop     es                                              ;... into ES
  4762                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4763                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4764                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4765                                                          cld                                                     ;forward strings
  4766                                                          rep     movsd                                           ;move 24 lines up
  4767                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4768                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4769                                                          rep     stosd                                           ;clear bottom row
  4770                                                          pop     es                                              ;restore non-volatile regs
  4771                                                          pop     ds                                              ;
  4772                                                          pop     edi                                             ;
  4773                                                          pop     esi                                             ;
  4774                                                          pop     ecx                                             ;
  4775                                                          ret                                                     ;return
  4776                                  ;-----------------------------------------------------------------------------------------------------------------------
  4777                                  ;
  4778                                  ;       Routine:        SetConsoleChar
  4779                                  ;
  4780                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4781                                  ;
  4782                                  ;       In:             AL      ASCII character
  4783                                  ;                       CL      column
  4784                                  ;                       CH      row
  4785                                  ;                       ES      CGA selector
  4786                                  ;
  4787                                  ;       Out:            EAX     last target address written (ES:)
  4788                                  ;                       CL      column + 1
  4789                                  ;
  4790                                  ;-----------------------------------------------------------------------------------------------------------------------
  4791                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4792                                                          movzx   eax,ch                                          ;row
  4793                                                          mov     ah,ECONCOLS                                     ;cols/row
  4794                                                          mul     ah                                              ;row * cols/row
  4795                                                          add     al,cl                                           ;add column
  4796                                                          adc     ah,0                                            ;handle carry
  4797                                                          shl     eax,1                                           ;screen offset
  4798                                                          mov     [es:eax],dl                                     ;store character
  4799                                                          inc     cl                                              ;next column
  4800                                                          ret                                                     ;return
  4801                                  ;-----------------------------------------------------------------------------------------------------------------------
  4802                                  ;
  4803                                  ;       Routine:        SetConsoleString
  4804                                  ;
  4805                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4806                                  ;
  4807                                  ;       In:             ESI     source offset (DS:)
  4808                                  ;                       CL      column
  4809                                  ;                       CH      row
  4810                                  ;                       ES      CGA selector
  4811                                  ;
  4812                                  ;-----------------------------------------------------------------------------------------------------------------------
  4813                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4814                                                          cld                                                     ;forward strings
  4815                                  .10                     lodsb                                                   ;next ASCII character
  4816                                                          test    al,al                                           ;end of string?
  4817                                                          jz      .20                                             ;yes, branch
  4818                                                          call    SetConsoleChar                                  ;store character
  4819                                                          jmp     .10                                             ;continue
  4820                                  .20                     pop     esi                                             ;restore non-volatile regs
  4821                                                          ret                                                     ;return
  4822                                  ;=======================================================================================================================
  4823                                  ;
  4824                                  ;       Input/Output Routines
  4825                                  ;
  4826                                  ;       These routines read and/or write directly to ports.
  4827                                  ;
  4828                                  ;       GetBaseMemSize
  4829                                  ;       GetExtendedMemSize
  4830                                  ;       GetROMMemSize
  4831                                  ;       PlaceCursor
  4832                                  ;       PutPrimaryEndOfInt
  4833                                  ;       PutSecondaryEndOfInt
  4834                                  ;       ReadRealTimeClock
  4835                                  ;       ResetSystem
  4836                                  ;       SetKeyboardLamps
  4837                                  ;       WaitForKeyInBuffer
  4838                                  ;       WaitForKeyOutBuffer
  4839                                  ;
  4840                                  ;=======================================================================================================================
  4841                                  ;-----------------------------------------------------------------------------------------------------------------------
  4842                                  ;
  4843                                  ;       Routine:        GetBaseMemSize
  4844                                  ;
  4845                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4846                                  ;
  4847                                  ;       Output:         EAX     base RAM size in bytes
  4848                                  ;
  4849                                  ;-----------------------------------------------------------------------------------------------------------------------
  4850                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4851                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4852                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4853                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4854                                                          mov     ah,al                                           ;save base RAM high
  4855                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4856                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4857                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4858                                                          ret                                                     ;return to caller
  4859                                  ;-----------------------------------------------------------------------------------------------------------------------
  4860                                  ;
  4861                                  ;       Routine:        GetExtendedMemSize
  4862                                  ;
  4863                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4864                                  ;
  4865                                  ;       Output:         EAX     extended RAM size in bytes
  4866                                  ;
  4867                                  ;-----------------------------------------------------------------------------------------------------------------------
  4868                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4869                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4870                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4871                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4872                                                          mov     ah,al                                           ;save extended RAM high
  4873                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4874                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4875                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4876                                                          ret                                                     ;return to caller
  4877                                  ;-----------------------------------------------------------------------------------------------------------------------
  4878                                  ;
  4879                                  ;       Routine:        GetROMMemSize
  4880                                  ;
  4881                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4882                                  ;
  4883                                  ;       Output:         EAX     RAM size in bytes
  4884                                  ;
  4885                                  ;-----------------------------------------------------------------------------------------------------------------------
  4886                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4887                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4888                                                          ret                                                     ;return
  4889                                  ;-----------------------------------------------------------------------------------------------------------------------
  4890                                  ;
  4891                                  ;       Routine:        PlaceCursor
  4892                                  ;
  4893                                  ;       Description:    This routine positions the cursor on the console.
  4894                                  ;
  4895                                  ;       In:             DS      OS data selector
  4896                                  ;
  4897                                  ;-----------------------------------------------------------------------------------------------------------------------
  4898                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4899                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4900                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4901                                                          mul     ah                                              ;row offset
  4902                                                          add     al,[wbConsoleColumn]                            ;add column
  4903                                                          adc     ah,0                                            ;add overflow
  4904                                                          mov     ecx,eax                                         ;screen offset
  4905                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4906                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4907                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4908                                                          out     dx,al                                           ;select register
  4909                                                          inc     edx                                             ;data port
  4910                                                          mov     al,ch                                           ;hi-order cursor loc
  4911                                                          out     dx,al                                           ;store hi-order loc
  4912                                                          dec     edx                                             ;register select port
  4913                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4914                                                          out     dx,al                                           ;select register
  4915                                                          inc     edx                                             ;data port
  4916                                                          mov     al,cl                                           ;lo-order cursor loc
  4917                                                          out     dx,al                                           ;store lo-order loc
  4918                                                          pop     ecx                                             ;restore non-volatile regs
  4919                                                          ret                                                     ;return
  4920                                  ;-----------------------------------------------------------------------------------------------------------------------
  4921                                  ;
  4922                                  ;       Routine:        PutPrimaryEndOfInt
  4923                                  ;
  4924                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4925                                  ;
  4926                                  ;-----------------------------------------------------------------------------------------------------------------------
  4927                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4928                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4929                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4930                                                          ret                                                     ;return
  4931                                  ;-----------------------------------------------------------------------------------------------------------------------
  4932                                  ;
  4933                                  ;       Routine:        PutSecondaryEndOfInt
  4934                                  ;
  4935                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4936                                  ;
  4937                                  ;-----------------------------------------------------------------------------------------------------------------------
  4938                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4939                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4940                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4941                                                          ret                                                     ;return
  4942                                  ;-----------------------------------------------------------------------------------------------------------------------
  4943                                  ;
  4944                                  ;       Routine:        ReadRealTimeClock
  4945                                  ;
  4946                                  ;       Description:    This routine gets current date time from the real-time clock.
  4947                                  ;
  4948                                  ;       In:             DS:EBX  DATETIME structure
  4949                                  ;
  4950                                  ;-----------------------------------------------------------------------------------------------------------------------
  4951                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4952                                                          push    edi                                             ;
  4953                                                          push    es                                              ;
  4954                                                          push    ds                                              ;store data selector ...
  4955                                                          pop     es                                              ;... in es register
  4956                                                          mov     edi,ebx                                         ;date-time structure
  4957                                                          mov     al,ERTCSECONDREG                                ;second register
  4958                                                          out     ERTCREGPORT,al                                  ;select second register
  4959                                                          in      al,ERTCDATAPORT                                 ;read second register
  4960                                                          cld                                                     ;forward strings
  4961                                                          stosb                                                   ;store second value
  4962                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4963                                                          out     ERTCREGPORT,al                                  ;select minute register
  4964                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4965                                                          stosb                                                   ;store minute value
  4966                                                          mov     al,ERTCHOURREG                                  ;hour register
  4967                                                          out     ERTCREGPORT,al                                  ;select hour register
  4968                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4969                                                          stosb                                                   ;store hour value
  4970                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4971                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4972                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4973                                                          stosb                                                   ;store weekday value
  4974                                                          mov     al,ERTCDAYREG                                   ;day register
  4975                                                          out     ERTCREGPORT,al                                  ;select day register
  4976                                                          in      al,ERTCDATAPORT                                 ;read day register
  4977                                                          stosb                                                   ;store day value
  4978                                                          mov     al,ERTCMONTHREG                                 ;month register
  4979                                                          out     ERTCREGPORT,al                                  ;select month register
  4980                                                          in      al,ERTCDATAPORT                                 ;read month register
  4981                                                          stosb                                                   ;store month value
  4982                                                          mov     al,ERTCYEARREG                                  ;year register
  4983                                                          out     ERTCREGPORT,al                                  ;select year register
  4984                                                          in      al,ERTCDATAPORT                                 ;read year register
  4985                                                          stosb                                                   ;store year value
  4986                                                          mov     al,ERTCCENTURYREG                               ;century register
  4987                                                          out     ERTCREGPORT,al                                  ;select century register
  4988                                                          in      al,ERTCDATAPORT                                 ;read century register
  4989                                                          stosb                                                   ;store century value
  4990                                                          mov     al,ERTCSTATUSREG                                ;status register
  4991                                                          out     ERTCREGPORT,al                                  ;select status register
  4992                                                          in      al,ERTCDATAPORT                                 ;read status register
  4993                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4994                                                          jnz     .20                                             ;skip ahead if binary values
  4995                                                          mov     esi,ebx                                         ;date-time structure address
  4996                                                          mov     edi,ebx                                         ;date-time structure address
  4997                                                          mov     ecx,8                                           ;loop counter
  4998                                  .10                     lodsb                                                   ;BCD value
  4999                                                          mov     ah,al                                           ;BCD value
  5000                                                          and     al,00001111b                                    ;low-order decimal zone
  5001                                                          and     ah,11110000b                                    ;hi-order decimal zone
  5002                                                          shr     ah,1                                            ;hi-order decimal * 8
  5003                                                          add     al,ah                                           ;low-order + hi-order * 8
  5004                                                          shr     ah,2                                            ;hi-order decimal * 2
  5005                                                          add     al,ah                                           ;low-order + hi-order * 10
  5006                                                          stosb                                                   ;replace BCD with binary
  5007                                                          loop    .10                                             ;next value
  5008                                  .20                     pop     es                                              ;restore non-volatile regs
  5009                                                          pop     edi                                             ;
  5010                                                          pop     esi                                             ;
  5011                                                          ret                                                     ;return
  5012                                  ;-----------------------------------------------------------------------------------------------------------------------
  5013                                  ;
  5014                                  ;       Routine:        ResetSystem
  5015                                  ;
  5016                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5017                                  ;
  5018                                  ;       Out:            N/A     This routine does not return.
  5019                                  ;
  5020                                  ;-----------------------------------------------------------------------------------------------------------------------
  5021                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5022                                                          loop    $                                               ;clear interrupts
  5023                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5024                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5025                                  .10                     sti                                                     ;enable maskable interrupts
  5026                                                          hlt                                                     ;halt until interrupt
  5027                                                          jmp     .10                                             ;repeat until reset kicks in
  5028                                  ;-----------------------------------------------------------------------------------------------------------------------
  5029                                  ;
  5030                                  ;       Routine:        SetKeyboardLamps
  5031                                  ;
  5032                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5033                                  ;
  5034                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5035                                  ;
  5036                                  ;-----------------------------------------------------------------------------------------------------------------------
  5037                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5038                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5039                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5040                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5041                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5042                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5043                                                          mov     al,bh                                           ;set/reset lamps value
  5044                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5045                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5046                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5047                                                          ret                                                     ;return
  5048                                  ;-----------------------------------------------------------------------------------------------------------------------
  5049                                  ;
  5050                                  ;       Routine:        WaitForKeyInBuffer
  5051                                  ;
  5052                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5053                                  ;
  5054                                  ;       Out:            ZF      1 = Input buffer ready
  5055                                  ;                               0 = Input buffer not ready after timeout
  5056                                  ;
  5057                                  ;-----------------------------------------------------------------------------------------------------------------------
  5058                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5059                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5060                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5061                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5062                                                          loopnz  .10                                             ;yes, repeat till timeout
  5063                                                          pop     ecx                                             ;restore non-volatile regs
  5064                                                          ret                                                     ;return
  5065                                  ;-----------------------------------------------------------------------------------------------------------------------
  5066                                  ;
  5067                                  ;       Routine:        WaitForKeyOutBuffer
  5068                                  ;
  5069                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5070                                  ;
  5071                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5072                                  ;                               0 = Output buffer empty after timeout
  5073                                  ;
  5074                                  ;-----------------------------------------------------------------------------------------------------------------------
  5075                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5076                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5077                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5078                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5079                                                          loopz   .10                                             ;loop until output buffer bit
  5080                                                          pop     ecx                                             ;restore non-volatile regs
  5081                                                          ret                                                     ;return
  5082                                  ;-----------------------------------------------------------------------------------------------------------------------
  5083                                  ;
  5084                                  ;       End of the Kernel Function Library
  5085                                  ;
  5086                                  ;-----------------------------------------------------------------------------------------------------------------------
  5087                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5088                                  ;=======================================================================================================================
  5089                                  ;
  5090                                  ;       Console Task
  5091                                  ;
  5092                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5093                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5094                                  ;       screen and responds to user commands.
  5095                                  ;
  5096                                  ;=======================================================================================================================
  5097                                  ;-----------------------------------------------------------------------------------------------------------------------
  5098                                  ;
  5099                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5100                                  ;
  5101                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5102                                  ;
  5103                                  ;-----------------------------------------------------------------------------------------------------------------------
  5104                                  section                 constack                                                ;console task stack
  5105                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5106                                  ;-----------------------------------------------------------------------------------------------------------------------
  5107                                  ;
  5108                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5109                                  ;
  5110                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5111                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5112                                  ;       16 descriptors. Six are initially defined.
  5113                                  ;
  5114                                  ;-----------------------------------------------------------------------------------------------------------------------
  5115                                  section                 conldt                                                  ;console local descriptors
  5116                                                          dq      004093004780007Fh                               ;04 TSS alias
  5117                                                          dq      004093004700007Fh                               ;0c LDT alias
  5118                                                          dq      00409300400006FFh                               ;14 stack
  5119                                                          dq      00CF93000000FFFFh                               ;1c data
  5120                                                          dq      00409B0050000FFFh                               ;24 code
  5121                                                          dq      00409300480007FFh                               ;2c message queue
  5122                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5123                                  ;-----------------------------------------------------------------------------------------------------------------------
  5124                                  ;
  5125                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5126                                  ;
  5127                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5128                                  ;       segment. CS to console code.
  5129                                  ;
  5130                                  ;-----------------------------------------------------------------------------------------------------------------------
  5131                                  section                 contss                                                  ;console task state segment
  5132                                                          dd      0                                               ;00 back-link tss
  5133                                                          dd      0700h                                           ;04 esp ring 0
  5134                                                          dd      0014h                                           ;08 ss ring 0
  5135                                                          dd      0700h                                           ;0c esp ring 1
  5136                                                          dd      0014h                                           ;10 es ring 1
  5137                                                          dd      0700h                                           ;14 esp ring 2
  5138                                                          dd      0014h                                           ;18 ss ring 2
  5139                                                          dd      0                                               ;1c cr ring 3
  5140                                                          dd      0                                               ;20 eip
  5141                                                          dd      0200h                                           ;24 eflags
  5142                                                          dd      0                                               ;28 eax
  5143                                                          dd      0                                               ;2c ecx
  5144                                                          dd      0                                               ;30 edx
  5145                                                          dd      0                                               ;34 ebx
  5146                                                          dd      0700h                                           ;38 esp ring 3
  5147                                                          dd      0                                               ;3c ebp
  5148                                                          dd      0                                               ;40 esi
  5149                                                          dd      0                                               ;44 edi
  5150                                                          dd      001Ch                                           ;48 es
  5151                                                          dd      0024h                                           ;4c cs
  5152                                                          dd      0014h                                           ;50 ss ring 3
  5153                                                          dd      001Ch                                           ;54 ds
  5154                                                          dd      0                                               ;58 fs
  5155                                                          dd      0                                               ;5c gs
  5156                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5157                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5158                                  ;-----------------------------------------------------------------------------------------------------------------------
  5159                                  ;
  5160                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5161                                  ;
  5162                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5163                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5164                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5165                                  ;       event.
  5166                                  ;
  5167                                  ;-----------------------------------------------------------------------------------------------------------------------
  5168                                  section                 conmque                                                 ;console message queue
  5169                                                          dd      8                                               ;head pointer
  5170                                                          dd      8                                               ;tail pointer
  5171                                                          times   510 dd 0                                        ;queue elements
  5172                                  ;-----------------------------------------------------------------------------------------------------------------------
  5173                                  ;
  5174                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5175                                  ;
  5176                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5177                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5178                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5179                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5180                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5181                                  ;       board input, echoing to the console screen and responding to user commands.
  5182                                  ;
  5183                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5184                                  ;
  5185                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5186                                  ;                               |  Real Mode Interrupt Vectors                  |
  5187                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5188                                  ;                               |  Reserved BIOS Memory Area                    |
  5189                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5190                                  ;                               |  Shared Kernel Memory Area                    |
  5191                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5192                                  ;                               |  Global Descriptor Table (GDT)                |
  5193                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5194                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5195                                  ;                       002000  +-----------------------------------------------+
  5196                                  ;                               |  Interrupt Handlers                           |
  5197                                  ;                               |  Kernel Function Library                      |
  5198                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5199                                  ;                               |  Console Task Stack Area                      |
  5200                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5201                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5202                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5203                                  ;                               |  Console Task Task State Segment (TSS)        |
  5204                                  ;                       004800  +-----------------------------------------------+
  5205                                  ;                               |  Console Task Message Queue                   |
  5206                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5207                                  ;                               |  Console Task Code                            |
  5208                                  ;                               |  Console Task Constants                       |
  5209                                  ;                       006000  +===============================================+
  5210                                  ;
  5211                                  ;-----------------------------------------------------------------------------------------------------------------------
  5212                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5213                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5214                                  
  5215                                                          clearConsoleScreen                                      ;clear the console screen
  5216                                                          putConsoleString czTitle                                ;display startup message
  5217                                                          putConsoleString czROMMem                               ;ROM memory label
  5218                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5219                                                          putConsoleString czKB                                   ;Kilobytes
  5220                                                          putConsoleString czNewLine                              ;new line
  5221                                                          putConsoleString czBaseMem                              ;base memory label
  5222                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5223                                                          putConsoleString czKB                                   ;Kilobytes
  5224                                                          putConsoleString czNewLine                              ;new line
  5225                                                          putConsoleString czExtendedMem                          ;extended memory label
  5226                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5227                                                          putConsoleString czKB                                   ;Kilobytes
  5228                                                          putConsoleString czNewLine                              ;new line
  5229                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5230                                                          placeCursor                                             ;set CRT cursor location
  5231                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5232                                                          putConsoleString czNewLine                              ;newline
  5233                                  
  5234                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5235                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5236                                                          call    ConTakeToken                                    ;handle console input
  5237                                                          mov     edx,wzConsoleToken                              ;token buffer
  5238                                                          call    ConDetermineCommand                             ;determine command number
  5239                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5240                                                          jb      .20                                             ;yes, branch
  5241                                  
  5242                                                          putConsoleString czUnknownCommand                       ;display error message
  5243                                  
  5244                                                          jmp     .10                                             ;next command
  5245                                  .20                     shl     eax,2                                           ;index into jump table
  5246                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5247                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5248                                                          call    eax                                             ;call command handler
  5249                                                          jmp     .10                                             ;next command
  5250                                  ;-----------------------------------------------------------------------------------------------------------------------
  5251                                  ;
  5252                                  ;       Routine:        ConInitializeData
  5253                                  ;
  5254                                  ;       Description:    This routine initializes console task variables.
  5255                                  ;
  5256                                  ;-----------------------------------------------------------------------------------------------------------------------
  5257                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5258                                                          push    edi                                             ;
  5259                                                          push    es                                              ;
  5260                                  ;
  5261                                  ;       Initialize console work areas.
  5262                                  ;
  5263                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5264                                                          pop     es                                              ;... into extra segment register
  5265                                                          mov     edi,ECONDATA                                    ;OS console data address
  5266                                                          xor     al,al                                           ;initialization value
  5267                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5268                                                          cld                                                     ;forward strings
  5269                                                          rep     stosb                                           ;initialize data
  5270                                  ;
  5271                                  ;       Initialize heap size
  5272                                  ;
  5273                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5274                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5275                                  ;
  5276                                  ;       Initialize MEMROOT structure
  5277                                  ;
  5278                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5279                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5280                                                          xor     ecx,ecx                                         ;zero register
  5281                                                          mov     cl,4                                            ;count
  5282                                                          rep     stosd                                           ;store first/last contig and free addrs
  5283                                                          xor     eax,eax                                         ;zero register
  5284                                                          stosd                                                   ;zero first task block
  5285                                                          stosd                                                   ;zero last task block
  5286                                  ;
  5287                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5288                                  ;
  5289                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5290                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5291                                                          stosd                                                   ;store signature
  5292                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5293                                                          stosd                                                   ;store block size
  5294                                                          xor     ecx,ecx                                         ;zero register
  5295                                                          mov     cl,6                                            ;count
  5296                                                          xor     eax,eax                                         ;zero register
  5297                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5298                                  ;
  5299                                  ;       Read memory sizes from ROM
  5300                                  ;
  5301                                                          getROMMemSize                                           ;get ROM memory size
  5302                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5303                                                          mov     ecx,eax                                         ;integer param
  5304                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5305                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5306                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5307                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5308                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5309                                                          mov     ecx,eax                                         ;integer param
  5310                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5311                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5312                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5313                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5314                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5315                                                          mov     ecx,eax                                         ;integer param
  5316                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5317                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5318                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5319                                  ;
  5320                                  ;       Restore and return.
  5321                                  ;
  5322                                                          pop     es                                              ;restore non-volatile regs
  5323                                                          pop     edi                                             ;
  5324                                                          pop     ecx                                             ;
  5325                                                          ret                                                     ;return
  5326                                  ;-----------------------------------------------------------------------------------------------------------------------
  5327                                  ;
  5328                                  ;       Routine:        ConTakeToken
  5329                                  ;
  5330                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5331                                  ;
  5332                                  ;       In:             DS:EDX  source buffer address
  5333                                  ;                       DS:EBX  target buffer address
  5334                                  ;
  5335                                  ;       Out:            DS:EDX  source buffer address
  5336                                  ;                       DS:EBX  target buffer address
  5337                                  ;
  5338                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5339                                  ;
  5340                                  ;-----------------------------------------------------------------------------------------------------------------------
  5341                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5342                                                          push    edi                                             ;
  5343                                                          push    es                                              ;
  5344                                                          push    ds                                              ;load data segment selector ...
  5345                                                          pop     es                                              ;... into extra segment reg
  5346                                                          mov     esi,edx                                         ;source buffer address
  5347                                                          mov     edi,ebx                                         ;target buffer address
  5348                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5349                                                          cld                                                     ;forward strings
  5350                                  .10                     lodsb                                                   ;load byte
  5351                                                          cmp     al,EASCIISPACE                                  ;space?
  5352                                                          je      .10                                             ;yes, continue
  5353                                                          test    al,al                                           ;end of line?
  5354                                                          jz      .40                                             ;yes, branch
  5355                                  .20                     stosb                                                   ;store byte
  5356                                                          lodsb                                                   ;load byte
  5357                                                          test    al,al                                           ;end of line?
  5358                                                          jz      .40                                             ;no, continue
  5359                                                          cmp     al,EASCIISPACE                                  ;space?
  5360                                                          jne     .20                                             ;no, continue
  5361                                  .30                     lodsb                                                   ;load byte
  5362                                                          cmp     al,EASCIISPACE                                  ;space?
  5363                                                          je      .30                                             ;yes, continue
  5364                                                          dec     esi                                             ;pre-position
  5365                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5366                                                          mov     edi,edx                                         ;source buffer address
  5367                                  .50                     lodsb                                                   ;remaining byte
  5368                                                          stosb                                                   ;move to front of buffer
  5369                                                          test    al,al                                           ;end of line?
  5370                                                          jnz     .50                                             ;no, continue
  5371                                                          pop     es                                              ;restore non-volatile regs
  5372                                                          pop     edi                                             ;
  5373                                                          pop     esi                                             ;
  5374                                                          ret                                                     ;return
  5375                                  ;-----------------------------------------------------------------------------------------------------------------------
  5376                                  ;
  5377                                  ;       Routine:        ConDetermineCommand
  5378                                  ;
  5379                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5380                                  ;
  5381                                  ;       input:          DS:EDX  command address
  5382                                  ;
  5383                                  ;       output:         EAX     >=0     = command nbr
  5384                                  ;                               0       = unknown command
  5385                                  ;
  5386                                  ;-----------------------------------------------------------------------------------------------------------------------
  5387                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5388                                                          push    ecx                                             ;
  5389                                                          push    esi                                             ;
  5390                                                          push    edi                                             ;
  5391                                  
  5392                                                          upperCaseString                                         ;upper-case string at EDX
  5393                                  
  5394                                                          mov     esi,tConCmdTbl                                  ;commands table
  5395                                                          xor     edi,edi                                         ;intialize command number
  5396                                                          cld                                                     ;forward strings
  5397                                  .10                     lodsb                                                   ;command length
  5398                                                          movzx   ecx,al                                          ;command length
  5399                                                          jecxz   .20                                             ;branch if end of table
  5400                                                          mov     ebx,esi                                         ;table entry address
  5401                                                          add     esi,ecx                                         ;next table entry address
  5402                                  
  5403                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5404                                  
  5405                                                          jecxz   .20                                             ;branch if equal
  5406                                                          inc     edi                                             ;increment command nbr
  5407                                                          jmp     .10                                             ;repeat
  5408                                  .20                     mov     eax,edi                                         ;command number
  5409                                                          pop     edi                                             ;restore non-volatile regs
  5410                                                          pop     esi                                             ;
  5411                                                          pop     ecx                                             ;
  5412                                                          pop     ebx                                             ;
  5413                                                          ret                                                     ;return
  5414                                  ;-----------------------------------------------------------------------------------------------------------------------
  5415                                  ;
  5416                                  ;       Routine:        ConClear
  5417                                  ;
  5418                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5419                                  ;
  5420                                  ;-----------------------------------------------------------------------------------------------------------------------
  5421                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5422                                                          ret                                                     ;return
  5423                                  ;-----------------------------------------------------------------------------------------------------------------------
  5424                                  ;
  5425                                  ;       Routine:        ConDate
  5426                                  ;
  5427                                  ;       Description:    This routine handles the DATE command.
  5428                                  ;
  5429                                  ;-----------------------------------------------------------------------------------------------------------------------
  5430                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5431                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5432                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5433                                                          putConsoleString  czNewLine                             ;write newline to console
  5434                                                          ret                                                     ;return
  5435                                  ;-----------------------------------------------------------------------------------------------------------------------
  5436                                  ;
  5437                                  ;       Routine:        ConDay
  5438                                  ;
  5439                                  ;       Description:    This routine handles the DAY command.
  5440                                  ;
  5441                                  ;-----------------------------------------------------------------------------------------------------------------------
  5442                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5443                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5444                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5445                                                          putConsoleString  czNewLine                             ;write newline to console
  5446                                                          ret                                                     ;return
  5447                                  ;-----------------------------------------------------------------------------------------------------------------------
  5448                                  ;
  5449                                  ;       Routine:        ConExit
  5450                                  ;
  5451                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5452                                  ;
  5453                                  ;-----------------------------------------------------------------------------------------------------------------------
  5454                                  ConExit                 resetSystem                                             ;issue system reset
  5455                                                          ret                                                     ;return
  5456                                  ;-----------------------------------------------------------------------------------------------------------------------
  5457                                  ;
  5458                                  ;       Routine:        ConFree
  5459                                  ;
  5460                                  ;       Description:    This routine handles the FREE command.
  5461                                  ;
  5462                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5463                                  ;
  5464                                  ;-----------------------------------------------------------------------------------------------------------------------
  5465                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5466                                                          push    ecx                                             ;
  5467                                                          push    esi                                             ;
  5468                                                          push    edi                                             ;
  5469                                  ;
  5470                                  ;       Get address parameter
  5471                                  ;
  5472                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5473                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5474                                                          call    ConTakeToken                                    ;take first param as token
  5475                                  ;
  5476                                  ;       Convert input parameter from hexadecimal string to binary
  5477                                  ;
  5478                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5479                                                          je      .10                                             ;no, branch
  5480                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5481                                  
  5482                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5483                                  
  5484                                                          test    eax,eax                                         ;valid parameter?
  5485                                                          jz      .10                                             ;no, branch
  5486                                  ;
  5487                                  ;       Free memory block
  5488                                  ;
  5489                                                          freeMemory eax                                          ;free memory
  5490                                  
  5491                                                          cmp     eax,-1                                          ;memory freed?
  5492                                                          je      .10                                             ;no, branch
  5493                                  ;
  5494                                  ;       Indicate memory freed
  5495                                  ;
  5496                                                          putConsoleString czOK                                   ;indicate success
  5497                                  ;
  5498                                  ;       Restore and return
  5499                                  ;
  5500                                  .10                     pop     edi                                             ;restore non-volatile regs
  5501                                                          pop     esi                                             ;
  5502                                                          pop     ecx                                             ;
  5503                                                          pop     ebx                                             ;
  5504                                                          ret                                                     ;return
  5505                                  ;-----------------------------------------------------------------------------------------------------------------------
  5506                                  ;
  5507                                  ;       Routine:        ConHour
  5508                                  ;
  5509                                  ;       Description:    This routine Handles the HOUR command.
  5510                                  ;
  5511                                  ;-----------------------------------------------------------------------------------------------------------------------
  5512                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5513                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5514                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5515                                                          putConsoleString  czNewLine                             ;write newline to console
  5516                                                          ret                                                     ;return
  5517                                  ;-----------------------------------------------------------------------------------------------------------------------
  5518                                  ;
  5519                                  ;       Routine:        ConInt6
  5520                                  ;
  5521                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5522                                  ;
  5523                                  ;-----------------------------------------------------------------------------------------------------------------------
  5524                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5525                                                          ret                                                     ;return (not executed)
  5526                                  ;-----------------------------------------------------------------------------------------------------------------------
  5527                                  ;
  5528                                  ;       Routine:        ConMalloc
  5529                                  ;
  5530                                  ;       Description:    This routine handles the MALLOC command.
  5531                                  ;
  5532                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5533                                  ;
  5534                                  ;-----------------------------------------------------------------------------------------------------------------------
  5535                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5536                                                          push    ecx                                             ;
  5537                                                          push    esi                                             ;
  5538                                                          push    edi                                             ;
  5539                                  ;
  5540                                  ;       Get size parameter
  5541                                  ;
  5542                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5543                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5544                                                          call    ConTakeToken                                    ;take first param as token
  5545                                  ;
  5546                                  ;       Convert input parameter from decimal string to binary
  5547                                  ;
  5548                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5549                                                          je      .10                                             ;no, branch
  5550                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5551                                  
  5552                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5553                                  
  5554                                                          test    eax,eax                                         ;valid parameter?
  5555                                                          jz      .10                                             ;no, branch
  5556                                  ;
  5557                                  ;       Allocate memory block
  5558                                  ;
  5559                                                          allocateMemory eax                                      ;allocate memory
  5560                                  
  5561                                                          test    eax,eax                                         ;memory allocated?
  5562                                                          jz      .10                                             ;no, branch
  5563                                  ;
  5564                                  ;       Report allocated memory block address
  5565                                  ;
  5566                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5567                                                          mov     ecx,eax                                         ;memory address
  5568                                  
  5569                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5570                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5571                                                          putConsoleString czNewLine                              ;display new line
  5572                                  
  5573                                  .10                     pop     edi                                             ;restore non-volatile regs
  5574                                                          pop     esi                                             ;
  5575                                                          pop     ecx                                             ;
  5576                                                          pop     ebx                                             ;
  5577                                                          ret                                                     ;return
  5578                                  ;-----------------------------------------------------------------------------------------------------------------------
  5579                                  ;
  5580                                  ;       Routine:        ConMem
  5581                                  ;
  5582                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5583                                  ;
  5584                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5585                                  ;
  5586                                  ;-----------------------------------------------------------------------------------------------------------------------
  5587                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5588                                                          push    esi                                             ;
  5589                                                          push    edi                                             ;
  5590                                  ;
  5591                                  ;       Update the source address if a parameter is given.
  5592                                  ;
  5593                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5594                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5595                                                          call    ConTakeToken                                    ;take first param as token
  5596                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5597                                                          je      .10                                             ;no, branch
  5598                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5599                                  
  5600                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5601                                  
  5602                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5603                                  ;
  5604                                  ;       Setup source address and row count.
  5605                                  ;
  5606                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5607                                                          xor     ecx,ecx                                         ;zero register
  5608                                                          mov     cl,16                                           ;row count
  5609                                  ;
  5610                                  ;       Start the row with the source address in hexadecimal.
  5611                                  ;
  5612                                  .20                     push    ecx                                             ;save remaining rows
  5613                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5614                                                          mov     edx,edi                                         ;output buffer address
  5615                                                          mov     ecx,esi                                         ;console memory address
  5616                                  
  5617                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5618                                  
  5619                                                          add     edi,8                                           ;end of memory addr hexnum
  5620                                                          mov     al,' '                                          ;ascii space
  5621                                                          stosb                                                   ;store delimiter
  5622                                  ;
  5623                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5624                                  ;
  5625                                                          xor     ecx,ecx                                         ;zero register
  5626                                                          mov     cl,16                                           ;loop count
  5627                                  .30                     push    ecx                                             ;save loop count
  5628                                                          lodsb                                                   ;memory byte
  5629                                                          mov     ah,al                                           ;memory byte
  5630                                                          shr     al,4                                            ;high-order in bits 3-0
  5631                                                          or      al,30h                                          ;apply ascii numeric zone
  5632                                                          cmp     al,3ah                                          ;numeric range?
  5633                                                          jb      .40                                             ;yes, skip ahead
  5634                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5635                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5636                                                          mov     al,ah                                           ;low-order in bits 3-0
  5637                                                          and     al,0fh                                          ;mask out high-order bits
  5638                                                          or      al,30h                                          ;apply ascii numeric zone
  5639                                                          cmp     al,3ah                                          ;numeric range?
  5640                                                          jb      .50                                             ;yes, skip ahead
  5641                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5642                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5643                                                          mov     al,' '                                          ;ascii space
  5644                                                          stosb                                                   ;store ascii space delimiter
  5645                                                          pop     ecx                                             ;loop count
  5646                                                          loop    .30                                             ;next
  5647                                  ;
  5648                                  ;       Output printable ASCII character section for the row.
  5649                                  ;
  5650                                                          sub     esi,16                                          ;reset source pointer
  5651                                                          mov     cl,16                                           ;loop count
  5652                                  .60                     lodsb                                                   ;source byte
  5653                                                          cmp     al,32                                           ;printable? (low-range test)
  5654                                                          jb      .70                                             ;no, skip ahead
  5655                                                          cmp     al,128                                          ;printable? (high-range test)
  5656                                                          jb      .80                                             ;yes, skip ahead
  5657                                  .70                     mov     al,' '                                          ;display space instead of printable
  5658                                  .80                     stosb                                                   ;store printable ascii byte
  5659                                                          loop    .60                                             ;next source byte
  5660                                                          xor     al,al                                           ;nul-terminator
  5661                                                          stosb                                                   ;terminate output line
  5662                                  ;
  5663                                  ;       Display constructed output buffer and newline.
  5664                                  ;
  5665                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5666                                                          putConsoleString czNewLine                              ;display new line
  5667                                  ;
  5668                                  ;       Repeat until all lines displayed and preserve source address.
  5669                                  ;
  5670                                                          pop     ecx                                             ;remaining rows
  5671                                                          loop    .20                                             ;next row
  5672                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5673                                                          pop     edi                                             ;restore regs
  5674                                                          pop     esi                                             ;
  5675                                                          pop     ebx                                             ;
  5676                                                          ret                                                     ;return
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ;
  5679                                  ;       Routine:        ConMinute
  5680                                  ;
  5681                                  ;       Description:    This routine Handles the MINUTE command.
  5682                                  ;
  5683                                  ;-----------------------------------------------------------------------------------------------------------------------
  5684                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5685                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5686                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5687                                                          putConsoleString  czNewLine                             ;write newline to console
  5688                                                          ret                                                     ;return
  5689                                  ;-----------------------------------------------------------------------------------------------------------------------
  5690                                  ;
  5691                                  ;       Routine:        ConMonth
  5692                                  ;
  5693                                  ;       Description:    This routine Handles the MONTH command.
  5694                                  ;
  5695                                  ;-----------------------------------------------------------------------------------------------------------------------
  5696                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5697                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5698                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5699                                                          putConsoleString  czNewLine                             ;write newline to console
  5700                                                          ret                                                     ;return
  5701                                  ;-----------------------------------------------------------------------------------------------------------------------
  5702                                  ;
  5703                                  ;       Routine:        ConMonthName
  5704                                  ;
  5705                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5706                                  ;
  5707                                  ;-----------------------------------------------------------------------------------------------------------------------
  5708                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5709                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5710                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5711                                                          putConsoleString   czNewLine                            ;write newline to console
  5712                                                          ret                                                     ;return
  5713                                  ;-----------------------------------------------------------------------------------------------------------------------
  5714                                  ;
  5715                                  ;       Routine:        ConPCIProbe
  5716                                  ;
  5717                                  ;       Description:    This routine handles the PCIProbe command.
  5718                                  ;
  5719                                  ;-----------------------------------------------------------------------------------------------------------------------
  5720                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5721                                  ;
  5722                                  ;       Setup addressability.
  5723                                  ;
  5724                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5725                                  ;
  5726                                  ;       Initialize variables.
  5727                                  ;
  5728                                                          xor     eax,eax                                         ;zero register
  5729                                                          mov     [ebx+PCI.configdata],eax                        ;initialize config-data
  5730                                                          mov     [ebx+PCI.selector],eax                          ;initialize selector
  5731                                                          mov     [ebx+PCI.bus],al                                ;initialize bus
  5732                                                          mov     [ebx+PCI.device],al                             ;initialize device
  5733                                                          mov     [ebx+PCI.function],al                           ;initialize function
  5734                                                          mov     [ebx+PCI.register],al                           ;initialize register
  5735                                                          mov     [ebx+PCI.bar0],eax                              ;initialize base address reg 0
  5736                                                          mov     [ebx+PCI.bar1],eax                              ;initialize base address reg 1
  5737                                                          mov     [ebx+PCI.bar2],eax                              ;initialize base address reg 2
  5738                                                          mov     [ebx+PCI.bar3],eax                              ;initialize base address reg 3
  5739                                                          mov     [ebx+PCI.bar4],eax                              ;initialize base address reg 4
  5740                                                          mov     [ebx+PCI.bar5],eax                              ;initialize base address reg 5
  5741                                  ;
  5742                                  ;       Construct PCI selector.
  5743                                  ;
  5744                                  .10                     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  5745                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  5746                                                          shl     dl,3                                            ;DL = dddd d000
  5747                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  5748                                                          and     al,007h                                         ;AL = 0000 0fff
  5749                                                          or      al,dl                                           ;AL = dddd dfff
  5750                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5751                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5752                                                          or      eax,80000000h                                   ;1000 0000 bbbb bbbb dddd dfff 0000 0000
  5753                                                          mov     [ebx+PCI.selector],eax                          ;save selector
  5754                                  ;
  5755                                  ;       Read PCI data register.
  5756                                  ;
  5757                                                          mov     dx,EPCIPORTCONFIGADDR                           ;PCI config address port
  5758                                                          out     dx,eax                                          ;select device
  5759                                                          mov     dx,EPCIPORTCONFIGDATA                           ;PCI config data port
  5760                                                          in      eax,dx                                          ;read register data
  5761                                                          mov     [ebx+PCI.configdata],eax                        ;save config data
  5762                                  ;
  5763                                  ;       Interpret PCI data value and display finding.
  5764                                  ;
  5765                                                          cmp     eax,0ffffffffh                                  ;not defined?
  5766                                                          je      .20                                             ;yes, branch
  5767                                                          mov     edx,wzConsoleToken                              ;output buffer
  5768                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5769                                  
  5770                                                          putConsoleString wzConsoleToken                         ;display bus as decimal
  5771                                  
  5772                                                          call    ConInterpretPCIData                             ;update flags based on data
  5773                                  
  5774                                                          putConsoleString czSpace
  5775                                                          putConsoleString [wdConsolePCIVendorStr]
  5776                                                          putConsoleString czSpace
  5777                                                          putConsoleString [wdConsolePCIChipStr]
  5778                                                          putConsoleString czNewLine                              ;display new line
  5779                                  ;
  5780                                  ;       Step to next function, device, bus.
  5781                                  ;
  5782                                  .20                     inc     byte [ebx+PCI.function]                         ;next function
  5783                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  5784                                                          jb      .10                                             ;no, continue
  5785                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  5786                                                          inc     byte [ebx+PCI.device]                           ;next device
  5787                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  5788                                                          jb      .10                                             ;no, continue
  5789                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  5790                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  5791                                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  5792                                                          jb      .10                                             ;no, continue
  5793                                  ;
  5794                                  ;       Report if ethernet adapter found.
  5795                                  ;
  5796                                                          test    byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet h/w switch set?
  5797                                                          jz      .30                                             ;branch if no
  5798                                  
  5799                                                          putConsoleString czEthernetAdapterFound                 ;report adapter found
  5800                                  ;
  5801                                  ;       Read base address register 0 at offset 10h.
  5802                                  ;
  5803                                                          mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5804                                                          or      eax,10h                                         ;set function bits
  5805                                                          mov     dx,0cf8h                                        ;register port
  5806                                                          out     dx,eax                                          ;select register
  5807                                                          mov     dx,0cfch                                        ;data port
  5808                                                          in      eax,dx                                          ;register data
  5809                                                          mov     [wdConsoleEthernetMem],eax                      ;save ethernet memory mapped i/o addr
  5810                                  ;
  5811                                  ;       Report base address register 0 value.
  5812                                  ;
  5813                                                          mov     ecx,eax                                         ;unsigned integer param
  5814                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5815                                  
  5816                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5817                                                          putConsoleString czEthernetMemoryAddr                   ;ethernet I/O memory address label
  5818                                                          putConsoleString wzConsoleToken                         ;output string to console
  5819                                                          putConsoleString czNewLine                              ;output newline to console
  5820                                  ;
  5821                                  ;                       read base address register 2 at offset 18h
  5822                                  ;
  5823                                                          mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5824                                                          or      eax,18h                                         ;set function bits
  5825                                                          mov     dx,0cf8h                                        ;register port
  5826                                                          out     dx,eax                                          ;select register
  5827                                                          mov     dx,0cfch                                        ;data port
  5828                                                          in      eax,dx                                          ;register data
  5829                                                          and     al,0feh                                         ;clear bit zero
  5830                                                          mov     [wdConsoleEthernetPort],eax                     ;save ethernet i/o port
  5831                                  ;
  5832                                  ;                       report base address register 2 value
  5833                                  ;
  5834                                                          mov     ecx,eax                                         ;unsigned integer param
  5835                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5836                                  
  5837                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5838                                                          putConsoleString czEthernetPortAddr                     ;ethernet I/O port address label
  5839                                                          putConsoleString wzConsoleToken                         ;output string to console
  5840                                                          putConsoleString czNewLine                              ;output newline to console
  5841                                  ;
  5842                                  ;                       read ethernet control register using port i/o
  5843                                  ;
  5844                                                          mov     eax,[wdConsoleEthernetPort]                     ;ethernet i/o port
  5845                                                          mov     dx,ax                                           ;ethernet i/o port
  5846                                                          xor     eax,eax                                         ;control register (zero)
  5847                                                          out     dx,eax                                          ;select register
  5848                                                          add     dx,4                                            ;data register
  5849                                                          in      eax,dx                                          ;read register data
  5850                                                          mov     [wdConsoleEthernetCtrl],eax                     ;save ethernet control register value
  5851                                  ;
  5852                                  ;                       report adapter control register value
  5853                                  ;
  5854                                                          mov     ecx,eax                                         ;unsigned integer param
  5855                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5856                                  
  5857                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5858                                                          putConsoleString czEthCtrlPortVal                       ;ethernet control port value
  5859                                                          putConsoleString wzConsoleToken                         ;output string to console
  5860                                                          putConsoleString czNewLine                              ;output newline to console
  5861                                  ;
  5862                                  ;       Restore and return.
  5863                                  ;
  5864                                  .30                     pop     ebx                                             ;restore non-volatile regs
  5865                                                          ret                                                     ;return
  5866                                  ;-----------------------------------------------------------------------------------------------------------------------
  5867                                  ;
  5868                                  ;       Routine:        ConBuildPCIIdent
  5869                                  ;
  5870                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5871                                  ;                       Function code values.
  5872                                  ;
  5873                                  ;       In:             DS:EBX  PCI structure address
  5874                                  ;                       DS:EDX  output buffer address
  5875                                  ;
  5876                                  ;-----------------------------------------------------------------------------------------------------------------------
  5877                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5878                                                          mov     edi,edx                                         ;output buffer address
  5879                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  5880                                                          xor     ah,ah                                           ;zero high-order dividend
  5881                                                          mov     cl,100                                          ;divisor (10^2)
  5882                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  5883                                                          or      al,30h                                          ;apply ASCII zone
  5884                                                          cld                                                     ;forward strings
  5885                                                          stosb                                                   ;store 100's digit
  5886                                                          mov     al,ah                                           ;bus MOD 100
  5887                                                          xor     ah,ah                                           ;zero high-order dividend
  5888                                                          mov     cl,10                                           ;divisor (10^1)
  5889                                                          div     cl                                              ;AL=10's, AH=1's
  5890                                                          or      ax,3030h                                        ;apply ASCII zone
  5891                                                          stosw                                                   ;store 10's and 1's
  5892                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5893                                                          stosb                                                   ;store delimiter
  5894                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  5895                                                          xor     ah,ah                                           ;zero high order dividend
  5896                                                          mov     cl,10                                           ;divisor (10^1)
  5897                                                          div     cl                                              ;AL=10's, AH=1's
  5898                                                          or      ax,3030h                                        ;apply ASCII zone
  5899                                                          stosw                                                   ;store 10's and 1's
  5900                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5901                                                          stosb                                                   ;store delimiter
  5902                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  5903                                                          or      al,30h                                          ;apply ASCII zone
  5904                                                          stosb                                                   ;store 1's
  5905                                                          xor     al,al                                           ;null terminator
  5906                                                          stosb                                                   ;store terminator
  5907                                                          pop     edi                                             ;restore non-volatile regs
  5908                                                          ret                                                     ;return
  5909                                  ;-----------------------------------------------------------------------------------------------------------------------
  5910                                  ;
  5911                                  ;       Routine:        ConInterpretPCIData
  5912                                  ;
  5913                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  5914                                  ;
  5915                                  ;       In:             DS:EBX  PCI structure address
  5916                                  ;
  5917                                  ;-----------------------------------------------------------------------------------------------------------------------
  5918                                  ConInterpretPCIData     mov     eax,czApple
  5919                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  5920                                                          jne     .10                                             ;no, branch
  5921                                                          mov     edx,czUSBController
  5922                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  5923                                                          je      .40                                             ;yes, branch
  5924                                                          mov     edx,czOther                                     ;other
  5925                                                          jmp     .40                                             ;continue
  5926                                  .10                     mov     eax,czIntel                                     ;Intel
  5927                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  5928                                                          jne     .20                                             ;no, branch
  5929                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  5930                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  5931                                                          je      .40                                             ;yes, branch
  5932                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  5933                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  5934                                                          je      .40                                             ;yes, branch
  5935                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  5936                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  5937                                                          je      .40                                             ;yes, branch
  5938                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  5939                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  5940                                                          je      .40                                             ;yes, branch
  5941                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  5942                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  5943                                                          je      .40                                             ;yes, branch
  5944                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  5945                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  5946                                                          je      .40                                             ;yes, branch
  5947                                                          mov     edx,czOther                                     ;other
  5948                                                          jmp     .40                                             ;continue
  5949                                  .20                     mov     eax,czOracle                                    ;Oracle
  5950                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  5951                                                          jne     .30                                             ;no, branch
  5952                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  5953                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  5954                                                          je      .40                                             ;yes, branch
  5955                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  5956                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  5957                                                          je      .40                                             ;yes, branch
  5958                                                          mov     edx,czOther                                     ;other
  5959                                                          jmp     .40                                             ;continue
  5960                                  .30                     mov     eax,czOther                                     ;other
  5961                                                          mov     edx,czOther                                     ;other
  5962                                  .40                     mov     [wdConsolePCIVendorStr],eax                     ;save vendor string
  5963                                                          mov     [wdConsolePCIChipStr],edx                       ;save chip string
  5964                                  ;
  5965                                  ;       Set hardware flag if supported adapter found.
  5966                                  ;
  5967                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT Ethernet Adpater
  5968                                                          jne     .90                                             ;no, branch
  5969                                                          or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5970                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5971                                                          mov     [wdConsoleEthernetDevice],eax                   ;save as ethernet device selector
  5972                                  .90                     ret                                                     ;return
  5973                                  ;-----------------------------------------------------------------------------------------------------------------------
  5974                                  ;
  5975                                  ;       Routine:        ConSecond
  5976                                  ;
  5977                                  ;       Description:    This routine Handles the SECOND command.
  5978                                  ;
  5979                                  ;-----------------------------------------------------------------------------------------------------------------------
  5980                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5981                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5982                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5983                                                          putConsoleString  czNewLine                             ;write newline to console
  5984                                                          ret                                                     ;return
  5985                                  ;-----------------------------------------------------------------------------------------------------------------------
  5986                                  ;
  5987                                  ;       Routine:        ConTime
  5988                                  ;
  5989                                  ;       Description:    This routine Handles the TIME command.
  5990                                  ;
  5991                                  ;-----------------------------------------------------------------------------------------------------------------------
  5992                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5993                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5994                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5995                                                          putConsoleString  czNewLine                             ;write newline to console
  5996                                                          ret                                                     ;return
  5997                                  ;-----------------------------------------------------------------------------------------------------------------------
  5998                                  ;
  5999                                  ;       Routine:        ConVersion
  6000                                  ;
  6001                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6002                                  ;
  6003                                  ;-----------------------------------------------------------------------------------------------------------------------
  6004                                  ConVersion              putConsoleString czTitle                                ;display version message
  6005                                                          ret                                                     ;return
  6006                                  ;-----------------------------------------------------------------------------------------------------------------------
  6007                                  ;
  6008                                  ;       Routine:        ConWeekday
  6009                                  ;
  6010                                  ;       Description:    This routine handles the WEEKDAY command.
  6011                                  ;
  6012                                  ;-----------------------------------------------------------------------------------------------------------------------
  6013                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6014                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6015                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6016                                                          putConsoleString  czNewLine                             ;write newline to console
  6017                                                          ret                                                     ;return
  6018                                  ;-----------------------------------------------------------------------------------------------------------------------
  6019                                  ;
  6020                                  ;       Routine:        ConWeekdayName
  6021                                  ;
  6022                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6023                                  ;
  6024                                  ;-----------------------------------------------------------------------------------------------------------------------
  6025                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6026                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6027                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6028                                                          putConsoleString     czNewLine                                  ;write newline to console
  6029                                                          ret                                                             ;return
  6030                                  ;-----------------------------------------------------------------------------------------------------------------------
  6031                                  ;
  6032                                  ;       Routine:        ConYear
  6033                                  ;
  6034                                  ;       Description:    This routine Handles the YEAR command.
  6035                                  ;
  6036                                  ;-----------------------------------------------------------------------------------------------------------------------
  6037                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6038                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6039                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6040                                                          putConsoleString  czNewLine                             ;write newline to console
  6041                                                          ret                                                     ;return
  6042                                  ;-----------------------------------------------------------------------------------------------------------------------
  6043                                  ;
  6044                                  ;       Routine:        ConYearIsLeap
  6045                                  ;
  6046                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6047                                  ;
  6048                                  ;-----------------------------------------------------------------------------------------------------------------------
  6049                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6050                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6051                                  
  6052                                                          jecxz   .10                                             ;branch if not leap
  6053                                  
  6054                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6055                                  
  6056                                                          jmp     .20                                             ;continue
  6057                                  
  6058                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6059                                  .20                     ret                                                     ;return
  6060                                  ;-----------------------------------------------------------------------------------------------------------------------
  6061                                  ;
  6062                                  ;       Tables
  6063                                  ;
  6064                                  ;-----------------------------------------------------------------------------------------------------------------------
  6065                                                                                                                  ;---------------------------------------
  6066                                                                                                                  ;  Command Jump Table
  6067                                                                                                                  ;---------------------------------------
  6068                                  tConJmpTbl              equ     $                                               ;command jump table
  6069                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6070                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6071                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6072                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6073                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6074                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6075                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6076                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6077                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6078                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6079                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6080                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6081                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6082                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6083                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6084                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6085                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6086                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6087                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6088                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6089                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6090                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6091                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6092                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6093                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6094                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6095                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6096                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6097                                                                                                                  ;---------------------------------------
  6098                                                                                                                  ;  Command Name Table
  6099                                                                                                                  ;---------------------------------------
  6100                                  tConCmdTbl              equ     $                                               ;command name table
  6101                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6102                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6103                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6104                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6105                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6106                                                          db      8,"VERSION",0                                   ;version command
  6107                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6108                                                          db      7,"MALLOC",0                                    ;malloc command
  6109                                                          db      7,"MEMORY",0                                    ;memory command
  6110                                                          db      7,"MINUTE",0                                    ;minute command
  6111                                                          db      7,"SECOND",0                                    ;second command
  6112                                                          db      6,"CLEAR",0                                     ;clear command
  6113                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6114                                                          db      6,"MONTH",0                                     ;month command
  6115                                                          db      5,"DATE",0                                      ;date command
  6116                                                          db      5,"EXIT",0                                      ;exit command
  6117                                                          db      5,"FREE",0                                      ;free command
  6118                                                          db      5,"HOUR",0                                      ;hour command
  6119                                                          db      5,"INT6",0                                      ;int6 command
  6120                                                          db      5,"QUIT",0                                      ;quit command
  6121                                                          db      5,"TIME",0                                      ;time command
  6122                                                          db      5,"YEAR",0                                      ;year command
  6123                                                          db      4,"CLS",0                                       ;cls command
  6124                                                          db      4,"DAY",0                                       ;day command
  6125                                                          db      4,"MEM",0                                       ;mem command
  6126                                                          db      4,"VER",0                                       ;ver command
  6127                                                          db      0                                               ;end of table
  6128                                  ;-----------------------------------------------------------------------------------------------------------------------
  6129                                  ;
  6130                                  ;       Constants
  6131                                  ;
  6132                                  ;-----------------------------------------------------------------------------------------------------------------------
  6133                                  czApple                 db      "Apple",0                                       ;vendor name string
  6134                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6135                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6136                                  czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6137                                  czEthernetMemoryAddr    db      "Ethernet I/O memory address: ",0               ;ethernet I/O memory address
  6138                                  czEthernetPortAddr      db      "Ethernet I/O port address: ",0                 ;ethernet I/O port address
  6139                                  czEthCtrlPortVal        db      "Ethernet control port value: ",0               ;ethernet control port value
  6140                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6141                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6142                                  czKB                    db      "KB",0                                          ;Kilobytes
  6143                                  czNewLine               db      13,10,0                                         ;new line string
  6144                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6145                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6146                                  czOther                 db      "Other",0                                       ;default name string
  6147                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6148                                  czPeriod                db      ".",0                                           ;period delimiter
  6149                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6150                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6151                                  czPrompt                db      ":",0                                           ;prompt string
  6152                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6153                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6154                                  czSpace                 db      " ",0                                           ;space delimiter
  6155                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6156                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6157                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6158                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6159                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6160                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6161                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6162                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6163                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6164                                  %endif
  6165                                  %ifdef BUILDDISK
  6166                                  ;-----------------------------------------------------------------------------------------------------------------------
  6167                                  ;
  6168                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6169                                  ;
  6170                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6171                                  ;
  6172                                  ;-----------------------------------------------------------------------------------------------------------------------
  6173                                  section                 unused                                                  ;unused disk space
  6174                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6175                                  %endif
  6176                                  ;=======================================================================================================================
  6177                                  ;
  6178                                  ;       End of Program Code
  6179                                  ;
  6180                                  ;=======================================================================================================================
