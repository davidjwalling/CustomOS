     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.014
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to locate and report the ethernet adapter
     8                                  ;                       at start-up.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EHWF...         Hardware flags
   169                                  ;       EKEYF...        Keyboard status flags
   170                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   171                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   172                                  ;       EMEM...         Memory Management values
   173                                  ;       EMSG...         Message identifers
   174                                  ;
   175                                  ;=======================================================================================================================
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Hardware-Defined Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   184                                  ;
   185                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   186                                  ;       for CGA, EGA, VGA and compatible video modes.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   190                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   191                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   192                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ;
   195                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   196                                  ;
   197                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   198                                  ;
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   201                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   202                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   203                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   204                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8042 Keyboard Controller                                                EKEYB...
   208                                  ;
   209                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   210                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EKEYBPORTDATA           equ     060h                                            ;data port
   214                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   215                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   216                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   217                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   218                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   219                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   220                                                                                                                  ;---------------------------------------
   221                                                                                                                  ;       Keyboard Scan Codes
   222                                                                                                                  ;---------------------------------------
   223                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   224                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   225                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   226                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   227                                  EKEYBSLASH              equ     035h                                            ;slash
   228                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   229                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   230                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   231                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   232                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   233                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   234                                  EKEYBUP                 equ     080h                                            ;up
   235                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   236                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   237                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   238                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   239                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   240                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   241                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   242                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   243                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   244                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   245                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   246                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  ;
   249                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   250                                  ;
   251                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   252                                  ;       external devices and signals a hardware interrupt to the CPU.
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   256                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   257                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   258                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   259                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       8253 Programmable Interval Timer                                        EPIT...
   263                                  ;
   264                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   265                                  ;       approximately 18.2 times per second.
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 CPU Architecture                                                    ;EX86...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   301                                  ;
   302                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   303                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   304                                  ;
   305                                  ;       0.......        Segment is not present in memory (triggers int 11)
   306                                  ;       1.......        Segment is present in memory
   307                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   308                                  ;       ...0....        Segment is a system segment
   309                                  ;       ...00010                Local Descriptor Table
   310                                  ;       ...00101                Task Gate
   311                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   312                                  ;       ...01100                Call Gate (386)
   313                                  ;       ...01110                Interrupt Gate (386)
   314                                  ;       ...01111                Trap Gate (386)
   315                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   316                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   317                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   318                                  ;
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   321                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   322                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   323                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   324                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   325                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   326                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   327                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       Firmware-Defined Values
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   336                                  ;
   337                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   338                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   342                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   343                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   344                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   345                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   346                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   347                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   348                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   349                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   350                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   351                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Standards-Based Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       ASCII                                                                   EASCII...
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   363                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   364                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   365                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   366                                  EASCIISPACE             equ     020h                                            ;space
   367                                  EASCIIPERIOD            equ     02Eh                                            ;period
   368                                  EASCIIUPPERA            equ     041h                                            ;'A'
   369                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   370                                  EASCIILOWERA            equ     061h                                            ;'a'
   371                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   372                                  EASCIITILDE             equ     07Eh                                            ;'~'
   373                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   374                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   375                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   376                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   377                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   378                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   379                                  EASCIICASE              equ     00100000b                                       ;case bit
   380                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  ;
   383                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   384                                  ;
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EPCIPORTCONFIGADDRHI    equ     00Ch                                            ;PCI configuration address port hi-order
   387                                  EPCIPORTCONFIGADDRLO    equ     0F8h                                            ;PCI configuration address port lo-order
   388                                  EPCIPORTCONFIGDATAHI    equ     00Ch                                            ;PCI configuration data port hi-order
   389                                  EPCIPORTCONFIGDATALO    equ     0FCh                                            ;PCI configuration data port lo-order
   390                                  EPCIVENDORAPPLE         equ     0106Bh                                          ;Apple
   391                                  EPCIVENDORINTEL         equ     08086h                                          ;Intel
   392                                  EPCIVENDORORACLE        equ     080EEh                                          ;Oracle
   393                                  EPCIAPPLEUSB            equ     0003Fh                                          ;USB Controller
   394                                  EPCIINTELPRO1000MT      equ     0100Fh                                          ;Pro/1000 MT Ethernet Adapter
   395                                  EPCIINTELPCIMEM         equ     01237h                                          ;PCI & Memory
   396                                  EPCIINTELAD1881         equ     02415h                                          ;Aureal AD1881 SOUNDMAX
   397                                  EPCIINTELPIIX3          equ     07000h                                          ;PIIX3 PCI-to-ISA Bridge (Triton II)
   398                                  EPCIINTEL82371AB        equ     07111h                                          ;82371AB/EB PCI Bus Master IDE Cntrlr
   399                                  EPCIINTELPIIX4          equ     07113h                                          ;PIIX4/4E/4M Power Mgmt Cntrlr
   400                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   401                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;
   404                                  ;       Operating System Values
   405                                  ;
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ;
   409                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   410                                  ;
   411                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   412                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   413                                  ;
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   416                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   417                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   418                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   419                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   420                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   421                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;       Console Constants                                                       ECON...
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ECONCOLS                equ     80                                              ;columns per row
   426                                  ECONROWS                equ     24                                              ;console rows
   427                                  ECONOIAROW              equ     24                                              ;operator information area row
   428                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   429                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   430                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   431                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   432                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   437                                  EGDTCGA                 equ     020h                                            ;cga video selector
   438                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   439                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   440                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   441                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   442                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   443                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;       Hardware Flags                                                          EHWF...
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;       Keyboard Flags                                                          EKEYF...
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   452                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   453                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   454                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   455                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   456                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   457                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   458                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   459                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   460                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   461                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ;       Kernel Constants                                                        EKRN...
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   466                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   467                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   468                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   469                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   470                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;       Memory Management Constants                                             EMEM...
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   479                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   480                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   481                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  ;       Message Identifiers                                                     EMSG...
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   486                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   487                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   488                                  ;=======================================================================================================================
   489                                  ;
   490                                  ;       Structures
   491                                  ;
   492                                  ;=======================================================================================================================
   493                                  ;-----------------------------------------------------------------------------------------------------------------------
   494                                  ;
   495                                  ;       DATETIME
   496                                  ;
   497                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  struc                   DATETIME
   501 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   502 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   503 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   504 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   505 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   506 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   507 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   508 00000007 <res 00000001>          .century                resb    1                                               ;century
   509                                  EDATETIMELEN            equ     ($-.second)
   510                                  endstruc
   511                                  ;-----------------------------------------------------------------------------------------------------------------------
   512                                  ;
   513                                  ;       ETHER
   514                                  ;
   515                                  ;       The ETHER structure defines an Ethernet adapter context.
   516                                  ;
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  struc                   ETHER
   519 00000000 <res 00000004>          .selector               resd    1                                               ;PCI selector
   520                                  .devicevendor           equ     $                                               ;device id | vendor id
   521 00000004 <res 00000002>          .vendor                 resw    1                                               ;vendor id
   522 00000006 <res 00000002>          .device                 resw    1                                               ;device id
   523                                  .statuscommand          equ     $                                               ;status reg | command reg
   524 00000008 <res 00000002>          .commandreg             resw    1                                               ;command register
   525 0000000A <res 00000002>          .statusreg              resw    1                                               ;status register
   526 0000000C <res 00000004>          .classrev               resd    1                                               ;class code | revision id
   527 00000010 <res 00000004>          .misc                   resd    1                                               ;BIST | Hdr | latency | cache
   528 00000014 <res 00000004>          .mmio                   resd    1                                               ;memory mapped i/o address (bar 0)
   529 00000018 <res 00000004>          .flash                  resd    1                                               ;flash base address (bar 1)
   530 0000001C <res 00000004>          .port                   resd    1                                               ;i/o port (base 2)
   531 00000020 <res 00000006>          .mac                    resb    6                                               ;mac address
   532 00000026 <res 00000001>          .irq                    resb    1                                               ;h/w interrupt request line (IRQ)
   533                                  EETHERLEN               equ     ($-.selector)
   534                                  endstruc
   535                                  ;-----------------------------------------------------------------------------------------------------------------------
   536                                  ;
   537                                  ;       MEMBLOCK
   538                                  ;
   539                                  ;       The MEMBLOCK structure defines a memory block.
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  struc                   MEMBLOCK
   543 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   544 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   545 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   546 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   547 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   548 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   549 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   550 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   551                                  EMEMBLOCKLEN            equ     ($-.signature)
   552                                  endstruc
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ;
   555                                  ;       MEMROOT
   556                                  ;
   557                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   558                                  ;
   559                                  ;-----------------------------------------------------------------------------------------------------------------------
   560                                  struc                   MEMROOT
   561 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   562 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   563 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   564 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   565 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   566 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   567                                  EMEMROOTLEN             equ     ($-.firstcontig)
   568                                  endstruc
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  ;
   571                                  ;       MQUEUE
   572                                  ;
   573                                  ;       The MQUEUE structure maps memory used for a message queue.
   574                                  ;
   575                                  ;-----------------------------------------------------------------------------------------------------------------------
   576                                  struc                   MQUEUE
   577 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   578 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   579 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   580                                  endstruc
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  ;
   583                                  ;       PCI
   584                                  ;
   585                                  ;       The PCI structure defines a PCI bus, device and function context.
   586                                  ;
   587                                  ;-----------------------------------------------------------------------------------------------------------------------
   588                                  struc                   PCI
   589 00000000 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   590 00000001 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   591 00000002 <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   592 00000003 <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   593 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
   594                                  .configdata             equ     $                                               ;data read from port 0CFCh
   595 00000008 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   596 0000000A <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   597 0000000C <res 00000004>          .vendorstr              resd    1                                               ;vendor name const string addr
   598 00000010 <res 00000004>          .chipstr                resd    1                                               ;chip name const string addr
   599                                  EPCILEN                 equ     ($-.configdata)
   600                                  endstruc
   601                                  ;-----------------------------------------------------------------------------------------------------------------------
   602                                  ;
   603                                  ;       OSDATA
   604                                  ;
   605                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   606                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   607                                  ;
   608                                  ;-----------------------------------------------------------------------------------------------------------------------
   609                                  struc                   OSDATA
   610 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   611 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   612 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   613 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   614 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   615 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   616 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   617 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   618 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   619 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   620 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   621 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   622 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   623 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   624 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   625 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   626 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   627 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   628 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   629 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   630 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   631 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   632 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   633 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   634 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   635 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   636 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   637 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   638 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   639 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   640 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   641 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   642 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   643 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   644 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   645 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   646 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   647 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   648 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   649 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   650 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   651 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   652 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   653 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   654 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   655 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   656 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   657 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   658 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   659 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   660 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   661 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   662 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   663 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   664 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   665 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   666 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   667 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   668 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   669 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   670 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   671 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   672 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   673 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   674 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   675 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   676 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   677 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   678 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   679 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   680 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   681 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   682 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   683 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   684 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   685 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   686 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   687 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   688 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   689 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   690 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   691 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   692 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   693 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   694 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   695 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   696 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   697 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   698 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   699 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   700 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   701 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   702 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   703 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   704 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   705 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   706 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   707 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   708 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   709 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   710 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   711                                  ;-----------------------------------------------------------------------------------------------------------------------
   712                                  ;
   713                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   714                                  ;
   715                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   716                                  ;
   717                                  ;-----------------------------------------------------------------------------------------------------------------------
   718                                  ECONDATA                equ     ($)
   719 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   720 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   721 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   722 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   723 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   724 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   725 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   726 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   727 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   728 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   729 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   730 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   731 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   732 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   733 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   734 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   735 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   736 00000820 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   737 00000821 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   738 00000871 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   739 000008C1 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   740 00000911 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   741 0000091C <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   742 00000927 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   743 00000932 <res 00000009>          wzConsolePCIIdent       resb    9                                               ;PCI ident zzz.zz.z\0
   744 0000093B <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   745 00000953 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   746 0000095B <res 0000000C>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   747 00000967 <res 00000027>          wsConsoleEther          resb    EETHERLEN                                       ;ethernet context
   748                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   749                                  ;-----------------------------------------------------------------------------------------------------------------------
   750                                  ;
   751                                  ;       End of OS Variables
   752                                  ;
   753                                  ;-----------------------------------------------------------------------------------------------------------------------
   754                                  endstruc
   755                                  ;-----------------------------------------------------------------------------------------------------------------------
   756                                  ;
   757                                  ;       Macros
   758                                  ;
   759                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   760                                  ;
   761                                  ;-----------------------------------------------------------------------------------------------------------------------
   762                                  %macro                  mint    1
   763                                  _%1                     equ     ($-$$) / EX86DESCLEN
   764                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   765                                  %endmacro
   766                                  %macro                  mtrap   1
   767                                  _%1                     equ     ($-$$) / EX86DESCLEN
   768                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   769                                  %endmacro
   770                                  %macro                  menter  1
   771                                  ?%1                     equ     ($-$$)
   772                                  %endmacro
   773                                  %macro                  tsvce   1
   774                                  e%1                     equ     ($-tsvc)/4
   775                                                          dd      %1
   776                                  %endmacro
   777                                  %ifdef BUILDBOOT
   778                                  ;=======================================================================================================================
   779                                  ;
   780                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   781                                  ;
   782                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   783                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   784                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   785                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   786                                  ;
   787                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   788                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   789                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   790                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   791                                  ;       immediately followed by a disk parameter table.
   792                                  ;
   793                                  ;=======================================================================================================================
   794                                                          cpu     8086                                            ;assume minimal CPU
   795                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   796                                                          bits    16                                              ;16-bit code at power-up
   797                                  %ifdef BUILDPREP
   798                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   799                                  %else
   800 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   801                                  %endif
   802                                  ;-----------------------------------------------------------------------------------------------------------------------
   803                                  ;
   804                                  ;       Disk Parameter Table
   805                                  ;
   806                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   807                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   808                                  ;
   809                                  ;-----------------------------------------------------------------------------------------------------------------------
   810 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   811 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   812 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   813 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   814 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   815 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   816 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   817 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   818 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   819                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   820 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   821 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   822 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   823                                  ;
   824                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   825                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   826                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   827                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   828                                  ;       given several possible starting values for CS:IP.
   829                                  ;
   830                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   831 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   832                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   833 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   834 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   835 00000025 B104                                            mov     cl,4                                            ;shift count
   836 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   837 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   838 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   839                                  ;
   840                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   841                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   842                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   843                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   844                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   845                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   846                                  ;
   847 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   848 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   849 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   850 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   851 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   852                                  ;
   853                                  ;       Our boot addressability is now set up according to the following diagram.
   854                                  ;
   855                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   856                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   857                                  ;                               |  256 = 100h bytes                             |
   858                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   859                                  ;                               |  Boot Sector (vstart=0100h)                   |
   860                                  ;                               |  1 sector = 512 = 200h bytes                  |
   861                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   862                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   863                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   864                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   865                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   866                                  ;                               |  2 sectors = 1024 = 400h bytes
   867                                  ;                       009400  +-----------------------------------------------+ DS:1900
   868                                  ;
   869                                  ;       On entry, DL indicates the drive being booted from.
   870                                  ;
   871 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   872                                  ;
   873                                  ;       Compute directory i/o buffer address.
   874                                  ;
   875 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   876 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   877 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   878 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   879                                  ;
   880                                  ;       Compute segment where os.com will be loaded.
   881                                  ;
   882 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   883 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   884 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   885 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   886                                  ;
   887                                  ;       Set the video mode to 80 column, 25 row, text.
   888                                  ;
   889 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   890 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   891                                  ;
   892                                  ;       Write a message to the console so we know we have our addressability established.
   893                                  ;
   894 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   895 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   896                                  ;
   897                                  ;       Initialize the number of directory sectors to search.
   898                                  ;
   899 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   900 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   901                                  ;
   902                                  ;       Compute number of directory sectors and initialize overhead count.
   903                                  ;
   904 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   905 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   906 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   907 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   908                                  ;
   909                                  ;       Compute directory entries per sector.
   910                                  ;
   911 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   912 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   913 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   914                                  ;
   915                                  ;       Compute first logical directory sector and update overhead count.
   916                                  ;
   917 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   918 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   919 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   920 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   921 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   922 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   923                                  ;
   924                                  ;       Read directory sector.
   925                                  ;
   926 0000008E B001                    .30                     mov     al,1                                            ;sector count
   927 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   928 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   929 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   930                                  ;
   931                                  ;       Setup variables to search this directory sector.
   932                                  ;
   933 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   934 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   935 000000A1 7603                                            jna     .40                                             ;no, continue
   936 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   937 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   938 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   939 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   940                                  ;
   941                                  ;       Loop through directory sectors searching for kernel program.
   942                                  ;
   943 000000B1 56                      .50                     push    si                                              ;save kernel name address
   944 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   945 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   946 000000B6 FC                                              cld                                                     ;forward strings
   947 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   948 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   949 000000BA 5E                                              pop     si                                              ;restore kernel name address
   950 000000BB 7418                                            je      .60                                             ;exit loop if found
   951 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   952 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   953 000000C2 75ED                                            jnz     .50                                             ;next entry
   954                                  ;
   955                                  ;       Repeat search if we are not at the end of the directory.
   956                                  ;
   957 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   958 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   959 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   960 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   961 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   962                                  ;
   963                                  ;       If we find the kernel program in the directory, read the FAT.
   964                                  ;
   965 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   966 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   967 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   968 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   969 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   970 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   971                                  ;
   972                                  ;       Get the starting cluster of the kernel program and target address.
   973                                  ;
   974 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   975 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   976                                  ;
   977                                  ;       Read each program cluster into RAM.
   978                                  ;
   979 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   980 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   981 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   982 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   983 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   984 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   985 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   986 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   987 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   988                                  ;
   989                                  ;       Update buffer pointer for next cluster.
   990                                  ;
   991 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   992 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   993 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   994 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   995 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   996                                  ;
   997                                  ;       Compute next cluster number.
   998                                  ;
   999 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
  1000 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
  1001 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
  1002 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
  1003 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
  1004 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
  1005 00000120 83E701                                          and     di,1                                            ;get low bit
  1006 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
  1007 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1008 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1009                                  ;
  1010                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1011                                  ;
  1012 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1013 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1014 00000130 B104                                            mov     cl,4                                            ;shift count
  1015 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1016 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1017 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1018 0000013A 75B2                                            jne     .70                                             ;no, continue
  1019                                  ;
  1020                                  ;       Transfer control to the operating system program.
  1021                                  ;
  1022 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1023 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1024 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1025                                  ;
  1026                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1027                                  ;
  1028 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1029 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1030 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1031 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1032 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1033 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1034 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1035 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1036 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1037 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1038                                  ;
  1039                                  ;       Try maxtries times to read sector.
  1040                                  ;
  1041 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1042 00000160 53                      .10                     push    bx                                              ;save buffer address
  1043 00000161 51                                              push    cx                                              ;save retry count
  1044 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1045 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1046 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1047 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1048 0000016F 59                                              pop     cx                                              ;restore retry count
  1049 00000170 5B                                              pop     bx                                              ;restore buffer address
  1050 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1051 00000173 E2EB                                            loop    .10                                             ;retry
  1052                                  ;
  1053                                  ;       Handle disk error: convert to ASCII and store in error string.
  1054                                  ;
  1055 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1056 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1057 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1058 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1059 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1060 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1061 00000183 7203                                            jb      .20                                             ;continue if numeral
  1062 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1063 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1064 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1065 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1066 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1067 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1068 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1069                                  ;
  1070                                  ;       Wait for a key press.
  1071                                  ;
  1072 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1073 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1074 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1075 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1076 0000019F F4                                              hlt                                                     ;wait for interrupt
  1077 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1078                                  ;
  1079                                  ;       Reset the system.
  1080                                  ;
  1081 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1082 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1083 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1084 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1085 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1086                                  ;
  1087                                  ;       Display text message.
  1088                                  ;
  1089 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1090 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1091 000001AC 84C0                                            test    al,al                                           ;end of string?
  1092 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1093 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1094 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1095 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1096 000001B6 C3                      BootReturn              ret                                                     ;return
  1097                                  ;-----------------------------------------------------------------------------------------------------------------------
  1098                                  ;
  1099                                  ;       Constants
  1100                                  ;
  1101                                  ;-----------------------------------------------------------------------------------------------------------------------
  1102 000001B7 90                                              align   2
  1103 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1104 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1104 000001C3 4F4D               
  1105 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1105 000001CE 530D0A00           
  1106 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1106 000001DB 7220               
  1107 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1108 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1108 000001E9 6700               
  1109                                  ;-----------------------------------------------------------------------------------------------------------------------
  1110                                  ;
  1111                                  ;       Work Areas
  1112                                  ;
  1113                                  ;-----------------------------------------------------------------------------------------------------------------------
  1114 000001EB 90                                              align   2
  1115 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1116 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1117 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1118 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1119 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1120                                  wwReadCountCommand      equ     $                                               ;read count and command
  1121 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1122 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1123                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1124 000001F8 00                      wbDrive                 db      0                                               ;drive
  1125 000001F9 00                      wbHead                  db      0                                               ;head
  1126                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1127 000001FA 00                                              db      0                                               ;sector
  1128 000001FB 00                      wbTrack                 db      0                                               ;track
  1129 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1130 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1131                                  %endif
  1132                                  %ifdef BUILDPREP
  1133                                  ;=======================================================================================================================
  1134                                  ;
  1135                                  ;       Diskette Preparation Code
  1136                                  ;
  1137                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1138                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1139                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1140                                  ;
  1141                                  ;=======================================================================================================================
  1142                                  ;
  1143                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1144                                  ;
  1145                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1146                                                          call    BootPrint                                       ;display message
  1147                                  ;
  1148                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1149                                  ;
  1150                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1151                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1152                                                          jnz     .20                                             ;continue if key pressed
  1153                                                          sti                                                     ;enable interrupts
  1154                                                          hlt                                                     ;wait for interrupt
  1155                                                          jmp     .10                                             ;repeat
  1156                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1157                                                          je      .30                                             ;yes, branch
  1158                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1159                                                          jne     .10                                             ;no, repeat
  1160                                                          jmp     .120                                            ;yes, exit program
  1161                                  ;
  1162                                  ;       Display writing-sector message and patch the JMP instruction.
  1163                                  ;
  1164                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1165                                                          call    BootPrint                                       ;display message
  1166                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1167                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1168                                                          mov     [bx],ax                                         ;update the JMP instruction
  1169                                  ;
  1170                                  ;       Try to read the boot sector.
  1171                                  ;
  1172                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1173                                  .40                     push    cx                                              ;save remaining tries
  1174                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1175                                                          mov     dx,0                                            ;head zero, drive zero
  1176                                                          mov     cx,1                                            ;track zero, sector one
  1177                                                          mov     al,1                                            ;one sector
  1178                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1179                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1180                                                          pop     cx                                              ;restore remaining retries
  1181                                                          jnc     .50                                             ;skip ahead if successful
  1182                                                          loop    .40                                             ;try again
  1183                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1184                                                          jmp     .70                                             ;branch to error routine
  1185                                  ;
  1186                                  ;       Copy diskette parms from input buffer to output buffer.
  1187                                  ;
  1188                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1189                                                          add     si,11                                           ;skip over JMP and system ID
  1190                                                          mov     di,Boot                                         ;output buffer address
  1191                                                          add     di,11                                           ;skip over JMP and system ID
  1192                                                          mov     cx,19                                           ;length of diskette parameters
  1193                                                          cld                                                     ;forward string copies
  1194                                                          rep     movsb                                           ;copy diskette parameters
  1195                                  ;
  1196                                  ;       Try to write boot sector to diskette.
  1197                                  ;
  1198                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1199                                  .60                     push    cx                                              ;save remaining tries
  1200                                                          mov     bx,Boot                                         ;output buffer address
  1201                                                          mov     dx,0                                            ;head zero, drive zero
  1202                                                          mov     cx,1                                            ;track zero, sector one
  1203                                                          mov     al,1                                            ;one sector
  1204                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1205                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1206                                                          pop     cx                                              ;restore remaining retries
  1207                                                          jnc     .100                                            ;skip ahead if successful
  1208                                                          loop    .60                                             ;try again
  1209                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1210                                  ;
  1211                                  ;       Convert the error code to ASCII and display the error message.
  1212                                  ;
  1213                                  .70                     push    ax                                              ;save error code
  1214                                                          mov     al,ah                                           ;copy error code
  1215                                                          mov     ah,0                                            ;AX = error code
  1216                                                          mov     dl,10h                                          ;hexadecimal divisor
  1217                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1218                                                          or      ax,03030h                                       ;add ASCII zone digits
  1219                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1220                                                          jb      .80                                             ;yes, continue
  1221                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1222                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1223                                                          jb      .90                                             ;yes, continue
  1224                                                          add     al,7                                            ;no, make ASCII
  1225                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1226                                                          call    BootPrint                                       ;write error message
  1227                                                          pop     ax                                              ;restore error code
  1228                                  ;
  1229                                  ;       Display the completion message.
  1230                                  ;
  1231                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1232                                                          mov     al,ah                                           ;BIOS return code
  1233                                                          cmp     al,0                                            ;success?
  1234                                                          je      .110                                            ;yes, continue
  1235                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1236                                                          cmp     al,1                                            ;disk parameter error?
  1237                                                          je      .110                                            ;yes, continue
  1238                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1239                                                          cmp     al,2                                            ;address mark not found?
  1240                                                          je      .110                                            ;yes, continue
  1241                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1242                                                          cmp     al,3                                            ;protected disk?
  1243                                                          je      .110                                            ;yes, continue
  1244                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1245                                                          cmp     al,6                                            ;diskette removed?
  1246                                                          je      .110                                            ;yes, continue
  1247                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1248                                                          cmp     al,80H                                          ;drive timed out?
  1249                                                          je      .110                                            ;yes, continue
  1250                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1251                                  .110                    call    BootPrint                                       ;display result message
  1252                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1253                                                          int     021h                                            ;terminate DOS program
  1254                                                          ret                                                     ;return (should not execute)
  1255                                  ;-----------------------------------------------------------------------------------------------------------------------
  1256                                  ;
  1257                                  ;       Diskette Preparation Messages
  1258                                  ;
  1259                                  ;-----------------------------------------------------------------------------------------------------------------------
  1260                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1261                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1262                                                          db      13,10
  1263                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1264                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1265                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1266                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1267                                                          db      13,10,0
  1268                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1269                                                          db      13,10,0
  1270                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1271                                                          db      13,10,0
  1272                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1273                                                          db      13,10,0
  1274                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1275                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1276                                                          db      13,10,0
  1277                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1278                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1279                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1280                                                          db      13,10,"and retry."
  1281                                                          db      13,10,0
  1282                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1283                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1284                                                          db      13,10,"using another diskette."
  1285                                                          db      13,10,0
  1286                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1287                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1288                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1289                                                          db      13,10,0
  1290                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1291                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1292                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1293                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1294                                                          db      13,10,"is properly inserted in the diskette drive."
  1295                                                          db      13,10,0
  1296                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1297                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1298                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1299                                                          db      13,10,0
  1300                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1301                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1302                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1303                                                          db      13,10,0
  1304                                  wcPrepInBuf             equ     $
  1305                                  %endif
  1306                                  %ifdef BUILDDISK
  1307                                  ;=======================================================================================================================
  1308                                  ;
  1309                                  ;       File Allocation Tables
  1310                                  ;
  1311                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1312                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1313                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1314                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1315                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1316                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1317                                  ;       the last cluster in the chain.
  1318                                  ;
  1319                                  ;       Every three bytes encode two FAT entries as follows:
  1320                                  ;
  1321                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1322                                  ;
  1323                                  ;=======================================================================================================================
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  ;
  1326                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1327                                  ;
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                  section                 fat1                                                    ;first copy of FAT
  1330                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1331                                                          db      005h,060h,000h, 007h,080h,000h
  1332                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1333                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1334                                                          db      011h,020h,001h, 013h,040h,001h
  1335                                                          db      015h,060h,001h, 017h,080h,001h
  1336                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1337                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1338                                                          db      021h,020h,002h, 023h,040h,002h
  1339                                                          db      025h,060h,002h, 027h,080h,002h
  1340                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1341                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1342                                  ;-----------------------------------------------------------------------------------------------------------------------
  1343                                  ;
  1344                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1345                                  ;
  1346                                  ;-----------------------------------------------------------------------------------------------------------------------
  1347                                  section                 fat2                                                    ;second copy of FAT
  1348                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1349                                                          db      005h,060h,000h, 007h,080h,000h
  1350                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1351                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1352                                                          db      011h,020h,001h, 013h,040h,001h
  1353                                                          db      015h,060h,001h, 017h,080h,001h
  1354                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1355                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1356                                                          db      021h,020h,002h, 023h,040h,002h
  1357                                                          db      025h,060h,002h, 027h,080h,002h
  1358                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1359                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1360                                  ;-----------------------------------------------------------------------------------------------------------------------
  1361                                  ;
  1362                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1363                                  ;
  1364                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1365                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1366                                  ;       copy.
  1367                                  ;
  1368                                  ;-----------------------------------------------------------------------------------------------------------------------
  1369                                  section                 dir                                                     ;diskette directory
  1370                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1371                                                          db      020h                                            ;attribute (archive bit set)
  1372                                                          times   10 db 0                                         ;unused
  1373                                                          dw      0h                                              ;time
  1374                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1375                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1376                                                          dw      2                                               ;first cluster
  1377                                                          dd      05400h                                          ;file size
  1378                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1379                                  %endif
  1380                                  %ifdef BUILDCOM
  1381                                  ;=======================================================================================================================
  1382                                  ;
  1383                                  ;       OS.COM
  1384                                  ;
  1385                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1386                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1387                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1388                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1389                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1390                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1391                                  ;
  1392                                  ;       Our loader addressability is set up according to the following diagram.
  1393                                  ;
  1394                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1395                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1396                                  ;                               |  256 = 100h bytes                             |
  1397                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1398                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1399                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1400                                  ;                       007e00  +-----------------------------------------------+
  1401                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1402                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1403                                  ;                               |                                               |
  1404                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1405                                  ;                               |                                               |
  1406                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1407                                  ;                               |  Loader Code                                  |
  1408                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1409                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1410                                  ;
  1411                                  ;=======================================================================================================================
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                  ;
  1414                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1415                                  ;
  1416                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1417                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1418                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1419                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1420                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1421                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1422                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1423                                  ;       registers.
  1424                                  ;
  1425                                  ;-----------------------------------------------------------------------------------------------------------------------
  1426                                                          cpu     8086                                            ;assume minimal CPU
  1427                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1428                                                          bits    16                                              ;this is 16-bit code
  1429                                  Loader                  push    cs                                              ;use the code segment
  1430                                                          pop     ds                                              ;...as our data segment
  1431                                                          push    cs                                              ;use the code segment
  1432                                                          pop     es                                              ;...as our extra segment
  1433                                  ;
  1434                                  ;       Write a message to the console so we know we have our addressability established.
  1435                                  ;
  1436                                                          mov     si,czStartingMsg                                ;starting message
  1437                                                          call    PutTTYString                                    ;display loader message
  1438                                  ;
  1439                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1440                                  ;
  1441                                                          call    GetCPUType                                      ;AL = cpu type
  1442                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1443                                                          cmp     al,3                                            ;80386+?
  1444                                                          jb      LoaderExit                                      ;no, exit with error message
  1445                                                          cpu     386                                             ;allow 80386 instructions
  1446                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1447                                                          call    PutTTYString                                    ;display message
  1448                                  ;
  1449                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1450                                  ;
  1451                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1452                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1453                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1454                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1455                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1456                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1457                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1458                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1459                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1460                                                          call    PutTTYString                                    ;display message
  1461                                  ;
  1462                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1463                                  ;
  1464                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1465                                                          pop     es                                              ;... as target segment
  1466                                                          xor     di,di                                           ;ES:DI = target address
  1467                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1468                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1469                                                          cld                                                     ;forward strings
  1470                                                          rep     movsb                                           ;copy kernel image
  1471                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1472                                                          call    PutTTYString                                    ;display message
  1473                                  ;
  1474                                  ;       Switch to protected mode.
  1475                                  ;
  1476                                                          xor     si,si                                           ;ES:SI = gdt addr
  1477                                                          mov     ss,si                                           ;protected mode ss
  1478                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1479                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1480                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1481                                                          mov     dx,001Fh                                        ;outer delay loop count
  1482                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1483                                                          loop    $                                               ;wait out pending interrupts
  1484                                                          dec     dx                                              ;restore outer loop count
  1485                                                          jnz     .10                                             ;continue outer loop
  1486                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1487                                  ;
  1488                                  ;       Enable hardware and maskable interrupts.
  1489                                  ;
  1490                                                          xor     al,al                                           ;enable all registers code
  1491                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1492                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1493                                                          sti                                                     ;enable maskable interrupts
  1494                                  ;
  1495                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1496                                  ;
  1497                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1498                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1499                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1500                                  ;-----------------------------------------------------------------------------------------------------------------------
  1501                                  ;
  1502                                  ;       Routine:        LoaderExit
  1503                                  ;
  1504                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1505                                  ;
  1506                                  ;       In:             DS:SI   string address
  1507                                  ;
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509                                  LoaderExit              call    PutTTYString                                    ;display error message
  1510                                  ;
  1511                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1512                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1513                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1514                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1515                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1516                                  ;
  1517                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1518                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1519                                                          jnz     .40                                             ;exit if key pressed
  1520                                                          sti                                                     ;enable maskable interrupts
  1521                                                          hlt                                                     ;wait for interrupt
  1522                                                          jmp     .30                                             ;repeat until keypress
  1523                                  ;
  1524                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1525                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1526                                  ;       HLT until the system resets.
  1527                                  ;
  1528                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1529                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1530                                  .50                     sti                                                     ;enable maskable interrupts
  1531                                                          hlt                                                     ;stop until reset, int, nmi
  1532                                                          jmp     .50                                             ;loop until restart kicks in
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  ;
  1535                                  ;       Routine:        GetCPUType
  1536                                  ;
  1537                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1538                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1539                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1540                                  ;
  1541                                  ;       Out:            AX      0 = 808x, v20, etc.
  1542                                  ;                               1 = 80186
  1543                                  ;                               2 = 80286
  1544                                  ;                               3 = 80386
  1545                                  ;
  1546                                  ;-----------------------------------------------------------------------------------------------------------------------
  1547                                  GetCPUType              mov     al,1                                            ;AL = 1
  1548                                                          mov     cl,32                                           ;shift count
  1549                                                          shr     al,cl                                           ;try a 32-bit shift
  1550                                                          or      al,al                                           ;did the shift happen?
  1551                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1552                                                          cpu     186
  1553                                                          push    sp                                              ;save stack pointer
  1554                                                          pop     cx                                              ;...into cx
  1555                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1556                                                          jne     .10                                             ;yes, cpu is 80186
  1557                                                          cpu     286
  1558                                                          inc     ax                                              ;AX = 2
  1559                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1560                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1561                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1562                                                          jz      .10                                             ;yes, cpu is 80286
  1563                                                          inc     ax                                              ;AX = 3
  1564                                  .10                     ret                                                     ;return
  1565                                  ;-----------------------------------------------------------------------------------------------------------------------
  1566                                  ;
  1567                                  ;       Routine:        PutTTYString
  1568                                  ;
  1569                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1570                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1571                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1572                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1573                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1574                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1575                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1576                                  ;                       to LODSB is not needed.
  1577                                  ;
  1578                                  ;       In:             DS:SI   address of string
  1579                                  ;
  1580                                  ;       Out:            DF      0
  1581                                  ;                       ZF      1
  1582                                  ;                       AL      0
  1583                                  ;
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  PutTTYString            cld                                                     ;forward strings
  1586                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1587                                                          test    al,al                                           ;end of string?
  1588                                                          jz      .20                                             ;... yes, exit our loop
  1589                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1590                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1591                                                          jmp     .10                                             ;repeat until done
  1592                                  .20                     ret                                                     ;return
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                  ;
  1595                                  ;       Loader Data
  1596                                  ;
  1597                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1598                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                                          align   2
  1602                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1603                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1604                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1605                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1606                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1607                                                          db      "Please press any key to restart the computer.",13,10,0
  1608                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1609                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1610                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1611                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1612                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1613                                  ;=======================================================================================================================
  1614                                  ;
  1615                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1616                                  ;
  1617                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1618                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1619                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1620                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1621                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1622                                  ;
  1623                                  ;=======================================================================================================================
  1624                                  ;=======================================================================================================================
  1625                                  ;
  1626                                  ;       Kernel Tables
  1627                                  ;
  1628                                  ;=======================================================================================================================
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  ;
  1631                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1632                                  ;
  1633                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1634                                  ;       first descriptor must be all nulls.
  1635                                  ;
  1636                                  ;       6   5         4         3         2         1         0
  1637                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1638                                  ;       ----------------------------------------------------------------
  1639                                  ;       h......hffffmmmma......ab......................bn..............n
  1640                                  ;
  1641                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1642                                  ;               ffff                                                            flags
  1643                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1644                                  ;                       a......a                                                access
  1645                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1646                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1647                                  ;
  1648                                  ;       00000000                                                                all areas have base addresses below 2^24
  1649                                  ;               0...                                                            single-byte size granularity
  1650                                  ;               1...                                                            4-kilobyte size granularity
  1651                                  ;               .0..                                                            16-bit default for code segments
  1652                                  ;               .1..                                                            32-bit default for code segments
  1653                                  ;               ..0.                                                            intel-reserved; should be zero
  1654                                  ;               ...0                                                            available for operating system use
  1655                                  ;                   0000                                                        segment is less than 2^16 in size
  1656                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1657                                  ;                       1.......                                                segment is present in memory
  1658                                  ;                       .00.....                                                segment is of privilege level 0
  1659                                  ;                       ...0....                                                segment is of system or gate type
  1660                                  ;                       ...00010                                                local decriptor table (LDT)
  1661                                  ;                       ...01001                                                task state segment (TSS) available
  1662                                  ;                       ...01011                                                task state segment (TSS) busy
  1663                                  ;                       ...10...                                                data segment
  1664                                  ;                       ...10011                                                writable data (accessed)
  1665                                  ;                       ...11...                                                code segment
  1666                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  section                 gdt                                                     ;global descriptor table
  1670                                                          dq      0000000000000000h                               ;00 required null selector
  1671                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1672                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1673                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1674                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1675                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1676                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1677                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1678                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1679                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1680                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1681                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1682                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1683                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1684                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1688                                  ;
  1689                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1690                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1691                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1692                                  ;
  1693                                  ;       6   5         4         3         2         1         0
  1694                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1695                                  ;       ----------------------------------------------------------------
  1696                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1697                                  ;
  1698                                  ;       h...h   high-order offset (bits 16-31)
  1699                                  ;       P       present (0=unused interrupt)
  1700                                  ;       zz      descriptor privilege level
  1701                                  ;       S       storage segment (must be zero for IDT)
  1702                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1703                                  ;       S...S   handling code selector in GDT
  1704                                  ;       l...l   lo-order offset (bits 0-15)
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  section                 idt                                                     ;interrupt descriptor table
  1708                                                          mint    dividebyzero                                    ;00 divide by zero
  1709                                                          mint    singlestep                                      ;01 single step
  1710                                                          mint    nmi                                             ;02 non-maskable
  1711                                                          mint    break                                           ;03 break
  1712                                                          mint    into                                            ;04 into
  1713                                                          mint    bounds                                          ;05 bounds
  1714                                                          mint    badopcode                                       ;06 bad op code
  1715                                                          mint    nocoproc                                        ;07 no coprocessor
  1716                                                          mint    doublefault                                     ;08 double-fault
  1717                                                          mint    operand                                         ;09 operand
  1718                                                          mint    badtss                                          ;0a bad TSS
  1719                                                          mint    notpresent                                      ;0b not-present
  1720                                                          mint    stacklimit                                      ;0c stack limit
  1721                                                          mint    protection                                      ;0d general protection fault
  1722                                                          mint    int14                                           ;0e (reserved)
  1723                                                          mint    int15                                           ;0f (reserved)
  1724                                                          mint    coproccalc                                      ;10 (reserved)
  1725                                                          mint    int17                                           ;11 (reserved)
  1726                                                          mint    int18                                           ;12 (reserved)
  1727                                                          mint    int19                                           ;13 (reserved)
  1728                                                          mint    int20                                           ;14 (reserved)
  1729                                                          mint    int21                                           ;15 (reserved)
  1730                                                          mint    int22                                           ;16 (reserved)
  1731                                                          mint    int23                                           ;17 (reserved)
  1732                                                          mint    int24                                           ;18 (reserved)
  1733                                                          mint    int25                                           ;19 (reserved)
  1734                                                          mint    int26                                           ;1a (reserved)
  1735                                                          mint    int27                                           ;1b (reserved)
  1736                                                          mint    int28                                           ;1c (reserved)
  1737                                                          mint    int29                                           ;1d (reserved)
  1738                                                          mint    int30                                           ;1e (reserved)
  1739                                                          mint    int31                                           ;1f (reserved)
  1740                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1741                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1742                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1743                                                          mtrap   com2                                            ;23 IRQ3 com2
  1744                                                          mtrap   com1                                            ;24 IRQ4 com1
  1745                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1746                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1747                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1748                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1749                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1750                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1751                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1752                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1753                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1754                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1755                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1756                                                          mtrap   svc                                             ;30 OS services
  1757                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1758                                  ;=======================================================================================================================
  1759                                  ;
  1760                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1761                                  ;
  1762                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1763                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1764                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1765                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1766                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1767                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1768                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1769                                  ;
  1770                                  ;=======================================================================================================================
  1771                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1772                                                          cpu     386                                             ;allow 80386 instructions
  1773                                                          bits    32                                              ;this is 32-bit code
  1774                                  ;=======================================================================================================================
  1775                                  ;
  1776                                  ;       CPU Interrupt Handlers
  1777                                  ;
  1778                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1779                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1780                                  ;
  1781                                  ;=======================================================================================================================
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;       INT0    Divide By Zero
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                                          menter  dividebyzero                                    ;divide by zero
  1788                                                          push    0                                               ;store interrupt nbr
  1789                                                          push    czIntDivideByZero                               ;store message offset
  1790                                                          jmp     ReportInterrupt                                 ;report interrupt
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;       INT1    Single Step
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                                          menter  singlestep                                      ;single step
  1797                                                          push    1                                               ;store interrupt nbr
  1798                                                          push    czIntSingleStep                                 ;store message offset
  1799                                                          jmp     ReportInterrupt                                 ;report interrupt
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;       INT2    Non-Maskable Interrupt
  1803                                  ;
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                                          menter  nmi                                             ;non-maskable
  1806                                                          push    2                                               ;store interrupt nbr
  1807                                                          push    czIntNonMaskable                                ;store message offset
  1808                                                          jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT3    Break
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  break                                           ;break
  1815                                                          push    3                                               ;store interrupt nbr
  1816                                                          push    czIntBreak                                      ;store message offset
  1817                                                          jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT4    Into
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  into                                            ;into
  1824                                                          push    4                                               ;store interrupt nbr
  1825                                                          push    czIntInto                                       ;store message offset
  1826                                                          jmp     ReportInterrupt                                 ;report interrupt
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       INT5    Bounds
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                                          menter  bounds                                          ;bounds
  1833                                                          push    5                                               ;store interrupt nbr
  1834                                                          push    czIntBounds                                     ;store message offset
  1835                                                          jmp     ReportInterrupt                                 ;report interrupt
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;       INT6    Bad Operation Code
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                                          menter  badopcode                                       ;bad opcode interrupt
  1842                                                          push    6                                               ;store interrupt nbr
  1843                                                          push    czIntBadOpCode                                  ;store message offset
  1844                                                          jmp     ReportInterrupt                                 ;report interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;       INT7    No Coprocessor
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1851                                                          push    7                                               ;store interrupt nbr
  1852                                                          push    czIntNoCoprocessor                              ;store message offset
  1853                                                          jmp     ReportInterrupt                                 ;report interrupt
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;       INT8    Double Fault
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                                          menter  doublefault                                     ;doublefault interrupt
  1860                                                          push    8                                               ;store interrupt nbr
  1861                                                          push    czIntDoubleFault                                ;store message offset
  1862                                                          jmp     ReportInterrupt                                 ;report interrupt
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;       INT9    Operand
  1866                                  ;
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                                          menter  operand                                         ;operand interrupt
  1869                                                          push    9                                               ;store interrupt nbr
  1870                                                          push    czIntOperand                                    ;store message offset
  1871                                                          jmp     ReportInterrupt                                 ;report interrupt
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  ;
  1874                                  ;       INT10   Bad Task State Segment
  1875                                  ;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                                          menter  badtss                                          ;bad TSS interrupt
  1878                                                          push    10                                              ;store interrupt nbr
  1879                                                          push    czIntBadTSS                                     ;store message offset
  1880                                                          jmp     ReportInterrupt                                 ;report interrupt
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       INT11   Not Present
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  notpresent                                      ;not present interrupt
  1887                                                          push    11                                              ;store interrupt nbr
  1888                                                          push    czIntNotPresent                                 ;store message offset
  1889                                                          jmp     ReportInterrupt                                 ;report interrupt
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       INT12   Stack Limit
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  stacklimit                                      ;stack limit interrupt
  1896                                                          push    12                                              ;store interrupt nbr
  1897                                                          push    czIntStackLimit                                 ;store message offset
  1898                                                          jmp     ReportInterrupt                                 ;report interrupt
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;       INT13   General Protection Fault
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                                          menter  protection                                      ;protection fault interrupt
  1905                                                          push    13                                              ;store interrupt nbr
  1906                                                          push    czIntProtection                                 ;store message offset
  1907                                                          jmp     ReportInterrupt                                 ;report interrupt
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  ;
  1910                                  ;       INT14   Reserved
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                                          menter  int14                                           ;(reserved)
  1914                                                          push    14                                              ;store interrupt nbr
  1915                                                          push    czIntReserved                                   ;store message offset
  1916                                                          jmp     ReportInterrupt                                 ;report interrupt
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  ;
  1919                                  ;       INT15   Reserved
  1920                                  ;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                                          menter  int15                                           ;(reserved)
  1923                                                          push    15                                              ;store interrupt nbr
  1924                                                          push    czIntReserved                                   ;store message offset
  1925                                                          jmp     ReportInterrupt                                 ;report interrupt
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  ;
  1928                                  ;       INT16   Coprocessor Calculation
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  coproccalc                                      ;coprocessor calculation
  1932                                                          push    16                                              ;store interrupt nbr
  1933                                                          push    czIntCoprocessorCalc                            ;store message offset
  1934                                                          jmp     ReportInterrupt                                 ;report interrupt
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       INT17   Reserved
  1938                                  ;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                                          menter  int17                                           ;(reserved)
  1941                                                          push    17                                              ;store interrupt nbr
  1942                                                          push    czIntReserved                                   ;store message offset
  1943                                                          jmp     ReportInterrupt                                 ;report interrupt
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;       INT18   Reserved
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                                          menter  int18                                           ;(reserved)
  1950                                                          push    18                                              ;store interrupt nbr
  1951                                                          push    czIntReserved                                   ;store message offset
  1952                                                          jmp     ReportInterrupt                                 ;report interrupt
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                  ;
  1955                                  ;       INT19   Reserved
  1956                                  ;
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                                          menter  int19                                           ;(reserved)
  1959                                                          push    19                                              ;store interrupt nbr
  1960                                                          push    czIntReserved                                   ;store message offset
  1961                                                          jmp     ReportInterrupt                                 ;report interrupt
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                  ;
  1964                                  ;       INT20   Reserved
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                                          menter  int20                                           ;(reserved)
  1968                                                          push    20                                              ;store interrupt nbr
  1969                                                          push    czIntReserved                                   ;store message offset
  1970                                                          jmp     ReportInterrupt                                 ;report interrupt
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;       INT21   Reserved
  1974                                  ;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                                          menter  int21                                           ;(reserved)
  1977                                                          push    21                                              ;store interrupt nbr
  1978                                                          push    czIntReserved                                   ;store message offset
  1979                                                          jmp     ReportInterrupt                                 ;report interrupt
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  ;
  1982                                  ;       INT22   Reserved
  1983                                  ;
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                                          menter  int22                                           ;(reserved)
  1986                                                          push    22                                              ;store interrupt nbr
  1987                                                          push    czIntReserved                                   ;store message offset
  1988                                                          jmp     ReportInterrupt                                 ;report interrupt
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;       INT23   Reserved
  1992                                  ;
  1993                                  ;-----------------------------------------------------------------------------------------------------------------------
  1994                                                          menter  int23                                           ;(reserved)
  1995                                                          push    23                                              ;store interrupt nbr
  1996                                                          push    czIntReserved                                   ;store message offset
  1997                                                          jmp     ReportInterrupt                                 ;report interrupt
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                  ;
  2000                                  ;       INT24   Reserved
  2001                                  ;
  2002                                  ;-----------------------------------------------------------------------------------------------------------------------
  2003                                                          menter  int24                                           ;(reserved)
  2004                                                          push    24                                              ;store interrupt nbr
  2005                                                          push    czIntReserved                                   ;store message offset
  2006                                                          jmp     ReportInterrupt                                 ;report interrupt
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  ;
  2009                                  ;       INT25   Reserved
  2010                                  ;
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                                          menter  int25                                           ;(reserved)
  2013                                                          push    25                                              ;store interrupt nbr
  2014                                                          push    czIntReserved                                   ;store message offset
  2015                                                          jmp     ReportInterrupt                                 ;report interrupt
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;
  2018                                  ;       INT26   Reserved
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                                          menter  int26                                           ;(reserved)
  2022                                                          push    26                                              ;store interrupt nbr
  2023                                                          push    czIntReserved                                   ;store message offset
  2024                                                          jmp     ReportInterrupt                                 ;report interrupt
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026                                  ;
  2027                                  ;       INT27   Reserved
  2028                                  ;
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                                          menter  int27                                           ;(reserved)
  2031                                                          push    27                                              ;store interrupt nbr
  2032                                                          push    czIntReserved                                   ;store message offset
  2033                                                          jmp     ReportInterrupt                                 ;report interrupt
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;
  2036                                  ;       INT28   Reserved
  2037                                  ;
  2038                                  ;-----------------------------------------------------------------------------------------------------------------------
  2039                                                          menter  int28                                           ;(reserved)
  2040                                                          push    28                                              ;store interrupt nbr
  2041                                                          push    czIntReserved                                   ;store message offset
  2042                                                          jmp     ReportInterrupt                                 ;report interrupt
  2043                                  ;-----------------------------------------------------------------------------------------------------------------------
  2044                                  ;
  2045                                  ;       INT29   Reserved
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048                                                          menter  int29                                           ;(reserved)
  2049                                                          push    29                                              ;store interrupt nbr
  2050                                                          push    czIntReserved                                   ;store message offset
  2051                                                          jmp     ReportInterrupt                                 ;report interrupt
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  ;
  2054                                  ;       INT30   Reserved
  2055                                  ;
  2056                                  ;-----------------------------------------------------------------------------------------------------------------------
  2057                                                          menter  int30                                           ;(reserved)
  2058                                                          push    30                                              ;store interrupt nbr
  2059                                                          push    czIntReserved                                   ;store message offset
  2060                                                          jmp     ReportInterrupt                                 ;report interrupt
  2061                                  ;-----------------------------------------------------------------------------------------------------------------------
  2062                                  ;
  2063                                  ;       INT31   Reserved
  2064                                  ;
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066                                                          menter  int31                                           ;(reserved)
  2067                                                          push    31                                              ;store interrupt nbr
  2068                                                          push    czIntReserved                                   ;store message offset
  2069                                                          jmp     ReportInterrupt                                 ;report interrupt
  2070                                  ;-----------------------------------------------------------------------------------------------------------------------
  2071                                  ;
  2072                                  ;       Routine:        ReportInterrupt
  2073                                  ;
  2074                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2075                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2076                                  ;
  2077                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2078                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2079                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2080                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2081                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2082                                  ;
  2083                                  ;       Out:            N/A             This routine does not exit.
  2084                                  ;
  2085                                  ;-----------------------------------------------------------------------------------------------------------------------
  2086                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2087                                                          push    es                                              ;save ES at time of interrupt
  2088                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2089                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  2090                                  ;
  2091                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2092                                  ;
  2093                                  ;                       [EBP+60]        EFLAGS
  2094                                  ;                       [EBP+56]        CS
  2095                                  ;                       [EBP+52]        EIP
  2096                                  ;                       [EBP+48]        EIP hi-order
  2097                                  ;                       [EBP+44]        interrupt number (0-31)
  2098                                  ;                       [EBP+40]        error message address
  2099                                  ;                       [EBP+36]        DS
  2100                                  ;                       [EBP+32]        ES
  2101                                  ;                       [EBP+28]        EAX
  2102                                  ;                       [EBP+24]        ECX
  2103                                  ;                       [EBP+20]        EDX
  2104                                  ;                       [EBP+16]        EBX
  2105                                  ;                       [EBP+12]        ESP
  2106                                  ;                       [EBP+8]         EBP
  2107                                  ;                       [EBP+4]         ESI
  2108                                  ;                       [EBP+0]         EDI
  2109                                  ;
  2110                                                          push    cs                                              ;load code selector ...
  2111                                                          pop     ds                                              ;... into DS
  2112                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2113                                                          pop     es                                              ;... into ES
  2114                                  ;
  2115                                  ;       Display the interrupt report boundary box
  2116                                  ;
  2117                                                          mov     cl,13                                           ;column
  2118                                                          mov     ch,6                                            ;row
  2119                                                          mov     dl,50                                           ;width
  2120                                                          mov     dh,8                                            ;height
  2121                                                          mov     bh,07h                                          ;attribute
  2122                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2123                                  ;
  2124                                  ;       Display the report header
  2125                                  ;
  2126                                                          mov     cl,15                                           ;column
  2127                                                          mov     ch,7                                            ;row
  2128                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2129                                                          call    SetConsoleString                                ;draw text string
  2130                                  ;
  2131                                  ;       Display the interrupt description label
  2132                                  ;
  2133                                                          mov     cl,15                                           ;column
  2134                                                          mov     ch,8                                            ;row
  2135                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2136                                                          call    SetConsoleString                                ;draw text string
  2137                                  ;
  2138                                  ;       Display the interrupt number
  2139                                  ;
  2140                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2141                                                          mov     cl,26                                           ;column
  2142                                                          mov     ch,8                                            ;row
  2143                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2144                                  ;
  2145                                  ;       Display the interrupt name
  2146                                  ;
  2147                                                          mov     cl,29                                           ;column
  2148                                                          mov     ch,8                                            ;row
  2149                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2150                                                          call    SetConsoleString                                ;display interrupt description
  2151                                  ;
  2152                                  ;       Display the register values header
  2153                                  ;
  2154                                                          mov     cl,15                                           ;column
  2155                                                          mov     ch,10                                           ;row
  2156                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2157                                                          call    SetConsoleString                                ;draw text string
  2158                                  ;
  2159                                  ;       Display the EAX register label and value
  2160                                  ;
  2161                                                          mov     cl,15                                           ;column
  2162                                                          mov     ch,11                                           ;row
  2163                                                          mov     esi,czIntEAX                                    ;register EAX label
  2164                                                          call    SetConsoleString                                ;draw label
  2165                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2166                                                          mov     cl,19                                           ;column
  2167                                                          mov     ch,11                                           ;row
  2168                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2169                                  ;
  2170                                  ;       Display the ECX register label and value
  2171                                  ;
  2172                                                          mov     cl,15                                           ;column
  2173                                                          mov     ch,12                                           ;row
  2174                                                          mov     esi,czIntECX                                    ;label
  2175                                                          call    SetConsoleString                                ;draw label
  2176                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2177                                                          mov     cl,19                                           ;column
  2178                                                          mov     ch,12                                           ;row
  2179                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2180                                  ;
  2181                                  ;       Display the EDX register label and value
  2182                                  ;
  2183                                                          mov     cl,15                                           ;column
  2184                                                          mov     ch,13                                           ;row
  2185                                                          mov     esi,czIntEDX                                    ;label
  2186                                                          call    SetConsoleString                                ;draw label
  2187                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2188                                                          mov     cl,19                                           ;column
  2189                                                          mov     ch,13                                           ;row
  2190                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2191                                  ;
  2192                                  ;       Display the EBX register label and value
  2193                                  ;
  2194                                                          mov     cl,15                                           ;column
  2195                                                          mov     ch,14                                           ;row
  2196                                                          mov     esi,czIntEBX                                    ;label
  2197                                                          call    SetConsoleString                                ;draw label
  2198                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2199                                                          mov     cl,19                                           ;column
  2200                                                          mov     ch,14                                           ;row
  2201                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2202                                  ;
  2203                                  ;       Display the ESI register label and value
  2204                                  ;
  2205                                                          mov     cl,29                                           ;column
  2206                                                          mov     ch,11                                           ;row
  2207                                                          mov     esi,czIntESI                                    ;label
  2208                                                          call    SetConsoleString                                ;draw label
  2209                                                          mov     eax,[ebp+4]                                     ;ESI
  2210                                                          mov     cl,33                                           ;column
  2211                                                          mov     ch,11                                           ;row
  2212                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2213                                  ;
  2214                                  ;       Display the EDI register label and value
  2215                                  ;
  2216                                                          mov     cl,29                                           ;column
  2217                                                          mov     ch,12                                           ;row
  2218                                                          mov     esi,czIntEDI                                    ;label
  2219                                                          call    SetConsoleString                                ;draw label
  2220                                                          mov     eax,[ebp+0]                                     ;EDI
  2221                                                          mov     cl,33                                           ;column
  2222                                                          mov     ch,12                                           ;row
  2223                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2224                                  ;
  2225                                  ;       Display the EBP register label and value
  2226                                  ;
  2227                                                          mov     cl,29                                           ;column
  2228                                                          mov     ch,13                                           ;row
  2229                                                          mov     esi,czIntEBP                                    ;label
  2230                                                          call    SetConsoleString                                ;draw label
  2231                                                          mov     eax,[ebp+8]                                     ;EBP
  2232                                                          mov     cl,33                                           ;column
  2233                                                          mov     ch,13                                           ;row
  2234                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2235                                  ;
  2236                                  ;       Display the DS register label and value
  2237                                  ;
  2238                                                          mov     cl,42                                           ;column
  2239                                                          mov     ch,11                                           ;row
  2240                                                          mov     esi,czIntDS                                     ;label
  2241                                                          call    SetConsoleString                                ;draw label
  2242                                                          xor     eax,eax                                         ;zero register
  2243                                                          mov     ax,[ebp+36]                                     ;DS
  2244                                                          mov     cl,46                                           ;column
  2245                                                          mov     ch,11                                           ;row
  2246                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2247                                  ;
  2248                                  ;       Display the ES register label and value
  2249                                  ;
  2250                                                          mov     cl,42                                           ;column
  2251                                                          mov     ch,12                                           ;row
  2252                                                          mov     esi,czIntES                                     ;label
  2253                                                          call    SetConsoleString                                ;draw label
  2254                                                          xor     eax,eax                                         ;zero register
  2255                                                          mov     ax,[ebp+32]                                     ;ES
  2256                                                          mov     cl,46                                           ;column
  2257                                                          mov     ch,12                                           ;row
  2258                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2259                                  ;
  2260                                  ;       Display the SS register label and value
  2261                                  ;
  2262                                                          mov     cl,42                                           ;column
  2263                                                          mov     ch,13                                           ;row
  2264                                                          mov     esi,czIntSS                                     ;label
  2265                                                          call    SetConsoleString                                ;draw label
  2266                                                          xor     eax,eax                                         ;zero register
  2267                                                          mov     ax,ss                                           ;SS
  2268                                                          mov     cl,46                                           ;column
  2269                                                          mov     ch,13                                           ;row
  2270                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2271                                  ;
  2272                                  ;       Display the CS register lable and value
  2273                                  ;
  2274                                                          mov     cl,42                                           ;column
  2275                                                          mov     ch,14                                           ;row
  2276                                                          mov     esi,czIntCS                                     ;label
  2277                                                          call    SetConsoleString                                ;draw label
  2278                                                          xor     eax,eax                                         ;zero register
  2279                                                          mov     ax,[ebp+56]                                     ;CS
  2280                                                          mov     cl,46                                           ;column
  2281                                                          mov     ch,14                                           ;row
  2282                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2283                                  ;
  2284                                  ;       Display the EFLAGS register label and value
  2285                                  ;
  2286                                                          mov     cl,51                                           ;column
  2287                                                          mov     ch,11                                           ;row
  2288                                                          mov     esi,czIntEFLAGS                                 ;label
  2289                                                          call    SetConsoleString                                ;draw label
  2290                                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2291                                                          mov     cl,55                                           ;column
  2292                                                          mov     ch,11                                           ;row
  2293                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2294                                  ;
  2295                                  ;       Display the ESP register label and value
  2296                                  ;
  2297                                                          mov     cl,51                                           ;column
  2298                                                          mov     ch,13                                           ;row
  2299                                                          mov     esi,czIntESP                                    ;label
  2300                                                          call    SetConsoleString                                ;draw label
  2301                                                          mov     eax,[ebp+12]                                    ;ESP
  2302                                                          mov     cl,55                                           ;column
  2303                                                          mov     ch,13                                           ;row
  2304                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2305                                  ;
  2306                                  ;       Display the EIP register label and value
  2307                                  ;
  2308                                                          mov     cl,51                                           ;column
  2309                                                          mov     ch,14                                           ;row
  2310                                                          mov     esi,czIntEIP                                    ;label
  2311                                                          call    SetConsoleString                                ;draw label
  2312                                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2313                                                          mov     cl,55                                           ;column
  2314                                                          mov     ch,14                                           ;row
  2315                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2316                                  ;
  2317                                  ;       Halt and loop until reset
  2318                                  ;
  2319                                  .10                     sti                                                     ;enable maskable interrupts
  2320                                                          hlt                                                     ;halt processor
  2321                                                          jmp     .10                                             ;resume on interrupt
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323                                  ;
  2324                                  ;       Processor Interrupt Name Strings
  2325                                  ;
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327                                  czIntDivideByZero       db      "Division by zero",0
  2328                                  czIntSingleStep         db      "Single step",0
  2329                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2330                                  czIntBreak              db      "Break",0
  2331                                  czIntInto               db      "Into",0
  2332                                  czIntBounds             db      "Bounds",0
  2333                                  czIntBadOpCode          db      "Bad Operation Code",0
  2334                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2335                                  czIntDoubleFault        db      "Double Fault",0
  2336                                  czIntOperand            db      "Operand",0
  2337                                  czIntBadTSS             db      "Bad Task State Segment",0
  2338                                  czIntNotPresent         db      "Not Present",0
  2339                                  czIntStackLimit         db      "Stack Limit",0
  2340                                  czIntProtection         db      "General Protection Fault",0
  2341                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2342                                  czIntReserved           db      "Reserved",0
  2343                                  ;-----------------------------------------------------------------------------------------------------------------------
  2344                                  ;
  2345                                  ;       Processor Interrupt Handling Strings
  2346                                  ;
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2349                                  czIntLabel              db      "Interrupt #",0
  2350                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2351                                  czIntEAX                db      "EAX:",0
  2352                                  czIntECX                db      "ECX:",0
  2353                                  czIntEDX                db      "EDX:",0
  2354                                  czIntEBX                db      "EBX:",0
  2355                                  czIntESI                db      "ESI:",0
  2356                                  czIntEDI                db      "EDI:",0
  2357                                  czIntEBP                db      "EBP:",0
  2358                                  czIntESP                db      "ESP:",0
  2359                                  czIntDS                 db      " DS:",0
  2360                                  czIntES                 db      " ES:",0
  2361                                  czIntSS                 db      " SS:",0
  2362                                  czIntCS                 db      " CS:",0
  2363                                  czIntEFLAGS             db      "FLG:",0
  2364                                  czIntEIP                db      "EIP:",0
  2365                                  ;-----------------------------------------------------------------------------------------------------------------------
  2366                                  ;
  2367                                  ;       Routine:        DrawTextDialogBox
  2368                                  ;
  2369                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2370                                  ;
  2371                                  ;       In:             CL      upper left column (0-79)
  2372                                  ;                       CH      upper left row (0-24)
  2373                                  ;                       DL      column width, excluding border
  2374                                  ;                       DH      row height, excluding border
  2375                                  ;                       BH      color attribute
  2376                                  ;
  2377                                  ;-----------------------------------------------------------------------------------------------------------------------
  2378                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2379                                                          push    esi                                             ;
  2380                                                          push    edi                                             ;
  2381                                                          push    es                                              ;
  2382                                                          push    EGDTCGA                                         ;load CGA selector ...
  2383                                                          pop     es                                              ;... into ES
  2384                                  ;
  2385                                  ;       Compute target display offset
  2386                                  ;
  2387                                                          xor     eax,eax                                         ;zero register
  2388                                                          mov     al,ch                                           ;row
  2389                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2390                                                          mul     ah                                              ;row offset
  2391                                                          add     al,cl                                           ;add column
  2392                                                          adc     ah,0                                            ;add overflow
  2393                                                          add     al,cl                                           ;add column
  2394                                                          adc     ah,0                                            ;add overflow
  2395                                                          mov     edi,eax                                         ;target row offset
  2396                                  ;
  2397                                  ;       Display top border row
  2398                                  ;
  2399                                                          push    edi                                             ;save target row offset
  2400                                                          mov     ah,bh                                           ;attribute
  2401                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2402                                                          stosw                                                   ;display character and attribute
  2403                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2404                                                          xor     ecx,ecx                                         ;zero register
  2405                                                          mov     cl,dl                                           ;width, excluding border
  2406                                                          rep     stosw                                           ;display horizontal border
  2407                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2408                                                          stosw                                                   ;display character and attribute
  2409                                                          pop     edi                                             ;restore target row offset
  2410                                                          add     edi,ECONROWBYTES                                ;next row
  2411                                  ;
  2412                                  ;       Display dialog box body rows
  2413                                  ;
  2414                                                          xor     ecx,ecx                                         ;zero register
  2415                                                          mov     cl,dh                                           ;height, excluding border
  2416                                  .10                     push    ecx                                             ;save remaining rows
  2417                                                          push    edi                                             ;save target row offset
  2418                                                          mov     ah,bh                                           ;attribute
  2419                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2420                                                          stosw                                                   ;display character and attribute
  2421                                                          mov     al,EASCIISPACE                                  ;space
  2422                                                          xor     ecx,ecx                                         ;zero register
  2423                                                          mov     cl,dl                                           ;width, excluding border
  2424                                                          rep     stosw                                           ;display row
  2425                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2426                                                          stosw                                                   ;display character and attribute
  2427                                                          pop     edi                                             ;restore target row offset
  2428                                                          add     edi,ECONROWBYTES                                ;next row
  2429                                                          pop     ecx                                             ;remaining rows
  2430                                                          loop    .10                                             ;next row
  2431                                  ;
  2432                                  ;       Display bottom border row
  2433                                  ;
  2434                                                          push    edi                                             ;save target row offset
  2435                                                          mov     ah,bh                                           ;attribute
  2436                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2437                                                          stosw                                                   ;display character and attribute
  2438                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2439                                                          xor     ecx,ecx                                         ;zero register
  2440                                                          mov     cl,dl                                           ;width, excluding border
  2441                                                          rep     stosw                                           ;display horizontal border
  2442                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2443                                                          stosw                                                   ;display character and attribute
  2444                                                          pop     edi                                             ;restore target row offset
  2445                                                          add     edi,ECONROWBYTES                                ;next row
  2446                                  ;
  2447                                  ;       Restore and return
  2448                                  ;
  2449                                                          pop     es                                              ;restore non-volatile regs
  2450                                                          pop     edi                                             ;
  2451                                                          pop     esi                                             ;
  2452                                                          pop     ecx                                             ;
  2453                                                          ret                                                     ;return
  2454                                  ;=======================================================================================================================
  2455                                  ;
  2456                                  ;       Hardware Device Interupts
  2457                                  ;
  2458                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2459                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2460                                  ;       (BX=2028h).
  2461                                  ;
  2462                                  ;=======================================================================================================================
  2463                                  ;-----------------------------------------------------------------------------------------------------------------------
  2464                                  ;
  2465                                  ;       IRQ0    Clock Tick Interrupt
  2466                                  ;
  2467                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2468                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2469                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2470                                  ;
  2471                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2472                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2473                                  ;
  2474                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2475                                  ;       zero, the floppy disk motors are turned off.
  2476                                  ;
  2477                                  ;-----------------------------------------------------------------------------------------------------------------------
  2478                                                          menter  clocktick                                       ;clock tick interrupt
  2479                                                          push    eax                                             ;save non-volatile regs
  2480                                                          push    edx                                             ;
  2481                                                          push    ds                                              ;
  2482                                  ;
  2483                                  ;       Update the clock tick count and the elapsed days as needed.
  2484                                  ;
  2485                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2486                                                          pop     ds                                              ;... into data segment register
  2487                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2488                                                          inc     eax                                             ;increment clock ticks
  2489                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2490                                                          jb      irq0.10                                         ;no, skip ahead
  2491                                                          inc     byte [wbClockDays]                              ;increment clock days
  2492                                                          xor     eax,eax                                         ;reset clock ticks
  2493                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2494                                  ;
  2495                                  ;       Decrement floppy disk motor timeout.
  2496                                  ;
  2497                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2498                                                          je      irq0.20                                         ;yes, skip ahead
  2499                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2500                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2501                                  ;
  2502                                  ;       Turn off the floppy disk motor if appropriate.
  2503                                  ;
  2504                                                          sti                                                     ;enable maskable interrupts
  2505                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2506                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2507                                                          in      al,dx                                           ;FDC main status byte
  2508                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2509                                                          jnz     irq0.15                                         ;wait while busy
  2510                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2511                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2512                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2513                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2514                                                          out     dx,al                                           ;turn motor off
  2515                                  ;
  2516                                  ;       Signal the end of the hardware interrupt.
  2517                                  ;
  2518                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2519                                  ;
  2520                                  ;       Restore and return.
  2521                                  ;
  2522                                                          pop     ds                                              ;restore modified regs
  2523                                                          pop     edx                                             ;
  2524                                                          pop     eax                                             ;
  2525                                                          iretd                                                   ;return
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  ;
  2528                                  ;       IRQ1    Keyboard Interrupt
  2529                                  ;
  2530                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2531                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2532                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2533                                  ;       ALL modified registers upon return.
  2534                                  ;
  2535                                  ;-----------------------------------------------------------------------------------------------------------------------
  2536                                                          menter  keyboard                                        ;keyboard interrrupt
  2537                                                          push    eax                                             ;save non-volatile regs
  2538                                                          push    ebx                                             ;
  2539                                                          push    ecx                                             ;
  2540                                                          push    esi                                             ;
  2541                                                          push    ds                                              ;
  2542                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2543                                                          pop     ds                                              ;... into data segment register
  2544                                                          xor     al,al                                           ;zero
  2545                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2546                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2547                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2548                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2549                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2550                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2551                                                          mov     al,' '                                          ;space
  2552                                                          mov     [wbConsoleChar],al                              ;set character to space
  2553                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2554                                                          not     al                                              ;controller timeout mask
  2555                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2556                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2557                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2558                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2559                                                          jz      irq1.140                                        ;yes, skip ahead
  2560                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2561                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2562                                                          mov     ah,al                                           ;copy scan code 0
  2563                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2564                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2565                                                          je      irq1.30                                         ;yes, set flag
  2566                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2567                                                          je      irq1.40                                         ;yes, reset flag
  2568                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2569                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2570                                                          je      irq1.30                                         ;yes, set flag
  2571                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2572                                                          je      irq1.40                                         ;yes, reset flag
  2573                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2574                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2575                                                          je      irq1.30                                         ;yes, set flag
  2576                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2577                                                          je      irq1.40                                         ;yes, reset flag
  2578                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2579                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2580                                                          je      irq1.30                                         ;yes, set flag
  2581                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2582                                                          je      irq1.40                                         ;yes, reset flag
  2583                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2584                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2585                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2586                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2587                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2588                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2589                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2590                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2591                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2592                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2593                                                          jne     irq1.70                                         ;no, skip ahead
  2594                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2595                                                          jz      irq1.140                                        ;yes, skip ahead
  2596                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2597                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2598                                                          mov     ah,al                                           ;copy scan code 1
  2599                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2600                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2601                                                          je      irq1.30                                         ;yes, set flag
  2602                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2603                                                          je      irq1.40                                         ;yes, reset flag
  2604                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2605                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2606                                                          je      irq1.30                                         ;yes, set flag
  2607                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2608                                                          je      irq1.40                                         ;yes, reset flag
  2609                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2610                                                          je      irq1.80                                         ;yes, skip ahead
  2611                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2612                                                          je      irq1.80                                         ;yes, skip ahead
  2613                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2614                                                          je      irq1.10                                         ;yes, continue
  2615                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2616                                                          jne     irq1.20                                         ;no, skip ahead
  2617                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2618                                                          jz      irq1.140                                        ;yes, skip ahead
  2619                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2620                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2621                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2622                                                          jz      irq1.140                                        ;yes, skip ahead
  2623                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2624                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2625                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2626                                  irq1.30                 or      bl,al                                           ;set shift flag
  2627                                                          jmp     irq1.60                                         ;skip ahead
  2628                                  irq1.40                 not     al                                              ;convert flag to mask
  2629                                                          and     bl,al                                           ;reset shift flag
  2630                                                          jmp     irq1.60                                         ;skip ahead
  2631                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2632                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2633                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2634                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2635                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2636                                                          jmp     irq1.150                                        ;finish keyboard handling
  2637                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2638                                                          jne     irq1.80                                         ;no continue
  2639                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2640                                                          jz      irq1.140                                        ;yes, skip ahead
  2641                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2642                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2643                                                          mov     ah,al                                           ;copy scan code 1
  2644                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2645                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2646                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2647                                                          jz      irq1.140                                        ;yes, skip ahead
  2648                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2649                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2650                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2651                                                          jz      irq1.140                                        ;yes, skip ahead
  2652                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2653                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2654                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2655                                                          jz      irq1.140                                        ;yes, skip ahead
  2656                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2657                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2658                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2659                                                          jz      irq1.140                                        ;yes, skip ahead
  2660                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2661                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2662                                                          jmp     irq1.150                                        ;continue
  2663                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2664                                                          test    ah,EKEYBUP                                      ;release code?
  2665                                                          jnz     irq1.130                                        ;yes, skip ahead
  2666                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2667                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2668                                                          jz      irq1.90                                         ;no, skip ahead
  2669                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2670                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2671                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2672                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2673                                                          jz      irq1.100                                        ;no skip ahead
  2674                                                          mov     cl,al                                           ;copy ASCII code
  2675                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2676                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2677                                                          jb      irq1.100                                        ;yes, skip ahead
  2678                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2679                                                          ja      irq1.100                                        ;yes, skip ahead
  2680                                                          xor     al,EASCIICASE                                   ;switch case
  2681                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2682                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2683                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2684                                                          jz      irq1.120                                        ;no, skip ahead
  2685                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2686                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2687                                                          or      edx,eax                                         ;msg id and codes
  2688                                                          xor     ecx,ecx                                         ;null param
  2689                                                          push    eax                                             ;save codes
  2690                                                          call    PutMessage                                      ;put message to console
  2691                                                          pop     eax                                             ;restore codes
  2692                                                          test    al,al                                           ;ASCII translation?
  2693                                                          jz      irq1.130                                        ;no, skip ahead
  2694                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2695                                                          and     eax,0FFFFh                                      ;clear high-order word
  2696                                                          or      edx,eax                                         ;msg id and codes
  2697                                                          xor     ecx,ecx                                         ;null param
  2698                                                          call    PutMessage                                      ;put message to console
  2699                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2700                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2701                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2702                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2703                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2704                                                          pop     ds                                              ;restore non-volatile regs
  2705                                                          pop     esi                                             ;
  2706                                                          pop     ecx                                             ;
  2707                                                          pop     ebx                                             ;
  2708                                                          pop     eax                                             ;
  2709                                                          iretd                                                   ;return
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;       Scan-Code to ASCII Translation Tables
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2714                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2715                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2716                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2717                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2718                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2719                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2720                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2721                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2722                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2723                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2724                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2725                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2726                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2727                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2728                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2729                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2730                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2731                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2732                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2733                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2734                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2735                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2736                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2737                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2738                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2739                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2740                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2741                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2742                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2743                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2744                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                  ;
  2747                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2748                                  ;
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750                                                          menter  iochannel                                       ;secondary 8259A cascade
  2751                                                          push    eax                                             ;save modified regs
  2752                                                          jmp     hwint                                           ;end interrupt and return
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;
  2755                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2756                                  ;
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758                                                          menter  com2                                            ;serial port 2 interrupt
  2759                                                          push    eax                                             ;save modified regs
  2760                                                          jmp     hwint                                           ;end interrupt and return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2764                                  ;
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                                          menter  com1                                            ;serial port 1 interrupt
  2767                                                          push    eax                                             ;save modified regs
  2768                                                          jmp     hwint                                           ;end interrupt and return
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  ;
  2771                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2772                                  ;
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2775                                                          push    eax                                             ;save modified regs
  2776                                                          jmp     hwint                                           ;end interrupt and return
  2777                                  ;-----------------------------------------------------------------------------------------------------------------------
  2778                                  ;
  2779                                  ;       IRQ6    Diskette Hardware Interrupt
  2780                                  ;
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                                          menter  diskette                                        ;floppy disk interrupt
  2783                                                          push    eax                                             ;save non-volatile regs
  2784                                                          push    ds                                              ;
  2785                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2786                                                          pop     ds                                              ;... into DS register
  2787                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2788                                                          or      al,10000000b                                    ;set IRQ flag
  2789                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2790                                                          pop     ds                                              ;restore non-volatile regs
  2791                                                          jmp     hwint                                           ;end primary PIC interrupt
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  ;
  2794                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2795                                  ;
  2796                                  ;-----------------------------------------------------------------------------------------------------------------------
  2797                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2798                                                          push    eax                                             ;save modified regs
  2799                                                          jmp     hwint                                           ;end interrupt and return
  2800                                  ;-----------------------------------------------------------------------------------------------------------------------
  2801                                  ;
  2802                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2803                                  ;
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                                          menter  rtclock                                         ;real-time clock interrupt
  2806                                                          push    eax                                             ;save modified regs
  2807                                                          jmp     hwwint                                          ;end interrupt and return
  2808                                  ;-----------------------------------------------------------------------------------------------------------------------
  2809                                  ;
  2810                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2811                                  ;
  2812                                  ;-----------------------------------------------------------------------------------------------------------------------
  2813                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2814                                                          push    eax                                             ;save modified regs
  2815                                                          jmp     hwwint                                          ;end interrupt and return
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  ;
  2818                                  ;       IRQ10   Reserved Hardware Interrupt
  2819                                  ;
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821                                                          menter  irq10                                           ;reserved
  2822                                                          push    eax                                             ;save modified regs
  2823                                                          jmp     hwwint                                          ;end interrupt and return
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;
  2826                                  ;       IRQ11   Reserved Hardware Interrupt
  2827                                  ;
  2828                                  ;-----------------------------------------------------------------------------------------------------------------------
  2829                                                          menter  irq11                                           ;reserved
  2830                                                          push    eax                                             ;save modified regs
  2831                                                          jmp     hwwint                                          ;end interrupt and return
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833                                  ;
  2834                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2838                                                          push    eax                                             ;save modified regs
  2839                                                          jmp     hwwint                                          ;end interrupt and return
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2843                                  ;
  2844                                  ;-----------------------------------------------------------------------------------------------------------------------
  2845                                                          menter  coprocessor                                     ;coprocessor interrupt
  2846                                                          push    eax                                             ;save modified regs
  2847                                                          jmp     hwwint                                          ;end interrupt and return
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849                                  ;
  2850                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2851                                  ;
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2854                                                          push    eax                                             ;save modified regs
  2855                                                          jmp     hwwint                                          ;end interrupt and return
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;       IRQ15   Reserved Hardware Interrupt
  2859                                  ;
  2860                                  ;-----------------------------------------------------------------------------------------------------------------------
  2861                                                          menter  irq15                                           ;reserved
  2862                                                          push    eax                                             ;save modified regs
  2863                                                          jmp     hwwint                                          ;end interrupt and return
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  ;
  2866                                  ;       Exit from hardware interrupt
  2867                                  ;
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2870                                                          jmp     hwint90                                         ;skip ahead
  2871                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2872                                  hwint90                 pop     eax                                             ;restore modified regs
  2873                                                          iretd                                                   ;return from interrupt
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;       INT 30h Operating System Software Service Interrupt
  2877                                  ;
  2878                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2879                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2880                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2881                                  ;       the entry address of the specific function from a table.
  2882                                  ;
  2883                                  ;-----------------------------------------------------------------------------------------------------------------------
  2884                                                          menter  svc
  2885                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2886                                                          jae     svc90                                           ;yes, skip ahead
  2887                                                          movzx   eax,al                                          ;function
  2888                                                          shl     eax,2                                           ;offset into table
  2889                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2890                                  svc90                   iretd                                                   ;return from interrupt
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;       Service Request Table
  2894                                  ;
  2895                                  ;
  2896                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2897                                  ;
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2900                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2901                                                          tsvce   CompareMemory                                   ;compare memory
  2902                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2903                                                          tsvce   FreeMemory                                      ;free memory block
  2904                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2905                                                          tsvce   GetConsoleString                                ;get string input
  2906                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2907                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2908                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2909                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2910                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2911                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2912                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2913                                                          tsvce   PutDayString                                    ;put DD string
  2914                                                          tsvce   PutHourString                                   ;put hh string
  2915                                                          tsvce   PutMinuteString                                 ;put mm string
  2916                                                          tsvce   PutMonthString                                  ;put MM string
  2917                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2918                                                          tsvce   PutSecondString                                 ;put ss string
  2919                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2920                                                          tsvce   PutWeekdayString                                ;put weekday string
  2921                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2922                                                          tsvce   PutYearString                                   ;put YYYY string
  2923                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2924                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2925                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2926                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2927                                                          tsvce   UpperCaseString                                 ;upper-case string
  2928                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2929                                  ;-----------------------------------------------------------------------------------------------------------------------
  2930                                  ;
  2931                                  ;       Service Request Macros
  2932                                  ;
  2933                                  ;       These macros provide positional parameterization of service request calls.
  2934                                  ;
  2935                                  ;-----------------------------------------------------------------------------------------------------------------------
  2936                                  %macro                  allocateMemory 1
  2937                                                          mov     ecx,%1                                          ;bytes to allocate
  2938                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2939                                                          int     _svc                                            ;invoke OS service
  2940                                  %endmacro
  2941                                  %macro                  clearConsoleScreen 0
  2942                                                          mov     al,eClearConsoleScreen                          ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  compareMemory 0
  2946                                                          mov     al,eCompareMemory                               ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  decimalToUnsigned 0
  2950                                                          mov     al,eDecimalToUnsigned                           ;function code
  2951                                                          int     _svc                                            ;invoke OS servie
  2952                                  %endmacro
  2953                                  %macro                  freeMemory 1
  2954                                                          mov     edx,%1                                          ;address of memory block
  2955                                                          mov     al,eFreeMemory                                  ;function code
  2956                                                          int     _svc                                            ;invoke OS service
  2957                                  %endmacro
  2958                                  %macro                  getBaseMemSize 0
  2959                                                          mov     al,eGetBaseMemSize                              ;function code
  2960                                                          int     _svc                                            ;invoke OS service
  2961                                  %endmacro
  2962                                  %macro                  getConsoleString 4
  2963                                                          mov     edx,%1                                          ;buffer address
  2964                                                          mov     ecx,%2                                          ;max characters
  2965                                                          mov     bh,%3                                           ;echo indicator
  2966                                                          mov     bl,%4                                           ;terminator
  2967                                                          mov     al,eGetConsoleString                            ;function code
  2968                                                          int     _svc                                            ;invoke OS service
  2969                                  %endmacro
  2970                                  %macro                  getExtendedMemSize 0
  2971                                                          mov     al,eGetExtendedMemSize                          ;function code
  2972                                                          int     _svc                                            ;invoke OS service
  2973                                  %endmacro
  2974                                  %macro                  getROMMemSize 0
  2975                                                          mov     al,eGetROMMemSize                               ;function code
  2976                                                          int     _svc                                            ;invoke OS service
  2977                                  %endmacro
  2978                                  %macro                  hexadecimalToUnsigned 0
  2979                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2980                                                          int     _svc                                            ;invoke OS service
  2981                                  %endmacro
  2982                                  %macro                  isLeapYear 1
  2983                                                          mov     ebx,%1                                          ;DATETIME addr
  2984                                                          mov     al,eIsLeapYear                                  ;function code
  2985                                                          int     _svc                                            ;invoke OS service
  2986                                  %endmacro
  2987                                  %macro                  placeCursor 0
  2988                                                          mov     al,ePlaceCursor                                 ;function code
  2989                                                          int     _svc                                            ;invoke OS service
  2990                                  %endmacro
  2991                                  %macro                  putConsoleString 1
  2992                                                          mov     edx,%1                                          ;string address
  2993                                                          mov     al,ePutConsoleString                            ;function code
  2994                                                          int     _svc                                            ;invoke OS service
  2995                                  %endmacro
  2996                                  %macro                  putDateString 0
  2997                                                          mov     al,ePutDateString                               ;function code
  2998                                                          int     _svc                                            ;invoke OS service
  2999                                  %endmacro
  3000                                  %macro                  putDateString 2
  3001                                                          mov     ebx,%1                                          ;DATETIME addr
  3002                                                          mov     edx,%2                                          ;output buffer addr
  3003                                                          mov     al,ePutDateString                               ;function code
  3004                                                          int     _svc                                            ;invoke OS service
  3005                                  %endmacro
  3006                                  %macro                  putDayString 2
  3007                                                          mov     ebx,%1                                          ;DATETIME addr
  3008                                                          mov     edx,%2                                          ;output buffer addr
  3009                                                          mov     al,ePutDayString                                ;function code
  3010                                                          int     _svc                                            ;invoke OS service
  3011                                  %endmacro
  3012                                  %macro                  putHourString 2
  3013                                                          mov     ebx,%1                                          ;DATETIME addr
  3014                                                          mov     edx,%2                                          ;output buffer addr
  3015                                                          mov     al,ePutHourString                               ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  %macro                  putMinuteString 2
  3019                                                          mov     ebx,%1                                          ;DATETIME addr
  3020                                                          mov     edx,%2                                          ;output buffer addr
  3021                                                          mov     al,ePutMinuteString                             ;function code
  3022                                                          int     _svc                                            ;invoke OS service
  3023                                  %endmacro
  3024                                  %macro                  putMonthString 2
  3025                                                          mov     ebx,%1                                          ;DATETIME addr
  3026                                                          mov     edx,%2                                          ;output buffer addr
  3027                                                          mov     al,ePutMonthString                              ;function code
  3028                                                          int     _svc                                            ;invoke OS service
  3029                                  %endmacro
  3030                                  %macro                  putMonthNameString 2
  3031                                                          mov     ebx,%1                                          ;DATETIME addr
  3032                                                          mov     edx,%2                                          ;output buffer addr
  3033                                                          mov     al,ePutMonthNameString                          ;function code
  3034                                                          int     _svc                                            ;invoke OS service
  3035                                  %endmacro
  3036                                  %macro                  putSecondString 2
  3037                                                          mov     ebx,%1                                          ;DATETIME addr
  3038                                                          mov     edx,%2                                          ;output buffer addr
  3039                                                          mov     al,ePutSecondString                             ;function code
  3040                                                          int     _svc                                            ;invoke OS service
  3041                                  %endmacro
  3042                                  %macro                  putTimeString 0
  3043                                                          mov     al,ePutTimeString                               ;function code
  3044                                                          int     _svc                                            ;invoke OS service
  3045                                  %endmacro
  3046                                  %macro                  putTimeString 2
  3047                                                          mov     ebx,%1                                          ;DATETIME addr
  3048                                                          mov     edx,%2                                          ;output buffer addr
  3049                                                          mov     al,ePutTimeString                               ;function code
  3050                                                          int     _svc                                            ;invoke OS service
  3051                                  %endmacro
  3052                                  %macro                  putWeekdayString 2
  3053                                                          mov     ebx,%1                                          ;DATETIME addr
  3054                                                          mov     edx,%2                                          ;output buffer addr
  3055                                                          mov     al,ePutWeekdayString                            ;function code
  3056                                                          int     _svc                                            ;invoke OS service
  3057                                  %endmacro
  3058                                  %macro                  putWeekdayNameString 2
  3059                                                          mov     ebx,%1                                          ;DATETIME addr
  3060                                                          mov     edx,%2                                          ;output buffer addr
  3061                                                          mov     al,ePutWeekdayNameString                        ;function code
  3062                                                          int     _svc                                            ;invoke OS service
  3063                                  %endmacro
  3064                                  %macro                  putYearString 2
  3065                                                          mov     ebx,%1                                          ;DATETIME addr
  3066                                                          mov     edx,%2                                          ;output buffer addr
  3067                                                          mov     al,ePutYearString                               ;function code
  3068                                                          int     _svc                                            ;invoke OS service
  3069                                  %endmacro
  3070                                  %macro                  readRealTimeClock 0
  3071                                                          mov     al,eReadRealTimeClock                           ;function code
  3072                                                          int     _svc                                            ;invoke OS service
  3073                                  %endmacro
  3074                                  %macro                  readRealTimeClock 1
  3075                                                          mov     ebx,%1                                          ;DATETIME addr
  3076                                                          mov     al,eReadRealTimeClock                           ;function code
  3077                                                          int     _svc                                            ;invoke OS service
  3078                                  %endmacro
  3079                                  %macro                  resetSystem 0
  3080                                                          mov     al,eResetSystem                                 ;function code
  3081                                                          int     _svc                                            ;invoke OS service
  3082                                  %endmacro
  3083                                  %macro                  unsignedToDecimalString 0
  3084                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3085                                                          int     _svc                                            ;invoke OS service
  3086                                  %endmacro
  3087                                  %macro                  unsignedToHexadecimal 0
  3088                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3089                                                          int     _svc                                            ;invoke OS service
  3090                                  %endmacro
  3091                                  %macro                  upperCaseString 0
  3092                                                          mov     al,eUpperCaseString                             ;function code
  3093                                                          int     _svc                                            ;invoke OS service
  3094                                  %endmacro
  3095                                  ;=======================================================================================================================
  3096                                  ;
  3097                                  ;       Kernel Function Library
  3098                                  ;
  3099                                  ;=======================================================================================================================
  3100                                  ;=======================================================================================================================
  3101                                  ;
  3102                                  ;       Date and Time Helper Routines
  3103                                  ;
  3104                                  ;       GetYear
  3105                                  ;       IsLeapYear
  3106                                  ;       PutDateString
  3107                                  ;       PutDayString
  3108                                  ;       PutHourString
  3109                                  ;       PutMinuteString
  3110                                  ;       PutMonthString
  3111                                  ;       PutMonthNameString
  3112                                  ;       PutSecondString
  3113                                  ;       PutTimeString
  3114                                  ;       PutWeekdayString
  3115                                  ;       PutWeekdayNameString
  3116                                  ;       PutYearString
  3117                                  ;
  3118                                  ;=======================================================================================================================
  3119                                  ;-----------------------------------------------------------------------------------------------------------------------
  3120                                  ;
  3121                                  ;       Routine:        GetYear
  3122                                  ;
  3123                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3124                                  ;
  3125                                  ;       In:             DS:EBX  DATETIME address
  3126                                  ;
  3127                                  ;       Out:            ECX     year
  3128                                  ;
  3129                                  ;-----------------------------------------------------------------------------------------------------------------------
  3130                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3131                                                          imul    ecx,100                                         ;century * 100
  3132                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3133                                                          add     ecx,eax                                         ;year (YYYY)
  3134                                                          ret                                                     ;return
  3135                                  ;-----------------------------------------------------------------------------------------------------------------------
  3136                                  ;
  3137                                  ;       Routine:        IsLeapYear
  3138                                  ;
  3139                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3140                                  ;
  3141                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3142                                  ;
  3143                                  ;       Out:            ECX     0 = not a leap year
  3144                                  ;                               1 = leap year
  3145                                  ;
  3146                                  ;-----------------------------------------------------------------------------------------------------------------------
  3147                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3148                                                          mov     eax,ecx                                         ;EAX = YYYY
  3149                                                          xor     ecx,ecx                                         ;assume not leap year
  3150                                                          test    al,00000011b                                    ;multiple of four?
  3151                                                          jnz     .no                                             ;no, branch
  3152                                                          mov     dl,100                                          ;divisor
  3153                                                          div     dl                                              ;divide by 100
  3154                                                          test    ah,ah                                           ;multiple of 100?
  3155                                                          jnz     .yes                                            ;yes, branch
  3156                                                          test    al,00000011b                                    ;multiple of 400?
  3157                                                          jnz     .no                                             ;no, branch
  3158                                  .yes                    inc     ecx                                             ;indicate leap
  3159                                  .no                     ret                                                     ;return
  3160                                  ;-----------------------------------------------------------------------------------------------------------------------
  3161                                  ;
  3162                                  ;       Routine:        PutDateString
  3163                                  ;
  3164                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3165                                  ;                       structure at ds:ebx.
  3166                                  ;
  3167                                  ;       In:             DS:EBX  DATETIME address
  3168                                  ;                       DS:EDX  output buffer address
  3169                                  ;
  3170                                  ;-----------------------------------------------------------------------------------------------------------------------
  3171                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3172                                                          push    edi                                             ;
  3173                                                          push    es                                              ;
  3174                                                          push    ds                                              ;store data selector ...
  3175                                                          pop     es                                              ;... in extra segment reg
  3176                                                          mov     edi,edx                                         ;output buffer address
  3177                                                          mov     cl,10                                           ;divisor
  3178                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3179                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3180                                                          div     cl                                              ;AH = rem; AL = quotient
  3181                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3182                                                          cld                                                     ;forward strings
  3183                                                          stosd                                                   ;store "mm/"nul
  3184                                                          dec     edi                                             ;address of terminator
  3185                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3186                                                          div     cl                                              ;AH = rem; AL = quotient
  3187                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3188                                                          stosd                                                   ;store "dd/"nul
  3189                                                          dec     edi                                             ;address of terminator
  3190                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3191                                                          div     cl                                              ;AH = rem; AL = quotient
  3192                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3193                                                          stosd                                                   ;store "cc/"null
  3194                                                          dec     edi                                             ;address of terminator
  3195                                                          dec     edi                                             ;address of delimiter
  3196                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3197                                                          div     cl                                              ;AH = rem; AL = quotient
  3198                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3199                                                          stosb                                                   ;store quotient
  3200                                                          mov     al,ah                                           ;remainder
  3201                                                          stosb                                                   ;store remainder
  3202                                                          xor     al,al                                           ;null terminator
  3203                                                          stosb                                                   ;store terminator
  3204                                                          pop     es                                              ;restore non-volatile regs
  3205                                                          pop     edi                                             ;
  3206                                                          pop     ecx                                             ;
  3207                                                          ret                                                     ;return
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;       Routine:        PutDayString
  3211                                  ;
  3212                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3213                                  ;                       structure at ds:ebx.
  3214                                  ;
  3215                                  ;       In:             DS:EBX  DATETIME address
  3216                                  ;                       DS:EDX  output buffer address
  3217                                  ;
  3218                                  ;-----------------------------------------------------------------------------------------------------------------------
  3219                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3220                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3221                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3222                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3223                                                          pop     ecx                                             ;
  3224                                                          ret                                                     ;return
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  ;
  3227                                  ;       Routine:        PutHourString
  3228                                  ;
  3229                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3230                                  ;                       structure at ds:ebx.
  3231                                  ;
  3232                                  ;       In:             DS:EBX  DATETIME address
  3233                                  ;                       DS:EDX  output buffer address
  3234                                  ;
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3237                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3238                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3239                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3240                                                          pop     ecx                                             ;
  3241                                                          ret                                                     ;return
  3242                                  ;-----------------------------------------------------------------------------------------------------------------------
  3243                                  ;
  3244                                  ;       Routine:        PutMinuteString
  3245                                  ;
  3246                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3247                                  ;                       structure at ds:ebx.
  3248                                  ;
  3249                                  ;       In:             DS:EBX  DATETIME address
  3250                                  ;                       DS:EDX  output buffer address
  3251                                  ;
  3252                                  ;-----------------------------------------------------------------------------------------------------------------------
  3253                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3254                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3255                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3256                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3257                                                          pop     ecx                                             ;
  3258                                                          ret                                                     ;return
  3259                                  ;-----------------------------------------------------------------------------------------------------------------------
  3260                                  ;
  3261                                  ;       Routine:        PutMonthString
  3262                                  ;
  3263                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3264                                  ;                       structure at ds:ebx.
  3265                                  ;
  3266                                  ;       In:             DS:EBX  DATETIME address
  3267                                  ;                       DS:EDX  output buffer address
  3268                                  ;
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3271                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3272                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3273                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3274                                                          pop     ecx                                             ;
  3275                                                          ret                                                     ;return
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  ;
  3278                                  ;       Routine:        PutMonthNameString
  3279                                  ;
  3280                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3281                                  ;                       structure at ds:ebx.
  3282                                  ;
  3283                                  ;       In:             DS:EBX  DATETIME address
  3284                                  ;                       DS:EDX  output buffer address
  3285                                  ;
  3286                                  ;-----------------------------------------------------------------------------------------------------------------------
  3287                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3288                                                          push    edi                                             ;
  3289                                                          push    ds                                              ;
  3290                                                          push    es                                              ;
  3291                                                          push    ds                                              ;load data selector ...
  3292                                                          pop     es                                              ;... into extra segment
  3293                                                          mov     edi,edx                                         ;output buffer address
  3294                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3295                                                          dec     eax                                             ;month (0-11)
  3296                                                          shl     eax,2                                           ;offset into month name lookup table
  3297                                                          push    cs                                              ;load code selector ...
  3298                                                          pop     ds                                              ;... into data segment
  3299                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3300                                                          cld                                                     ;forward strings
  3301                                  .10                     lodsb                                                   ;name character
  3302                                                          stosb                                                   ;store in output buffer
  3303                                                          test    al,al                                           ;end of string?
  3304                                                          jnz     .10                                             ;no, continue
  3305                                                          pop     es                                              ;restore non-volatile regs
  3306                                                          pop     ds                                              ;
  3307                                                          pop     edi                                             ;
  3308                                                          pop     esi                                             ;
  3309                                                          ret                                                     ;return
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  ;
  3312                                  ;       Routine:        PutSecondString
  3313                                  ;
  3314                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3315                                  ;                       structure at ds:ebx.
  3316                                  ;
  3317                                  ;       In:             DS:EBX  DATETIME address
  3318                                  ;                       DS:EDX  output buffer address
  3319                                  ;
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3322                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3323                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3324                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3325                                                          pop     ecx                                             ;
  3326                                                          ret                                                     ;return
  3327                                  ;-----------------------------------------------------------------------------------------------------------------------
  3328                                  ;
  3329                                  ;       Routine:        PutTimeString
  3330                                  ;
  3331                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3332                                  ;                       structure at ds:ebx.
  3333                                  ;
  3334                                  ;       In:             DS:EBX  DATETIME address
  3335                                  ;                       DS:EDX  output buffer address
  3336                                  ;
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3339                                                          push    edi                                             ;
  3340                                                          push    es                                              ;
  3341                                                          push    ds                                              ;store data selector ...
  3342                                                          pop     es                                              ;... in extra segment reg
  3343                                                          mov     edi,edx                                         ;output buffer address
  3344                                                          mov     cl,10                                           ;divisor
  3345                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3346                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3347                                                          div     cl                                              ;ah = rem; al = quotient
  3348                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3349                                                          cld                                                     ;forward strings
  3350                                                          stosd                                                   ;store "mm/"nul
  3351                                                          dec     edi                                             ;address of terminator
  3352                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3353                                                          div     cl                                              ;ah = rem; al = quotient
  3354                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3355                                                          stosd                                                   ;store "dd/"nul
  3356                                                          dec     edi                                             ;address of terminator
  3357                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3358                                                          div     cl                                              ;ah = rem; al = quotient
  3359                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3360                                                          stosb                                                   ;store quotient
  3361                                                          mov     al,ah                                           ;remainder
  3362                                                          stosb                                                   ;store remainder
  3363                                                          xor     al,al                                           ;null terminator
  3364                                                          stosb                                                   ;store terminator
  3365                                                          pop     es                                              ;restore non-volatile regs
  3366                                                          pop     edi                                             ;
  3367                                                          pop     ecx                                             ;
  3368                                                          ret                                                     ;return
  3369                                  ;-----------------------------------------------------------------------------------------------------------------------
  3370                                  ;
  3371                                  ;       Routine:        PutWeekdayString
  3372                                  ;
  3373                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3374                                  ;                       structure at ds:ebx.
  3375                                  ;
  3376                                  ;       In:             DS:EBX  DATETIME address
  3377                                  ;                       DS:EDX  output buffer address
  3378                                  ;
  3379                                  ;-----------------------------------------------------------------------------------------------------------------------
  3380                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3381                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3382                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3383                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3384                                                          pop     ecx                                             ;
  3385                                                          ret                                                     ;return
  3386                                  ;-----------------------------------------------------------------------------------------------------------------------
  3387                                  ;
  3388                                  ;       Routine:        PutWeekdayNameString
  3389                                  ;
  3390                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3391                                  ;                       structure at ds:ebx.
  3392                                  ;
  3393                                  ;       In:             DS:EBX  DATETIME address
  3394                                  ;                       DS:EDX  output buffer address
  3395                                  ;
  3396                                  ;-----------------------------------------------------------------------------------------------------------------------
  3397                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3398                                                          push    edi                                             ;
  3399                                                          push    ds                                              ;
  3400                                                          push    es                                              ;
  3401                                                          push    ds                                              ;load data selector ...
  3402                                                          pop     es                                              ;... into extra segment
  3403                                                          mov     edi,edx                                         ;output buffer address
  3404                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3405                                                          shl     eax,2                                           ;offset into day name lookup table
  3406                                                          push    cs                                              ;load code selector ...
  3407                                                          pop     ds                                              ;... into data segment
  3408                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3409                                                          cld                                                     ;forward strings
  3410                                  .10                     lodsb                                                   ;name character
  3411                                                          stosb                                                   ;store in output buffer
  3412                                                          test    al,al                                           ;end of string?
  3413                                                          jnz     .10                                             ;no, continue
  3414                                                          pop     es                                              ;restore non-volatile regs
  3415                                                          pop     ds                                              ;
  3416                                                          pop     edi                                             ;
  3417                                                          pop     esi                                             ;
  3418                                                          ret                                                     ;return
  3419                                  ;-----------------------------------------------------------------------------------------------------------------------
  3420                                  ;
  3421                                  ;       Routine:        PutYearString
  3422                                  ;
  3423                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3424                                  ;                       structure at ds:ebx.
  3425                                  ;
  3426                                  ;       In:             DS:EBX  DATETIME address
  3427                                  ;                       DS:EDX  output buffer address
  3428                                  ;
  3429                                  ;-----------------------------------------------------------------------------------------------------------------------
  3430                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3431                                                          call    GetYear                                         ;ECX = YYYY
  3432                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3433                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3434                                                          pop     ecx                                             ;restore non-volatile regs
  3435                                                          ret                                                     ;return
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Day Names
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441                                  czSunday                db      "Sunday",0
  3442                                  czMonday                db      "Monday",0
  3443                                  czTuesday               db      "Tuesday",0
  3444                                  czWednesday             db      "Wednesday",0
  3445                                  czThursday              db      "Thursday",0
  3446                                  czFriday                db      "Friday",0
  3447                                  czSaturday              db      "Saturday",0
  3448                                  ;-----------------------------------------------------------------------------------------------------------------------
  3449                                  ;
  3450                                  ;       Month Names
  3451                                  ;
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  czJanuary               db      "January",0
  3454                                  czFebruary              db      "February",0
  3455                                  czMarch                 db      "March",0
  3456                                  czApril                 db      "April",0
  3457                                  czMay                   db      "May",0
  3458                                  czJune                  db      "June",0
  3459                                  czJuly                  db      "July",0
  3460                                  czAugust                db      "August",0
  3461                                  czSeptember             db      "September",0
  3462                                  czOctober               db      "October",0
  3463                                  czNovember              db      "November",0
  3464                                  czDecember              db      "December",0
  3465                                  ;-----------------------------------------------------------------------------------------------------------------------
  3466                                  ;
  3467                                  ;       Day Names Lookup Table
  3468                                  ;
  3469                                  ;-----------------------------------------------------------------------------------------------------------------------
  3470                                                          align   4
  3471                                  tDayNames               equ     $
  3472                                                          dd      czSunday
  3473                                                          dd      czMonday
  3474                                                          dd      czTuesday
  3475                                                          dd      czWednesday
  3476                                                          dd      czThursday
  3477                                                          dd      czFriday
  3478                                                          dd      czSaturday
  3479                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3480                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3481                                  ;-----------------------------------------------------------------------------------------------------------------------
  3482                                  ;
  3483                                  ;       Month Names Lookup Table
  3484                                  ;
  3485                                  ;-----------------------------------------------------------------------------------------------------------------------
  3486                                                          align   4
  3487                                  tMonthNames             equ     $
  3488                                                          dd      czJanuary
  3489                                                          dd      czFebruary
  3490                                                          dd      czMarch
  3491                                                          dd      czApril
  3492                                                          dd      czMay
  3493                                                          dd      czJune
  3494                                                          dd      czJuly
  3495                                                          dd      czAugust
  3496                                                          dd      czSeptember
  3497                                                          dd      czOctober
  3498                                                          dd      czNovember
  3499                                                          dd      czDecember
  3500                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3501                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3502                                  ;=======================================================================================================================
  3503                                  ;
  3504                                  ;       Memory Helper Routines
  3505                                  ;
  3506                                  ;       AllocateMemory
  3507                                  ;       FreeMemory
  3508                                  ;
  3509                                  ;=======================================================================================================================
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  ;
  3512                                  ;       Routine:        AllocateMemory
  3513                                  ;
  3514                                  ;       Description:    This routine allocates a memory block for the given task.
  3515                                  ;
  3516                                  ;       In:             ECX     bytes of memory to allocate
  3517                                  ;
  3518                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3519                                  ;                               0       unable to allocate memory
  3520                                  ;
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3523                                                          push    ecx                                             ;
  3524                                                          push    esi                                             ;
  3525                                                          push    ds                                              ;
  3526                                  ;
  3527                                  ;       Address kernel memory structures
  3528                                  ;
  3529                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3530                                                          pop     ds                                              ;... into data segment reg
  3531                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3532                                  ;
  3533                                  ;       Set requested size to minimum block size if requested size is too small.
  3534                                  ;
  3535                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3536                                                          jae     .10                                             ;no, branch
  3537                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3538                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3539                                  ;
  3540                                  ;       Find the first free memory block large enough to satisfy the request.
  3541                                  ;
  3542                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3543                                  .20                     test    eax,eax                                         ;end of free block chain?
  3544                                                          jz      .220                                            ;yes, branch
  3545                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3546                                                          jbe     .30                                             ;yes, branch
  3547                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3548                                                          jmp     .20                                             ;continue
  3549                                  ;-----------------------------------------------------------------------------------------------------------------------
  3550                                  ;
  3551                                  ;       Address the previous and next free memory blocks.
  3552                                  ;
  3553                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3554                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3555                                  ;
  3556                                  ;       Remove the free memory block from the forward free memory block chain.
  3557                                  ;
  3558                                                          test    ebx,ebx                                         ;any previous free memory block?
  3559                                                          jz      .40                                             ;no, branch
  3560                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3561                                                          jmp     .50                                             ;continue
  3562                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3563                                  ;
  3564                                  ;       Remove the free memory block from the reverse free memory block chain.
  3565                                  ;
  3566                                  .50                     test    edx,edx                                         ;any next free memory block?
  3567                                                          jz      .60                                             ;no, branch
  3568                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3569                                                          jmp     .70                                             ;continue
  3570                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3571                                  ;-----------------------------------------------------------------------------------------------------------------------
  3572                                  ;
  3573                                  ;       Determine if the free memory block can be split.
  3574                                  ;
  3575                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3576                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3577                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3578                                                          jb      .150                                            ;no, branch
  3579                                  ;
  3580                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3581                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3582                                  ;       of the requested memory size.
  3583                                  ;
  3584                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3585                                                          mov     edx,eax                                         ;memory block address
  3586                                                          add     edx,ecx                                         ;address new new next contig block
  3587                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3588                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3589                                  ;
  3590                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3591                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3592                                  ;
  3593                                                          jecxz   .80                                             ;no next contig, branch
  3594                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3595                                                          jmp     .90                                             ;continue
  3596                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3597                                  ;
  3598                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3599                                  ;
  3600                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3601                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3602                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3603                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3604                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3605                                                          xor     ebx,ebx                                         ;zero register
  3606                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3607                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3608                                  ;
  3609                                  ;       Find the proper location in the free block chain for the new free block
  3610                                  ;
  3611                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3612                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3613                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3614                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3615                                                          jbe     .110                                            ;yes, branch
  3616                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3617                                                          jmp     .100                                            ;continue
  3618                                  ;
  3619                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3620                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3621                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3622                                  ;       block of hte next block, if there is one.
  3623                                  ;
  3624                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3625                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3626                                                          jecxz   .120                                            ;branch if no next block
  3627                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3628                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3629                                                          jmp     .130                                            ;continue
  3630                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3631                                  ;
  3632                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3633                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3634                                  ;       last user block pointers if necessary.
  3635                                  ;
  3636                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3637                                                          test    ebx,ebx                                         ;is there a previous block?
  3638                                                          jz      .140                                            ;no, branch
  3639                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3640                                                          jmp     .150                                            ;continue
  3641                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3642                                  ;
  3643                                  ;       Update the newly allocated block's owner and signature.
  3644                                  ;
  3645                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3646                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3647                                                          xor     edx,edx                                         ;zero register
  3648                                                          str     dx                                              ;load the task state register
  3649                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3650                                  ;
  3651                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3652                                  ;
  3653                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3654                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3655                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3656                                                          jb      .180                                            ;branch if block belongs to next task
  3657                                                          je      .170                                            ;branch if block belongs to this task
  3658                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3659                                                          jmp     .160                                            ;continue
  3660                                  ;
  3661                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3662                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3663                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3664                                  ;       place to insert the block.
  3665                                  ;
  3666                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3667                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3668                                                          jbe     .180                                            ;yes, branch
  3669                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3670                                                          test    ecx,ecx                                         ;end of chain?
  3671                                                          jz      .180                                            ;yes, branch
  3672                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3673                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3674                                                          je      .170                                            ;yes, continue search
  3675                                  ;
  3676                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3677                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3678                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3679                                  ;       do have a previous-block, we update that block's next-block pointer.
  3680                                  ;
  3681                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3682                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3683                                                          jecxz   .190                                            ;branch if no next-task block
  3684                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3685                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3686                                                          jmp     .200                                            ;continue
  3687                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3688                                  ;
  3689                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3690                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3691                                  ;       global first and/or last user-block pointers if necessary.
  3692                                  ;
  3693                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3694                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3695                                                          jz      .210                                            ;no, branch
  3696                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3697                                                          jmp     .220                                            ;continue
  3698                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3699                                  ;
  3700                                  ;       Restore registers and return to caller.
  3701                                  ;
  3702                                  .220                    pop     ds                                              ;restore non-volatie regs
  3703                                                          pop     esi                                             ;
  3704                                                          pop     ecx                                             ;
  3705                                                          pop     ebx                                             ;
  3706                                                          ret                                                     ;return
  3707                                  ;-----------------------------------------------------------------------------------------------------------------------
  3708                                  ;
  3709                                  ;       Routine:        FreeMemory
  3710                                  ;
  3711                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3712                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3713                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3714                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3715                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3716                                  ;
  3717                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3718                                  ;
  3719                                  ;       Out:            EAX     -1      invalid memory block
  3720                                  ;                               0       memory block freed
  3721                                  ;
  3722                                  ;-----------------------------------------------------------------------------------------------------------------------
  3723                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3724                                                          push    ecx                                             ;
  3725                                                          push    esi                                             ;
  3726                                                          push    edi                                             ;
  3727                                                          push    ds                                              ;
  3728                                                          push    es                                              ;
  3729                                  ;
  3730                                  ;       Address the root memory structure
  3731                                  ;
  3732                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3733                                                          pop     es                                              ;... into extra segment reg
  3734                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3735                                                          pop     ds                                              ;... into data segment reg
  3736                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3737                                                          mov     edi,edx                                         ;memory block address
  3738                                  ;
  3739                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3740                                  ;
  3741                                                          xor     eax,eax                                         ;indicate success
  3742                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3743                                                          je      .240                                            ;yes, branch
  3744                                                          dec     eax                                             ;indicate failure
  3745                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3746                                                          jne     .240                                            ;no, branch
  3747                                  ;-----------------------------------------------------------------------------------------------------------------------
  3748                                  ;
  3749                                  ;       Unlink the USER memory block.
  3750                                  ;
  3751                                  ;-----------------------------------------------------------------------------------------------------------------------
  3752                                  ;
  3753                                  ;       Set the block signature. Reset owner.
  3754                                  ;
  3755                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3756                                                          xor     eax,eax                                         ;zero register
  3757                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3758                                  ;
  3759                                  ;       Wipe user area.
  3760                                  ;
  3761                                                          push    edi                                             ;save block address
  3762                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3763                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3764                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3765                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3766                                                          rep     stosb                                           ;clear memory
  3767                                                          pop     edi                                             ;restore block address
  3768                                  ;
  3769                                  ;       Address the preceding and following USER memory blocks
  3770                                  ;
  3771                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3772                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3773                                  ;
  3774                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3775                                  ;       pointer to point to the USER block following this block.
  3776                                  ;
  3777                                                          test    ebx,ebx                                         ;is there a previous block?
  3778                                                          jz      .10                                             ;no, branch
  3779                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3780                                                          jmp     .20                                             ;continue
  3781                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3782                                  ;
  3783                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3784                                  ;       pointer to point to the USER block preceding this block.
  3785                                  ;
  3786                                  .20                     jecxz   .30                                             ;branch if no next block
  3787                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3788                                                          jmp     .40                                             ;continue
  3789                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3790                                  ;-----------------------------------------------------------------------------------------------------------------------
  3791                                  ;
  3792                                  ;       Merge with a previous contiguous FREE memory block.
  3793                                  ;
  3794                                  ;-----------------------------------------------------------------------------------------------------------------------
  3795                                  ;
  3796                                  ;       Address the preceding and following contiguous memory blocks.
  3797                                  ;
  3798                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3799                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3800                                  ;
  3801                                  ;       Verify we have a previous contiguous FREE block.
  3802                                  ;
  3803                                                          test    ebx,ebx                                         ;is there a previous block?
  3804                                                          jz      .100                                            ;no, branch
  3805                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3806                                                          jne     .100                                            ;no, branch
  3807                                  ;
  3808                                  ;       Update adjacent block's contiguous pointers.
  3809                                  ;
  3810                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3811                                                          jecxz   .50                                             ;branch if no next contiguous block
  3812                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3813                                                          jmp     .60                                             ;continue
  3814                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3815                                  ;
  3816                                  ;       Update the size of the merged FREE block.
  3817                                  ;
  3818                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3819                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3820                                  ;
  3821                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3822                                  ;
  3823                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3824                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3825                                                          rep     stosb                                           ;clear memory header
  3826                                                          mov     edi,ebx                                         ;current block is now previous block
  3827                                  ;-----------------------------------------------------------------------------------------------------------------------
  3828                                  ;
  3829                                  ;       Unlink the previous contiguous FREE memory block
  3830                                  ;
  3831                                  ;-----------------------------------------------------------------------------------------------------------------------
  3832                                  ;
  3833                                  ;       Address the preceding and following USER memory blocks
  3834                                  ;
  3835                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3836                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3837                                  ;
  3838                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3839                                  ;       block pointer.
  3840                                  ;
  3841                                                          test    ebx,ebx                                         ;is there a previous block?
  3842                                                          jz      .70                                             ;no, branch
  3843                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3844                                                          jmp     .80                                             ;branch
  3845                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3846                                  ;
  3847                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3848                                  ;       pointer.
  3849                                  ;
  3850                                  .80                     jecxz   .90                                             ;branch if no next block
  3851                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3852                                                          jmp     .100                                            ;continue
  3853                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3854                                  ;-----------------------------------------------------------------------------------------------------------------------
  3855                                  ;
  3856                                  ;       Merge with a following contiguous FREE memory block.
  3857                                  ;
  3858                                  ;-----------------------------------------------------------------------------------------------------------------------
  3859                                  ;
  3860                                  ;       Verify we have a following contiguous FREE block.
  3861                                  ;
  3862                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3863                                                          jecxz   .170                                            ;branch if no next contiguous block
  3864                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3865                                                          jne     .170                                            ;no, branch
  3866                                  ;
  3867                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3868                                  ;
  3869                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3870                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3871                                  ;
  3872                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3873                                  ;
  3874                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3875                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3876                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3877                                                          jz      .110                                            ;no, branch
  3878                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3879                                                          jmp     .120                                            ;continue
  3880                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3881                                  ;-----------------------------------------------------------------------------------------------------------------------
  3882                                  ;
  3883                                  ;       Unlink the following contiguous FREE memory block
  3884                                  ;
  3885                                  ;-----------------------------------------------------------------------------------------------------------------------
  3886                                  ;
  3887                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3888                                  ;
  3889                                  .120                    push    edi                                             ;save this block
  3890                                                          mov     edi,ecx                                         ;next contiguous block
  3891                                                          push    ecx                                             ;save next contiguous block
  3892                                  ;
  3893                                  ;       Address the preceding and following USER memory blocks
  3894                                  ;
  3895                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3896                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3897                                  ;
  3898                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3899                                  ;       block pointer.
  3900                                  ;
  3901                                                          test    ebx,ebx                                         ;is there a previous block?
  3902                                                          jz      .130                                            ;no, branch
  3903                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3904                                                          jmp     .140                                            ;branch
  3905                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3906                                  ;
  3907                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3908                                  ;       pointer.
  3909                                  ;
  3910                                  .140                    jecxz   .150                                            ;branch if no next block
  3911                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3912                                                          jmp     .160                                            ;continue
  3913                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3914                                  ;
  3915                                  ;       Clear next contiguous block's header
  3916                                  ;
  3917                                  .160                    pop     edi                                             ;next congiguous block pointer
  3918                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3919                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3920                                                          rep     stosb                                           ;clear memory header
  3921                                                          pop     edi                                             ;this block's pointer
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;       Insert the final FREE block back into the block chain.
  3925                                  ;
  3926                                  ;-----------------------------------------------------------------------------------------------------------------------
  3927                                  ;
  3928                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3929                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3930                                  ;       all are smaller in size.
  3931                                  ;
  3932                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3933                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3934                                  .180                    jecxz   .190                                            ;exit if no ptr
  3935                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3936                                                          jb      .190                                            ;yes, branch
  3937                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3938                                                          jmp     .180                                            ;continue
  3939                                  ;
  3940                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3941                                  ;       larger free block. Update the next block's previous block pointer.
  3942                                  ;
  3943                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3944                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3945                                                          jecxz   .200                                            ;branch if no block found
  3946                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3947                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3948                                                          jmp     .210                                            ;continue
  3949                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3950                                  ;
  3951                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3952                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3953                                  ;       next pointer.
  3954                                  ;
  3955                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3956                                                          test    ebx,ebx                                         ;do we have a previous block?
  3957                                                          jz      .220                                            ;no, branch
  3958                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3959                                                          jmp     .230                                            ;continue
  3960                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3961                                  ;
  3962                                  ;       The memory free has completed.
  3963                                  ;
  3964                                  .230                    xor     eax,eax                                         ;indicate success
  3965                                  ;
  3966                                  ;       Restore and return.
  3967                                  ;
  3968                                  .240                    pop     es                                              ;restore non-volatile regs
  3969                                                          pop     ds                                              ;
  3970                                                          pop     edi                                             ;
  3971                                                          pop     esi                                             ;
  3972                                                          pop     ecx                                             ;
  3973                                                          pop     ebx                                             ;
  3974                                                          ret                                                     ;return
  3975                                  ;=======================================================================================================================
  3976                                  ;
  3977                                  ;       String Helper Routines
  3978                                  ;
  3979                                  ;       CompareMemory
  3980                                  ;       UpperCaseString
  3981                                  ;
  3982                                  ;=======================================================================================================================
  3983                                  ;-----------------------------------------------------------------------------------------------------------------------
  3984                                  ;
  3985                                  ;       Routine:        CompareMemory
  3986                                  ;
  3987                                  ;       Description:    This routine compares two byte arrays.
  3988                                  ;
  3989                                  ;       In:             DS:EDX  first source address
  3990                                  ;                       DS:EBX  second source address
  3991                                  ;                       ECX     comparison length
  3992                                  ;
  3993                                  ;       Out:            EDX     first source address
  3994                                  ;                       EBX     second source address
  3995                                  ;                       ECX     0       array 1 = array 2
  3996                                  ;                               <0      array 1 < array 2
  3997                                  ;                               >0      array 1 > array 2
  3998                                  ;
  3999                                  ;-----------------------------------------------------------------------------------------------------------------------
  4000                                  CompareMemory           push    esi                                             ;save non-volatile regs
  4001                                                          push    edi                                             ;
  4002                                                          push    es                                              ;
  4003                                                          push    ds                                              ;copy DS
  4004                                                          pop     es                                              ;... to ES
  4005                                                          mov     esi,edx                                         ;first source address
  4006                                                          mov     edi,ebx                                         ;second source address
  4007                                                          cld                                                     ;forward strings
  4008                                                          rep     cmpsb                                           ;compare bytes
  4009                                                          mov     al,0                                            ;default result
  4010                                                          jz      .10                                             ;branch if arrays equal
  4011                                                          mov     al,1                                            ;positive result
  4012                                                          jnc     .10                                             ;branch if target > source
  4013                                                          mov     al,-1                                           ;negative result
  4014                                  .10                     movsx   ecx,al                                          ;extend sign
  4015                                                          pop     es                                              ;restore non-volatile regs
  4016                                                          pop     edi                                             ;
  4017                                                          pop     esi                                             ;
  4018                                                          ret                                                     ;return
  4019                                  ;-----------------------------------------------------------------------------------------------------------------------
  4020                                  ;
  4021                                  ;       Routine:        UpperCaseString
  4022                                  ;
  4023                                  ;       Description:    This routine places all characters in the given string to upper case.
  4024                                  ;
  4025                                  ;       In:             DS:EDX  string address
  4026                                  ;
  4027                                  ;       Out:            EDX     string address
  4028                                  ;
  4029                                  ;-----------------------------------------------------------------------------------------------------------------------
  4030                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4031                                                          mov     esi,edx                                         ;string address
  4032                                                          cld                                                     ;forward strings
  4033                                  .10                     lodsb                                                   ;string character
  4034                                                          test    al,al                                           ;null?
  4035                                                          jz      .20                                             ;yes, skip ahead
  4036                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4037                                                          jb      .10                                             ;no, continue
  4038                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4039                                                          ja      .10                                             ;no, continue
  4040                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4041                                                          mov     [esi-1],al                                      ;upper character
  4042                                                          jmp     .10                                             ;continue
  4043                                  .20                     pop     esi                                             ;restore non-volatile regs
  4044                                                          ret                                                     ;return
  4045                                  ;=======================================================================================================================
  4046                                  ;
  4047                                  ;       Console Helper Routines
  4048                                  ;
  4049                                  ;       FirstConsoleColumn
  4050                                  ;       GetConsoleChar
  4051                                  ;       GetConsoleString
  4052                                  ;       NextConsoleColumn
  4053                                  ;       NextConsoleRow
  4054                                  ;       PreviousConsoleColumn
  4055                                  ;       PutConsoleChar
  4056                                  ;       PutConsoleHexByte
  4057                                  ;       PutConsoleHexDword
  4058                                  ;       PutConsoleHexWord
  4059                                  ;       PutConsoleOIAChar
  4060                                  ;       PutConsoleOIAShift
  4061                                  ;       PutConsoleString
  4062                                  ;       Yield
  4063                                  ;
  4064                                  ;=======================================================================================================================
  4065                                  ;-----------------------------------------------------------------------------------------------------------------------
  4066                                  ;
  4067                                  ;       Routine:        FirstConsoleColumn
  4068                                  ;
  4069                                  ;       Description:    This routine resets the console column to start of the row.
  4070                                  ;
  4071                                  ;       In:             DS      OS data selector
  4072                                  ;
  4073                                  ;-----------------------------------------------------------------------------------------------------------------------
  4074                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4075                                                          mov     [wbConsoleColumn],al                            ;save column
  4076                                                          ret                                                     ;return
  4077                                  ;-----------------------------------------------------------------------------------------------------------------------
  4078                                  ;
  4079                                  ;       Routine:        GetConsoleChar
  4080                                  ;
  4081                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4082                                  ;
  4083                                  ;       Out:            AL      ASCII character code
  4084                                  ;                       AH      keyboard scan code
  4085                                  ;
  4086                                  ;-----------------------------------------------------------------------------------------------------------------------
  4087                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4088                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4089                                                          or      eax,eax                                         ;do we have a message?
  4090                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4091                                                          push    eax                                             ;save key codes
  4092                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4093                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4094                                                          pop     eax                                             ;restore key codes
  4095                                                          jne     GetConsoleChar                                  ;no, try again
  4096                                                          and     eax,0000ffffh                                   ;mask for key codes
  4097                                                          ret                                                     ;return
  4098                                  ;-----------------------------------------------------------------------------------------------------------------------
  4099                                  ;
  4100                                  ;       Routine:        GetConsoleString
  4101                                  ;
  4102                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4103                                  ;
  4104                                  ;       In:             DS:EDX  target buffer address
  4105                                  ;                       ECX     maximum number of characters to accept
  4106                                  ;                       BH      echo to terminal
  4107                                  ;                       BL      terminating character
  4108                                  ;
  4109                                  ;-----------------------------------------------------------------------------------------------------------------------
  4110                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4111                                                          push    esi                                             ;
  4112                                                          push    edi                                             ;
  4113                                                          push    es                                              ;
  4114                                                          push    ds                                              ;load data segment selector ...
  4115                                                          pop     es                                              ;... into extra segment register
  4116                                                          mov     edi,edx                                         ;edi = target buffer
  4117                                                          push    ecx                                             ;save maximum characters
  4118                                                          xor     al,al                                           ;zero register
  4119                                                          cld                                                     ;forward strings
  4120                                                          rep     stosb                                           ;zero fill buffer
  4121                                                          pop     ecx                                             ;maximum characters
  4122                                                          mov     edi,edx                                         ;edi = target buffer
  4123                                                          mov     esi,edx                                         ;esi = target buffer
  4124                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4125                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4126                                                          cmp     al,bl                                           ;is this the terminator?
  4127                                                          je      .50                                             ;yes, exit
  4128                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4129                                                          jne     .30                                             ;no, skip ahead
  4130                                                          cmp     esi,edi                                         ;at start of buffer?
  4131                                                          je      .20                                             ;yes, get next character
  4132                                                          dec     edi                                             ;backup target pointer
  4133                                                          mov     byte [edi],0                                    ;zero previous character
  4134                                                          inc     ecx                                             ;increment remaining chars
  4135                                                          test    bh,1                                            ;echo to console?
  4136                                                          jz      .20                                             ;no, get next character
  4137                                                          call    PreviousConsoleColumn                           ;backup console position
  4138                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4139                                                          call    PutConsoleChar                                  ;write space to console
  4140                                                          call    PlaceCursor                                     ;position the cursor
  4141                                                          jmp     .20                                             ;get next character
  4142                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4143                                                          jb      .20                                             ;no, get another character
  4144                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4145                                                          ja      .20                                             ;no, get another character
  4146                                                          stosb                                                   ;store character in buffer
  4147                                                          test    bh,1                                            ;echo to console?
  4148                                                          jz      .40                                             ;no, skip ahead
  4149                                                          call    PutConsoleChar                                  ;write character to console
  4150                                                          call    NextConsoleColumn                               ;advance console position
  4151                                                          call    PlaceCursor                                     ;position the cursor
  4152                                  .40                     dec     ecx                                             ;decrement remaining chars
  4153                                                          jmp     .10                                             ;next
  4154                                  .50                     xor     al,al                                           ;null
  4155                                                          stosb                                                   ;terminate buffer
  4156                                                          pop     es                                              ;restore non-volatile regs
  4157                                                          pop     edi                                             ;
  4158                                                          pop     esi                                             ;
  4159                                                          pop     ecx                                             ;
  4160                                                          ret                                                     ;return
  4161                                  ;-----------------------------------------------------------------------------------------------------------------------
  4162                                  ;
  4163                                  ;       Routine:        NextConsoleColumn
  4164                                  ;
  4165                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4166                                  ;                       incremented if the end of the current row is reached.
  4167                                  ;
  4168                                  ;       In:             DS      OS data selector
  4169                                  ;
  4170                                  ;-----------------------------------------------------------------------------------------------------------------------
  4171                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4172                                                          inc     al                                              ;increment column
  4173                                                          mov     [wbConsoleColumn],al                            ;save column
  4174                                                          cmp     al,ECONCOLS                                     ;end of row?
  4175                                                          jb      .10                                             ;no, skip ahead
  4176                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4177                                                          call    NextConsoleRow                                  ;line feed to next row
  4178                                  .10                     ret                                                     ;return
  4179                                  ;-----------------------------------------------------------------------------------------------------------------------
  4180                                  ;
  4181                                  ;       Routine:        NextConsoleRow
  4182                                  ;
  4183                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4184                                  ;
  4185                                  ;       In:             DS      OS data selector
  4186                                  ;
  4187                                  ;-----------------------------------------------------------------------------------------------------------------------
  4188                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4189                                                          inc     al                                              ;increment row
  4190                                                          mov     [wbConsoleRow],al                               ;save row
  4191                                                          cmp     al,ECONROWS                                     ;end of screen?
  4192                                                          jb      .10                                             ;no, skip ahead
  4193                                                          call    ScrollConsoleRow                                ;scroll up one row
  4194                                                          mov     al,[wbConsoleRow]                               ;row
  4195                                                          dec     al                                              ;decrement row
  4196                                                          mov     [wbConsoleRow],al                               ;save row
  4197                                  .10                     ret                                                     ;return
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199                                  ;
  4200                                  ;       Routine:        PreviousConsoleColumn
  4201                                  ;
  4202                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4203                                  ;                       the column is set to the last position in the row and the row is decremented.
  4204                                  ;
  4205                                  ;       In:             DS      OS data selector
  4206                                  ;
  4207                                  ;-----------------------------------------------------------------------------------------------------------------------
  4208                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4209                                                          or      al,al                                           ;start of row?
  4210                                                          jnz     .10                                             ;no, skip ahead
  4211                                                          mov     ah,[wbConsoleRow]                               ;current row
  4212                                                          or      ah,ah                                           ;top of screen?
  4213                                                          jz      .20                                             ;yes, exit with no change
  4214                                                          dec     ah                                              ;decrement row
  4215                                                          mov     [wbConsoleRow],ah                               ;save row
  4216                                                          mov     al,ECONCOLS                                     ;set maximum column
  4217                                  .10                     dec     al                                              ;decrement column
  4218                                                          mov     [wbConsoleColumn],al                            ;save column
  4219                                  .20                     ret                                                     ;return
  4220                                  ;-----------------------------------------------------------------------------------------------------------------------
  4221                                  ;
  4222                                  ;       Routine:        PutConsoleChar
  4223                                  ;
  4224                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4225                                  ;
  4226                                  ;       In:             AL      ASCII character
  4227                                  ;                       DS      OS data selector
  4228                                  ;
  4229                                  ;-----------------------------------------------------------------------------------------------------------------------
  4230                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4231                                                          push    es                                              ;
  4232                                                          push    EGDTCGA                                         ;load CGA selector ...
  4233                                                          pop     es                                              ;... into extra segment reg
  4234                                                          mov     cl,[wbConsoleColumn]                            ;column
  4235                                                          mov     ch,[wbConsoleRow]                               ;row
  4236                                                          call    SetConsoleChar                                  ;put character at row, column
  4237                                                          pop     es                                              ;restore non-volatile regs
  4238                                                          pop     ecx                                             ;
  4239                                                          ret                                                     ;return
  4240                                  ;-----------------------------------------------------------------------------------------------------------------------
  4241                                  ;
  4242                                  ;       Routine:        PutConsoleHexByte
  4243                                  ;
  4244                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4245                                  ;
  4246                                  ;       In:             AL      byte value
  4247                                  ;                       CL      column
  4248                                  ;                       CH      row
  4249                                  ;                       DS      OS data selector
  4250                                  ;                       ES      CGA selector
  4251                                  ;
  4252                                  ;-----------------------------------------------------------------------------------------------------------------------
  4253                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4254                                                          mov     bl,al                                           ;save byte value
  4255                                                          shr     al,4                                            ;hi-order nybble
  4256                                                          or      al,030h                                         ;apply ASCII zone
  4257                                                          cmp     al,03ah                                         ;numeric?
  4258                                                          jb      .10                                             ;yes, skip ahead
  4259                                                          add     al,7                                            ;add ASCII offset for alpha
  4260                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4261                                                          mov     al,bl                                           ;byte value
  4262                                                          and     al,0fh                                          ;lo-order nybble
  4263                                                          or      al,30h                                          ;apply ASCII zone
  4264                                                          cmp     al,03ah                                         ;numeric?
  4265                                                          jb      .20                                             ;yes, skip ahead
  4266                                                          add     al,7                                            ;add ASCII offset for alpha
  4267                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4268                                                          pop     ebx                                             ;restore non-volatile regs
  4269                                                          ret                                                     ;return
  4270                                  ;-----------------------------------------------------------------------------------------------------------------------
  4271                                  ;
  4272                                  ;       Routine:        PutConsoleHexDword
  4273                                  ;
  4274                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4275                                  ;
  4276                                  ;       In:             EAX     value
  4277                                  ;                       CL      column
  4278                                  ;                       CH      row
  4279                                  ;                       DS      OS data selector
  4280                                  ;                       ES      CGA selector
  4281                                  ;
  4282                                  ;-----------------------------------------------------------------------------------------------------------------------
  4283                                  PutConsoleHexDword      push    eax
  4284                                                          shr     eax,16
  4285                                                          call    PutConsoleHexWord
  4286                                                          pop     eax
  4287                                                          call    PutConsoleHexWord
  4288                                                          ret
  4289                                  ;-----------------------------------------------------------------------------------------------------------------------
  4290                                  ;
  4291                                  ;       Routine:        PutConsoleHexWord
  4292                                  ;
  4293                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4294                                  ;
  4295                                  ;       In:             EAX     value
  4296                                  ;                       CL      column
  4297                                  ;                       CH      row
  4298                                  ;                       DS      OS data selector
  4299                                  ;                       ES      CGA selector
  4300                                  ;
  4301                                  ;-----------------------------------------------------------------------------------------------------------------------
  4302                                  PutConsoleHexWord       push    eax
  4303                                                          shr     eax,8
  4304                                                          call    PutConsoleHexByte
  4305                                                          pop     eax
  4306                                                          call    PutConsoleHexByte
  4307                                                          ret
  4308                                  ;-----------------------------------------------------------------------------------------------------------------------
  4309                                  ;
  4310                                  ;       Routine:        PutConsoleOIAChar
  4311                                  ;
  4312                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4313                                  ;
  4314                                  ;       In:             DS      OS data selector
  4315                                  ;
  4316                                  ;-----------------------------------------------------------------------------------------------------------------------
  4317                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4318                                                          push    ecx                                             ;
  4319                                                          push    esi                                             ;
  4320                                                          push    ds                                              ;
  4321                                                          push    es                                              ;
  4322                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4323                                                          pop     ds                                              ;... into data segment register
  4324                                                          push    EGDTCGA                                         ;load CGA selector ...
  4325                                                          pop     es                                              ;... into extra segment register
  4326                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4327                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4328                                                          mov     bl,0                                            ;starting column
  4329                                                          mov     ecx,6                                           ;maximum scan codes
  4330                                  .10                     push    ecx                                             ;save remaining count
  4331                                                          mov     ecx,ebx                                         ;row, column
  4332                                                          lodsb                                                   ;read scan code
  4333                                                          or      al,al                                           ;scan code present?
  4334                                                          jz      .20                                             ;no, skip ahead
  4335                                                          call    PutConsoleHexByte                               ;display scan code
  4336                                                          jmp     .30                                             ;continue
  4337                                  .20                     mov     al,' '                                          ;ASCII space
  4338                                                          call    SetConsoleChar                                  ;display space
  4339                                                          mov     al,' '                                          ;ASCII space
  4340                                                          call    SetConsoleChar                                  ;display space
  4341                                  .30                     add     bl,2                                            ;next column (+2)
  4342                                                          pop     ecx                                             ;restore remaining
  4343                                                          loop    .10                                             ;next code
  4344                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4345                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4346                                                          jb      .40                                             ;no, skip ahead
  4347                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4348                                                          ja      .40                                             ;no, skip ahead
  4349                                                          mov     ch,bh                                           ;OIA row
  4350                                                          mov     cl,40                                           ;character display column
  4351                                                          call    SetConsoleChar                                  ;display ASCII character
  4352                                  .40                     pop     es                                              ;restore non-volatile regs
  4353                                                          pop     ds                                              ;
  4354                                                          pop     esi                                             ;
  4355                                                          pop     ecx                                             ;
  4356                                                          pop     ebx                                             ;
  4357                                                          ret                                                     ;return
  4358                                  ;-----------------------------------------------------------------------------------------------------------------------
  4359                                  ;
  4360                                  ;       Routine:        PutConsoleOIAShift
  4361                                  ;
  4362                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4363                                  ;
  4364                                  ;       In:             BL      shift flags
  4365                                  ;                       BH      lock flags
  4366                                  ;                       DS      OS data selector
  4367                                  ;
  4368                                  ;-----------------------------------------------------------------------------------------------------------------------
  4369                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4370                                                          push    es                                              ;
  4371                                                          push    EGDTCGA                                         ;load CGA selector ...
  4372                                                          pop     es                                              ;... into ES register
  4373                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4374                                                          mov     al,EASCIISPACE                                  ;space is default character
  4375                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4376                                                          jz      .10                                             ;no, skip ahead
  4377                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4378                                  .10                     mov     cl,14                                           ;indicator column
  4379                                                          call    SetConsoleChar                                  ;display ASCII character
  4380                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4381                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4382                                                          jz      .20                                             ;no, skip ahead
  4383                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4384                                  .20                     mov     cl,64                                           ;indicator column
  4385                                                          call    SetConsoleChar                                  ;display ASCII character
  4386                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4387                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4388                                                          jz      .30                                             ;no, skip ahead
  4389                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4390                                  .30                     mov     cl,15                                           ;indicator column
  4391                                                          call    SetConsoleChar                                  ;display ASCII character
  4392                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4393                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4394                                                          jz      .40                                             ;no, skip ahead
  4395                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4396                                  .40                     mov     cl,63                                           ;indicator column
  4397                                                          call    SetConsoleChar                                  ;display ASCII character
  4398                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4399                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4400                                                          jz      .50                                             ;no, skip ahead
  4401                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4402                                  .50                     mov     cl,16                                           ;indicator column
  4403                                                          call    SetConsoleChar                                  ;display ASCII character
  4404                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4405                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4406                                                          jz      .60                                             ;no, skip ahead
  4407                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4408                                  .60                     mov     cl,62                                           ;indicator column
  4409                                                          call    SetConsoleChar                                  ;display ASCII character
  4410                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4411                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4412                                                          jz      .70                                             ;no, skip ahead
  4413                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4414                                  .70                     mov     cl,78                                           ;indicator column
  4415                                                          call    SetConsoleChar                                  ;display ASCII character
  4416                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4417                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4418                                                          jz      .80                                             ;no, skip ahead
  4419                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4420                                  .80                     mov     cl,77                                           ;indicator column
  4421                                                          call    SetConsoleChar                                  ;display ASCII character
  4422                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4423                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4424                                                          jz      .90                                             ;no, skip ahead
  4425                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4426                                  .90                     mov     cl,76                                           ;indicator column
  4427                                                          call    SetConsoleChar                                  ;display ASCII character
  4428                                                          pop     es                                              ;restore non-volatile regs
  4429                                                          pop     ecx                                             ;
  4430                                                          ret                                                     ;return
  4431                                  ;-----------------------------------------------------------------------------------------------------------------------
  4432                                  ;
  4433                                  ;       Routine:        PutConsoleString
  4434                                  ;
  4435                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4436                                  ;                       console position as needed.
  4437                                  ;
  4438                                  ;       In:             EDX     source address
  4439                                  ;                       DS      OS data selector
  4440                                  ;
  4441                                  ;-----------------------------------------------------------------------------------------------------------------------
  4442                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4443                                                          mov     esi,edx                                         ;source address
  4444                                                          cld                                                     ;forward strings
  4445                                  .10                     lodsb                                                   ;ASCII character
  4446                                                          or      al,al                                           ;end of string?
  4447                                                          jz      .40                                             ;yes, skip ahead
  4448                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4449                                                          jne     .20                                             ;no, skip ahead
  4450                                                          call    FirstConsoleColumn                              ;move to start of row
  4451                                                          jmp     .10                                             ;next character
  4452                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4453                                                          jne     .30                                             ;no, skip ahead
  4454                                                          call    NextConsoleRow                                  ;move to next row
  4455                                                          jmp     .10                                             ;next character
  4456                                  .30                     call    PutConsoleChar                                  ;output character to console
  4457                                                          call    NextConsoleColumn                               ;advance to next column
  4458                                                          jmp     .10                                             ;next character
  4459                                  .40                     pop     esi                                             ;restore non-volatile regs
  4460                                                          ret                                                     ;return
  4461                                  ;-----------------------------------------------------------------------------------------------------------------------
  4462                                  ;
  4463                                  ;       Routine:        Yield
  4464                                  ;
  4465                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4466                                  ;
  4467                                  ;-----------------------------------------------------------------------------------------------------------------------
  4468                                  Yield                   sti                                                     ;enable maskagle interrupts
  4469                                                          hlt                                                     ;halt until external interrupt
  4470                                                          ret                                                     ;return
  4471                                  ;=======================================================================================================================
  4472                                  ;
  4473                                  ;       Data-Type Conversion Helper Routines
  4474                                  ;
  4475                                  ;       DecimalToUnsigned
  4476                                  ;       HexadecimalToUnsigned
  4477                                  ;       UnsignedToDecimalString
  4478                                  ;       UnsignedToHexadecimal
  4479                                  ;
  4480                                  ;=======================================================================================================================
  4481                                  ;-----------------------------------------------------------------------------------------------------------------------
  4482                                  ;
  4483                                  ;       Routine:        DecimalToUnsigned
  4484                                  ;
  4485                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4486                                  ;
  4487                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4488                                  ;
  4489                                  ;       Output:         EAX     unsigned integer value
  4490                                  ;
  4491                                  ;-----------------------------------------------------------------------------------------------------------------------
  4492                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4493                                                          mov     esi,edx                                         ;source address
  4494                                                          xor     edx,edx                                         ;zero total
  4495                                  .10                     lodsb                                                   ;source byte
  4496                                                          cmp     al,','                                          ;comma?
  4497                                                          je      .10                                             ;yes, ignore
  4498                                                          test    al,al                                           ;end of string?
  4499                                                          jz      .30                                             ;yes, done
  4500                                                          cmp     al,'.'                                          ;decimal point?
  4501                                                          je      .30                                             ;yes, done
  4502                                                          cmp     al,'0'                                          ;numeral?
  4503                                                          jb      .20                                             ;no, invalid string
  4504                                                          cmp     al,'9'                                          ;numeral?
  4505                                                          ja      .20                                             ;no, invalid string
  4506                                                          and     al,00Fh                                         ;mask ASCII zone
  4507                                                          push    eax                                             ;save numeral
  4508                                                          shl     edx,1                                           ;total * 2
  4509                                                          mov     eax,edx                                         ;total * 2
  4510                                                          shl     edx,2                                           ;total * 8
  4511                                                          add     edx,eax                                         ;total * 10
  4512                                                          pop     eax                                             ;restore numeral
  4513                                                          add     edx,eax                                         ;accumulate decimal digit
  4514                                                          xor     eax,eax                                         ;zero register
  4515                                                          jmp     .10                                             ;next
  4516                                  .20                     xor     edx,edx                                         ;zero result on error
  4517                                  .30                     mov     eax,edx                                         ;result
  4518                                                          pop     esi                                             ;restore non-volatile regs
  4519                                                          ret                                                     ;return
  4520                                  ;-----------------------------------------------------------------------------------------------------------------------
  4521                                  ;
  4522                                  ;       Routine:        HexadecimalToUnsigned
  4523                                  ;
  4524                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4525                                  ;
  4526                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4527                                  ;
  4528                                  ;       Output:         EAX     unsigned integer value
  4529                                  ;
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4532                                                          mov     esi,edx                                         ;source address
  4533                                                          xor     edx,edx                                         ;zero register
  4534                                  .10                     lodsb                                                   ;source byte
  4535                                                          test    al,al                                           ;end of string?
  4536                                                          jz      .30                                             ;yes, branch
  4537                                                          cmp     al,'9'                                          ;hexadecimal?
  4538                                                          jna     .20                                             ;no, skip ahead
  4539                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4540                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4541                                                          shl     edx,4                                           ;previous total x 16
  4542                                                          add     edx,eax                                         ;add prior value x 16
  4543                                                          jmp     .10                                             ;next
  4544                                  .30                     mov     eax,edx                                         ;result
  4545                                                          pop     esi                                             ;restore non-volatile regs
  4546                                                          ret                                                     ;return
  4547                                  ;-----------------------------------------------------------------------------------------------------------------------
  4548                                  ;
  4549                                  ;       Routine:        UnsignedToDecimalString
  4550                                  ;
  4551                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4552                                  ;
  4553                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4554                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4555                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4556                                  ;                       ECX     32-bit binary
  4557                                  ;                       DS:EDX  output buffer address
  4558                                  ;
  4559                                  ;-----------------------------------------------------------------------------------------------------------------------
  4560                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4561                                                          push    ecx                                             ;
  4562                                                          push    edi                                             ;
  4563                                                          push    es                                              ;
  4564                                                          push    ds                                              ;load data selector
  4565                                                          pop     es                                              ;... into extra segment reg
  4566                                                          mov     edi,edx                                         ;output buffer address
  4567                                                          and     bh,00001111b                                    ;zero internal flags
  4568                                                          mov     edx,ecx                                         ;binary
  4569                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4570                                                          call    .30                                             ;divide and store
  4571                                                          mov     ecx,100000000                                   ;10^8 divisor
  4572                                                          call    .10                                             ;divide and store
  4573                                                          mov     ecx,10000000                                    ;10^7 divisor
  4574                                                          call    .30                                             ;divide and store
  4575                                                          mov     ecx,1000000                                     ;10^6 divisor
  4576                                                          call    .30                                             ;divide and store
  4577                                                          mov     ecx,100000                                      ;10^5 divisor
  4578                                                          call    .10                                             ;divide and store
  4579                                                          mov     ecx,10000                                       ;10^4 divisor
  4580                                                          call    .30                                             ;divide and store
  4581                                                          mov     ecx,1000                                        ;10^3 divisor
  4582                                                          call    .30                                             ;divide and store
  4583                                                          mov     ecx,100                                         ;10^2 divisor
  4584                                                          call    .10                                             ;divide and store
  4585                                                          mov     ecx,10                                          ;10^2 divisor
  4586                                                          call    .30                                             ;divide and store
  4587                                                          mov     eax,edx                                         ;10^1 remainder
  4588                                                          call    .40                                             ;store
  4589                                                          xor     al,al                                           ;null terminator
  4590                                                          stosb
  4591                                                          pop     es                                              ;restore non-volatile regs
  4592                                                          pop     edi                                             ;
  4593                                                          pop     ecx                                             ;
  4594                                                          pop     ebx                                             ;
  4595                                                          ret                                                     ;return
  4596                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4597                                                          jz      .30                                             ;no, branch
  4598                                                          test    bh,00000001b                                    ;trim leading zeros?
  4599                                                          jz      .20                                             ;no, store delim
  4600                                                          test    bh,00010000b                                    ;non-zero found?
  4601                                                          jz      .30                                             ;no, branch
  4602                                  .20                     mov     al,','                                          ;delimiter
  4603                                                          stosb                                                   ;store delimiter
  4604                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4605                                                          xor     edx,edx                                         ;zero hi-order
  4606                                                          div     ecx                                             ;divide by power of 10
  4607                                                          test    al,al                                           ;zero?
  4608                                                          jz      .50                                             ;yes, branch
  4609                                                          or      bh,00010000b                                    ;non-zero found
  4610                                  .40                     or      al,30h                                          ;ASCII zone
  4611                                                          stosb                                                   ;store digit
  4612                                                          ret                                                     ;return
  4613                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4614                                                          jz      .40                                             ;no, store and continue
  4615                                                          test    bh,00010000b                                    ;non-zero found?
  4616                                                          jnz     .40                                             ;yes, store and continue
  4617                                                          ret                                                     ;return
  4618                                  ;-----------------------------------------------------------------------------------------------------------------------
  4619                                  ;
  4620                                  ;       Routine:        UnsignedToHexadecimal
  4621                                  ;
  4622                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4623                                  ;
  4624                                  ;       Input:          DS:EDX  output buffer address
  4625                                  ;                       ECX     32-bit binary
  4626                                  ;
  4627                                  ;-----------------------------------------------------------------------------------------------------------------------
  4628                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4629                                                          mov     edi,edx                                         ;output buffer address
  4630                                                          mov     edx,ecx                                         ;32-bit unsigned
  4631                                                          xor     ecx,ecx                                         ;zero register
  4632                                                          mov     cl,8                                            ;nybble count
  4633                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4634                                                          mov     al,dl                                           ;????bbbb
  4635                                                          and     al,0fh                                          ;mask out bits 4-7
  4636                                                          or      al,30h                                          ;mask in ascii zone
  4637                                                          cmp     al,3ah                                          ;A through F?
  4638                                                          jb      .20                                             ;no, skip ahead
  4639                                                          add     al,7                                            ;41h through 46h
  4640                                  .20                     stosb                                                   ;store hexnum
  4641                                                          loop    .10                                             ;next nybble
  4642                                                          xor     al,al                                           ;zero reg
  4643                                                          stosb                                                   ;null terminate
  4644                                                          pop     edi                                             ;restore non-volatile regs
  4645                                                          ret                                                     ;return
  4646                                  ;=======================================================================================================================
  4647                                  ;
  4648                                  ;       Message Queue Helper Routines
  4649                                  ;
  4650                                  ;       GetMessage
  4651                                  ;       PutMessage
  4652                                  ;
  4653                                  ;=======================================================================================================================
  4654                                  ;-----------------------------------------------------------------------------------------------------------------------
  4655                                  ;
  4656                                  ;       Routine:        GetMessage
  4657                                  ;
  4658                                  ;       Description:    This routine reads and removes a message from the message queue.
  4659                                  ;
  4660                                  ;       Out:            EAX     lo-order message data
  4661                                  ;                       EDX     hi-order message data
  4662                                  ;
  4663                                  ;                       CY      0 = message read
  4664                                  ;                               1 = no message to read
  4665                                  ;
  4666                                  ;-----------------------------------------------------------------------------------------------------------------------
  4667                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4668                                                          push    ecx                                             ;
  4669                                                          push    ds                                              ;
  4670                                                          push    ELDTMQ                                          ;load message queue selector ...
  4671                                                          pop     ds                                              ;... into data segment register
  4672                                                          mov     ebx,[MQHead]                                    ;head ptr
  4673                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4674                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4675                                                          or      eax,edx                                         ;is queue empty?
  4676                                                          stc                                                     ;assume queue is emtpy
  4677                                                          jz      .20                                             ;yes, skip ahead
  4678                                                          xor     ecx,ecx                                         ;store zero
  4679                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4680                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4681                                                          add     ebx,8                                           ;next queue element
  4682                                                          and     ebx,03fch                                       ;at end of queue?
  4683                                                          jnz     .10                                             ;no, skip ahead
  4684                                                          mov     bl,8                                            ;reset to 1st entry
  4685                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4686                                                          clc                                                     ;indicate message read
  4687                                  .20                     pop     ds                                              ;restore non-volatile regs
  4688                                                          pop     ecx                                             ;
  4689                                                          pop     ebx                                             ;
  4690                                                          ret                                                     ;return
  4691                                  ;-----------------------------------------------------------------------------------------------------------------------
  4692                                  ;
  4693                                  ;       Routine:        PutMessage
  4694                                  ;
  4695                                  ;       Description:    This routine adda a message to the message queue.
  4696                                  ;
  4697                                  ;       In:             ECX     hi-order data word
  4698                                  ;                       EDX     lo-order data word
  4699                                  ;
  4700                                  ;       Out:            CY      0 = success
  4701                                  ;                               1 = fail: queue is full
  4702                                  ;
  4703                                  ;-----------------------------------------------------------------------------------------------------------------------
  4704                                  PutMessage              push    ds                                              ;save non-volatile regs
  4705                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4706                                                          pop     ds                                              ;... into data segment register
  4707                                                          mov     eax,[MQTail]                                    ;tail ptr
  4708                                                          cmp     dword [eax],0                                   ;is queue full?
  4709                                                          stc                                                     ;assume failure
  4710                                                          jne     .20                                             ;yes, cannot store
  4711                                                          mov     [eax],edx                                       ;store lo-order data
  4712                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4713                                                          add     eax,8                                           ;next queue element adr
  4714                                                          and     eax,03fch                                       ;at end of queue?
  4715                                                          jnz     .10                                             ;no, skip ahead
  4716                                                          mov     al,8                                            ;reset to top of queue
  4717                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4718                                                          clc                                                     ;indicate success
  4719                                  .20                     pop     ds                                              ;restore non-volatile regs
  4720                                                          ret                                                     ;return
  4721                                  ;=======================================================================================================================
  4722                                  ;
  4723                                  ;       Memory-Mapped Video Routines
  4724                                  ;
  4725                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4726                                  ;
  4727                                  ;       ClearConsoleScreen
  4728                                  ;       ScrollConsoleRow
  4729                                  ;       SetConsoleChar
  4730                                  ;       SetConsoleString
  4731                                  ;
  4732                                  ;=======================================================================================================================
  4733                                  ;-----------------------------------------------------------------------------------------------------------------------
  4734                                  ;
  4735                                  ;       Routine:        ClearConsoleScreen
  4736                                  ;
  4737                                  ;       Description:    This routine clears the console (CGA) screen.
  4738                                  ;
  4739                                  ;-----------------------------------------------------------------------------------------------------------------------
  4740                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4741                                                          push    edi                                             ;
  4742                                                          push    ds                                              ;
  4743                                                          push    es                                              ;
  4744                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4745                                                          pop     ds                                              ;... into DS register
  4746                                                          push    EGDTCGA                                         ;load CGA selector ...
  4747                                                          pop     es                                              ;... into ES register
  4748                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4749                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4750                                                          xor     edi,edi                                         ;target offset
  4751                                                          cld                                                     ;forward strings
  4752                                                          rep     stosd                                           ;reset screen body
  4753                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4754                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4755                                                          rep     stosd                                           ;reset OIA line
  4756                                                          xor     al,al                                           ;zero register
  4757                                                          mov     [wbConsoleRow],al                               ;reset console row
  4758                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4759                                                          call    PlaceCursor                                     ;place cursor at current position
  4760                                                          pop     es                                              ;restore non-volatile regs
  4761                                                          pop     ds                                              ;
  4762                                                          pop     edi                                             ;
  4763                                                          pop     ecx                                             ;
  4764                                                          ret                                                     ;return
  4765                                  ;-----------------------------------------------------------------------------------------------------------------------
  4766                                  ;
  4767                                  ;       Routine:        ScrollConsoleRow
  4768                                  ;
  4769                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4770                                  ;
  4771                                  ;-----------------------------------------------------------------------------------------------------------------------
  4772                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4773                                                          push    esi                                             ;
  4774                                                          push    edi                                             ;
  4775                                                          push    ds                                              ;
  4776                                                          push    es                                              ;
  4777                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4778                                                          pop     ds                                              ;... into DS
  4779                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4780                                                          pop     es                                              ;... into ES
  4781                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4782                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4783                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4784                                                          cld                                                     ;forward strings
  4785                                                          rep     movsd                                           ;move 24 lines up
  4786                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4787                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4788                                                          rep     stosd                                           ;clear bottom row
  4789                                                          pop     es                                              ;restore non-volatile regs
  4790                                                          pop     ds                                              ;
  4791                                                          pop     edi                                             ;
  4792                                                          pop     esi                                             ;
  4793                                                          pop     ecx                                             ;
  4794                                                          ret                                                     ;return
  4795                                  ;-----------------------------------------------------------------------------------------------------------------------
  4796                                  ;
  4797                                  ;       Routine:        SetConsoleChar
  4798                                  ;
  4799                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4800                                  ;
  4801                                  ;       In:             AL      ASCII character
  4802                                  ;                       CL      column
  4803                                  ;                       CH      row
  4804                                  ;                       ES      CGA selector
  4805                                  ;
  4806                                  ;       Out:            EAX     last target address written (ES:)
  4807                                  ;                       CL      column + 1
  4808                                  ;
  4809                                  ;-----------------------------------------------------------------------------------------------------------------------
  4810                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4811                                                          movzx   eax,ch                                          ;row
  4812                                                          mov     ah,ECONCOLS                                     ;cols/row
  4813                                                          mul     ah                                              ;row * cols/row
  4814                                                          add     al,cl                                           ;add column
  4815                                                          adc     ah,0                                            ;handle carry
  4816                                                          shl     eax,1                                           ;screen offset
  4817                                                          mov     [es:eax],dl                                     ;store character
  4818                                                          inc     cl                                              ;next column
  4819                                                          ret                                                     ;return
  4820                                  ;-----------------------------------------------------------------------------------------------------------------------
  4821                                  ;
  4822                                  ;       Routine:        SetConsoleString
  4823                                  ;
  4824                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4825                                  ;
  4826                                  ;       In:             ESI     source offset (DS:)
  4827                                  ;                       CL      column
  4828                                  ;                       CH      row
  4829                                  ;                       ES      CGA selector
  4830                                  ;
  4831                                  ;-----------------------------------------------------------------------------------------------------------------------
  4832                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4833                                                          cld                                                     ;forward strings
  4834                                  .10                     lodsb                                                   ;next ASCII character
  4835                                                          test    al,al                                           ;end of string?
  4836                                                          jz      .20                                             ;yes, branch
  4837                                                          call    SetConsoleChar                                  ;store character
  4838                                                          jmp     .10                                             ;continue
  4839                                  .20                     pop     esi                                             ;restore non-volatile regs
  4840                                                          ret                                                     ;return
  4841                                  ;=======================================================================================================================
  4842                                  ;
  4843                                  ;       Input/Output Routines
  4844                                  ;
  4845                                  ;       These routines read and/or write directly to ports.
  4846                                  ;
  4847                                  ;       GetBaseMemSize
  4848                                  ;       GetExtendedMemSize
  4849                                  ;       GetROMMemSize
  4850                                  ;       PlaceCursor
  4851                                  ;       PutPrimaryEndOfInt
  4852                                  ;       PutSecondaryEndOfInt
  4853                                  ;       ReadRealTimeClock
  4854                                  ;       ResetSystem
  4855                                  ;       SetKeyboardLamps
  4856                                  ;       WaitForKeyInBuffer
  4857                                  ;       WaitForKeyOutBuffer
  4858                                  ;
  4859                                  ;=======================================================================================================================
  4860                                  ;-----------------------------------------------------------------------------------------------------------------------
  4861                                  ;
  4862                                  ;       Routine:        GetBaseMemSize
  4863                                  ;
  4864                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4865                                  ;
  4866                                  ;       Output:         EAX     base RAM size in bytes
  4867                                  ;
  4868                                  ;-----------------------------------------------------------------------------------------------------------------------
  4869                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4870                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4871                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4872                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4873                                                          mov     ah,al                                           ;save base RAM high
  4874                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4875                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4876                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4877                                                          ret                                                     ;return to caller
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        GetExtendedMemSize
  4881                                  ;
  4882                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4883                                  ;
  4884                                  ;       Output:         EAX     extended RAM size in bytes
  4885                                  ;
  4886                                  ;-----------------------------------------------------------------------------------------------------------------------
  4887                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4888                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4889                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4890                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4891                                                          mov     ah,al                                           ;save extended RAM high
  4892                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4893                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  4894                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4895                                                          ret                                                     ;return to caller
  4896                                  ;-----------------------------------------------------------------------------------------------------------------------
  4897                                  ;
  4898                                  ;       Routine:        GetROMMemSize
  4899                                  ;
  4900                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4901                                  ;
  4902                                  ;       Output:         EAX     RAM size in bytes
  4903                                  ;
  4904                                  ;-----------------------------------------------------------------------------------------------------------------------
  4905                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  4906                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4907                                                          ret                                                     ;return
  4908                                  ;-----------------------------------------------------------------------------------------------------------------------
  4909                                  ;
  4910                                  ;       Routine:        PlaceCursor
  4911                                  ;
  4912                                  ;       Description:    This routine positions the cursor on the console.
  4913                                  ;
  4914                                  ;       In:             DS      OS data selector
  4915                                  ;
  4916                                  ;-----------------------------------------------------------------------------------------------------------------------
  4917                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4918                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4919                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4920                                                          mul     ah                                              ;row offset
  4921                                                          add     al,[wbConsoleColumn]                            ;add column
  4922                                                          adc     ah,0                                            ;add overflow
  4923                                                          mov     ecx,eax                                         ;screen offset
  4924                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4925                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4926                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4927                                                          out     dx,al                                           ;select register
  4928                                                          inc     edx                                             ;data port
  4929                                                          mov     al,ch                                           ;hi-order cursor loc
  4930                                                          out     dx,al                                           ;store hi-order loc
  4931                                                          dec     edx                                             ;register select port
  4932                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4933                                                          out     dx,al                                           ;select register
  4934                                                          inc     edx                                             ;data port
  4935                                                          mov     al,cl                                           ;lo-order cursor loc
  4936                                                          out     dx,al                                           ;store lo-order loc
  4937                                                          pop     ecx                                             ;restore non-volatile regs
  4938                                                          ret                                                     ;return
  4939                                  ;-----------------------------------------------------------------------------------------------------------------------
  4940                                  ;
  4941                                  ;       Routine:        PutPrimaryEndOfInt
  4942                                  ;
  4943                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4944                                  ;
  4945                                  ;-----------------------------------------------------------------------------------------------------------------------
  4946                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4947                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4948                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4949                                                          ret                                                     ;return
  4950                                  ;-----------------------------------------------------------------------------------------------------------------------
  4951                                  ;
  4952                                  ;       Routine:        PutSecondaryEndOfInt
  4953                                  ;
  4954                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4955                                  ;
  4956                                  ;-----------------------------------------------------------------------------------------------------------------------
  4957                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4958                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4959                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4960                                                          ret                                                     ;return
  4961                                  ;-----------------------------------------------------------------------------------------------------------------------
  4962                                  ;
  4963                                  ;       Routine:        ReadRealTimeClock
  4964                                  ;
  4965                                  ;       Description:    This routine gets current date time from the real-time clock.
  4966                                  ;
  4967                                  ;       In:             DS:EBX  DATETIME structure
  4968                                  ;
  4969                                  ;-----------------------------------------------------------------------------------------------------------------------
  4970                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4971                                                          push    edi                                             ;
  4972                                                          push    es                                              ;
  4973                                                          push    ds                                              ;store data selector ...
  4974                                                          pop     es                                              ;... in es register
  4975                                                          mov     edi,ebx                                         ;date-time structure
  4976                                                          mov     al,ERTCSECONDREG                                ;second register
  4977                                                          out     ERTCREGPORT,al                                  ;select second register
  4978                                                          in      al,ERTCDATAPORT                                 ;read second register
  4979                                                          cld                                                     ;forward strings
  4980                                                          stosb                                                   ;store second value
  4981                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4982                                                          out     ERTCREGPORT,al                                  ;select minute register
  4983                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4984                                                          stosb                                                   ;store minute value
  4985                                                          mov     al,ERTCHOURREG                                  ;hour register
  4986                                                          out     ERTCREGPORT,al                                  ;select hour register
  4987                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4988                                                          stosb                                                   ;store hour value
  4989                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4990                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4991                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4992                                                          stosb                                                   ;store weekday value
  4993                                                          mov     al,ERTCDAYREG                                   ;day register
  4994                                                          out     ERTCREGPORT,al                                  ;select day register
  4995                                                          in      al,ERTCDATAPORT                                 ;read day register
  4996                                                          stosb                                                   ;store day value
  4997                                                          mov     al,ERTCMONTHREG                                 ;month register
  4998                                                          out     ERTCREGPORT,al                                  ;select month register
  4999                                                          in      al,ERTCDATAPORT                                 ;read month register
  5000                                                          stosb                                                   ;store month value
  5001                                                          mov     al,ERTCYEARREG                                  ;year register
  5002                                                          out     ERTCREGPORT,al                                  ;select year register
  5003                                                          in      al,ERTCDATAPORT                                 ;read year register
  5004                                                          stosb                                                   ;store year value
  5005                                                          mov     al,ERTCCENTURYREG                               ;century register
  5006                                                          out     ERTCREGPORT,al                                  ;select century register
  5007                                                          in      al,ERTCDATAPORT                                 ;read century register
  5008                                                          stosb                                                   ;store century value
  5009                                                          mov     al,ERTCSTATUSREG                                ;status register
  5010                                                          out     ERTCREGPORT,al                                  ;select status register
  5011                                                          in      al,ERTCDATAPORT                                 ;read status register
  5012                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  5013                                                          jnz     .20                                             ;skip ahead if binary values
  5014                                                          mov     esi,ebx                                         ;date-time structure address
  5015                                                          mov     edi,ebx                                         ;date-time structure address
  5016                                                          mov     ecx,8                                           ;loop counter
  5017                                  .10                     lodsb                                                   ;BCD value
  5018                                                          mov     ah,al                                           ;BCD value
  5019                                                          and     al,00001111b                                    ;low-order decimal zone
  5020                                                          and     ah,11110000b                                    ;hi-order decimal zone
  5021                                                          shr     ah,1                                            ;hi-order decimal * 8
  5022                                                          add     al,ah                                           ;low-order + hi-order * 8
  5023                                                          shr     ah,2                                            ;hi-order decimal * 2
  5024                                                          add     al,ah                                           ;low-order + hi-order * 10
  5025                                                          stosb                                                   ;replace BCD with binary
  5026                                                          loop    .10                                             ;next value
  5027                                  .20                     pop     es                                              ;restore non-volatile regs
  5028                                                          pop     edi                                             ;
  5029                                                          pop     esi                                             ;
  5030                                                          ret                                                     ;return
  5031                                  ;-----------------------------------------------------------------------------------------------------------------------
  5032                                  ;
  5033                                  ;       Routine:        ResetSystem
  5034                                  ;
  5035                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5036                                  ;
  5037                                  ;       Out:            N/A     This routine does not return.
  5038                                  ;
  5039                                  ;-----------------------------------------------------------------------------------------------------------------------
  5040                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5041                                                          loop    $                                               ;clear interrupts
  5042                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5043                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5044                                  .10                     sti                                                     ;enable maskable interrupts
  5045                                                          hlt                                                     ;halt until interrupt
  5046                                                          jmp     .10                                             ;repeat until reset kicks in
  5047                                  ;-----------------------------------------------------------------------------------------------------------------------
  5048                                  ;
  5049                                  ;       Routine:        SetKeyboardLamps
  5050                                  ;
  5051                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5052                                  ;
  5053                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5054                                  ;
  5055                                  ;-----------------------------------------------------------------------------------------------------------------------
  5056                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5057                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5058                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5059                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5060                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5061                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5062                                                          mov     al,bh                                           ;set/reset lamps value
  5063                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5064                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5065                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5066                                                          ret                                                     ;return
  5067                                  ;-----------------------------------------------------------------------------------------------------------------------
  5068                                  ;
  5069                                  ;       Routine:        WaitForKeyInBuffer
  5070                                  ;
  5071                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5072                                  ;
  5073                                  ;       Out:            ZF      1 = Input buffer ready
  5074                                  ;                               0 = Input buffer not ready after timeout
  5075                                  ;
  5076                                  ;-----------------------------------------------------------------------------------------------------------------------
  5077                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5078                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5079                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5080                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5081                                                          loopnz  .10                                             ;yes, repeat till timeout
  5082                                                          pop     ecx                                             ;restore non-volatile regs
  5083                                                          ret                                                     ;return
  5084                                  ;-----------------------------------------------------------------------------------------------------------------------
  5085                                  ;
  5086                                  ;       Routine:        WaitForKeyOutBuffer
  5087                                  ;
  5088                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5089                                  ;
  5090                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5091                                  ;                               0 = Output buffer empty after timeout
  5092                                  ;
  5093                                  ;-----------------------------------------------------------------------------------------------------------------------
  5094                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5095                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5096                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5097                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5098                                                          loopz   .10                                             ;loop until output buffer bit
  5099                                                          pop     ecx                                             ;restore non-volatile regs
  5100                                                          ret                                                     ;return
  5101                                  ;-----------------------------------------------------------------------------------------------------------------------
  5102                                  ;
  5103                                  ;       End of the Kernel Function Library
  5104                                  ;
  5105                                  ;-----------------------------------------------------------------------------------------------------------------------
  5106                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5107                                  ;=======================================================================================================================
  5108                                  ;
  5109                                  ;       Console Task
  5110                                  ;
  5111                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5112                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5113                                  ;       screen and responds to user commands.
  5114                                  ;
  5115                                  ;=======================================================================================================================
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5119                                  ;
  5120                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5121                                  ;
  5122                                  ;-----------------------------------------------------------------------------------------------------------------------
  5123                                  section                 constack                                                ;console task stack
  5124                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5125                                  ;-----------------------------------------------------------------------------------------------------------------------
  5126                                  ;
  5127                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5128                                  ;
  5129                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5130                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5131                                  ;       16 descriptors. Six are initially defined.
  5132                                  ;
  5133                                  ;-----------------------------------------------------------------------------------------------------------------------
  5134                                  section                 conldt                                                  ;console local descriptors
  5135                                                          dq      004093004780007Fh                               ;04 TSS alias
  5136                                                          dq      004093004700007Fh                               ;0c LDT alias
  5137                                                          dq      00409300400006FFh                               ;14 stack
  5138                                                          dq      00CF93000000FFFFh                               ;1c data
  5139                                                          dq      00409B0050000FFFh                               ;24 code
  5140                                                          dq      00409300480007FFh                               ;2c message queue
  5141                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5142                                  ;-----------------------------------------------------------------------------------------------------------------------
  5143                                  ;
  5144                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5145                                  ;
  5146                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5147                                  ;       segment. CS to console code.
  5148                                  ;
  5149                                  ;-----------------------------------------------------------------------------------------------------------------------
  5150                                  section                 contss                                                  ;console task state segment
  5151                                                          dd      0                                               ;00 back-link tss
  5152                                                          dd      0700h                                           ;04 esp ring 0
  5153                                                          dd      0014h                                           ;08 ss ring 0
  5154                                                          dd      0700h                                           ;0c esp ring 1
  5155                                                          dd      0014h                                           ;10 es ring 1
  5156                                                          dd      0700h                                           ;14 esp ring 2
  5157                                                          dd      0014h                                           ;18 ss ring 2
  5158                                                          dd      0                                               ;1c cr ring 3
  5159                                                          dd      0                                               ;20 eip
  5160                                                          dd      0200h                                           ;24 eflags
  5161                                                          dd      0                                               ;28 eax
  5162                                                          dd      0                                               ;2c ecx
  5163                                                          dd      0                                               ;30 edx
  5164                                                          dd      0                                               ;34 ebx
  5165                                                          dd      0700h                                           ;38 esp ring 3
  5166                                                          dd      0                                               ;3c ebp
  5167                                                          dd      0                                               ;40 esi
  5168                                                          dd      0                                               ;44 edi
  5169                                                          dd      001Ch                                           ;48 es
  5170                                                          dd      0024h                                           ;4c cs
  5171                                                          dd      0014h                                           ;50 ss ring 3
  5172                                                          dd      001Ch                                           ;54 ds
  5173                                                          dd      0                                               ;58 fs
  5174                                                          dd      0                                               ;5c gs
  5175                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5176                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5177                                  ;-----------------------------------------------------------------------------------------------------------------------
  5178                                  ;
  5179                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5180                                  ;
  5181                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5182                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5183                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5184                                  ;       event.
  5185                                  ;
  5186                                  ;-----------------------------------------------------------------------------------------------------------------------
  5187                                  section                 conmque                                                 ;console message queue
  5188                                                          dd      8                                               ;head pointer
  5189                                                          dd      8                                               ;tail pointer
  5190                                                          times   510 dd 0                                        ;queue elements
  5191                                  ;-----------------------------------------------------------------------------------------------------------------------
  5192                                  ;
  5193                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5194                                  ;
  5195                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5196                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5197                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5198                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5199                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5200                                  ;       board input, echoing to the console screen and responding to user commands.
  5201                                  ;
  5202                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5203                                  ;
  5204                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5205                                  ;                               |  Real Mode Interrupt Vectors                  |
  5206                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5207                                  ;                               |  Reserved BIOS Memory Area                    |
  5208                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5209                                  ;                               |  Shared Kernel Memory Area                    |
  5210                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5211                                  ;                               |  Global Descriptor Table (GDT)                |
  5212                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5213                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5214                                  ;                       002000  +-----------------------------------------------+
  5215                                  ;                               |  Interrupt Handlers                           |
  5216                                  ;                               |  Kernel Function Library                      |
  5217                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5218                                  ;                               |  Console Task Stack Area                      |
  5219                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5220                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5221                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5222                                  ;                               |  Console Task Task State Segment (TSS)        |
  5223                                  ;                       004800  +-----------------------------------------------+
  5224                                  ;                               |  Console Task Message Queue                   |
  5225                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5226                                  ;                               |  Console Task Code                            |
  5227                                  ;                               |  Console Task Constants                       |
  5228                                  ;                       006000  +===============================================+
  5229                                  ;
  5230                                  ;-----------------------------------------------------------------------------------------------------------------------
  5231                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5232                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5233                                  
  5234                                                          clearConsoleScreen                                      ;clear the console screen
  5235                                                          putConsoleString czTitle                                ;display startup message
  5236                                                          putConsoleString czROMMem                               ;ROM memory label
  5237                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5238                                                          putConsoleString czKB                                   ;Kilobytes
  5239                                                          putConsoleString czNewLine                              ;new line
  5240                                                          putConsoleString czBaseMem                              ;base memory label
  5241                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5242                                                          putConsoleString czKB                                   ;Kilobytes
  5243                                                          putConsoleString czNewLine                              ;new line
  5244                                                          putConsoleString czExtendedMem                          ;extended memory label
  5245                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5246                                                          putConsoleString czKB                                   ;Kilobytes
  5247                                                          putConsoleString czNewLine                              ;new line
  5248                                  
  5249                                                          call    ConInitializeNetwork
  5250                                  
  5251                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5252                                                          placeCursor                                             ;set CRT cursor location
  5253                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5254                                                          putConsoleString czNewLine                              ;newline
  5255                                  
  5256                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5257                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5258                                                          call    ConTakeToken                                    ;handle console input
  5259                                                          mov     edx,wzConsoleToken                              ;token buffer
  5260                                                          call    ConDetermineCommand                             ;determine command number
  5261                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5262                                                          jb      .20                                             ;yes, branch
  5263                                  
  5264                                                          putConsoleString czUnknownCommand                       ;display error message
  5265                                  
  5266                                                          jmp     .10                                             ;next command
  5267                                  .20                     shl     eax,2                                           ;index into jump table
  5268                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5269                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5270                                                          call    eax                                             ;call command handler
  5271                                                          jmp     .10                                             ;next command
  5272                                  ;-----------------------------------------------------------------------------------------------------------------------
  5273                                  ;
  5274                                  ;       Routine:        ConInitializeData
  5275                                  ;
  5276                                  ;       Description:    This routine initializes console task variables.
  5277                                  ;
  5278                                  ;-----------------------------------------------------------------------------------------------------------------------
  5279                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5280                                                          push    edi                                             ;
  5281                                                          push    es                                              ;
  5282                                  ;
  5283                                  ;       Initialize console work areas.
  5284                                  ;
  5285                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5286                                                          pop     es                                              ;... into extra segment register
  5287                                                          mov     edi,ECONDATA                                    ;OS console data address
  5288                                                          xor     al,al                                           ;initialization value
  5289                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5290                                                          cld                                                     ;forward strings
  5291                                                          rep     stosb                                           ;initialize data
  5292                                  ;
  5293                                  ;       Initialize heap size
  5294                                  ;
  5295                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5296                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5297                                  ;
  5298                                  ;       Initialize MEMROOT structure
  5299                                  ;
  5300                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5301                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5302                                                          xor     ecx,ecx                                         ;zero register
  5303                                                          mov     cl,4                                            ;count
  5304                                                          rep     stosd                                           ;store first/last contig and free addrs
  5305                                                          xor     eax,eax                                         ;zero register
  5306                                                          stosd                                                   ;zero first task block
  5307                                                          stosd                                                   ;zero last task block
  5308                                  ;
  5309                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5310                                  ;
  5311                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5312                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5313                                                          stosd                                                   ;store signature
  5314                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5315                                                          stosd                                                   ;store block size
  5316                                                          xor     ecx,ecx                                         ;zero register
  5317                                                          mov     cl,6                                            ;count
  5318                                                          xor     eax,eax                                         ;zero register
  5319                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5320                                  ;
  5321                                  ;       Read memory sizes from ROM
  5322                                  ;
  5323                                                          getROMMemSize                                           ;get ROM memory size
  5324                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5325                                                          mov     ecx,eax                                         ;integer param
  5326                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5327                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5328                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5329                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5330                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5331                                                          mov     ecx,eax                                         ;integer param
  5332                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5333                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5334                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5335                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5336                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5337                                                          mov     ecx,eax                                         ;integer param
  5338                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5339                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5340                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5341                                  ;
  5342                                  ;       Restore and return.
  5343                                  ;
  5344                                                          pop     es                                              ;restore non-volatile regs
  5345                                                          pop     edi                                             ;
  5346                                                          pop     ecx                                             ;
  5347                                                          ret                                                     ;return
  5348                                  ;-----------------------------------------------------------------------------------------------------------------------
  5349                                  ;
  5350                                  ;       Routine:        ConInitializeNetwork
  5351                                  ;
  5352                                  ;       Description:    This routine initializes console network variables.
  5353                                  ;
  5354                                  ;-----------------------------------------------------------------------------------------------------------------------
  5355                                  ConInitializeNetwork    push    ebx                                             ;save non-volatile regs
  5356                                                          push    ecx                                             ;
  5357                                                          push    esi                                             ;
  5358                                                          push    edi                                             ;
  5359                                  ;
  5360                                  ;       Initialize ETHER structure.
  5361                                  ;
  5362                                                          mov     ebx,wsConsoleEther                              ;ETHER structure address
  5363                                                          call    ConInitEtherContext                             ;initialize ETHER struct
  5364                                                          mov     esi,ebx                                         ;ETHER structure address
  5365                                  
  5366                                  ;       Initialize variables.
  5367                                  ;       Construct PCI selector.
  5368                                  ;       Read PCI configuration data.
  5369                                  ;
  5370                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  5371                                                          call    ConInitPCIContext                               ;initialize PCI struct
  5372                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  5373                                                          call    ConReadPCIConfigData                            ;read the configuration data
  5374                                  ;
  5375                                  ;       Interpret PCI data value.
  5376                                  ;
  5377                                                          cmp     eax,-1		                                ;function defined?
  5378                                                          jne     .20                                             ;yes, branch
  5379                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  5380                                                          je      .40                                             ;yes, skip to next device
  5381                                                          jmp     short .30                                       ;no, skip to next function
  5382                                  ;
  5383                                  ;       Exit PCI probe if supported adapter found.
  5384                                  ;
  5385                                  .20                     cmp     eax,EPCIINTELPRO1000MT<<16|EPCIVENDORINTEL      ;Intel Pro/1000 EM (copper)?
  5386                                                          je      .50                                             ;yes, found!
  5387                                  ;
  5388                                  ;       Next function.
  5389                                  ;
  5390                                  .30                     call    ConNextPCIFunction                              ;next function
  5391                                                          jb      .10                                             ;continue if no overflow
  5392                                  ;
  5393                                  ;       Next device, bus.
  5394                                  ;
  5395                                  .40                     call    ConNextPCIDevice                                ;next device, bus.
  5396                                                          jb      .10                                             ;continue if no overflow
  5397                                                          jmp     .990                                            ;done, ETHER not found
  5398                                  ;
  5399                                  ;       Set hardware flag and save selector.
  5400                                  ;
  5401                                  .50                     mov     eax,[ebx+PCI.selector]                          ;PCI selector
  5402                                                          mov     [esi+ETHER.selector],eax                        ;save as ethernet device selector
  5403                                                          or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5404                                  
  5405                                                          putConsoleString czEthernetAdapterFound                 ;ethernet adapter found message
  5406                                  ;
  5407                                  ;       Save and report PCI data.
  5408                                  ;
  5409                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5410                                                          mov     ecx,eax
  5411                                                          mov     edx,wzConsoleToken
  5412                                  
  5413                                                          unsignedToHexadecimal
  5414                                                          putConsoleString czEthernetSelector
  5415                                                          putConsoleString wzConsoleToken
  5416                                                          putConsoleString czNewLine
  5417                                  
  5418                                                          mov     eax,[esi+ETHER.selector]                        ;ethernet adapter PCI selector
  5419                                                          xor     al,al                                           ;register 0
  5420                                                          call    ConReadPCIRegister                              ;EAX = device id | vendor id
  5421                                                          mov     [esi+ETHER.devicevendor],eax                    ;save device id | vendor id
  5422                                                          mov     ecx,eax                                         ;vendor id
  5423                                                          mov     edx,wzConsoleToken                              ;string output buffer addr
  5424                                  
  5425                                                          unsignedToHexadecimal                                   ;vendor id as string
  5426                                                          putConsoleString czEthernetDeviceVendor                 ;vendor id label
  5427                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5428                                                          putConsoleString czNewLine                              ;new line
  5429                                  
  5430                                                          mov     eax,[esi+ETHER.selector]
  5431                                                          mov     al,04h
  5432                                                          call    ConReadPCIRegister
  5433                                                          mov     [esi+ETHER.statuscommand],eax
  5434                                                          mov     ecx,eax
  5435                                                          mov     edx,wzConsoleToken
  5436                                  
  5437                                                          unsignedToHexadecimal                                   ;vendor id as string
  5438                                                          putConsoleString czEthernetStatusCommand                ;vendor id label
  5439                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5440                                                          putConsoleString czNewLine                              ;new line
  5441                                  
  5442                                                          mov     eax,[esi+ETHER.selector]
  5443                                                          mov     al,08h
  5444                                                          call    ConReadPCIRegister
  5445                                                          mov     [esi+ETHER.classrev],eax
  5446                                                          mov     ecx,eax
  5447                                                          mov     edx,wzConsoleToken
  5448                                  
  5449                                                          unsignedToHexadecimal                                   ;vendor id as string
  5450                                                          putConsoleString czEthernetClassRev                     ;vendor id label
  5451                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5452                                                          putConsoleString czNewLine                              ;new line
  5453                                  
  5454                                                          mov     eax,[esi+ETHER.selector]
  5455                                                          mov     al,0Ch
  5456                                                          call    ConReadPCIRegister
  5457                                                          mov     [esi+ETHER.misc],eax
  5458                                                          mov     ecx,eax
  5459                                                          mov     edx,wzConsoleToken
  5460                                  
  5461                                                          unsignedToHexadecimal                                   ;vendor id as string
  5462                                                          putConsoleString czEthernetMisc                         ;vendor id label
  5463                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5464                                                          putConsoleString czNewLine                              ;new line
  5465                                  
  5466                                                          mov     eax,[esi+ETHER.selector]
  5467                                                          mov     al,10h
  5468                                                          call    ConReadPCIRegister
  5469                                                          mov     [esi+ETHER.mmio],eax
  5470                                                          mov     ecx,eax
  5471                                                          mov     edx,wzConsoleToken
  5472                                  
  5473                                                          unsignedToHexadecimal                                   ;vendor id as string
  5474                                                          putConsoleString czEthernetMemoryAddr                   ;ethernet I/O memory address label
  5475                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5476                                                          putConsoleString czNewLine                              ;new line
  5477                                  
  5478                                                          mov     eax,[esi+ETHER.selector]
  5479                                                          mov     al,14h
  5480                                                          call    ConReadPCIRegister
  5481                                                          mov     [esi+ETHER.flash],eax
  5482                                                          mov     ecx,eax
  5483                                                          mov     edx,wzConsoleToken
  5484                                  
  5485                                                          unsignedToHexadecimal                                   ;vendor id as string
  5486                                                          putConsoleString czEthernetFlash                        ;ethernet I/O memory address label
  5487                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5488                                                          putConsoleString czNewLine                              ;new line
  5489                                  
  5490                                                          mov     eax,[esi+ETHER.selector]
  5491                                                          mov     al,18h
  5492                                                          call    ConReadPCIRegister
  5493                                                          mov     [esi+ETHER.port],eax
  5494                                                          mov     ecx,eax
  5495                                                          mov     edx,wzConsoleToken
  5496                                  
  5497                                                          unsignedToHexadecimal                                   ;vendor id as string
  5498                                                          putConsoleString czEthernetPort                         ;ethernet I/O memory address label
  5499                                                          putConsoleString wzConsoleToken                         ;vendor id string
  5500                                                          putConsoleString czNewLine                              ;new line
  5501                                  
  5502                                                          mov     eax,[esi+ETHER.selector]                          ;ethernet device PCI selector
  5503                                                          mov     al,03Ch                                         ;interrupt number port addr
  5504                                                          call    ConReadPCIRegister
  5505                                                          mov     [esi+ETHER.irq],al                              ;save IRQ
  5506                                                          movzx   ecx,al                                          ;convert to dword
  5507                                                          mov     edx,wzConsoleToken                              ;string output address
  5508                                  
  5509                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5510                                                          putConsoleString czEthernetIRQ                          ;ethernet I/O port label
  5511                                                          putConsoleString wzConsoleToken                         ;output string to console
  5512                                                          putConsoleString czNewLine                              ;output newline to console
  5513                                  ;
  5514                                  ;       Read MAC address from MMIO
  5515                                  ;
  5516                                                          mov     ecx,[esi+ETHER.mmio]                            ;MMIO address
  5517                                                          jecxz   .60
  5518                                                          add     ecx,05400h                                      ;MAC address offset
  5519                                                          mov     eax,[ecx]                                       ;MAC address lo-order dword
  5520                                                          mov     [esi+ETHER.mac],eax                             ;save
  5521                                                          mov     ax,[ecx+4]                                      ;MAC address hi-order word
  5522                                                          mov     [esi+ETHER.mac+4],ax                            ;save
  5523                                  
  5524                                                          lea     eax,[esi+ETHER.mac]
  5525                                                          mov     edx,wzConsoleToken
  5526                                                          call    .PutMAC
  5527                                  
  5528                                                          putConsoleString czEthernetMAC
  5529                                                          putConsoleString wzConsoleToken
  5530                                                          putConsoleString czNewLine
  5531                                  
  5532                                  .60                     jmp     .990
  5533                                  
  5534                                  .PutMAC                 push    ecx
  5535                                                          push    esi
  5536                                                          push    edi
  5537                                                          mov     esi,eax
  5538                                                          mov     edi,edx
  5539                                                          xor     ecx,ecx
  5540                                                          mov     cl,5
  5541                                                          cld
  5542                                  .PutMAC_10              call    .PutMACByte
  5543                                                          mov     al,'-'
  5544                                                          stosb
  5545                                                          loop    .PutMAC_10
  5546                                                          call    .PutMACByte
  5547                                                          xor     al,al
  5548                                                          stosb
  5549                                                          pop     edi
  5550                                                          pop     esi
  5551                                                          pop     ecx
  5552                                                          ret
  5553                                  
  5554                                  .PutMACByte             lodsb
  5555                                                          mov     ah,al
  5556                                                          shr     al,4
  5557                                                          or      al,030h
  5558                                                          cmp     al,03Ah
  5559                                                          jb      .ByteToHex_20
  5560                                                          add     al,7
  5561                                  .ByteToHex_20           stosb
  5562                                                          mov     al,ah
  5563                                                          and     al,00Fh
  5564                                                          or      al,030h
  5565                                                          cmp     al,03Ah
  5566                                                          jb      .ByteToHex_30
  5567                                                          add     al,7
  5568                                  .ByteToHex_30           stosb
  5569                                                          ret
  5570                                  
  5571                                  ;
  5572                                  ;       Enable transmission of packets
  5573                                  ;
  5574                                  
  5575                                  ;
  5576                                  ;       Setup read base address (RDBAL) (2800h)
  5577                                  ;
  5578                                  
  5579                                  ;
  5580                                  ;       Setup receive descriptor table length (2808h)
  5581                                  ;
  5582                                  
  5583                                  ;
  5584                                  ;       Enable receipt of packets
  5585                                  ;
  5586                                                          pushf
  5587                                                          cli
  5588                                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5589                                                          add     edx,0100h                                       ;RCTL register address
  5590                                                          mov     eax,[edx]                                       ;RCTL value
  5591                                                          or      eax,00000002h                                   ;enable
  5592                                                          mov     [edx],eax                                       ;store RCTL value
  5593                                                          popf
  5594                                  ;
  5595                                  ;       Enable board interrupt
  5596                                  ;
  5597                                                          mov     edx,[esi+ETHER.mmio]                            ;memory i/o address
  5598                                                          add     edx,2818h                                       ;add descriptor tail offset
  5599                                                          mov     eax,2                                           ;buffer number
  5600                                                          mov     [edx],eax                                       ;store buffer number
  5601                                  
  5602                                  
  5603                                  .990                    pop     edi                                             ;restore non-volatile regs
  5604                                                          pop     esi                                             ;
  5605                                                          pop     ecx                                             ;
  5606                                                          pop     ebx                                             ;
  5607                                                          ret                                                     ;return
  5608                                  ;-----------------------------------------------------------------------------------------------------------------------
  5609                                  ;
  5610                                  ;       Routine:        ConReadPCIRegister
  5611                                  ;
  5612                                  ;       Description:    This routine reads a PCI register
  5613                                  ;
  5614                                  ;       In:             EAX     PCI register
  5615                                  ;
  5616                                  ;       Out:            EAX     PCI register value
  5617                                  ;-----------------------------------------------------------------------------------------------------------------------
  5618                                  ConReadPCIRegister      mov     dh,EPCIPORTCONFIGADDRHI                         ;hi-order PCI configuration addr port
  5619                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;lo-order PCI configuration addr port
  5620                                                          out     dx,eax                                          ;select PCI register
  5621                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port (low)
  5622                                                          in      eax,dx                                          ;read register
  5623                                                          ret                                                     ;return
  5624                                  ;-----------------------------------------------------------------------------------------------------------------------
  5625                                  ;
  5626                                  ;       Routine:        ConInitEtherContext
  5627                                  ;
  5628                                  ;       Description:    This routine zeros an ETHER structure
  5629                                  ;
  5630                                  ;       In:             DS:EBX  ETHER structure address
  5631                                  ;
  5632                                  ;-----------------------------------------------------------------------------------------------------------------------
  5633                                  ConInitEtherContext     push    ecx                                             ;save non-volatile regs
  5634                                                          push    edi                                             ;
  5635                                                          push    es                                              ;
  5636                                  ;
  5637                                  ;       Zero context.
  5638                                  ;
  5639                                                          push    ds                                              ;load data segment...
  5640                                                          pop     es                                              ;...into extra segment
  5641                                                          mov     edi,ebx                                         ;ETHER structure offset
  5642                                                          mov     ecx,EETHERLEN                                   ;ETHER structure length
  5643                                                          xor     al,al                                           ;zero
  5644                                                          cld                                                     ;forward strings
  5645                                                          rep     stosb                                           ;zero structure members
  5646                                  ;
  5647                                  ;       Restore and return.
  5648                                  ;
  5649                                                          pop     es                                              ;restore non-volatile regs
  5650                                                          pop     edi                                             ;
  5651                                                          pop     ecx                                             ;
  5652                                                          ret                                                     ;return
  5653                                  ;-----------------------------------------------------------------------------------------------------------------------
  5654                                  ;
  5655                                  ;       Routine:        ConTakeToken
  5656                                  ;
  5657                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5658                                  ;
  5659                                  ;       In:             DS:EDX  source buffer address
  5660                                  ;                       DS:EBX  target buffer address
  5661                                  ;
  5662                                  ;       Out:            DS:EDX  source buffer address
  5663                                  ;                       DS:EBX  target buffer address
  5664                                  ;
  5665                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5666                                  ;
  5667                                  ;-----------------------------------------------------------------------------------------------------------------------
  5668                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5669                                                          push    edi                                             ;
  5670                                                          push    es                                              ;
  5671                                                          push    ds                                              ;load data segment selector ...
  5672                                                          pop     es                                              ;... into extra segment reg
  5673                                                          mov     esi,edx                                         ;source buffer address
  5674                                                          mov     edi,ebx                                         ;target buffer address
  5675                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5676                                                          cld                                                     ;forward strings
  5677                                  .10                     lodsb                                                   ;load byte
  5678                                                          cmp     al,EASCIISPACE                                  ;space?
  5679                                                          je      .10                                             ;yes, continue
  5680                                                          test    al,al                                           ;end of line?
  5681                                                          jz      .40                                             ;yes, branch
  5682                                  .20                     stosb                                                   ;store byte
  5683                                                          lodsb                                                   ;load byte
  5684                                                          test    al,al                                           ;end of line?
  5685                                                          jz      .40                                             ;no, continue
  5686                                                          cmp     al,EASCIISPACE                                  ;space?
  5687                                                          jne     .20                                             ;no, continue
  5688                                  .30                     lodsb                                                   ;load byte
  5689                                                          cmp     al,EASCIISPACE                                  ;space?
  5690                                                          je      .30                                             ;yes, continue
  5691                                                          dec     esi                                             ;pre-position
  5692                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5693                                                          mov     edi,edx                                         ;source buffer address
  5694                                  .50                     lodsb                                                   ;remaining byte
  5695                                                          stosb                                                   ;move to front of buffer
  5696                                                          test    al,al                                           ;end of line?
  5697                                                          jnz     .50                                             ;no, continue
  5698                                                          pop     es                                              ;restore non-volatile regs
  5699                                                          pop     edi                                             ;
  5700                                                          pop     esi                                             ;
  5701                                                          ret                                                     ;return
  5702                                  ;-----------------------------------------------------------------------------------------------------------------------
  5703                                  ;
  5704                                  ;       Routine:        ConDetermineCommand
  5705                                  ;
  5706                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5707                                  ;
  5708                                  ;       input:          DS:EDX  command address
  5709                                  ;
  5710                                  ;       output:         EAX     >=0     = command nbr
  5711                                  ;                               0       = unknown command
  5712                                  ;
  5713                                  ;-----------------------------------------------------------------------------------------------------------------------
  5714                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5715                                                          push    ecx                                             ;
  5716                                                          push    esi                                             ;
  5717                                                          push    edi                                             ;
  5718                                  
  5719                                                          upperCaseString                                         ;upper-case string at EDX
  5720                                  
  5721                                                          mov     esi,tConCmdTbl                                  ;commands table
  5722                                                          xor     edi,edi                                         ;intialize command number
  5723                                                          cld                                                     ;forward strings
  5724                                  .10                     lodsb                                                   ;command length
  5725                                                          movzx   ecx,al                                          ;command length
  5726                                                          jecxz   .20                                             ;branch if end of table
  5727                                                          mov     ebx,esi                                         ;table entry address
  5728                                                          add     esi,ecx                                         ;next table entry address
  5729                                  
  5730                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5731                                  
  5732                                                          jecxz   .20                                             ;branch if equal
  5733                                                          inc     edi                                             ;increment command nbr
  5734                                                          jmp     .10                                             ;repeat
  5735                                  .20                     mov     eax,edi                                         ;command number
  5736                                                          pop     edi                                             ;restore non-volatile regs
  5737                                                          pop     esi                                             ;
  5738                                                          pop     ecx                                             ;
  5739                                                          pop     ebx                                             ;
  5740                                                          ret                                                     ;return
  5741                                  ;-----------------------------------------------------------------------------------------------------------------------
  5742                                  ;
  5743                                  ;       Routine:        ConClear
  5744                                  ;
  5745                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5746                                  ;
  5747                                  ;-----------------------------------------------------------------------------------------------------------------------
  5748                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5749                                                          ret                                                     ;return
  5750                                  ;-----------------------------------------------------------------------------------------------------------------------
  5751                                  ;
  5752                                  ;       Routine:        ConDate
  5753                                  ;
  5754                                  ;       Description:    This routine handles the DATE command.
  5755                                  ;
  5756                                  ;-----------------------------------------------------------------------------------------------------------------------
  5757                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5758                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5759                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5760                                                          putConsoleString  czNewLine                             ;write newline to console
  5761                                                          ret                                                     ;return
  5762                                  ;-----------------------------------------------------------------------------------------------------------------------
  5763                                  ;
  5764                                  ;       Routine:        ConDay
  5765                                  ;
  5766                                  ;       Description:    This routine handles the DAY command.
  5767                                  ;
  5768                                  ;-----------------------------------------------------------------------------------------------------------------------
  5769                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5770                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5771                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5772                                                          putConsoleString  czNewLine                             ;write newline to console
  5773                                                          ret                                                     ;return
  5774                                  ;-----------------------------------------------------------------------------------------------------------------------
  5775                                  ;
  5776                                  ;       Routine:        ConExit
  5777                                  ;
  5778                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5779                                  ;
  5780                                  ;-----------------------------------------------------------------------------------------------------------------------
  5781                                  ConExit                 resetSystem                                             ;issue system reset
  5782                                                          ret                                                     ;return
  5783                                  ;-----------------------------------------------------------------------------------------------------------------------
  5784                                  ;
  5785                                  ;       Routine:        ConFree
  5786                                  ;
  5787                                  ;       Description:    This routine handles the FREE command.
  5788                                  ;
  5789                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5790                                  ;
  5791                                  ;-----------------------------------------------------------------------------------------------------------------------
  5792                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5793                                                          push    ecx                                             ;
  5794                                                          push    esi                                             ;
  5795                                                          push    edi                                             ;
  5796                                  ;
  5797                                  ;       Get address parameter
  5798                                  ;
  5799                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5800                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5801                                                          call    ConTakeToken                                    ;take first param as token
  5802                                  ;
  5803                                  ;       Convert input parameter from hexadecimal string to binary
  5804                                  ;
  5805                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5806                                                          je      .10                                             ;no, branch
  5807                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5808                                  
  5809                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5810                                  
  5811                                                          test    eax,eax                                         ;valid parameter?
  5812                                                          jz      .10                                             ;no, branch
  5813                                  ;
  5814                                  ;       Free memory block
  5815                                  ;
  5816                                                          freeMemory eax                                          ;free memory
  5817                                  
  5818                                                          cmp     eax,-1                                          ;memory freed?
  5819                                                          je      .10                                             ;no, branch
  5820                                  ;
  5821                                  ;       Indicate memory freed
  5822                                  ;
  5823                                                          putConsoleString czOK                                   ;indicate success
  5824                                  ;
  5825                                  ;       Restore and return
  5826                                  ;
  5827                                  .10                     pop     edi                                             ;restore non-volatile regs
  5828                                                          pop     esi                                             ;
  5829                                                          pop     ecx                                             ;
  5830                                                          pop     ebx                                             ;
  5831                                                          ret                                                     ;return
  5832                                  ;-----------------------------------------------------------------------------------------------------------------------
  5833                                  ;
  5834                                  ;       Routine:        ConHour
  5835                                  ;
  5836                                  ;       Description:    This routine Handles the HOUR command.
  5837                                  ;
  5838                                  ;-----------------------------------------------------------------------------------------------------------------------
  5839                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5840                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5841                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5842                                                          putConsoleString  czNewLine                             ;write newline to console
  5843                                                          ret                                                     ;return
  5844                                  ;-----------------------------------------------------------------------------------------------------------------------
  5845                                  ;
  5846                                  ;       Routine:        ConInt6
  5847                                  ;
  5848                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5849                                  ;
  5850                                  ;-----------------------------------------------------------------------------------------------------------------------
  5851                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5852                                                          ret                                                     ;return (not executed)
  5853                                  ;-----------------------------------------------------------------------------------------------------------------------
  5854                                  ;
  5855                                  ;       Routine:        ConMalloc
  5856                                  ;
  5857                                  ;       Description:    This routine handles the MALLOC command.
  5858                                  ;
  5859                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5860                                  ;
  5861                                  ;-----------------------------------------------------------------------------------------------------------------------
  5862                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5863                                                          push    ecx                                             ;
  5864                                                          push    esi                                             ;
  5865                                                          push    edi                                             ;
  5866                                  ;
  5867                                  ;       Get size parameter
  5868                                  ;
  5869                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5870                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5871                                                          call    ConTakeToken                                    ;take first param as token
  5872                                  ;
  5873                                  ;       Convert input parameter from decimal string to binary
  5874                                  ;
  5875                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5876                                                          je      .10                                             ;no, branch
  5877                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5878                                  
  5879                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5880                                  
  5881                                                          test    eax,eax                                         ;valid parameter?
  5882                                                          jz      .10                                             ;no, branch
  5883                                  ;
  5884                                  ;       Allocate memory block
  5885                                  ;
  5886                                                          allocateMemory eax                                      ;allocate memory
  5887                                  
  5888                                                          test    eax,eax                                         ;memory allocated?
  5889                                                          jz      .10                                             ;no, branch
  5890                                  ;
  5891                                  ;       Report allocated memory block address
  5892                                  ;
  5893                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5894                                                          mov     ecx,eax                                         ;memory address
  5895                                  
  5896                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5897                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5898                                                          putConsoleString czNewLine                              ;display new line
  5899                                  
  5900                                  .10                     pop     edi                                             ;restore non-volatile regs
  5901                                                          pop     esi                                             ;
  5902                                                          pop     ecx                                             ;
  5903                                                          pop     ebx                                             ;
  5904                                                          ret                                                     ;return
  5905                                  ;-----------------------------------------------------------------------------------------------------------------------
  5906                                  ;
  5907                                  ;       Routine:        ConMem
  5908                                  ;
  5909                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5910                                  ;
  5911                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5912                                  ;
  5913                                  ;-----------------------------------------------------------------------------------------------------------------------
  5914                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5915                                                          push    esi                                             ;
  5916                                                          push    edi                                             ;
  5917                                  ;
  5918                                  ;       Update the source address if a parameter is given.
  5919                                  ;
  5920                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5921                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5922                                                          call    ConTakeToken                                    ;take first param as token
  5923                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5924                                                          je      .10                                             ;no, branch
  5925                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5926                                  
  5927                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5928                                  
  5929                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5930                                  ;
  5931                                  ;       Setup source address and row count.
  5932                                  ;
  5933                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5934                                                          xor     ecx,ecx                                         ;zero register
  5935                                                          mov     cl,16                                           ;row count
  5936                                  ;
  5937                                  ;       Start the row with the source address in hexadecimal.
  5938                                  ;
  5939                                  .20                     push    ecx                                             ;save remaining rows
  5940                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5941                                                          mov     edx,edi                                         ;output buffer address
  5942                                                          mov     ecx,esi                                         ;console memory address
  5943                                  
  5944                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5945                                  
  5946                                                          add     edi,8                                           ;end of memory addr hexnum
  5947                                                          mov     al,' '                                          ;ascii space
  5948                                                          stosb                                                   ;store delimiter
  5949                                  ;
  5950                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5951                                  ;
  5952                                                          xor     ecx,ecx                                         ;zero register
  5953                                                          mov     cl,16                                           ;loop count
  5954                                  .30                     push    ecx                                             ;save loop count
  5955                                                          lodsb                                                   ;memory byte
  5956                                                          mov     ah,al                                           ;memory byte
  5957                                                          shr     al,4                                            ;high-order in bits 3-0
  5958                                                          or      al,30h                                          ;apply ascii numeric zone
  5959                                                          cmp     al,3ah                                          ;numeric range?
  5960                                                          jb      .40                                             ;yes, skip ahead
  5961                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5962                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5963                                                          mov     al,ah                                           ;low-order in bits 3-0
  5964                                                          and     al,0fh                                          ;mask out high-order bits
  5965                                                          or      al,30h                                          ;apply ascii numeric zone
  5966                                                          cmp     al,3ah                                          ;numeric range?
  5967                                                          jb      .50                                             ;yes, skip ahead
  5968                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5969                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5970                                                          mov     al,' '                                          ;ascii space
  5971                                                          stosb                                                   ;store ascii space delimiter
  5972                                                          pop     ecx                                             ;loop count
  5973                                                          loop    .30                                             ;next
  5974                                  ;
  5975                                  ;       Output printable ASCII character section for the row.
  5976                                  ;
  5977                                                          sub     esi,16                                          ;reset source pointer
  5978                                                          mov     cl,16                                           ;loop count
  5979                                  .60                     lodsb                                                   ;source byte
  5980                                                          cmp     al,32                                           ;printable? (low-range test)
  5981                                                          jb      .70                                             ;no, skip ahead
  5982                                                          cmp     al,128                                          ;printable? (high-range test)
  5983                                                          jb      .80                                             ;yes, skip ahead
  5984                                  .70                     mov     al,' '                                          ;display space instead of printable
  5985                                  .80                     stosb                                                   ;store printable ascii byte
  5986                                                          loop    .60                                             ;next source byte
  5987                                                          xor     al,al                                           ;nul-terminator
  5988                                                          stosb                                                   ;terminate output line
  5989                                  ;
  5990                                  ;       Display constructed output buffer and newline.
  5991                                  ;
  5992                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5993                                                          putConsoleString czNewLine                              ;display new line
  5994                                  ;
  5995                                  ;       Repeat until all lines displayed and preserve source address.
  5996                                  ;
  5997                                                          pop     ecx                                             ;remaining rows
  5998                                                          loop    .20                                             ;next row
  5999                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  6000                                                          pop     edi                                             ;restore regs
  6001                                                          pop     esi                                             ;
  6002                                                          pop     ebx                                             ;
  6003                                                          ret                                                     ;return
  6004                                  ;-----------------------------------------------------------------------------------------------------------------------
  6005                                  ;
  6006                                  ;       Routine:        ConMinute
  6007                                  ;
  6008                                  ;       Description:    This routine Handles the MINUTE command.
  6009                                  ;
  6010                                  ;-----------------------------------------------------------------------------------------------------------------------
  6011                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6012                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  6013                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6014                                                          putConsoleString  czNewLine                             ;write newline to console
  6015                                                          ret                                                     ;return
  6016                                  ;-----------------------------------------------------------------------------------------------------------------------
  6017                                  ;
  6018                                  ;       Routine:        ConMonth
  6019                                  ;
  6020                                  ;       Description:    This routine Handles the MONTH command.
  6021                                  ;
  6022                                  ;-----------------------------------------------------------------------------------------------------------------------
  6023                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6024                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  6025                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6026                                                          putConsoleString  czNewLine                             ;write newline to console
  6027                                                          ret                                                     ;return
  6028                                  ;-----------------------------------------------------------------------------------------------------------------------
  6029                                  ;
  6030                                  ;       Routine:        ConMonthName
  6031                                  ;
  6032                                  ;       Description:    This routine Handles the MONTH.NAME command.
  6033                                  ;
  6034                                  ;-----------------------------------------------------------------------------------------------------------------------
  6035                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  6036                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  6037                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  6038                                                          putConsoleString   czNewLine                            ;write newline to console
  6039                                                          ret                                                     ;return
  6040                                  ;-----------------------------------------------------------------------------------------------------------------------
  6041                                  ;
  6042                                  ;       Routine:        ConPCIProbe
  6043                                  ;
  6044                                  ;       Description:    This routine handles the PCIProbe command.
  6045                                  ;
  6046                                  ;-----------------------------------------------------------------------------------------------------------------------
  6047                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  6048                                  ;
  6049                                  ;       Initialize variables.
  6050                                  ;       Construct PCI selector.
  6051                                  ;       Read PCI configuration data.
  6052                                  ;
  6053                                                          mov     ebx,wsConsolePCI                                ;PCI structure address
  6054                                                          call    ConInitPCIContext                               ;initialize PCI struct
  6055                                  .10                     call    ConBuildPCISelector                             ;build the PCI selector
  6056                                                          call    ConReadPCIConfigData                            ;read the configuration data
  6057                                  ;
  6058                                  ;       Interpret PCI data value and display finding.
  6059                                  ;
  6060                                                          cmp     eax,-1                                          ;function defined?
  6061                                                          jne     .20                                             ;yes, branch
  6062                                                          cmp     byte [ebx+PCI.function],0                       ;function zero?
  6063                                                          je      .40                                             ;yes, skip to next device
  6064                                                          jmp     short .30                                       ;no, skip to next function
  6065                                  ;
  6066                                  ;       Build PCI identifying string.
  6067                                  ;       Write identifying string to console.
  6068                                  ;       Determine the vendor and chip.
  6069                                  ;       Write vendor and chip to console.
  6070                                  ;
  6071                                  .20                     mov     edx,wzConsolePCIIdent                           ;output buffer
  6072                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  6073                                                          call    ConInterpretPCIData                             ;update flags based on data
  6074                                  
  6075                                                          putConsoleString wzConsolePCIIdent                      ;display bus as decimal
  6076                                                          putConsoleString czSpace                                ;space delimiter
  6077                                                          putConsoleString [ebx+PCI.vendorstr]                    ;display vendor string
  6078                                                          putConsoleString czSpace                                ;space delimiter
  6079                                                          putConsoleString [ebx+PCI.chipstr]                      ;display chip string
  6080                                                          putConsoleString czNewLine                              ;display new line
  6081                                  ;
  6082                                  ;       Next function.
  6083                                  ;
  6084                                  .30                     call    ConNextPCIFunction                              ;next function
  6085                                                          jb      .10                                             ;continue if no overflow
  6086                                  ;
  6087                                  ;       Next device, bus.
  6088                                  ;
  6089                                  .40                     call    ConNextPCIDevice                                ;next device, bus
  6090                                                          jb      .10                                             ;continue if no overflow
  6091                                  ;
  6092                                  ;       Restore and return.
  6093                                  ;
  6094                                                          pop     ebx                                             ;restore non-volatile regs
  6095                                                          ret                                                     ;return
  6096                                  ;-----------------------------------------------------------------------------------------------------------------------
  6097                                  ;
  6098                                  ;       Routine:        ConInitPCIContext
  6099                                  ;
  6100                                  ;       Description:    This routine initializes a PCI structure.
  6101                                  ;
  6102                                  ;       In:             DS:EBX  PCI structure address
  6103                                  ;
  6104                                  ;-----------------------------------------------------------------------------------------------------------------------
  6105                                  ConInitPCIContext       push    ecx                                             ;save non-volatile regs
  6106                                                          push    edi                                             ;
  6107                                                          push    es                                              ;
  6108                                  ;
  6109                                  ;       Zero context.
  6110                                  ;
  6111                                                          push    ds                                              ;load data segment...
  6112                                                          pop     es                                              ;...into extra segment
  6113                                                          mov     edi,ebx                                         ;PCI structure offset
  6114                                                          mov     ecx,EPCILEN                                     ;PCI structure length
  6115                                                          xor     al,al                                           ;zero
  6116                                                          cld                                                     ;forward strings
  6117                                                          rep     stosb                                           ;zero structure members
  6118                                  ;
  6119                                  ;       Restore and return.
  6120                                  ;
  6121                                                          pop     es                                              ;restore non-volatile regs
  6122                                                          pop     edi                                             ;
  6123                                                          pop     ecx                                             ;
  6124                                                          ret                                                     ;return
  6125                                  ;-----------------------------------------------------------------------------------------------------------------------
  6126                                  ;
  6127                                  ;       Routine:        ConBuildPCISelector
  6128                                  ;
  6129                                  ;       Description:    This routine sets the selector member of a PCI based on the bus, device and function.
  6130                                  ;
  6131                                  ;       In:             DS:EBX  PCI structure address
  6132                                  ;
  6133                                  ;       Out:            EAX     bus, device, function, register selector
  6134                                  ;
  6135                                  ;-----------------------------------------------------------------------------------------------------------------------
  6136                                  ConBuildPCISelector     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  6137                                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  6138                                                          shl     dl,3                                            ;DL = dddd d000
  6139                                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  6140                                                          and     al,007h                                         ;AL = 0000 0fff
  6141                                                          or      al,dl                                           ;AL = dddd dfff
  6142                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  6143                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  6144                                                          mov     al,[ebx+PCI.register]                           ;0000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6145                                                          or      eax,080000000h                                  ;1000 0000 bbbb bbbb dddd dfff rrrr rrrr
  6146                                                          mov     [ebx+PCI.selector],eax                          ;set selector
  6147                                                          ret                                                     ;return
  6148                                  ;-----------------------------------------------------------------------------------------------------------------------
  6149                                  ;
  6150                                  ;       Routine:        ConReadPCIConfigData
  6151                                  ;
  6152                                  ;       Description:    This routine reads PCI configuration data from the register indicated by the selector.
  6153                                  ;
  6154                                  ;       In:             DS:EBX  PCI structure address
  6155                                  ;
  6156                                  ;       Out:            EAX     config data
  6157                                  ;
  6158                                  ;-----------------------------------------------------------------------------------------------------------------------
  6159                                  ConReadPCIConfigData    mov     dh,EPCIPORTCONFIGADDRHI                         ;PCI configuration address port hi-order
  6160                                                          mov     dl,EPCIPORTCONFIGADDRLO                         ;PCI configuration address port lo-order
  6161                                                          mov     eax,[ebx+PCI.selector]                          ;PCI selector
  6162                                                          out     dx,eax                                          ;select bus, device, function, reg
  6163                                                          mov     dh,EPCIPORTCONFIGDATAHI                         ;PCI configuraiton data port hi-order
  6164                                                          mov     dl,EPCIPORTCONFIGDATALO                         ;PCI configuration data port lo-order
  6165                                                          in      eax,dx                                          ;read register
  6166                                                          mov     [ebx+PCI.configdata],eax                        ;set configdata
  6167                                                          ret                                                     ;return
  6168                                  ;-----------------------------------------------------------------------------------------------------------------------
  6169                                  ;
  6170                                  ;       Routine:        ConBuildPCIIdent
  6171                                  ;
  6172                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  6173                                  ;                       Function code values.
  6174                                  ;
  6175                                  ;       In:             DS:EBX  PCI structure address
  6176                                  ;                       DS:EDX  output buffer address 999.99.9\0
  6177                                  ;
  6178                                  ;-----------------------------------------------------------------------------------------------------------------------
  6179                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  6180                                                          push    es                                              ;
  6181                                  ;
  6182                                  ;       Establish addressability
  6183                                  ;
  6184                                                          push    ds                                              ;load data segment...
  6185                                                          pop     es                                              ;...into extra segment reg
  6186                                  ;
  6187                                  ;       Build identifier string (bus.device.function)
  6188                                  ;
  6189                                                          mov     edi,edx                                         ;output buffer address
  6190                                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  6191                                                          xor     ah,ah                                           ;zero high-order dividend
  6192                                                          mov     cl,100                                          ;divisor (10^2)
  6193                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  6194                                                          or      al,30h                                          ;apply ASCII zone
  6195                                                          cld                                                     ;forward strings
  6196                                                          stosb                                                   ;store 100's digit
  6197                                                          mov     al,ah                                           ;bus MOD 100
  6198                                                          xor     ah,ah                                           ;zero high-order dividend
  6199                                                          mov     cl,10                                           ;divisor (10^1)
  6200                                                          div     cl                                              ;AL=10's, AH=1's
  6201                                                          or      ax,3030h                                        ;apply ASCII zone
  6202                                                          stosw                                                   ;store 10's and 1's
  6203                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6204                                                          stosb                                                   ;store delimiter
  6205                                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  6206                                                          xor     ah,ah                                           ;zero high order dividend
  6207                                                          mov     cl,10                                           ;divisor (10^1)
  6208                                                          div     cl                                              ;AL=10's, AH=1's
  6209                                                          or      ax,3030h                                        ;apply ASCII zone
  6210                                                          stosw                                                   ;store 10's and 1's
  6211                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6212                                                          stosb                                                   ;store delimiter
  6213                                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  6214                                                          or      al,30h                                          ;apply ASCII zone
  6215                                                          stosb                                                   ;store 1's
  6216                                                          xor     al,al                                           ;null terminator
  6217                                                          stosb                                                   ;store terminator
  6218                                  ;
  6219                                  ;       Restore and return.
  6220                                  ;
  6221                                                          pop     es                                              ;restore non-volatile regs
  6222                                                          pop     edi                                             ;
  6223                                                          ret                                                     ;return
  6224                                  ;-----------------------------------------------------------------------------------------------------------------------
  6225                                  ;
  6226                                  ;       Routine:        ConInterpretPCIData
  6227                                  ;
  6228                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6229                                  ;
  6230                                  ;       In:             DS:EBX  PCI structure address
  6231                                  ;
  6232                                  ;-----------------------------------------------------------------------------------------------------------------------
  6233                                  ConInterpretPCIData     mov     eax,czApple
  6234                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  6235                                                          jne     .10                                             ;no, branch
  6236                                                          mov     edx,czUSBController
  6237                                                          cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  6238                                                          je      .40                                             ;yes, branch
  6239                                                          mov     edx,czOther                                     ;other
  6240                                                          jmp     .40                                             ;continue
  6241                                  .10                     mov     eax,czIntel                                     ;Intel
  6242                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  6243                                                          jne     .20                                             ;no, branch
  6244                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6245                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  6246                                                          je      .40                                             ;yes, branch
  6247                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  6248                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  6249                                                          je      .40                                             ;yes, branch
  6250                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6251                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  6252                                                          je      .40                                             ;yes, branch
  6253                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6254                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  6255                                                          je      .40                                             ;yes, branch
  6256                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6257                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  6258                                                          je      .40                                             ;yes, branch
  6259                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6260                                                          cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  6261                                                          je      .40                                             ;yes, branch
  6262                                                          mov     edx,czOther                                     ;other
  6263                                                          jmp     .40                                             ;continue
  6264                                  .20                     mov     eax,czOracle                                    ;Oracle
  6265                                                          cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  6266                                                          jne     .30                                             ;no, branch
  6267                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6268                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  6269                                                          je      .40                                             ;yes, branch
  6270                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6271                                                          cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  6272                                                          je      .40                                             ;yes, branch
  6273                                                          mov     edx,czOther                                     ;other
  6274                                                          jmp     .40                                             ;continue
  6275                                  .30                     mov     eax,czOther                                     ;other
  6276                                                          mov     edx,czOther                                     ;other
  6277                                  .40                     mov     [ebx+PCI.vendorstr],eax                         ;save vendor string
  6278                                                          mov     [ebx+PCI.chipstr],edx                           ;save chip string
  6279                                                          ret                                                     ;return
  6280                                  ;-----------------------------------------------------------------------------------------------------------------------
  6281                                  ;
  6282                                  ;       Routine:        ConNextPCIFunction
  6283                                  ;
  6284                                  ;       Description:    This routine increments the function of the device.
  6285                                  ;
  6286                                  ;       In:             DS:EBX  PCI structure address
  6287                                  ;
  6288                                  ;       Out:            CY      0 = overflow
  6289                                  ;                               1 = no overflow, continue
  6290                                  ;
  6291                                  ;-----------------------------------------------------------------------------------------------------------------------
  6292                                  ConNextPCIFunction      inc     byte [ebx+PCI.function]                         ;next function
  6293                                                          cmp     byte [ebx+PCI.function],8                       ;at limit?
  6294                                                          jb      .10                                             ;no, continue
  6295                                                          mov     byte [ebx+PCI.function],0                       ;zero function
  6296                                  .10                     ret                                                     ;return
  6297                                  ;-----------------------------------------------------------------------------------------------------------------------
  6298                                  ;
  6299                                  ;       Routine:        ConNextPCIDevice
  6300                                  ;
  6301                                  ;       Description:    This routine increments the device of the PCI across buses.
  6302                                  ;
  6303                                  ;       In:             DS:EBX  PCI structure address
  6304                                  ;
  6305                                  ;       Out:            CY      0 = overflow
  6306                                  ;                               1 = no overflow, continue
  6307                                  ;
  6308                                  ;-----------------------------------------------------------------------------------------------------------------------
  6309                                  ConNextPCIDevice        inc     byte [ebx+PCI.device]                           ;next device
  6310                                                          cmp     byte [ebx+PCI.device],32                        ;at limit?
  6311                                                          jb      .10                                             ;no, continue
  6312                                                          mov     byte [ebx+PCI.device],0                         ;zero device
  6313                                                          inc     byte [ebx+PCI.bus]                              ;next bus
  6314                                                          cmp     byte [ebx+PCI.bus],8                            ;at limit?
  6315                                                          jb      .10                                             ;no, continue
  6316                                                          mov     byte [ebx+PCI.bus],0                            ;zero bus
  6317                                  .10                     ret                                                     ;return
  6318                                  ;-----------------------------------------------------------------------------------------------------------------------
  6319                                  ;
  6320                                  ;       Routine:        ConSecond
  6321                                  ;
  6322                                  ;       Description:    This routine Handles the SECOND command.
  6323                                  ;
  6324                                  ;-----------------------------------------------------------------------------------------------------------------------
  6325                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6326                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6327                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6328                                                          putConsoleString  czNewLine                             ;write newline to console
  6329                                                          ret                                                     ;return
  6330                                  ;-----------------------------------------------------------------------------------------------------------------------
  6331                                  ;
  6332                                  ;       Routine:        ConTime
  6333                                  ;
  6334                                  ;       Description:    This routine Handles the TIME command.
  6335                                  ;
  6336                                  ;-----------------------------------------------------------------------------------------------------------------------
  6337                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6338                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6339                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6340                                                          putConsoleString  czNewLine                             ;write newline to console
  6341                                                          ret                                                     ;return
  6342                                  ;-----------------------------------------------------------------------------------------------------------------------
  6343                                  ;
  6344                                  ;       Routine:        ConVersion
  6345                                  ;
  6346                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6347                                  ;
  6348                                  ;-----------------------------------------------------------------------------------------------------------------------
  6349                                  ConVersion              putConsoleString czTitle                                ;display version message
  6350                                                          ret                                                     ;return
  6351                                  ;-----------------------------------------------------------------------------------------------------------------------
  6352                                  ;
  6353                                  ;       Routine:        ConWeekday
  6354                                  ;
  6355                                  ;       Description:    This routine handles the WEEKDAY command.
  6356                                  ;
  6357                                  ;-----------------------------------------------------------------------------------------------------------------------
  6358                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6359                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6360                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6361                                                          putConsoleString  czNewLine                             ;write newline to console
  6362                                                          ret                                                     ;return
  6363                                  ;-----------------------------------------------------------------------------------------------------------------------
  6364                                  ;
  6365                                  ;       Routine:        ConWeekdayName
  6366                                  ;
  6367                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6368                                  ;
  6369                                  ;-----------------------------------------------------------------------------------------------------------------------
  6370                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6371                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6372                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6373                                                          putConsoleString     czNewLine                                  ;write newline to console
  6374                                                          ret                                                             ;return
  6375                                  ;-----------------------------------------------------------------------------------------------------------------------
  6376                                  ;
  6377                                  ;       Routine:        ConYear
  6378                                  ;
  6379                                  ;       Description:    This routine Handles the YEAR command.
  6380                                  ;
  6381                                  ;-----------------------------------------------------------------------------------------------------------------------
  6382                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6383                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6384                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6385                                                          putConsoleString  czNewLine                             ;write newline to console
  6386                                                          ret                                                     ;return
  6387                                  ;-----------------------------------------------------------------------------------------------------------------------
  6388                                  ;
  6389                                  ;       Routine:        ConYearIsLeap
  6390                                  ;
  6391                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6392                                  ;
  6393                                  ;-----------------------------------------------------------------------------------------------------------------------
  6394                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6395                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6396                                  
  6397                                                          jecxz   .10                                             ;branch if not leap
  6398                                  
  6399                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6400                                  
  6401                                                          jmp     .20                                             ;continue
  6402                                  
  6403                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6404                                  .20                     ret                                                     ;return
  6405                                  ;-----------------------------------------------------------------------------------------------------------------------
  6406                                  ;
  6407                                  ;       Tables
  6408                                  ;
  6409                                  ;-----------------------------------------------------------------------------------------------------------------------
  6410                                                                                                                  ;---------------------------------------
  6411                                                                                                                  ;  Command Jump Table
  6412                                                                                                                  ;---------------------------------------
  6413                                  tConJmpTbl              equ     $                                               ;command jump table
  6414                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6415                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6416                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6417                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6418                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6419                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6420                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6421                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6422                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6423                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6424                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6425                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6426                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6427                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6428                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6429                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6430                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6431                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6432                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6433                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6434                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6435                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6436                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6437                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6438                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6439                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6440                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6441                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6442                                                                                                                  ;---------------------------------------
  6443                                                                                                                  ;  Command Name Table
  6444                                                                                                                  ;---------------------------------------
  6445                                  tConCmdTbl              equ     $                                               ;command name table
  6446                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6447                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6448                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6449                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6450                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6451                                                          db      8,"VERSION",0                                   ;version command
  6452                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6453                                                          db      7,"MALLOC",0                                    ;malloc command
  6454                                                          db      7,"MEMORY",0                                    ;memory command
  6455                                                          db      7,"MINUTE",0                                    ;minute command
  6456                                                          db      7,"SECOND",0                                    ;second command
  6457                                                          db      6,"CLEAR",0                                     ;clear command
  6458                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6459                                                          db      6,"MONTH",0                                     ;month command
  6460                                                          db      5,"DATE",0                                      ;date command
  6461                                                          db      5,"EXIT",0                                      ;exit command
  6462                                                          db      5,"FREE",0                                      ;free command
  6463                                                          db      5,"HOUR",0                                      ;hour command
  6464                                                          db      5,"INT6",0                                      ;int6 command
  6465                                                          db      5,"QUIT",0                                      ;quit command
  6466                                                          db      5,"TIME",0                                      ;time command
  6467                                                          db      5,"YEAR",0                                      ;year command
  6468                                                          db      4,"CLS",0                                       ;cls command
  6469                                                          db      4,"DAY",0                                       ;day command
  6470                                                          db      4,"MEM",0                                       ;mem command
  6471                                                          db      4,"VER",0                                       ;ver command
  6472                                                          db      0                                               ;end of table
  6473                                  ;-----------------------------------------------------------------------------------------------------------------------
  6474                                  ;
  6475                                  ;       Constants
  6476                                  ;
  6477                                  ;-----------------------------------------------------------------------------------------------------------------------
  6478                                  czApple                 db      "Apple",0                                       ;vendor name string
  6479                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6480                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6481                                  
  6482                                  czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6483                                  czEthernetSelector      db      "Selector: ",0
  6484                                  czEthernetDeviceVendor  db      "Device|Vendor: ",0
  6485                                  czEthernetStatusCommand db      "Status|Command: ",0
  6486                                  czEthernetClassRev      db      "Class|Rev: ",0
  6487                                  czEthernetMisc          db      "BIST|Hdr|Latency|Cache: ",0
  6488                                  czEthernetMemoryAddr    db      "Memory Mapped I/O Address: ",0                 ;ethernet I/O memory address
  6489                                  czEthernetFlash         db      "Flash: ",0                                     ;ethernet flash base address
  6490                                  czEthernetPort          db      "I/O port: ",0                                  ;ethernet I/O port address
  6491                                  czEthernetIRQ           db      "IRQ: ",0                                       ;ethernet IRQ
  6492                                  czEthernetMAC           db      "MAC: ",0                                       ;MAC address
  6493                                  
  6494                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6495                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6496                                  czKB                    db      "KB",0                                          ;Kilobytes
  6497                                  czNewLine               db      13,10,0                                         ;new line string
  6498                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6499                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6500                                  czOther                 db      "Other",0                                       ;default name string
  6501                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6502                                  czPeriod                db      ".",0                                           ;period delimiter
  6503                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6504                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6505                                  czPrompt                db      ":",0                                           ;prompt string
  6506                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6507                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6508                                  czSpace                 db      " ",0                                           ;space delimiter
  6509                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6510                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6511                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6512                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6513                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6514                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6515                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6516                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6517                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6518                                  %endif
  6519                                  %ifdef BUILDDISK
  6520                                  ;-----------------------------------------------------------------------------------------------------------------------
  6521                                  ;
  6522                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6523                                  ;
  6524                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6525                                  ;
  6526                                  ;-----------------------------------------------------------------------------------------------------------------------
  6527                                  section                 unused                                                  ;unused disk space
  6528                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6529                                  %endif
  6530                                  ;=======================================================================================================================
  6531                                  ;
  6532                                  ;       End of Program Code
  6533                                  ;
  6534                                  ;=======================================================================================================================
