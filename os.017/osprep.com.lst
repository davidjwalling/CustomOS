     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.011
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to iterate across tasks in a task queue.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMEM...         Memory Management values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   271                                  ;
   272                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   273                                  ;
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  ERTCREGPORT             equ     070h                                            ;register select port
   276                                  ERTCDATAPORT            equ     071h                                            ;data port
   277                                  ERTCSECONDREG           equ     000h                                            ;second
   278                                  ERTCMINUTEREG           equ     002h                                            ;minute
   279                                  ERTCHOURREG             equ     004h                                            ;hour
   280                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   281                                  ERTCDAYREG              equ     007h                                            ;day
   282                                  ERTCMONTHREG            equ     008h                                            ;month
   283                                  ERTCYEARREG             equ     009h                                            ;year of the century
   284                                  ERTCSTATUSREG           equ     00bh                                            ;status
   285                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   286                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   287                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   288                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   289                                  ERTCCENTURYREG          equ     032h                                            ;century
   290                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;
   293                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   294                                  ;
   295                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   296                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   297                                  ;
   298                                  ;       0.......        Segment is not present in memory (triggers int 11)
   299                                  ;       1.......        Segment is present in memory
   300                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   301                                  ;       ...0....        Segment is a system segment
   302                                  ;       ...00010                Local Descriptor Table
   303                                  ;       ...00101                Task Gate
   304                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   305                                  ;       ...01100                Call Gate (386)
   306                                  ;       ...01110                Interrupt Gate (386)
   307                                  ;       ...01111                Trap Gate (386)
   308                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   309                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   310                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   314                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   315                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   316                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   317                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   318                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   319                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   320                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       Firmware-Defined Values
   324                                  ;
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   329                                  ;
   330                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   331                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   332                                  ;
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   335                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   336                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   337                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   338                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   339                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   340                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   341                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   342                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   343                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   344                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;
   347                                  ;       Standards-Based Values
   348                                  ;
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;
   352                                  ;       ASCII                                                                   EASCII...
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   356                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   357                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   358                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   359                                  EASCIISPACE             equ     020h                                            ;space
   360                                  EASCIIPERIOD            equ     02Eh                                            ;period
   361                                  EASCIIUPPERA            equ     041h                                            ;'A'
   362                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   363                                  EASCIILOWERA            equ     061h                                            ;'a'
   364                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   365                                  EASCIITILDE             equ     07Eh                                            ;'~'
   366                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   367                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   368                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   369                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   370                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   371                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   372                                  EASCIICASE              equ     00100000b                                       ;case bit
   373                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ;
   376                                  ;       PCI                                                                     EPCI...
   377                                  ;
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  EPCIVENDORAPPLE         equ     106Bh                                           ;Apple
   380                                  EPCIVENDORINTEL         equ     8086h                                           ;Intel
   381                                  EPCIVENDORORACLE        equ     80EEh                                           ;Oracle
   382                                  EPCIAPPLEUSB            equ     003Fh                                           ;USB Controller
   383                                  EPCIINTELPRO1000MT      equ     100Fh                                           ;Pro/1000 MT Ethernet Adapter
   384                                  EPCIINTELPCIMEM         equ     1237h                                           ;PCI & Memory
   385                                  EPCIINTELAD1881         equ     2415h                                           ;Aureal AD1881 SOUNDMAX
   386                                  EPCIINTELPIIX3          equ     7000h                                           ;PIIX3 PCI-to-ISA Bridge (Triton II)
   387                                  EPCIINTEL82371AB        equ     7111h                                           ;82371AB/EB PCI Bus Master IDE Cntrlr
   388                                  EPCIINTELPIIX4          equ     7113h                                           ;PIIX4/4E/4M Power Mgmt Cntrlr
   389                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   390                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  ;
   393                                  ;       Operating System Values
   394                                  ;
   395                                  ;-----------------------------------------------------------------------------------------------------------------------
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ;       Background Task Identifiers                                             EBG...
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  EBGTIMELEN              equ     9                                               ;length of time string HH:MM:SS\0
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  ;
   402                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   403                                  ;
   404                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   405                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   406                                  ;
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   409                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   410                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   411                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   412                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   413                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   414                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ;       Console Constants                                                       ECON...
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ECONCOLS                equ     80                                              ;columns per row
   419                                  ECONROWS                equ     24                                              ;console rows
   420                                  ECONOIAROW              equ     24                                              ;operator information area row
   421                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   422                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   423                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   424                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   425                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   428                                  ;-----------------------------------------------------------------------------------------------------------------------
   429                                  EGDTALIAS               equ     008h                                            ;gdt alias selector
   430                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   431                                  EGDTCGA                 equ     020h                                            ;cga video selector
   432                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   433                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   434                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   435                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   436                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   437                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   438                                  ESELBACKGROUNDLDT       equ     070h                                            ;background local descr table selector
   439                                  ESELBACKGROUNDTSS       equ     078h                                            ;background task state segment selector
   440                                  ESELKEYBOARDMQ          equ     080h                                            ;keyboard focus message queue (IRQ1)
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  ;       LDT Selectors                                                           ESEL...
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ESELMQ                  equ     02Ch                                            ;console task message queue
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ;       Keyboard Flags                                                          EKEYF...
   447                                  ;-----------------------------------------------------------------------------------------------------------------------
   448                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   449                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   450                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   451                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   452                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   453                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   454                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   455                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   456                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   457                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   458                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ;       Kernel Constants                                                        EKRN...
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  EKRNDATASEG             equ     00000h                                          ;kernel data segment (0000:0800)
   463                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   464                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   465                                  EKRNCODELEN             equ     7000h                                           ;kernel code size (1000h to 8000h)
   466                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   467                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   468                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;       Hardware Flags
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  ;       Memory Management Constants                                             EMEM...
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   481                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   482                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   483                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  ;       Message Identifiers                                                     EMSG...
   486                                  ;-----------------------------------------------------------------------------------------------------------------------
   487                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   488                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   489                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   490                                  ;=======================================================================================================================
   491                                  ;
   492                                  ;       Structures
   493                                  ;
   494                                  ;=======================================================================================================================
   495                                  ;-----------------------------------------------------------------------------------------------------------------------
   496                                  ;
   497                                  ;       DATETIME
   498                                  ;
   499                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   500                                  ;
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  struc                   DATETIME
   503 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   504 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   505 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   506 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   507 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   508 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   509 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   510 00000007 <res 00000001>          .century                resb    1                                               ;century
   511                                  EDATETIMELEN            equ     ($-.second)
   512                                  endstruc
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514                                  ;
   515                                  ;       MEMBLOCK
   516                                  ;
   517                                  ;       The MEMBLOCK structure defines a memory block.
   518                                  ;
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  struc                   MEMBLOCK
   521 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   522 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   523 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   524 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   525 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   526 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   527 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   528 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   529                                  EMEMBLOCKLEN            equ     ($-.signature)
   530                                  endstruc
   531                                  ;-----------------------------------------------------------------------------------------------------------------------
   532                                  ;
   533                                  ;       MEMROOT
   534                                  ;
   535                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   536                                  ;
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538                                  struc                   MEMROOT
   539 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   540 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   541 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   542 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   543 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   544 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   545                                  EMEMROOTLEN             equ     ($-.firstcontig)
   546                                  endstruc
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;       MQUEUE
   550                                  ;
   551                                  ;       The MQUEUE structure maps memory used for a message queue.
   552                                  ;
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  struc                   MQUEUE
   555 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   556 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   557 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   558                                  endstruc
   559                                  ;-----------------------------------------------------------------------------------------------------------------------
   560                                  ;
   561                                  ;       OSDATA
   562                                  ;
   563                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   564                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   565                                  ;
   566                                  ;-----------------------------------------------------------------------------------------------------------------------
   567                                  struc                   OSDATA
   568 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   569 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   570 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   571 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   572 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   573 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   574 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   575 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   576 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   577 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   578 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   579 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   580 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   581 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   582 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   583 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   584 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   585 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   586 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   587 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   588 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   589 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   590 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   591 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   592 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   593 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   594 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   595 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   596 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   597 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   598 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   599 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   600 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   601 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   602 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   603 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   604 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   605 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   606 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   607 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   608 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   609 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   610 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   611 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   612 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   613 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   614 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   615 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   616 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   617 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   618 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   619 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   620 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   621 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   622 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   623 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   624 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   625 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   626 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   627 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   628 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   629 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   630 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   631 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   632 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   633 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   634 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   635 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   636 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   637 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   638 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   639 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   640 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   641 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   642 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   643 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   644 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   645 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   646 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   647 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   648 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   649 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   650 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   651 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   652 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   653 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   654 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   655 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   656 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   657 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   658 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   659 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   660 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   661 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   662 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   663 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   664 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   665 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   666 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   667 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   668 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   669                                  ;-----------------------------------------------------------------------------------------------------------------------
   670                                  ;
   671                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   672                                  ;
   673                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   674                                  ;
   675                                  ;-----------------------------------------------------------------------------------------------------------------------
   676                                  ;-----------------------------------------------------------------------------------------------------------------------
   677                                  ;
   678                                  ;       Kernel Data
   679                                  ;
   680                                  ;       These variables are not task-specific. They are initialized by the OS loader before the system is placed into
   681                                  ;       protected mode. This is necessary because as soon as the system enters protected mode, the timer interrupt
   682                                  ;       (IRQ0) will begin to reference the task selectors queue to implement task switching.
   683                                  ;
   684                                  ;-----------------------------------------------------------------------------------------------------------------------
   685                                                          alignb  4
   686                                  EKERNELDATA             equ     ($)
   687 00000800 <res 00000200>          wwTaskQueue             resw    256                                             ;task selector queue
   688 00000A00 <res 00000004>          wdFarJumpEIP            resd    1                                               ;destination EIP of next task (ignored)
   689 00000A04 <res 00000002>          wwFarJumpSelector       resw    1                                               ;destination task gate
   690 00000A06 <res 00000001>          wbTaskIndex             resb    1                                               ;task selector index
   691 00000A07 <res 00000001>          wbInCriticalSection     resb    1                                               ;task in critical section
   692                                  EKERNELDATALEN          equ     ($-EKERNELDATA)
   693                                  ;-----------------------------------------------------------------------------------------------------------------------
   694                                  ;
   695                                  ;       Console Task Variables
   696                                  ;
   697                                  ;       These variables are exclusve to the console task. These variables are initialized by the console task when
   698                                  ;       the console task starts.
   699                                  ;
   700                                  ;-----------------------------------------------------------------------------------------------------------------------
   701                                                          alignb  4
   702                                  ECONDATA                equ     ($)
   703 00000A08 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   704 00000A0C <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   705 00000A10 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   706 00000A14 <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   707 00000A18 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   708 00000A1C <res 00000004>          wdConsolePCISelector    resd    1                                               ;PCI selector (bbbbbbbb dddddfff)
   709                                  wdConsolePCIData        equ     $                                               ;PCI register data value
   710 00000A20 <res 00000002>          wwConsolePCIVendor      resw    1                                               ;PCI data vendor
   711 00000A22 <res 00000002>          wwConsolePCIChip        resw    1                                               ;PCI data chip
   712 00000A24 <res 00000004>          wdConsolePCIVendorStr   resd    1                                               ;PCI vendor name string addr
   713 00000A28 <res 00000004>          wdConsolePCIChipStr     resd    1                                               ;PCI device name string addr
   714 00000A2C <res 00000004>          wdConsoleEthernetDevice resd    1                                               ;PCI ethernet adapter selector
   715 00000A30 <res 00000004>          wdConsoleEthernetMem    resd    1                                               ;PCI ethernet memory mapped i/o address
   716 00000A34 <res 00000004>          wdConsoleEthernetPort   resd    1                                               ;PCI ethernet i/o port
   717 00000A38 <res 00000004>          wdConsoleEthernetCtrl   resd    1                                               ;PCI ethernet control register value
   718 00000A3C <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   719 00000A3D <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   720 00000A3E <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   721 00000A3F <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   722 00000A40 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   723 00000A41 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   724 00000A42 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   725 00000A43 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   726 00000A44 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   727 00000A45 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   728 00000A46 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   729 00000A47 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   730 00000A48 <res 00000001>          wbConsolePCIBus         resb    1                                               ;PCI bus
   731 00000A49 <res 00000001>          wbConsolePCIDevice      resb    1                                               ;PCI device
   732 00000A4A <res 00000001>          wbConsolePCIFunction    resb    1                                               ;PCI function
   733 00000A4B <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   734 00000A4C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   735 00000A9C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   736 00000AEC <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   737 00000B3C <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   738 00000B47 <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   739 00000B52 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   740 00000B5D <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   741 00000B75 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   742                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   743                                  ;-----------------------------------------------------------------------------------------------------------------------
   744                                  ;
   745                                  ;       Background Task Variables
   746                                  ;
   747                                  ;       These variables are exclusve to the background task. These variables are initialized by the background task when
   748                                  ;       the task starts.
   749                                  ;
   750                                  ;-----------------------------------------------------------------------------------------------------------------------
   751 00000B7D <res 00000003>                                  alignb  4
   752                                  EBGDATA                 equ     ($)
   753 00000B80 <res 00000008>          wsBgDateTime            resb    EDATETIMELEN                                    ;date-time buffer
   754 00000B88 <res 00000009>          wzBgTime                resb    EBGTIMELEN                                      ;time string buffer
   755 00000B91 <res 00000009>          wzBgTimeCmpr            resb    EBGTIMELEN                                      ;time string comparison buffer
   756                                  EBGDATALEN              equ     ($-EBGDATA)
   757                                  ;-----------------------------------------------------------------------------------------------------------------------
   758                                  ;
   759                                  ;       End of OS Variables
   760                                  ;
   761                                  ;-----------------------------------------------------------------------------------------------------------------------
   762                                  endstruc
   763                                  ;-----------------------------------------------------------------------------------------------------------------------
   764                                  ;
   765                                  ;       Macros
   766                                  ;
   767                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   768                                  ;
   769                                  ;-----------------------------------------------------------------------------------------------------------------------
   770                                  %macro                  mint    1
   771                                  _%1                     equ     ($-$$) / EX86DESCLEN
   772                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   773                                  %endmacro
   774                                  %macro                  mtrap   1
   775                                  _%1                     equ     ($-$$) / EX86DESCLEN
   776                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   777                                  %endmacro
   778                                  %macro                  menter  1
   779                                  ?%1                     equ     ($-$$)
   780                                  %endmacro
   781                                  %macro                  tsvce   1
   782                                  e%1                     equ     ($-tsvc)/4
   783                                                          dd      %1
   784                                  %endmacro
   785                                  %ifdef BUILDBOOT
   786                                  ;=======================================================================================================================
   787                                  ;
   788                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   789                                  ;
   790                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   791                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   792                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   793                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   794                                  ;
   795                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   796                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   797                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   798                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   799                                  ;       immediately followed by a disk parameter table.
   800                                  ;
   801                                  ;=======================================================================================================================
   802                                                          cpu     8086                                            ;assume minimal CPU
   803                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   804                                                          bits    16                                              ;16-bit code at power-up
   805                                  %ifdef BUILDPREP
   806 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   807                                  %else
   808                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   809                                  %endif
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811                                  ;
   812                                  ;       Disk Parameter Table
   813                                  ;
   814                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   815                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   816                                  ;
   817                                  ;-----------------------------------------------------------------------------------------------------------------------
   818 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   819 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   820 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   821 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   822 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   823 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   824 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   825 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   826 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   827                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   828 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   829 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   830 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   831                                  ;
   832                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   833                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   834                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   835                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   836                                  ;       given several possible starting values for CS:IP.
   837                                  ;
   838                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   839 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   840                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   841 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   842 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   843 00000025 B104                                            mov     cl,4                                            ;shift count
   844 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   845 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   846 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   847                                  ;
   848                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   849                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   850                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   851                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   852                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   853                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   854                                  ;
   855 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   856 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   857 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   858 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   859 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   860                                  ;
   861                                  ;       Our boot addressability is now set up according to the following diagram.
   862                                  ;
   863                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   864                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   865                                  ;                               |  256 = 100h bytes                             |
   866                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   867                                  ;                               |  Boot Sector (vstart=0100h)                   |
   868                                  ;                               |  1 sector = 512 = 200h bytes                  |
   869                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   870                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   871                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   872                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   873                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   874                                  ;                               |  2 sectors = 1024 = 400h bytes
   875                                  ;                       009400  +-----------------------------------------------+ DS:1900
   876                                  ;
   877                                  ;       On entry, DL indicates the drive being booted from.
   878                                  ;
   879 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   880                                  ;
   881                                  ;       Compute directory i/o buffer address.
   882                                  ;
   883 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   884 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   885 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   886 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   887                                  ;
   888                                  ;       Compute segment where os.com will be loaded.
   889                                  ;
   890 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   891 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   892 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   893 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   894                                  ;
   895                                  ;       Set the video mode to 80 column, 25 row, text.
   896                                  ;
   897 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   898 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   899                                  ;
   900                                  ;       Write a message to the console so we know we have our addressability established.
   901                                  ;
   902 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   903 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   904                                  ;
   905                                  ;       Initialize the number of directory sectors to search.
   906                                  ;
   907 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   908 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   909                                  ;
   910                                  ;       Compute number of directory sectors and initialize overhead count.
   911                                  ;
   912 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   913 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   914 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   915 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   916                                  ;
   917                                  ;       Compute directory entries per sector.
   918                                  ;
   919 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   920 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   921 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   922                                  ;
   923                                  ;       Compute first logical directory sector and update overhead count.
   924                                  ;
   925 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   926 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   927 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   928 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   929 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   930 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   931                                  ;
   932                                  ;       Read directory sector.
   933                                  ;
   934 0000008E B001                    .30                     mov     al,1                                            ;sector count
   935 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   936 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   937 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   938                                  ;
   939                                  ;       Setup variables to search this directory sector.
   940                                  ;
   941 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   942 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   943 000000A1 7603                                            jna     .40                                             ;no, continue
   944 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   945 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   946 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   947 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   948                                  ;
   949                                  ;       Loop through directory sectors searching for kernel program.
   950                                  ;
   951 000000B1 56                      .50                     push    si                                              ;save kernel name address
   952 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   953 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   954 000000B6 FC                                              cld                                                     ;forward strings
   955 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   956 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   957 000000BA 5E                                              pop     si                                              ;restore kernel name address
   958 000000BB 7418                                            je      .60                                             ;exit loop if found
   959 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   960 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   961 000000C2 75ED                                            jnz     .50                                             ;next entry
   962                                  ;
   963                                  ;       Repeat search if we are not at the end of the directory.
   964                                  ;
   965 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   966 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   967 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   968 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   969 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   970                                  ;
   971                                  ;       If we find the kernel program in the directory, read the FAT.
   972                                  ;
   973 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   974 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   975 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   976 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   977 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   978 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   979                                  ;
   980                                  ;       Get the starting cluster of the kernel program and target address.
   981                                  ;
   982 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   983 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   984                                  ;
   985                                  ;       Read each program cluster into RAM.
   986                                  ;
   987 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   988 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   989 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   990 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   991 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   992 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   993 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   994 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   995 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   996                                  ;
   997                                  ;       Update buffer pointer for next cluster.
   998                                  ;
   999 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
  1000 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
  1001 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
  1002 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
  1003 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
  1004                                  ;
  1005                                  ;       Compute next cluster number.
  1006                                  ;
  1007 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
  1008 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
  1009 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
  1010 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
  1011 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
  1012 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
  1013 00000120 83E701                                          and     di,1                                            ;get low bit
  1014 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
  1015 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
  1016 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
  1017                                  ;
  1018                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
  1019                                  ;
  1020 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
  1021 0000012E 7404                                            jz      .80                                             ;no, skip ahead
  1022 00000130 B104                                            mov     cl,4                                            ;shift count
  1023 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
  1024 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
  1025 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
  1026 0000013A 75B2                                            jne     .70                                             ;no, continue
  1027                                  ;
  1028                                  ;       Transfer control to the operating system program.
  1029                                  ;
  1030 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
  1031 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
  1032 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
  1033                                  ;
  1034                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
  1035                                  ;
  1036 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1037 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1038 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
  1039 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1040 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
  1041 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1042 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
  1043 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1044 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
  1045 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1046                                  ;
  1047                                  ;       Try maxtries times to read sector.
  1048                                  ;
  1049 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1050 00000160 53                      .10                     push    bx                                              ;save buffer address
  1051 00000161 51                                              push    cx                                              ;save retry count
  1052 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1053 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1054 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1055 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
  1056 0000016F 59                                              pop     cx                                              ;restore retry count
  1057 00000170 5B                                              pop     bx                                              ;restore buffer address
  1058 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
  1059 00000173 E2EB                                            loop    .10                                             ;retry
  1060                                  ;
  1061                                  ;       Handle disk error: convert to ASCII and store in error string.
  1062                                  ;
  1063 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
  1064 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
  1065 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
  1066 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
  1067 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
  1068 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1069 00000183 7203                                            jb      .20                                             ;continue if numeral
  1070 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1071 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1072 0000018A 7203                                            jb      .30                                             ;continue if numeral
  1073 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1074 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1075 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
  1076 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
  1077                                  ;
  1078                                  ;       Wait for a key press.
  1079                                  ;
  1080 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1081 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1082 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
  1083 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1084 0000019F F4                                              hlt                                                     ;wait for interrupt
  1085 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1086                                  ;
  1087                                  ;       Reset the system.
  1088                                  ;
  1089 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1090 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1091 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1092 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1093 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1094                                  ;
  1095                                  ;       Display text message.
  1096                                  ;
  1097 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1098 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1099 000001AC 84C0                                            test    al,al                                           ;end of string?
  1100 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1101 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1102 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1103 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1104 000001B6 C3                      BootReturn              ret                                                     ;return
  1105                                  ;-----------------------------------------------------------------------------------------------------------------------
  1106                                  ;
  1107                                  ;       Constants
  1108                                  ;
  1109                                  ;-----------------------------------------------------------------------------------------------------------------------
  1110 000001B7 90                                              align   2
  1111 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1112 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1112 000001C3 4F4D               
  1113 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1113 000001CE 530D0A00           
  1114 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1114 000001DB 7220               
  1115 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1116 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1116 000001E9 6700               
  1117                                  ;-----------------------------------------------------------------------------------------------------------------------
  1118                                  ;
  1119                                  ;       Work Areas
  1120                                  ;
  1121                                  ;-----------------------------------------------------------------------------------------------------------------------
  1122 000001EB 90                                              align   2
  1123 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1124 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1125 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1126 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1127 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1128                                  wwReadCountCommand      equ     $                                               ;read count and command
  1129 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1130 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1131                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1132 000001F8 00                      wbDrive                 db      0                                               ;drive
  1133 000001F9 00                      wbHead                  db      0                                               ;head
  1134                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1135 000001FA 00                                              db      0                                               ;sector
  1136 000001FB 00                      wbTrack                 db      0                                               ;track
  1137 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1138 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1139                                  %endif
  1140                                  %ifdef BUILDPREP
  1141                                  ;=======================================================================================================================
  1142                                  ;
  1143                                  ;       Diskette Preparation Code
  1144                                  ;
  1145                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1146                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1147                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1148                                  ;
  1149                                  ;=======================================================================================================================
  1150                                  ;
  1151                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1152                                  ;
  1153 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1154 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1155                                  ;
  1156                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1157                                  ;
  1158 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1159 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1160 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1161 0000020C FB                                              sti                                                     ;enable interrupts
  1162 0000020D F4                                              hlt                                                     ;wait for interrupt
  1163 0000020E EBF6                                            jmp     .10                                             ;repeat
  1164 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1165 00000212 7407                                            je      .30                                             ;yes, branch
  1166 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1167 00000216 75EE                                            jne     .10                                             ;no, repeat
  1168 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1169                                  ;
  1170                                  ;       Display writing-sector message and patch the JMP instruction.
  1171                                  ;
  1172 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1173 0000021E E889FF                                          call    BootPrint                                       ;display message
  1174 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1175 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1176 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1177                                  ;
  1178                                  ;       Try to read the boot sector.
  1179                                  ;
  1180 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1181 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1182 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1183 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1184 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1185 00000236 B001                                            mov     al,1                                            ;one sector
  1186 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1187 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1188 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1189 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1190 0000023F E2EB                                            loop    .40                                             ;try again
  1191 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1192 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1193                                  ;
  1194                                  ;       Copy diskette parms from input buffer to output buffer.
  1195                                  ;
  1196 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1197 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1198 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1199 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1200 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1201 00000255 FC                                              cld                                                     ;forward string copies
  1202 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1203                                  ;
  1204                                  ;       Try to write boot sector to diskette.
  1205                                  ;
  1206 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1207 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1208 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1209 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1210 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1211 00000265 B001                                            mov     al,1                                            ;one sector
  1212 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1213 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1214 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1215 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1216 0000026E E2EB                                            loop    .60                                             ;try again
  1217 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1218                                  ;
  1219                                  ;       Convert the error code to ASCII and display the error message.
  1220                                  ;
  1221 00000273 50                      .70                     push    ax                                              ;save error code
  1222 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1223 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1224 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1225 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1226 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1227 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1228 00000282 7203                                            jb      .80                                             ;yes, continue
  1229 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1230 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1231 00000289 7202                                            jb      .90                                             ;yes, continue
  1232 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1233 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1234 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1235 00000293 58                                              pop     ax                                              ;restore error code
  1236                                  ;
  1237                                  ;       Display the completion message.
  1238                                  ;
  1239 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1240 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1241 00000299 3C00                                            cmp     al,0                                            ;success?
  1242 0000029B 7426                                            je      .110                                            ;yes, continue
  1243 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1244 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1245 000002A2 741F                                            je      .110                                            ;yes, continue
  1246 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1247 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1248 000002A9 7418                                            je      .110                                            ;yes, continue
  1249 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1250 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1251 000002B0 7411                                            je      .110                                            ;yes, continue
  1252 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1253 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1254 000002B7 740A                                            je      .110                                            ;yes, continue
  1255 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1256 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1257 000002BE 7403                                            je      .110                                            ;yes, continue
  1258 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1259 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1260 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1261 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1262 000002CB C3                                              ret                                                     ;return (should not execute)
  1263                                  ;-----------------------------------------------------------------------------------------------------------------------
  1264                                  ;
  1265                                  ;       Diskette Preparation Messages
  1266                                  ;
  1267                                  ;-----------------------------------------------------------------------------------------------------------------------
  1268 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1268 000002D5 5320426F6F742D4469-
  1268 000002DE 736B65747465205072-
  1268 000002E7 657061726174696F6E-
  1268 000002F0 2050726F6772616D   
  1269 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1269 00000301 687420284329203230-
  1269 0000030A 31302D323031382044-
  1269 00000313 61766964204A2E2057-
  1269 0000031C 616C6C696E672E2041-
  1269 00000325 6C6C20726967687473-
  1269 0000032E 207265736572766564-
  1269 00000337 2E                 
  1270 00000338 0D0A                                            db      13,10
  1271 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1271 00000343 6F6772616D206F7665-
  1271 0000034C 727772697465732074-
  1271 00000355 686520626F6F742073-
  1271 0000035E 6563746F72206F6620-
  1271 00000367 61206469736B657474-
  1271 00000370 652077697468207374-
  1271 00000379 617274757020636F64-
  1271 00000382 652074686174       
  1272 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1272 00000391 616420746865206F70-
  1272 0000039A 65726174696E672073-
  1272 000003A3 797374656D20696E74-
  1272 000003AC 6F206D656D6F727920-
  1272 000003B5 7768656E2074686520-
  1272 000003BE 636F6D707574657220-
  1272 000003C7 697320726573746172-
  1272 000003D0 7465642E           
  1273 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1273 000003DD 6565642C20706C6163-
  1273 000003E6 65206120666F726D61-
  1273 000003EF 74746564206469736B-
  1273 000003F8 6574746520696E746F-
  1273 00000401 20647269766520413A-
  1273 0000040A 20616E642070726573-
  1273 00000413 732074686520456E74-
  1273 0000041C 6572206B65792E     
  1274 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1274 0000042C 20746869732070726F-
  1274 00000435 6772616D2077697468-
  1274 0000043E 6F7574207072657061-
  1274 00000447 72696E672061206469-
  1274 00000450 736B657474652C2070-
  1274 00000459 726573732074686520-
  1274 00000462 457363617065206B65-
  1274 0000046B 792E               
  1275 0000046D 0D0A00                                          db      13,10,0
  1276 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1276 00000479 2074686520626F6F74-
  1276 00000482 20736563746F722074-
  1276 0000048B 6F2074686520646973-
  1276 00000494 6B65747465202E2E2E 
  1277 0000049D 0D0A00                                          db      13,10,0
  1278 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1278 000004A9 6F722D636F6465202E-
  1278 000004B2 2E2077617320726574-
  1278 000004BB 75726E65642066726F-
  1278 000004C4 6D207468652042494F-
  1278 000004CD 53207768696C652072-
  1278 000004D6 656164696E67206672-
  1278 000004DF 6F6D20746865206469-
  1278 000004E8 736B2E             
  1279 000004EB 0D0A00                                          db      13,10,0
  1280 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1280 000004F7 6F722D636F6465202E-
  1280 00000500 2E2077617320726574-
  1280 00000509 75726E65642066726F-
  1280 00000512 6D207468652042494F-
  1280 0000051B 53207768696C652077-
  1280 00000524 726974696E6720746F-
  1280 0000052D 20746865206469736B-
  1280 00000536 2E                 
  1281 00000537 0D0A00                                          db      13,10,0
  1282 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1282 00000543 742D736563746F7220-
  1282 0000054C 776173207772697474-
  1282 00000555 656E20746F20746865-
  1282 0000055E 206469736B65747465-
  1282 00000567 2E204265666F726520-
  1282 00000570 626F6F74696E672079-
  1282 00000579 6F757220636F6D7075-
  1282 00000582 7465722077697468   
  1283 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1283 00000593 736B657474652C206D-
  1283 0000059C 616B65207375726520-
  1283 000005A5 746861742074686520-
  1283 000005AE 66696C65204F532E43-
  1283 000005B7 4F4D20697320636F70-
  1283 000005C0 696564206F6E746F20-
  1283 000005C9 746865206469736B65-
  1283 000005D2 7474652E           
  1284 000005D6 0D0A00                                          db      13,10,0
  1285 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1285 000005E2 76616C696420446973-
  1285 000005EB 6B20506172616D6574-
  1285 000005F4 6572               
  1286 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1286 000005FF 20616E20696E746572-
  1286 00000608 6E616C206572726F72-
  1286 00000611 206361757365642062-
  1286 0000061A 7920616E20696E7661-
  1286 00000623 6C69642076616C7565-
  1286 0000062C 206265696E67207061-
  1286 00000635 7373656420746F2061-
  1286 0000063E 2073797374656D     
  1287 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1287 0000064E 6E2E20546865204F53-
  1287 00000657 424F4F542E434F4D20-
  1287 00000660 66696C65206D617920-
  1287 00000669 626520636F72727570-
  1287 00000672 742E20436F7079206F-
  1287 0000067B 7220646F776E6C6F61-
  1287 00000684 64207468652066696C-
  1287 0000068D 6520616761696E     
  1288 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1288 0000069D 72792E             
  1289 000006A0 0D0A00                                          db      13,10,0
  1290 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1290 000006AC 6472657373204D6172-
  1290 000006B5 6B204E6F7420466F75-
  1290 000006BE 6E64               
  1291 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1291 000006C9 726F7220696E646963-
  1291 000006D2 617465732061207068-
  1291 000006DB 79736963616C207072-
  1291 000006E4 6F626C656D20776974-
  1291 000006ED 682074686520666C6F-
  1291 000006F6 707079206469736B65-
  1291 000006FF 7474652E20506C6561-
  1291 00000708 7365207265747279   
  1292 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1292 00000719 6E6F74686572206469-
  1292 00000722 736B657474652E     
  1293 00000729 0D0A00                                          db      13,10,0
  1294 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1294 00000735 6F7465637465642044-
  1294 0000073E 69736B             
  1295 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1295 0000074A 726F72206973207573-
  1295 00000753 75616C6C7920636175-
  1295 0000075C 736564206279206174-
  1295 00000765 74656D7074696E6720-
  1295 0000076E 746F20777269746520-
  1295 00000777 746F20612077726974-
  1295 00000780 652D70726F74656374-
  1295 00000789 6564206469736B2E   
  1296 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1296 0000079A 686520277772697465-
  1296 000007A3 2D70726F7465637427-
  1296 000007AC 2073657474696E6720-
  1296 000007B5 6F6E20746865206469-
  1296 000007BE 736B206F7220726574-
  1296 000007C7 7279207573696E6720-
  1296 000007D0 7573696E6720616E6F-
  1296 000007D9 74686572206469736B-
  1296 000007E2 2E                 
  1297 000007E3 0D0A00                                          db      13,10,0
  1298 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1298 000007EF 736B65747465205265-
  1298 000007F8 6D6F766564         
  1299 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1299 00000806 726F72206D61792069-
  1299 0000080F 6E6469636174652074-
  1299 00000818 686174207468652066-
  1299 00000821 6C6F70707920646973-
  1299 0000082A 6B6574746520686173-
  1299 00000833 206265656E2072656D-
  1299 0000083C 6F7665642066726F6D-
  1299 00000845 20746865           
  1300 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1300 00000852 652064726976652E20-
  1300 0000085B 4F6E20736F6D652073-
  1300 00000864 797374656D732C2074-
  1300 0000086D 68697320636F646520-
  1300 00000876 6D617920616C736F20-
  1300 0000087F 6F6363757220696620-
  1300 00000888 746865206469736B65-
  1300 00000891 747465206973       
  1301 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1301 000008A0 70726F746563746564-
  1301 000008A9 2E2720506C65617365-
  1301 000008B2 207665726966792074-
  1301 000008BB 686174207468652064-
  1301 000008C4 69736B657474652069-
  1301 000008CD 73206E6F7420777269-
  1301 000008D6 74652D70726F746563-
  1301 000008DF 74656420616E64     
  1302 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1302 000008EF 65726C7920696E7365-
  1302 000008F8 7274656420696E2074-
  1302 00000901 6865206469736B6574-
  1302 0000090A 74652064726976652E 
  1303 00000913 0D0A00                                          db      13,10,0
  1304 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1304 0000091F 6976652054696D6564-
  1304 00000928 204F7574           
  1305 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1305 00000935 726F7220757375616C-
  1305 0000093E 6C7920696E64696361-
  1305 00000947 746573207468617420-
  1305 00000950 6E6F206469736B6574-
  1305 00000959 746520697320696E20-
  1305 00000962 746865206469736B65-
  1305 0000096B 747465206472697665-
  1305 00000974 2E20506C65617365   
  1306 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1306 00000985 726520746861742074-
  1306 0000098E 6865206469736B6574-
  1306 00000997 74652069732070726F-
  1306 000009A0 7065726C7920736561-
  1306 000009A9 74656420696E207468-
  1306 000009B2 652064726976652061-
  1306 000009BB 6E642072657472792E 
  1307 000009C4 0D0A00                                          db      13,10,0
  1308 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1308 000009D0 6B6E6F776E20457272-
  1308 000009D9 6F72               
  1309 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1309 000009E4 6F722D636F64652072-
  1309 000009ED 657475726E65642062-
  1309 000009F6 79207468652042494F-
  1309 000009FF 53206973206E6F7420-
  1309 00000A08 61207265636F676E69-
  1309 00000A11 7A6564206572726F72-
  1309 00000A1A 2E20506C6561736520-
  1309 00000A23 636F6E73756C74     
  1310 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1310 00000A33 6D7075746572277320-
  1310 00000A3C 746563686E6963616C-
  1310 00000A45 207265666572656E63-
  1310 00000A4E 6520666F7220612064-
  1310 00000A57 65736372697074696F-
  1310 00000A60 6E206F662074686973-
  1310 00000A69 206572726F7220636F-
  1310 00000A72 64652E             
  1311 00000A75 0D0A00                                          db      13,10,0
  1312                                  wcPrepInBuf             equ     $
  1313                                  %endif
  1314                                  %ifdef BUILDDISK
  1315                                  ;=======================================================================================================================
  1316                                  ;
  1317                                  ;       File Allocation Tables
  1318                                  ;
  1319                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1320                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1321                                  ;       OS.COM file will be 7400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 7000h
  1322                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1323                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 58 clusters for OS.COM. The clusters used by
  1324                                  ;       OS.COM, then, will be cluster 2 through 59. The entry for cluster 59 is set to "0fffh" to indicate that it is
  1325                                  ;       the last cluster in the chain.
  1326                                  ;
  1327                                  ;       Every three bytes encode two FAT entries as follows:
  1328                                  ;
  1329                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1330                                  ;
  1331                                  ;=======================================================================================================================
  1332                                  ;-----------------------------------------------------------------------------------------------------------------------
  1333                                  ;
  1334                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1335                                  ;
  1336                                  ;-----------------------------------------------------------------------------------------------------------------------
  1337                                  section                 fat1                                                    ;first copy of FAT
  1338                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h                  ;clusters 0-3           ff0 fff 003 004
  1339                                                          db      005h,060h,000h, 007h,080h,000h                  ;custters 4-7           005 006 007 008
  1340                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h                  ;clusters 8-11          009 00a 00b 00c
  1341                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h                  ;clusters 12-15         00d 00e 00f 010
  1342                                                          db      011h,020h,001h, 013h,040h,001h                  ;clusters 16-19         011 012 013 014
  1343                                                          db      015h,060h,001h, 017h,080h,001h                  ;clusters 20-23         015 016 017 018
  1344                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h                  ;clusters 24-27         019 01a 01b 01c
  1345                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h                  ;clusters 28-31         01d 01e 01f 020
  1346                                                          db      021h,020h,002h, 023h,040h,002h                  ;clusters 32-35         021 022 023 024
  1347                                                          db      025h,060h,002h, 027h,080h,002h                  ;clusters 36-39         025 026 027 028
  1348                                                          db      029h,0A0h,002h, 02Bh,0C0h,002h                  ;clusters 40-43         029 02A 02B 02C
  1349                                                          db      02Dh,0E0h,002h, 02Fh,000h,003h                  ;clusters 44-47         02D 02E 02F 030
  1350                                                          db      031h,020h,003h, 033h,040h,003h                  ;clusters 48-51         031 032 033 034
  1351                                                          db      035h,060h,003h, 037h,080h,003h                  ;clusters 52-55         035 036 037 038
  1352                                                          db      039h,0A0h,003h, 03Bh,0F0h,0FFh                  ;clusters 56-59         039 03A 03B FFF
  1353                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1357                                  ;
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  section                 fat2                                                    ;second copy of FAT
  1360                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h                  ;clusters 0-3           ff0 fff 003 004
  1361                                                          db      005h,060h,000h, 007h,080h,000h                  ;custters 4-7           005 006 007 008
  1362                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h                  ;clusters 8-11          009 00a 00b 00c
  1363                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h                  ;clusters 12-15         00d 00e 00f 010
  1364                                                          db      011h,020h,001h, 013h,040h,001h                  ;clusters 16-19         011 012 013 014
  1365                                                          db      015h,060h,001h, 017h,080h,001h                  ;clusters 20-23         015 016 017 018
  1366                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h                  ;clusters 24-27         019 01a 01b 01c
  1367                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h                  ;clusters 28-31         01d 01e 01f 020
  1368                                                          db      021h,020h,002h, 023h,040h,002h                  ;clusters 32-35         021 022 023 024
  1369                                                          db      025h,060h,002h, 027h,080h,002h                  ;clusters 36-39         025 026 027 028
  1370                                                          db      029h,0A0h,002h, 02Bh,0C0h,002h                  ;clusters 40-43         029 02A 02B 02C
  1371                                                          db      02Dh,0E0h,002h, 02Fh,000h,003h                  ;clusters 44-47         02D 02E 02F 030
  1372                                                          db      031h,020h,003h, 033h,040h,003h                  ;clusters 48-51         031 032 033 034
  1373                                                          db      035h,060h,003h, 037h,080h,003h                  ;clusters 52-55         035 036 037 038
  1374                                                          db      039h,0A0h,003h, 03Bh,0F0h,0FFh                  ;clusters 56-59         039 03A 03B FFF
  1375                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1376                                  ;-----------------------------------------------------------------------------------------------------------------------
  1377                                  ;
  1378                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1379                                  ;
  1380                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1381                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1382                                  ;       copy.
  1383                                  ;
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  section                 dir                                                     ;diskette directory
  1386                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1387                                                          db      020h                                            ;attribute (archive bit set)
  1388                                                          times   10 db 0                                         ;unused
  1389                                                          dw      0h                                              ;time
  1390                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1391                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1392                                                          dw      2                                               ;first cluster
  1393                                                          dd      07200h                                          ;file size
  1394                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1395                                  %endif
  1396                                  %ifdef BUILDCOM
  1397                                  ;=======================================================================================================================
  1398                                  ;
  1399                                  ;       OS.COM
  1400                                  ;
  1401                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1402                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1403                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1404                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1405                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1406                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1407                                  ;
  1408                                  ;       Our loader addressability is set up according to the following diagram.
  1409                                  ;
  1410                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1411                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1412                                  ;                               |  256 = 100h bytes                             |
  1413                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1414                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1415                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1416                                  ;                       007e00  +-----------------------------------------------+
  1417                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1418                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1419                                  ;                               |                                               |
  1420                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1421                                  ;                               |                                               |
  1422                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1423                                  ;                               |  Loader Code                                  |
  1424                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1425                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1426                                  ;
  1427                                  ;=======================================================================================================================
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429                                  ;
  1430                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1431                                  ;
  1432                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1433                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1434                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1435                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1436                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1437                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1438                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1439                                  ;       registers.
  1440                                  ;
  1441                                  ;-----------------------------------------------------------------------------------------------------------------------
  1442                                                          cpu     8086                                            ;assume minimal CPU
  1443                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1444                                                          bits    16                                              ;this is 16-bit code
  1445                                  Loader                  push    cs                                              ;use the code segment
  1446                                                          pop     ds                                              ;...as our data segment
  1447                                                          push    cs                                              ;use the code segment
  1448                                                          pop     es                                              ;...as our extra segment
  1449                                  ;
  1450                                  ;       Write a message to the console so we know we have our addressability established.
  1451                                  ;
  1452                                                          mov     si,czStartingMsg                                ;starting message
  1453                                                          call    PutTTYString                                    ;display loader message
  1454                                  ;
  1455                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1456                                  ;
  1457                                                          call    GetCPUType                                      ;AL = cpu type
  1458                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1459                                                          cmp     al,3                                            ;80386+?
  1460                                                          jb      LoaderExit                                      ;no, exit with error message
  1461                                                          cpu     386                                             ;allow 80386 instructions
  1462                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1463                                                          call    PutTTYString                                    ;display message
  1464                                  ;
  1465                                  ;       Initialize kernel data areas. The task queue is initialized here because as soon as we enter protected mode,
  1466                                  ;       the timer interrupt code will begin inspecting the task queue to determine if a task switch must be made. To
  1467                                  ;       start with, we set every 16th queue element to reference the background task selector. This will ensure that
  1468                                  ;       the background task, which updates the visible clock on the console, will be called at least once per second.
  1469                                  ;
  1470                                                          push    EKRNDATASEG                                     ;load kernel data segment address ...
  1471                                                          pop     es                                              ;... into extra segment reg
  1472                                                          mov     di,wwTaskQueue                                  ;task queue address
  1473                                                          mov     cx,64                                           ;outer loop
  1474                                  .10                     push    cx                                              ;save remaining outer iterations
  1475                                                          mov     cx,3                                            ;inner loop
  1476                                                          mov     ax,EGDTCONSOLETSS                               ;console task state segment selector
  1477                                                          cld                                                     ;forward strings
  1478                                                          rep     stosw                                           ;store selectors in task queue
  1479                                                          mov     ax,ESELBACKGROUNDTSS                            ;background task state segment selector
  1480                                                          stosw                                                   ;store selector in task queue
  1481                                                          pop     cx                                              ;restore remaining outer iterations
  1482                                                          loop    .10                                             ;next
  1483                                                          xor     ax,ax                                           ;zero register
  1484                                                          mov     cl,4                                            ;remaining words to reset
  1485                                                          rep     stosw                                           ;reset remaining kernel data
  1486                                  ;
  1487                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1488                                  ;
  1489                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1490                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1491                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1492                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1493                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1494                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1495                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1496                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1497                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1498                                                          call    PutTTYString                                    ;display message
  1499                                  ;
  1500                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1501                                  ;
  1502                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1503                                                          pop     es                                              ;... as target segment
  1504                                                          xor     di,di                                           ;ES:DI = target address
  1505                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1506                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1507                                                          cld                                                     ;forward strings
  1508                                                          rep     movsb                                           ;copy kernel image
  1509                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1510                                                          call    PutTTYString                                    ;display message
  1511                                  ;
  1512                                  ;       Switch to protected mode.
  1513                                  ;
  1514                                                          xor     si,si                                           ;ES:SI = gdt addr
  1515                                                          mov     ss,si                                           ;protected mode ss
  1516                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1517                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1518                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1519                                                          mov     dx,001Fh                                        ;outer delay loop count
  1520                                  .20                     mov     cx,0FFFFh                                       ;inner delay loop count
  1521                                                          loop    $                                               ;wait out pending interrupts
  1522                                                          dec     dx                                              ;restore outer loop count
  1523                                                          jnz     .20                                             ;continue outer loop
  1524                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1525                                  ;
  1526                                  ;       Enable hardware and maskable interrupts.
  1527                                  ;
  1528                                                          xor     al,al                                           ;enable all registers code
  1529                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1530                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1531                                                          sti                                                     ;enable maskable interrupts
  1532                                  ;
  1533                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1534                                  ;
  1535                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1536                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1537                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1538                                  ;-----------------------------------------------------------------------------------------------------------------------
  1539                                  ;
  1540                                  ;       Routine:        LoaderExit
  1541                                  ;
  1542                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1543                                  ;
  1544                                  ;       In:             DS:SI   string address
  1545                                  ;
  1546                                  ;-----------------------------------------------------------------------------------------------------------------------
  1547                                  LoaderExit              call    PutTTYString                                    ;display error message
  1548                                  ;
  1549                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1550                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1551                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1552                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1553                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1554                                  ;
  1555                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1556                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1557                                                          jnz     .40                                             ;exit if key pressed
  1558                                                          sti                                                     ;enable maskable interrupts
  1559                                                          hlt                                                     ;wait for interrupt
  1560                                                          jmp     .30                                             ;repeat until keypress
  1561                                  ;
  1562                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1563                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1564                                  ;       HLT until the system resets.
  1565                                  ;
  1566                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1567                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1568                                  .50                     sti                                                     ;enable maskable interrupts
  1569                                                          hlt                                                     ;stop until reset, int, nmi
  1570                                                          jmp     .50                                             ;loop until restart kicks in
  1571                                  ;-----------------------------------------------------------------------------------------------------------------------
  1572                                  ;
  1573                                  ;       Routine:        GetCPUType
  1574                                  ;
  1575                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1576                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1577                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1578                                  ;
  1579                                  ;       Out:            AX      0 = 808x, v20, etc.
  1580                                  ;                               1 = 80186
  1581                                  ;                               2 = 80286
  1582                                  ;                               3 = 80386
  1583                                  ;
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  GetCPUType              mov     al,1                                            ;AL = 1
  1586                                                          mov     cl,32                                           ;shift count
  1587                                                          shr     al,cl                                           ;try a 32-bit shift
  1588                                                          or      al,al                                           ;did the shift happen?
  1589                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1590                                                          cpu     186
  1591                                                          push    sp                                              ;save stack pointer
  1592                                                          pop     cx                                              ;...into cx
  1593                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1594                                                          jne     .10                                             ;yes, cpu is 80186
  1595                                                          cpu     286
  1596                                                          inc     ax                                              ;AX = 2
  1597                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1598                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1599                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1600                                                          jz      .10                                             ;yes, cpu is 80286
  1601                                                          inc     ax                                              ;AX = 3
  1602                                  .10                     ret                                                     ;return
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                  ;
  1605                                  ;       Routine:        PutTTYString
  1606                                  ;
  1607                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1608                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1609                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1610                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1611                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1612                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1613                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1614                                  ;                       to LODSB is not needed.
  1615                                  ;
  1616                                  ;       In:             DS:SI   address of string
  1617                                  ;
  1618                                  ;       Out:            DF      0
  1619                                  ;                       ZF      1
  1620                                  ;                       AL      0
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  PutTTYString            cld                                                     ;forward strings
  1624                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1625                                                          test    al,al                                           ;end of string?
  1626                                                          jz      .20                                             ;... yes, exit our loop
  1627                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1628                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1629                                                          jmp     .10                                             ;repeat until done
  1630                                  .20                     ret                                                     ;return
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;
  1633                                  ;       Loader Data
  1634                                  ;
  1635                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1636                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          align   2
  1640                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1641                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1642                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1643                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1644                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1645                                                          db      "Please press any key to restart the computer.",13,10,0
  1646                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1647                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1648                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1649                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1650                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1651                                  ;=======================================================================================================================
  1652                                  ;
  1653                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1654                                  ;
  1655                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1656                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1657                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1658                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1659                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1660                                  ;
  1661                                  ;=======================================================================================================================
  1662                                  ;=======================================================================================================================
  1663                                  ;
  1664                                  ;       Kernel Tables
  1665                                  ;
  1666                                  ;=======================================================================================================================
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1670                                  ;
  1671                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1672                                  ;       first descriptor must be all nulls.
  1673                                  ;
  1674                                  ;       6   5         4         3         2         1         0
  1675                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1676                                  ;       ----------------------------------------------------------------
  1677                                  ;       h......hffffmmmma......ab......................bn..............n
  1678                                  ;       00000000                        all areas have base addresses below 2^24
  1679                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1680                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1681                                  ;                   1001                present, ring-0, selector
  1682                                  ;
  1683                                  ;       h...h   hi-order base address (bits 24-31)
  1684                                  ;       ffff    flags
  1685                                  ;       mmmm    hi-order limit (bits 16-19)
  1686                                  ;       a...a   access
  1687                                  ;       b...b   lo-order base address (bits 0-23)
  1688                                  ;       n...n   lo-order limit (bits 0-15)
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  section                 gdt                                                     ;global descriptor table
  1692                                                          dq      0000000000000000h                               ;00 required null selector
  1693                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1694                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1695                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1696                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1697                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1698                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1699                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1700                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1701                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1702                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1703                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1704                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1705                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1706                                                          dq      004082006700007Fh                               ;70 80B  writable LDT   (background)
  1707                                                          dq      004089006780007Fh                               ;78 80B  writable TSS   (background)
  1708                                                          dq      00409300480007FFh                               ;80 2KB  foreground task message queue
  1709                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1713                                  ;
  1714                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1715                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1716                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1717                                  ;
  1718                                  ;       6   5         4         3         2         1         0
  1719                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1720                                  ;       ----------------------------------------------------------------
  1721                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1722                                  ;
  1723                                  ;       h...h   high-order offset (bits 16-31)
  1724                                  ;       P       present (0=unused interrupt)
  1725                                  ;       zz      descriptor privilege level
  1726                                  ;       S       storage segment (must be zero for IDT)
  1727                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1728                                  ;       S...S   handling code selector in GDT
  1729                                  ;       l...l   lo-order offset (bits 0-15)
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  section                 idt                                                     ;interrupt descriptor table
  1733                                                          mint    dividebyzero                                    ;00 divide by zero
  1734                                                          mint    singlestep                                      ;01 single step
  1735                                                          mint    nmi                                             ;02 non-maskable
  1736                                                          mint    break                                           ;03 break
  1737                                                          mint    into                                            ;04 into
  1738                                                          mint    bounds                                          ;05 bounds
  1739                                                          mint    badopcode                                       ;06 bad op code
  1740                                                          mint    nocoproc                                        ;07 no coprocessor
  1741                                                          mint    doublefault                                     ;08 double-fault
  1742                                                          mint    operand                                         ;09 operand
  1743                                                          mint    badtss                                          ;0a bad TSS
  1744                                                          mint    notpresent                                      ;0b not-present
  1745                                                          mint    stacklimit                                      ;0c stack limit
  1746                                                          mint    protection                                      ;0d general protection fault
  1747                                                          mint    int14                                           ;0e (reserved)
  1748                                                          mint    int15                                           ;0f (reserved)
  1749                                                          mint    coproccalc                                      ;10 (reserved)
  1750                                                          mint    int17                                           ;11 (reserved)
  1751                                                          mint    int18                                           ;12 (reserved)
  1752                                                          mint    int19                                           ;13 (reserved)
  1753                                                          mint    int20                                           ;14 (reserved)
  1754                                                          mint    int21                                           ;15 (reserved)
  1755                                                          mint    int22                                           ;16 (reserved)
  1756                                                          mint    int23                                           ;17 (reserved)
  1757                                                          mint    int24                                           ;18 (reserved)
  1758                                                          mint    int25                                           ;19 (reserved)
  1759                                                          mint    int26                                           ;1a (reserved)
  1760                                                          mint    int27                                           ;1b (reserved)
  1761                                                          mint    int28                                           ;1c (reserved)
  1762                                                          mint    int29                                           ;1d (reserved)
  1763                                                          mint    int30                                           ;1e (reserved)
  1764                                                          mint    int31                                           ;1f (reserved)
  1765                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1766                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1767                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1768                                                          mtrap   com2                                            ;23 IRQ3 com2
  1769                                                          mtrap   com1                                            ;24 IRQ4 com1
  1770                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1771                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1772                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1773                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1774                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1775                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1776                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1777                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1778                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1779                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1780                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1781                                                          mtrap   svc                                             ;30 OS services
  1782                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1783                                  ;=======================================================================================================================
  1784                                  ;
  1785                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1786                                  ;
  1787                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1788                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1789                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1790                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1791                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1792                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1793                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1794                                  ;
  1795                                  ;=======================================================================================================================
  1796                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1797                                                          cpu     386                                             ;allow 80386 instructions
  1798                                                          bits    32                                              ;this is 32-bit code
  1799                                  ;=======================================================================================================================
  1800                                  ;
  1801                                  ;       CPU Interrupt Handlers
  1802                                  ;
  1803                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1804                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1805                                  ;
  1806                                  ;=======================================================================================================================
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT0    Divide By Zero
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  dividebyzero                                    ;divide by zero
  1813                                                          push    0                                               ;store interrupt nbr
  1814                                                          push    czIntDivideByZero                               ;store message offset
  1815                                                          jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT1    Single Step
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  singlestep                                      ;single step
  1822                                                          push    1                                               ;store interrupt nbr
  1823                                                          push    czIntSingleStep                                 ;store message offset
  1824                                                          jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT2    Non-Maskable Interrupt
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  nmi                                             ;non-maskable
  1831                                                          push    2                                               ;store interrupt nbr
  1832                                                          push    czIntNonMaskable                                ;store message offset
  1833                                                          jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT3    Break
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  break                                           ;break
  1840                                                          push    3                                               ;store interrupt nbr
  1841                                                          push    czIntBreak                                      ;store message offset
  1842                                                          jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT4    Into
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  into                                            ;into
  1849                                                          push    4                                               ;store interrupt nbr
  1850                                                          push    czIntInto                                       ;store message offset
  1851                                                          jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT5    Bounds
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  bounds                                          ;bounds
  1858                                                          push    5                                               ;store interrupt nbr
  1859                                                          push    czIntBounds                                     ;store message offset
  1860                                                          jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       INT6    Bad Operation Code
  1864                                  ;
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                                          menter  badopcode                                       ;bad opcode interrupt
  1867                                                          push    6                                               ;store interrupt nbr
  1868                                                          push    czIntBadOpCode                                  ;store message offset
  1869                                                          jmp     ReportInterrupt                                 ;report interrupt
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  ;
  1872                                  ;       INT7    No Coprocessor
  1873                                  ;
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1876                                                          push    7                                               ;store interrupt nbr
  1877                                                          push    czIntNoCoprocessor                              ;store message offset
  1878                                                          jmp     ReportInterrupt                                 ;report interrupt
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  ;
  1881                                  ;       INT8    Double Fault
  1882                                  ;
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                                          menter  doublefault                                     ;doublefault interrupt
  1885                                                          push    8                                               ;store interrupt nbr
  1886                                                          push    czIntDoubleFault                                ;store message offset
  1887                                                          jmp     ReportInterrupt                                 ;report interrupt
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  ;
  1890                                  ;       INT9    Operand
  1891                                  ;
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                                          menter  operand                                         ;operand interrupt
  1894                                                          push    9                                               ;store interrupt nbr
  1895                                                          push    czIntOperand                                    ;store message offset
  1896                                                          jmp     ReportInterrupt                                 ;report interrupt
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  ;
  1899                                  ;       INT10   Bad Task State Segment
  1900                                  ;
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                                          menter  badtss                                          ;bad TSS interrupt
  1903                                                          push    10                                              ;store interrupt nbr
  1904                                                          push    czIntBadTSS                                     ;store message offset
  1905                                                          jmp     ReportInterrupt                                 ;report interrupt
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                  ;
  1908                                  ;       INT11   Not Present
  1909                                  ;
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                                          menter  notpresent                                      ;not present interrupt
  1912                                                          push    11                                              ;store interrupt nbr
  1913                                                          push    czIntNotPresent                                 ;store message offset
  1914                                                          jmp     ReportInterrupt                                 ;report interrupt
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                  ;
  1917                                  ;       INT12   Stack Limit
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                                          menter  stacklimit                                      ;stack limit interrupt
  1921                                                          push    12                                              ;store interrupt nbr
  1922                                                          push    czIntStackLimit                                 ;store message offset
  1923                                                          jmp     ReportInterrupt                                 ;report interrupt
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                  ;
  1926                                  ;       INT13   General Protection Fault
  1927                                  ;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                                          menter  protection                                      ;protection fault interrupt
  1930                                                          push    13                                              ;store interrupt nbr
  1931                                                          push    czIntProtection                                 ;store message offset
  1932                                                          jmp     ReportInterrupt                                 ;report interrupt
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                  ;
  1935                                  ;       INT14   Reserved
  1936                                  ;
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                                          menter  int14                                           ;(reserved)
  1939                                                          push    14                                              ;store interrupt nbr
  1940                                                          push    czIntReserved                                   ;store message offset
  1941                                                          jmp     ReportInterrupt                                 ;report interrupt
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                  ;
  1944                                  ;       INT15   Reserved
  1945                                  ;
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                                          menter  int15                                           ;(reserved)
  1948                                                          push    15                                              ;store interrupt nbr
  1949                                                          push    czIntReserved                                   ;store message offset
  1950                                                          jmp     ReportInterrupt                                 ;report interrupt
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  ;
  1953                                  ;       INT16   Coprocessor Calculation
  1954                                  ;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                                          menter  coproccalc                                      ;coprocessor calculation
  1957                                                          push    16                                              ;store interrupt nbr
  1958                                                          push    czIntCoprocessorCalc                            ;store message offset
  1959                                                          jmp     ReportInterrupt                                 ;report interrupt
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                  ;
  1962                                  ;       INT17   Reserved
  1963                                  ;
  1964                                  ;-----------------------------------------------------------------------------------------------------------------------
  1965                                                          menter  int17                                           ;(reserved)
  1966                                                          push    17                                              ;store interrupt nbr
  1967                                                          push    czIntReserved                                   ;store message offset
  1968                                                          jmp     ReportInterrupt                                 ;report interrupt
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                  ;
  1971                                  ;       INT18   Reserved
  1972                                  ;
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                                          menter  int18                                           ;(reserved)
  1975                                                          push    18                                              ;store interrupt nbr
  1976                                                          push    czIntReserved                                   ;store message offset
  1977                                                          jmp     ReportInterrupt                                 ;report interrupt
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  ;
  1980                                  ;       INT19   Reserved
  1981                                  ;
  1982                                  ;-----------------------------------------------------------------------------------------------------------------------
  1983                                                          menter  int19                                           ;(reserved)
  1984                                                          push    19                                              ;store interrupt nbr
  1985                                                          push    czIntReserved                                   ;store message offset
  1986                                                          jmp     ReportInterrupt                                 ;report interrupt
  1987                                  ;-----------------------------------------------------------------------------------------------------------------------
  1988                                  ;
  1989                                  ;       INT20   Reserved
  1990                                  ;
  1991                                  ;-----------------------------------------------------------------------------------------------------------------------
  1992                                                          menter  int20                                           ;(reserved)
  1993                                                          push    20                                              ;store interrupt nbr
  1994                                                          push    czIntReserved                                   ;store message offset
  1995                                                          jmp     ReportInterrupt                                 ;report interrupt
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                  ;
  1998                                  ;       INT21   Reserved
  1999                                  ;
  2000                                  ;-----------------------------------------------------------------------------------------------------------------------
  2001                                                          menter  int21                                           ;(reserved)
  2002                                                          push    21                                              ;store interrupt nbr
  2003                                                          push    czIntReserved                                   ;store message offset
  2004                                                          jmp     ReportInterrupt                                 ;report interrupt
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                  ;
  2007                                  ;       INT22   Reserved
  2008                                  ;
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010                                                          menter  int22                                           ;(reserved)
  2011                                                          push    22                                              ;store interrupt nbr
  2012                                                          push    czIntReserved                                   ;store message offset
  2013                                                          jmp     ReportInterrupt                                 ;report interrupt
  2014                                  ;-----------------------------------------------------------------------------------------------------------------------
  2015                                  ;
  2016                                  ;       INT23   Reserved
  2017                                  ;
  2018                                  ;-----------------------------------------------------------------------------------------------------------------------
  2019                                                          menter  int23                                           ;(reserved)
  2020                                                          push    23                                              ;store interrupt nbr
  2021                                                          push    czIntReserved                                   ;store message offset
  2022                                                          jmp     ReportInterrupt                                 ;report interrupt
  2023                                  ;-----------------------------------------------------------------------------------------------------------------------
  2024                                  ;
  2025                                  ;       INT24   Reserved
  2026                                  ;
  2027                                  ;-----------------------------------------------------------------------------------------------------------------------
  2028                                                          menter  int24                                           ;(reserved)
  2029                                                          push    24                                              ;store interrupt nbr
  2030                                                          push    czIntReserved                                   ;store message offset
  2031                                                          jmp     ReportInterrupt                                 ;report interrupt
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                  ;
  2034                                  ;       INT25   Reserved
  2035                                  ;
  2036                                  ;-----------------------------------------------------------------------------------------------------------------------
  2037                                                          menter  int25                                           ;(reserved)
  2038                                                          push    25                                              ;store interrupt nbr
  2039                                                          push    czIntReserved                                   ;store message offset
  2040                                                          jmp     ReportInterrupt                                 ;report interrupt
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;
  2043                                  ;       INT26   Reserved
  2044                                  ;
  2045                                  ;-----------------------------------------------------------------------------------------------------------------------
  2046                                                          menter  int26                                           ;(reserved)
  2047                                                          push    26                                              ;store interrupt nbr
  2048                                                          push    czIntReserved                                   ;store message offset
  2049                                                          jmp     ReportInterrupt                                 ;report interrupt
  2050                                  ;-----------------------------------------------------------------------------------------------------------------------
  2051                                  ;
  2052                                  ;       INT27   Reserved
  2053                                  ;
  2054                                  ;-----------------------------------------------------------------------------------------------------------------------
  2055                                                          menter  int27                                           ;(reserved)
  2056                                                          push    27                                              ;store interrupt nbr
  2057                                                          push    czIntReserved                                   ;store message offset
  2058                                                          jmp     ReportInterrupt                                 ;report interrupt
  2059                                  ;-----------------------------------------------------------------------------------------------------------------------
  2060                                  ;
  2061                                  ;       INT28   Reserved
  2062                                  ;
  2063                                  ;-----------------------------------------------------------------------------------------------------------------------
  2064                                                          menter  int28                                           ;(reserved)
  2065                                                          push    28                                              ;store interrupt nbr
  2066                                                          push    czIntReserved                                   ;store message offset
  2067                                                          jmp     ReportInterrupt                                 ;report interrupt
  2068                                  ;-----------------------------------------------------------------------------------------------------------------------
  2069                                  ;
  2070                                  ;       INT29   Reserved
  2071                                  ;
  2072                                  ;-----------------------------------------------------------------------------------------------------------------------
  2073                                                          menter  int29                                           ;(reserved)
  2074                                                          push    29                                              ;store interrupt nbr
  2075                                                          push    czIntReserved                                   ;store message offset
  2076                                                          jmp     ReportInterrupt                                 ;report interrupt
  2077                                  ;-----------------------------------------------------------------------------------------------------------------------
  2078                                  ;
  2079                                  ;       INT30   Reserved
  2080                                  ;
  2081                                  ;-----------------------------------------------------------------------------------------------------------------------
  2082                                                          menter  int30                                           ;(reserved)
  2083                                                          push    30                                              ;store interrupt nbr
  2084                                                          push    czIntReserved                                   ;store message offset
  2085                                                          jmp     ReportInterrupt                                 ;report interrupt
  2086                                  ;-----------------------------------------------------------------------------------------------------------------------
  2087                                  ;
  2088                                  ;       INT31   Reserved
  2089                                  ;
  2090                                  ;-----------------------------------------------------------------------------------------------------------------------
  2091                                                          menter  int31                                           ;(reserved)
  2092                                                          push    31                                              ;store interrupt nbr
  2093                                                          push    czIntReserved                                   ;store message offset
  2094                                                          jmp     ReportInterrupt                                 ;report interrupt
  2095                                  ;-----------------------------------------------------------------------------------------------------------------------
  2096                                  ;
  2097                                  ;       Routine:        ReportInterrupt
  2098                                  ;
  2099                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2100                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2101                                  ;
  2102                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  2103                                  ;                       [esp+12]        cs                                      stored by interrupt call
  2104                                  ;                       [esp+8]         eip                                     stored by interrupt call
  2105                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  2106                                  ;                       [esp+0]         error message address                   stored by push instructions
  2107                                  ;
  2108                                  ;       Out:            N/A             This routine does not exit.
  2109                                  ;
  2110                                  ;-----------------------------------------------------------------------------------------------------------------------
  2111                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2112                                                          push    es                                              ;save ES at time of interrupt
  2113                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2114                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  2115                                  ;
  2116                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2117                                  ;
  2118                                  ;                       [ebp+56]        eflags
  2119                                  ;                       [ebp+52]        cs
  2120                                  ;                       [ebp+48]        eip
  2121                                  ;                       [ebp+44]        interrupt number (0-31)
  2122                                  ;                       [ebp+40]        error message address
  2123                                  ;                       [ebp+36]        ds
  2124                                  ;                       [ebp+32]        es
  2125                                  ;                       [ebp+28]        eax
  2126                                  ;                       [ebp+24]        ecx
  2127                                  ;                       [ebp+20]        edx
  2128                                  ;                       [ebp+16]        ebx
  2129                                  ;                       [ebp+12]        esp
  2130                                  ;                       [ebp+8]         ebp
  2131                                  ;                       [ebp+4]         esi
  2132                                  ;                       [ebp+0]         edi
  2133                                  ;
  2134                                                          push    cs                                              ;load code selector ...
  2135                                                          pop     ds                                              ;... into DS
  2136                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  2137                                                          pop     es                                              ;... into ES
  2138                                  ;
  2139                                  ;       Display the interrupt report boundary box
  2140                                  ;
  2141                                                          mov     cl,13                                           ;column
  2142                                                          mov     ch,6                                            ;row
  2143                                                          mov     dl,50                                           ;width
  2144                                                          mov     dh,8                                            ;height
  2145                                                          mov     bh,07h                                          ;attribute
  2146                                                          call    DrawTextDialogBox                               ;draw text dialog box
  2147                                  ;
  2148                                  ;       Display the report header
  2149                                  ;
  2150                                                          mov     cl,15                                           ;column
  2151                                                          mov     ch,7                                            ;row
  2152                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2153                                                          call    SetConsoleString                                ;draw text string
  2154                                  ;
  2155                                  ;       Display the interrupt description label
  2156                                  ;
  2157                                                          mov     cl,15                                           ;column
  2158                                                          mov     ch,8                                            ;row
  2159                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2160                                                          call    SetConsoleString                                ;draw text string
  2161                                  ;
  2162                                  ;       Display the interrupt number
  2163                                  ;
  2164                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2165                                                          mov     cl,26                                           ;column
  2166                                                          mov     ch,8                                            ;row
  2167                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2168                                  ;
  2169                                  ;       Display the interrupt name
  2170                                  ;
  2171                                                          mov     cl,29                                           ;column
  2172                                                          mov     ch,8                                            ;row
  2173                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2174                                                          call    SetConsoleString                                ;display interrupt description
  2175                                  ;
  2176                                  ;       Display the register values header
  2177                                  ;
  2178                                                          mov     cl,15                                           ;column
  2179                                                          mov     ch,10                                           ;row
  2180                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2181                                                          call    SetConsoleString                                ;draw text string
  2182                                  ;
  2183                                  ;       Display the EAX register label and value
  2184                                  ;
  2185                                                          mov     cl,15                                           ;column
  2186                                                          mov     ch,11                                           ;row
  2187                                                          mov     esi,czIntEAX                                    ;register EAX label
  2188                                                          call    SetConsoleString                                ;draw label
  2189                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2190                                                          mov     cl,19                                           ;column
  2191                                                          mov     ch,11                                           ;row
  2192                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2193                                  ;
  2194                                  ;       Display the ECX register label and value
  2195                                  ;
  2196                                                          mov     cl,15                                           ;column
  2197                                                          mov     ch,12                                           ;row
  2198                                                          mov     esi,czIntECX                                    ;label
  2199                                                          call    SetConsoleString                                ;draw label
  2200                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2201                                                          mov     cl,19                                           ;column
  2202                                                          mov     ch,12                                           ;row
  2203                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2204                                  ;
  2205                                  ;       Display the EDX register label and value
  2206                                  ;
  2207                                                          mov     cl,15                                           ;column
  2208                                                          mov     ch,13                                           ;row
  2209                                                          mov     esi,czIntEDX                                    ;label
  2210                                                          call    SetConsoleString                                ;draw label
  2211                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2212                                                          mov     cl,19                                           ;column
  2213                                                          mov     ch,13                                           ;row
  2214                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2215                                  ;
  2216                                  ;       Display the EBX register label and value
  2217                                  ;
  2218                                                          mov     cl,15                                           ;column
  2219                                                          mov     ch,14                                           ;row
  2220                                                          mov     esi,czIntEBX                                    ;label
  2221                                                          call    SetConsoleString                                ;draw label
  2222                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2223                                                          mov     cl,19                                           ;column
  2224                                                          mov     ch,14                                           ;row
  2225                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2226                                  ;
  2227                                  ;       Display the ESI register label and value
  2228                                  ;
  2229                                                          mov     cl,29                                           ;column
  2230                                                          mov     ch,11                                           ;row
  2231                                                          mov     esi,czIntESI                                    ;label
  2232                                                          call    SetConsoleString                                ;draw label
  2233                                                          mov     eax,[ebp+4]                                     ;ESI
  2234                                                          mov     cl,33                                           ;column
  2235                                                          mov     ch,11                                           ;row
  2236                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2237                                  ;
  2238                                  ;       Display the EDI register label and value
  2239                                  ;
  2240                                                          mov     cl,29                                           ;column
  2241                                                          mov     ch,12                                           ;row
  2242                                                          mov     esi,czIntEDI                                    ;label
  2243                                                          call    SetConsoleString                                ;draw label
  2244                                                          mov     eax,[ebp+0]                                     ;EDI
  2245                                                          mov     cl,33                                           ;column
  2246                                                          mov     ch,12                                           ;row
  2247                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2248                                  ;
  2249                                  ;       Display the EBP register label and value
  2250                                  ;
  2251                                                          mov     cl,29                                           ;column
  2252                                                          mov     ch,13                                           ;row
  2253                                                          mov     esi,czIntEBP                                    ;label
  2254                                                          call    SetConsoleString                                ;draw label
  2255                                                          mov     eax,[ebp+8]                                     ;EBP
  2256                                                          mov     cl,33                                           ;column
  2257                                                          mov     ch,13                                           ;row
  2258                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2259                                  ;
  2260                                  ;       Display the DS register label and value
  2261                                  ;
  2262                                                          mov     cl,42                                           ;column
  2263                                                          mov     ch,11                                           ;row
  2264                                                          mov     esi,czIntDS                                     ;label
  2265                                                          call    SetConsoleString                                ;draw label
  2266                                                          xor     eax,eax                                         ;zero register
  2267                                                          mov     ax,[ebp+36]                                     ;DS
  2268                                                          mov     cl,46                                           ;column
  2269                                                          mov     ch,11                                           ;row
  2270                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2271                                  ;
  2272                                  ;       Display the ES register label and value
  2273                                  ;
  2274                                                          mov     cl,42                                           ;column
  2275                                                          mov     ch,12                                           ;row
  2276                                                          mov     esi,czIntES                                     ;label
  2277                                                          call    SetConsoleString                                ;draw label
  2278                                                          xor     eax,eax                                         ;zero register
  2279                                                          mov     ax,[ebp+32]                                     ;ES
  2280                                                          mov     cl,46                                           ;column
  2281                                                          mov     ch,12                                           ;row
  2282                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2283                                  ;
  2284                                  ;       Display the SS register label and value
  2285                                  ;
  2286                                                          mov     cl,42                                           ;column
  2287                                                          mov     ch,13                                           ;row
  2288                                                          mov     esi,czIntSS                                     ;label
  2289                                                          call    SetConsoleString                                ;draw label
  2290                                                          xor     eax,eax                                         ;zero register
  2291                                                          mov     ax,ss                                           ;SS
  2292                                                          mov     cl,46                                           ;column
  2293                                                          mov     ch,13                                           ;row
  2294                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2295                                  ;
  2296                                  ;       Display the CS register lable and value
  2297                                  ;
  2298                                                          mov     cl,42                                           ;column
  2299                                                          mov     ch,14                                           ;row
  2300                                                          mov     esi,czIntCS                                     ;label
  2301                                                          call    SetConsoleString                                ;draw label
  2302                                                          xor     eax,eax                                         ;zero register
  2303                                                          mov     ax,[ebp+52]                                     ;CS
  2304                                                          mov     cl,46                                           ;column
  2305                                                          mov     ch,14                                           ;row
  2306                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2307                                  ;
  2308                                  ;       Display the EFLAGS register label and value
  2309                                  ;
  2310                                                          mov     cl,51                                           ;column
  2311                                                          mov     ch,11                                           ;row
  2312                                                          mov     esi,czIntEFLAGS                                 ;label
  2313                                                          call    SetConsoleString                                ;draw label
  2314                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2315                                                          mov     cl,55                                           ;column
  2316                                                          mov     ch,11                                           ;row
  2317                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2318                                  ;
  2319                                  ;       Display the ESP register label and value
  2320                                  ;
  2321                                                          mov     cl,51                                           ;column
  2322                                                          mov     ch,13                                           ;row
  2323                                                          mov     esi,czIntESP                                    ;label
  2324                                                          call    SetConsoleString                                ;draw label
  2325                                                          mov     eax,[ebp+12]                                    ;ESP
  2326                                                          mov     cl,55                                           ;column
  2327                                                          mov     ch,13                                           ;row
  2328                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2329                                  ;
  2330                                  ;       Display the EIP register label and value
  2331                                  ;
  2332                                                          mov     cl,51                                           ;column
  2333                                                          mov     ch,14                                           ;row
  2334                                                          mov     esi,czIntEIP                                    ;label
  2335                                                          call    SetConsoleString                                ;draw label
  2336                                                          mov     eax,[ebp+48]                                    ;EIP
  2337                                                          mov     cl,55                                           ;column
  2338                                                          mov     ch,14                                           ;row
  2339                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2340                                  ;
  2341                                  ;       Halt and loop until reset
  2342                                  ;
  2343                                  .10                     sti                                                     ;enable maskable interrupts
  2344                                                          hlt                                                     ;halt processor
  2345                                                          jmp     .10                                             ;resume on interrupt
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       Processor Interrupt Name Strings
  2349                                  ;
  2350                                  ;-----------------------------------------------------------------------------------------------------------------------
  2351                                  czIntDivideByZero       db      "Division by zero",0
  2352                                  czIntSingleStep         db      "Single step",0
  2353                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2354                                  czIntBreak              db      "Break",0
  2355                                  czIntInto               db      "Into",0
  2356                                  czIntBounds             db      "Bounds",0
  2357                                  czIntBadOpCode          db      "Bad Operation Code",0
  2358                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2359                                  czIntDoubleFault        db      "Double Fault",0
  2360                                  czIntOperand            db      "Operand",0
  2361                                  czIntBadTSS             db      "Bad Task State Segment",0
  2362                                  czIntNotPresent         db      "Not Present",0
  2363                                  czIntStackLimit         db      "Stack Limit",0
  2364                                  czIntProtection         db      "General Protection Fault",0
  2365                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2366                                  czIntReserved           db      "Reserved",0
  2367                                  ;-----------------------------------------------------------------------------------------------------------------------
  2368                                  ;
  2369                                  ;       Processor Interrupt Handling Strings
  2370                                  ;
  2371                                  ;-----------------------------------------------------------------------------------------------------------------------
  2372                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2373                                  czIntLabel              db      "Interrupt #",0
  2374                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2375                                  czIntEAX                db      "EAX:",0
  2376                                  czIntECX                db      "ECX:",0
  2377                                  czIntEDX                db      "EDX:",0
  2378                                  czIntEBX                db      "EBX:",0
  2379                                  czIntESI                db      "ESI:",0
  2380                                  czIntEDI                db      "EDI:",0
  2381                                  czIntEBP                db      "EBP:",0
  2382                                  czIntESP                db      "ESP:",0
  2383                                  czIntDS                 db      " DS:",0
  2384                                  czIntES                 db      " ES:",0
  2385                                  czIntSS                 db      " SS:",0
  2386                                  czIntCS                 db      " CS:",0
  2387                                  czIntEFLAGS             db      "FLG:",0
  2388                                  czIntEIP                db      "EIP:",0
  2389                                  ;-----------------------------------------------------------------------------------------------------------------------
  2390                                  ;
  2391                                  ;       Routine:        DrawTextDialogBox
  2392                                  ;
  2393                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2394                                  ;
  2395                                  ;       In:             CL      upper left column (0-79)
  2396                                  ;                       CH      upper left row (0-24)
  2397                                  ;                       DL      column width, excluding border
  2398                                  ;                       DH      row height, excluding border
  2399                                  ;                       BH      color attribute
  2400                                  ;
  2401                                  ;-----------------------------------------------------------------------------------------------------------------------
  2402                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2403                                                          push    esi                                             ;
  2404                                                          push    edi                                             ;
  2405                                                          push    es                                              ;
  2406                                                          push    EGDTCGA                                         ;load CGA selector ...
  2407                                                          pop     es                                              ;... into ES
  2408                                  ;
  2409                                  ;       Compute target display offset
  2410                                  ;
  2411                                                          xor     eax,eax                                         ;zero register
  2412                                                          mov     al,ch                                           ;row
  2413                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2414                                                          mul     ah                                              ;row offset
  2415                                                          add     al,cl                                           ;add column
  2416                                                          adc     ah,0                                            ;add overflow
  2417                                                          add     al,cl                                           ;add column
  2418                                                          adc     ah,0                                            ;add overflow
  2419                                                          mov     edi,eax                                         ;target row offset
  2420                                  ;
  2421                                  ;       Display top border row
  2422                                  ;
  2423                                                          push    edi                                             ;save target row offset
  2424                                                          mov     ah,bh                                           ;attribute
  2425                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2426                                                          stosw                                                   ;display character and attribute
  2427                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2428                                                          xor     ecx,ecx                                         ;zero register
  2429                                                          mov     cl,dl                                           ;width, excluding border
  2430                                                          rep     stosw                                           ;display horizontal border
  2431                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2432                                                          stosw                                                   ;display character and attribute
  2433                                                          pop     edi                                             ;restore target row offset
  2434                                                          add     edi,ECONROWBYTES                                ;next row
  2435                                  ;
  2436                                  ;       Display dialog box body rows
  2437                                  ;
  2438                                                          xor     ecx,ecx                                         ;zero register
  2439                                                          mov     cl,dh                                           ;height, excluding border
  2440                                  .10                     push    ecx                                             ;save remaining rows
  2441                                                          push    edi                                             ;save target row offset
  2442                                                          mov     ah,bh                                           ;attribute
  2443                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2444                                                          stosw                                                   ;display character and attribute
  2445                                                          mov     al,EASCIISPACE                                  ;space
  2446                                                          xor     ecx,ecx                                         ;zero register
  2447                                                          mov     cl,dl                                           ;width, excluding border
  2448                                                          rep     stosw                                           ;display row
  2449                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2450                                                          stosw                                                   ;display character and attribute
  2451                                                          pop     edi                                             ;restore target row offset
  2452                                                          add     edi,ECONROWBYTES                                ;next row
  2453                                                          pop     ecx                                             ;remaining rows
  2454                                                          loop    .10                                             ;next row
  2455                                  ;
  2456                                  ;       Display bottom border row
  2457                                  ;
  2458                                                          push    edi                                             ;save target row offset
  2459                                                          mov     ah,bh                                           ;attribute
  2460                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2461                                                          stosw                                                   ;display character and attribute
  2462                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2463                                                          xor     ecx,ecx                                         ;zero register
  2464                                                          mov     cl,dl                                           ;width, excluding border
  2465                                                          rep     stosw                                           ;display horizontal border
  2466                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2467                                                          stosw                                                   ;display character and attribute
  2468                                                          pop     edi                                             ;restore target row offset
  2469                                                          add     edi,ECONROWBYTES                                ;next row
  2470                                  ;
  2471                                  ;       Restore and return
  2472                                  ;
  2473                                                          pop     es                                              ;restore non-volatile regs
  2474                                                          pop     edi                                             ;
  2475                                                          pop     esi                                             ;
  2476                                                          pop     ecx                                             ;
  2477                                                          ret                                                     ;return
  2478                                  ;=======================================================================================================================
  2479                                  ;
  2480                                  ;       Hardware Device Interupts
  2481                                  ;
  2482                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2483                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2484                                  ;       (BX=2028h).
  2485                                  ;
  2486                                  ;=======================================================================================================================
  2487                                  ;-----------------------------------------------------------------------------------------------------------------------
  2488                                  ;
  2489                                  ;       IRQ0    Clock Tick Interrupt
  2490                                  ;
  2491                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2492                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2493                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2494                                  ;
  2495                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2496                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2497                                  ;
  2498                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2499                                  ;       zero, the floppy disk motors are turned off.
  2500                                  ;
  2501                                  ;-----------------------------------------------------------------------------------------------------------------------
  2502                                                          menter  clocktick                                       ;clock tick interrupt
  2503                                                          push    eax                                             ;save non-volatile regs
  2504                                                          push    edx                                             ;
  2505                                                          push    ds                                              ;
  2506                                  ;
  2507                                  ;       Update the clock tick count and the elapsed days as needed.
  2508                                  ;
  2509                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2510                                                          pop     ds                                              ;... into data segment register
  2511                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2512                                                          inc     eax                                             ;increment clock ticks
  2513                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2514                                                          jb      irq0.10                                         ;no, skip ahead
  2515                                                          inc     byte [wbClockDays]                              ;increment clock days
  2516                                                          xor     eax,eax                                         ;reset clock ticks
  2517                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2518                                  ;
  2519                                  ;       Decrement floppy disk motor timeout.
  2520                                  ;
  2521                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2522                                                          je      irq0.20                                         ;yes, skip ahead
  2523                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2524                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2525                                  ;
  2526                                  ;       Turn off the floppy disk motor if appropriate.
  2527                                  ;
  2528                                                          sti                                                     ;enable maskable interrupts
  2529                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2530                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2531                                                          in      al,dx                                           ;FDC main status byte
  2532                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2533                                                          jnz     irq0.15                                         ;wait while busy
  2534                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2535                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2536                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2537                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2538                                                          out     dx,al                                           ;turn motor off
  2539                                  ;
  2540                                  ;       Signal the end of the hardware interrupt.
  2541                                  ;
  2542                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2543                                  ;
  2544                                  ;       Determine if a task switch is appropriate
  2545                                  ;
  2546                                                          cmp     byte [wbInCriticalSection],0                    ;any task holding a critical section?
  2547                                                          jne     irq0.30                                         ;yes, do not switch tasks
  2548                                                          inc     byte [wbTaskIndex]                              ;increment task queue index (0-255)
  2549                                                          movzx   eax,byte [wbTaskIndex]                          ;load task queue index
  2550                                                          mov     dx,[wwTaskQueue+eax*2]                          ;next task selector
  2551                                                          str     ax                                              ;current task selector
  2552                                                          cmp     dx,ax                                           ;next task same is current task?
  2553                                                          je      irq0.30                                         ;yes, skip task switch
  2554                                  ;
  2555                                  ;       Switch task
  2556                                  ;
  2557                                                          push    es                                              ;save extra segment register
  2558                                                          push    EGDTALIAS                                         ;load GDT alias selector ...
  2559                                                          pop     es                                              ;... into extra segment reg
  2560                                                          and     byte [es:eax+5],0FDh                            ;reset task-busy bit of current task
  2561                                                          pop     es                                              ;restore extra segment register
  2562                                                          mov     word [wwFarJumpSelector],dx                     ;set next task selector in jmp instr
  2563                                                          jmp     far [wdFarJumpEIP]                              ;jump to next task
  2564                                  ;
  2565                                  ;       Restore and return
  2566                                  ;
  2567                                  irq0.30                 pop     ds                                              ;restore modified regs
  2568                                                          pop     edx                                             ;
  2569                                                          pop     eax                                             ;
  2570                                                          iretd                                                   ;return
  2571                                  ;-----------------------------------------------------------------------------------------------------------------------
  2572                                  ;
  2573                                  ;       IRQ1    Keyboard Interrupt
  2574                                  ;
  2575                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2576                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2577                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2578                                  ;       ALL modified registers upon return. Note that keyboard messages are added to the keyboard focus message queue.
  2579                                  ;       This is a queue referenced in the global descriptor table and must always reference the message queue for the
  2580                                  ;       task that has the keyboard focus. To direct keyboard messages to another task, update the GDT descriptor to
  2581                                  ;       point to the message queue for that task.
  2582                                  ;
  2583                                  ;-----------------------------------------------------------------------------------------------------------------------
  2584                                                          menter  keyboard                                        ;keyboard interrrupt
  2585                                                          push    eax                                             ;save non-volatile regs
  2586                                                          push    ebx                                             ;
  2587                                                          push    ecx                                             ;
  2588                                                          push    esi                                             ;
  2589                                                          push    ds                                              ;
  2590                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2591                                                          pop     ds                                              ;... into data segment register
  2592                                                          xor     al,al                                           ;zero
  2593                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2594                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2595                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2596                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2597                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2598                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2599                                                          mov     al,' '                                          ;space
  2600                                                          mov     [wbConsoleChar],al                              ;set character to space
  2601                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2602                                                          not     al                                              ;controller timeout mask
  2603                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2604                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2605                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2606                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2607                                                          jz      irq1.140                                        ;yes, skip ahead
  2608                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2609                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2610                                                          mov     ah,al                                           ;copy scan code 0
  2611                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2612                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2613                                                          je      irq1.30                                         ;yes, set flag
  2614                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2615                                                          je      irq1.40                                         ;yes, reset flag
  2616                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2617                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2618                                                          je      irq1.30                                         ;yes, set flag
  2619                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2620                                                          je      irq1.40                                         ;yes, reset flag
  2621                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2622                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2623                                                          je      irq1.30                                         ;yes, set flag
  2624                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2625                                                          je      irq1.40                                         ;yes, reset flag
  2626                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2627                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2628                                                          je      irq1.30                                         ;yes, set flag
  2629                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2630                                                          je      irq1.40                                         ;yes, reset flag
  2631                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2632                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2633                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2634                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2635                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2636                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2637                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2638                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2639                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2640                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2641                                                          jne     irq1.70                                         ;no, skip ahead
  2642                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2643                                                          jz      irq1.140                                        ;yes, skip ahead
  2644                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2645                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2646                                                          mov     ah,al                                           ;copy scan code 1
  2647                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2648                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2649                                                          je      irq1.30                                         ;yes, set flag
  2650                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2651                                                          je      irq1.40                                         ;yes, reset flag
  2652                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2653                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2654                                                          je      irq1.30                                         ;yes, set flag
  2655                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2656                                                          je      irq1.40                                         ;yes, reset flag
  2657                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2658                                                          je      irq1.80                                         ;yes, skip ahead
  2659                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2660                                                          je      irq1.80                                         ;yes, skip ahead
  2661                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2662                                                          je      irq1.10                                         ;yes, continue
  2663                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2664                                                          jne     irq1.20                                         ;no, skip ahead
  2665                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2666                                                          jz      irq1.140                                        ;yes, skip ahead
  2667                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2668                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2669                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2670                                                          jz      irq1.140                                        ;yes, skip ahead
  2671                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2672                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2673                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2674                                  irq1.30                 or      bl,al                                           ;set shift flag
  2675                                                          jmp     irq1.60                                         ;skip ahead
  2676                                  irq1.40                 not     al                                              ;convert flag to mask
  2677                                                          and     bl,al                                           ;reset shift flag
  2678                                                          jmp     irq1.60                                         ;skip ahead
  2679                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2680                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2681                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2682                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2683                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2684                                                          jmp     irq1.150                                        ;finish keyboard handling
  2685                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2686                                                          jne     irq1.80                                         ;no continue
  2687                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2688                                                          jz      irq1.140                                        ;yes, skip ahead
  2689                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2690                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2691                                                          mov     ah,al                                           ;copy scan code 1
  2692                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2693                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2694                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2695                                                          jz      irq1.140                                        ;yes, skip ahead
  2696                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2697                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2698                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2699                                                          jz      irq1.140                                        ;yes, skip ahead
  2700                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2701                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2702                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2703                                                          jz      irq1.140                                        ;yes, skip ahead
  2704                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2705                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2706                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2707                                                          jz      irq1.140                                        ;yes, skip ahead
  2708                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2709                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2710                                                          jmp     irq1.150                                        ;continue
  2711                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2712                                                          test    ah,EKEYBUP                                      ;release code?
  2713                                                          jnz     irq1.130                                        ;yes, skip ahead
  2714                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2715                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2716                                                          jz      irq1.90                                         ;no, skip ahead
  2717                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2718                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2719                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2720                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2721                                                          jz      irq1.100                                        ;no skip ahead
  2722                                                          mov     cl,al                                           ;copy ASCII code
  2723                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2724                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2725                                                          jb      irq1.100                                        ;yes, skip ahead
  2726                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2727                                                          ja      irq1.100                                        ;yes, skip ahead
  2728                                                          xor     al,EASCIICASE                                   ;switch case
  2729                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2730                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2731                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2732                                                          jz      irq1.120                                        ;no, skip ahead
  2733                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2734                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2735                                                          or      edx,eax                                         ;msg id and codes
  2736                                                          xor     ecx,ecx                                         ;null param
  2737                                                          push    eax                                             ;save codes
  2738                                                          mov     eax,ESELKEYBOARDMQ                              ;keyboard focus message queue
  2739                                                          call    PutMessage                                      ;put message to console
  2740                                                          pop     eax                                             ;restore codes
  2741                                                          test    al,al                                           ;ASCII translation?
  2742                                                          jz      irq1.130                                        ;no, skip ahead
  2743                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2744                                                          and     eax,0FFFFh                                      ;clear high-order word
  2745                                                          or      edx,eax                                         ;msg id and codes
  2746                                                          xor     ecx,ecx                                         ;null param
  2747                                                          mov     eax,ESELKEYBOARDMQ                              ;keyboard focus message queue
  2748                                                          call    PutMessage                                      ;put message to console
  2749                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2750                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2751                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2752                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2753                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2754                                                          pop     ds                                              ;restore non-volatile regs
  2755                                                          pop     esi                                             ;
  2756                                                          pop     ecx                                             ;
  2757                                                          pop     ebx                                             ;
  2758                                                          pop     eax                                             ;
  2759                                                          iretd                                                   ;return
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761                                  ;       Scan-Code to ASCII Translation Tables
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2764                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2765                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2766                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2767                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2768                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2769                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2770                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2771                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2772                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2773                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2774                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2775                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2776                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2777                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2778                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2779                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2780                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2781                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2782                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2783                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2784                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2785                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2786                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2787                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2788                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2789                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2790                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2791                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2792                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2793                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2794                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2795                                  ;-----------------------------------------------------------------------------------------------------------------------
  2796                                  ;
  2797                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                                          menter  iochannel                                       ;secondary 8259A cascade
  2801                                                          push    eax                                             ;save modified regs
  2802                                                          jmp     hwint                                           ;end interrupt and return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2806                                  ;
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                                          menter  com2                                            ;serial port 2 interrupt
  2809                                                          push    eax                                             ;save modified regs
  2810                                                          jmp     hwint                                           ;end interrupt and return
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812                                  ;
  2813                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2814                                  ;
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                                          menter  com1                                            ;serial port 1 interrupt
  2817                                                          push    eax                                             ;save modified regs
  2818                                                          jmp     hwint                                           ;end interrupt and return
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  ;
  2821                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2825                                                          push    eax                                             ;save modified regs
  2826                                                          jmp     hwint                                           ;end interrupt and return
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828                                  ;
  2829                                  ;       IRQ6    Diskette Hardware Interrupt
  2830                                  ;
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                                          menter  diskette                                        ;floppy disk interrupt
  2833                                                          push    eax                                             ;save non-volatile regs
  2834                                                          push    ds                                              ;
  2835                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2836                                                          pop     ds                                              ;... into DS register
  2837                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2838                                                          or      al,10000000b                                    ;set IRQ flag
  2839                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2840                                                          pop     ds                                              ;restore non-volatile regs
  2841                                                          jmp     hwint                                           ;end primary PIC interrupt
  2842                                  ;-----------------------------------------------------------------------------------------------------------------------
  2843                                  ;
  2844                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2845                                  ;
  2846                                  ;-----------------------------------------------------------------------------------------------------------------------
  2847                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2848                                                          push    eax                                             ;save modified regs
  2849                                                          jmp     hwint                                           ;end interrupt and return
  2850                                  ;-----------------------------------------------------------------------------------------------------------------------
  2851                                  ;
  2852                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2853                                  ;
  2854                                  ;-----------------------------------------------------------------------------------------------------------------------
  2855                                                          menter  rtclock                                         ;real-time clock interrupt
  2856                                                          push    eax                                             ;save modified regs
  2857                                                          jmp     hwwint                                          ;end interrupt and return
  2858                                  ;-----------------------------------------------------------------------------------------------------------------------
  2859                                  ;
  2860                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2861                                  ;
  2862                                  ;-----------------------------------------------------------------------------------------------------------------------
  2863                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2864                                                          push    eax                                             ;save modified regs
  2865                                                          jmp     hwwint                                          ;end interrupt and return
  2866                                  ;-----------------------------------------------------------------------------------------------------------------------
  2867                                  ;
  2868                                  ;       IRQ10   Reserved Hardware Interrupt
  2869                                  ;
  2870                                  ;-----------------------------------------------------------------------------------------------------------------------
  2871                                                          menter  irq10                                           ;reserved
  2872                                                          push    eax                                             ;save modified regs
  2873                                                          jmp     hwwint                                          ;end interrupt and return
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;       IRQ11   Reserved Hardware Interrupt
  2877                                  ;
  2878                                  ;-----------------------------------------------------------------------------------------------------------------------
  2879                                                          menter  irq11                                           ;reserved
  2880                                                          push    eax                                             ;save modified regs
  2881                                                          jmp     hwwint                                          ;end interrupt and return
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2885                                  ;
  2886                                  ;-----------------------------------------------------------------------------------------------------------------------
  2887                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2888                                                          push    eax                                             ;save modified regs
  2889                                                          jmp     hwwint                                          ;end interrupt and return
  2890                                  ;-----------------------------------------------------------------------------------------------------------------------
  2891                                  ;
  2892                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2893                                  ;
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895                                                          menter  coprocessor                                     ;coprocessor interrupt
  2896                                                          push    eax                                             ;save modified regs
  2897                                                          jmp     hwwint                                          ;end interrupt and return
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  ;
  2900                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2901                                  ;
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2904                                                          push    eax                                             ;save modified regs
  2905                                                          jmp     hwwint                                          ;end interrupt and return
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                  ;
  2908                                  ;       IRQ15   Reserved Hardware Interrupt
  2909                                  ;
  2910                                  ;-----------------------------------------------------------------------------------------------------------------------
  2911                                                          menter  irq15                                           ;reserved
  2912                                                          push    eax                                             ;save modified regs
  2913                                                          jmp     hwwint                                          ;end interrupt and return
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                  ;
  2916                                  ;       Exit from hardware interrupt
  2917                                  ;
  2918                                  ;-----------------------------------------------------------------------------------------------------------------------
  2919                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2920                                                          jmp     hwint90                                         ;skip ahead
  2921                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2922                                  hwint90                 pop     eax                                             ;restore modified regs
  2923                                                          iretd                                                   ;return from interrupt
  2924                                  ;-----------------------------------------------------------------------------------------------------------------------
  2925                                  ;
  2926                                  ;       INT 30h Operating System Software Service Interrupt
  2927                                  ;
  2928                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2929                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2930                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2931                                  ;       the entry address of the specific function from a table.
  2932                                  ;
  2933                                  ;-----------------------------------------------------------------------------------------------------------------------
  2934                                                          menter  svc
  2935                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2936                                                          jae     svc90                                           ;yes, skip ahead
  2937                                                          movzx   eax,al                                          ;function
  2938                                                          shl     eax,2                                           ;offset into table
  2939                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2940                                  svc90                   iretd                                                   ;return from interrupt
  2941                                  ;-----------------------------------------------------------------------------------------------------------------------
  2942                                  ;
  2943                                  ;       Service Request Table
  2944                                  ;
  2945                                  ;
  2946                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2947                                  ;
  2948                                  ;-----------------------------------------------------------------------------------------------------------------------
  2949                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2950                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2951                                                          tsvce   CompareMemory                                   ;compare memory
  2952                                                          tsvce   CopyMemory                                      ;copy memory
  2953                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2954                                                          tsvce   FreeMemory                                      ;free memory block
  2955                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2956                                                          tsvce   GetConsoleString                                ;get string input
  2957                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2958                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2959                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2960                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2961                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2962                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2963                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2964                                                          tsvce   PutDayString                                    ;put DD string
  2965                                                          tsvce   PutHourString                                   ;put hh string
  2966                                                          tsvce   PutMinuteString                                 ;put mm string
  2967                                                          tsvce   PutMonthString                                  ;put MM string
  2968                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2969                                                          tsvce   PutSecondString                                 ;put ss string
  2970                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2971                                                          tsvce   PutWeekdayString                                ;put weekday string
  2972                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2973                                                          tsvce   PutYearString                                   ;put YYYY string
  2974                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2975                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2976                                                          tsvce   SetConsoleString                                ;set console string
  2977                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2978                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2979                                                          tsvce   UpperCaseString                                 ;upper-case string
  2980                                                          tsvce   Yield                                           ;halt until interrupt
  2981                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2982                                  ;-----------------------------------------------------------------------------------------------------------------------
  2983                                  ;
  2984                                  ;       Service Request Macros
  2985                                  ;
  2986                                  ;       These macros provide positional parameterization of service request calls.
  2987                                  ;
  2988                                  ;-----------------------------------------------------------------------------------------------------------------------
  2989                                  %macro                  allocateMemory 1
  2990                                                          mov     ecx,%1                                          ;bytes to allocate
  2991                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2992                                                          int     _svc                                            ;invoke OS service
  2993                                  %endmacro
  2994                                  %macro                  clearConsoleScreen 0
  2995                                                          mov     al,eClearConsoleScreen                          ;function code
  2996                                                          int     _svc                                            ;invoke OS service
  2997                                  %endmacro
  2998                                  %macro                  compareMemory 0
  2999                                                          mov     al,eCompareMemory                               ;function code
  3000                                                          int     _svc                                            ;invoke OS service
  3001                                  %endmacro
  3002                                  %macro                  decimalToUnsigned 0
  3003                                                          mov     al,eDecimalToUnsigned                           ;function code
  3004                                                          int     _svc                                            ;invoke OS servie
  3005                                  %endmacro
  3006                                  %macro                  compareMemory 3
  3007                                                          mov     edx,%1                                          ;first memory address
  3008                                                          mov     ebx,%2                                          ;second memory address
  3009                                                          mov     ecx,%3                                          ;length
  3010                                                          mov     al,eCompareMemory                               ;function code
  3011                                                          int     _svc                                            ;invoke OS service
  3012                                  %endmacro
  3013                                  %macro                  copyMemory 3
  3014                                                          mov     edx,%1                                          ;first memory address
  3015                                                          mov     ebx,%2                                          ;second memory address
  3016                                                          mov     ecx,%3                                          ;length
  3017                                                          mov     al,eCopyMemory                                  ;function code
  3018                                                          int     _svc                                            ;invoke OS service
  3019                                  %endmacro
  3020                                  %macro                  freeMemory 1
  3021                                                          mov     edx,%1                                          ;address of memory block
  3022                                                          mov     al,eFreeMemory                                  ;function code
  3023                                                          int     _svc                                            ;invoke OS service
  3024                                  %endmacro
  3025                                  %macro                  getBaseMemSize 0
  3026                                                          mov     al,eGetBaseMemSize                              ;function code
  3027                                                          int     _svc                                            ;invoke OS service
  3028                                  %endmacro
  3029                                  %macro                  getConsoleString 4
  3030                                                          mov     edx,%1                                          ;buffer address
  3031                                                          mov     ecx,%2                                          ;max characters
  3032                                                          mov     bh,%3                                           ;echo indicator
  3033                                                          mov     bl,%4                                           ;terminator
  3034                                                          mov     al,eGetConsoleString                            ;function code
  3035                                                          int     _svc                                            ;invoke OS service
  3036                                  %endmacro
  3037                                  %macro                  getExtendedMemSize 0
  3038                                                          mov     al,eGetExtendedMemSize                          ;function code
  3039                                                          int     _svc                                            ;invoke OS service
  3040                                  %endmacro
  3041                                  %macro                  getROMMemSize 0
  3042                                                          mov     al,eGetROMMemSize                               ;function code
  3043                                                          int     _svc                                            ;invoke OS service
  3044                                  %endmacro
  3045                                  %macro                  hexadecimalToUnsigned 0
  3046                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  3047                                                          int     _svc                                            ;invoke OS service
  3048                                  %endmacro
  3049                                  %macro                  isLeapYear 1
  3050                                                          mov     ebx,%1                                          ;DATETIME addr
  3051                                                          mov     al,eIsLeapYear                                  ;function code
  3052                                                          int     _svc                                            ;invoke OS service
  3053                                  %endmacro
  3054                                  %macro                  placeCursor 0
  3055                                                          mov     al,ePlaceCursor                                 ;function code
  3056                                                          int     _svc                                            ;invoke OS service
  3057                                  %endmacro
  3058                                  %macro                  putConsoleString 1
  3059                                                          mov     edx,%1                                          ;string address
  3060                                                          mov     al,ePutConsoleString                            ;function code
  3061                                                          int     _svc                                            ;invoke OS service
  3062                                  %endmacro
  3063                                  %macro                  putDateString 0
  3064                                                          mov     al,ePutDateString                               ;function code
  3065                                                          int     _svc                                            ;invoke OS service
  3066                                  %endmacro
  3067                                  %macro                  putDateString 2
  3068                                                          mov     ebx,%1                                          ;DATETIME addr
  3069                                                          mov     edx,%2                                          ;output buffer addr
  3070                                                          mov     al,ePutDateString                               ;function code
  3071                                                          int     _svc                                            ;invoke OS service
  3072                                  %endmacro
  3073                                  %macro                  putDayString 2
  3074                                                          mov     ebx,%1                                          ;DATETIME addr
  3075                                                          mov     edx,%2                                          ;output buffer addr
  3076                                                          mov     al,ePutDayString                                ;function code
  3077                                                          int     _svc                                            ;invoke OS service
  3078                                  %endmacro
  3079                                  %macro                  putHourString 2
  3080                                                          mov     ebx,%1                                          ;DATETIME addr
  3081                                                          mov     edx,%2                                          ;output buffer addr
  3082                                                          mov     al,ePutHourString                               ;function code
  3083                                                          int     _svc                                            ;invoke OS service
  3084                                  %endmacro
  3085                                  %macro                  putMinuteString 2
  3086                                                          mov     ebx,%1                                          ;DATETIME addr
  3087                                                          mov     edx,%2                                          ;output buffer addr
  3088                                                          mov     al,ePutMinuteString                             ;function code
  3089                                                          int     _svc                                            ;invoke OS service
  3090                                  %endmacro
  3091                                  %macro                  putMonthString 2
  3092                                                          mov     ebx,%1                                          ;DATETIME addr
  3093                                                          mov     edx,%2                                          ;output buffer addr
  3094                                                          mov     al,ePutMonthString                              ;function code
  3095                                                          int     _svc                                            ;invoke OS service
  3096                                  %endmacro
  3097                                  %macro                  putMonthNameString 2
  3098                                                          mov     ebx,%1                                          ;DATETIME addr
  3099                                                          mov     edx,%2                                          ;output buffer addr
  3100                                                          mov     al,ePutMonthNameString                          ;function code
  3101                                                          int     _svc                                            ;invoke OS service
  3102                                  %endmacro
  3103                                  %macro                  putSecondString 2
  3104                                                          mov     ebx,%1                                          ;DATETIME addr
  3105                                                          mov     edx,%2                                          ;output buffer addr
  3106                                                          mov     al,ePutSecondString                             ;function code
  3107                                                          int     _svc                                            ;invoke OS service
  3108                                  %endmacro
  3109                                  %macro                  putTimeString 0
  3110                                                          mov     al,ePutTimeString                               ;function code
  3111                                                          int     _svc                                            ;invoke OS service
  3112                                  %endmacro
  3113                                  %macro                  putTimeString 2
  3114                                                          mov     ebx,%1                                          ;DATETIME addr
  3115                                                          mov     edx,%2                                          ;output buffer addr
  3116                                                          mov     al,ePutTimeString                               ;function code
  3117                                                          int     _svc                                            ;invoke OS service
  3118                                  %endmacro
  3119                                  %macro                  putWeekdayString 2
  3120                                                          mov     ebx,%1                                          ;DATETIME addr
  3121                                                          mov     edx,%2                                          ;output buffer addr
  3122                                                          mov     al,ePutWeekdayString                            ;function code
  3123                                                          int     _svc                                            ;invoke OS service
  3124                                  %endmacro
  3125                                  %macro                  putWeekdayNameString 2
  3126                                                          mov     ebx,%1                                          ;DATETIME addr
  3127                                                          mov     edx,%2                                          ;output buffer addr
  3128                                                          mov     al,ePutWeekdayNameString                        ;function code
  3129                                                          int     _svc                                            ;invoke OS service
  3130                                  %endmacro
  3131                                  %macro                  putYearString 2
  3132                                                          mov     ebx,%1                                          ;DATETIME addr
  3133                                                          mov     edx,%2                                          ;output buffer addr
  3134                                                          mov     al,ePutYearString                               ;function code
  3135                                                          int     _svc                                            ;invoke OS service
  3136                                  %endmacro
  3137                                  %macro                  readRealTimeClock 0
  3138                                                          mov     al,eReadRealTimeClock                           ;function code
  3139                                                          int     _svc                                            ;invoke OS service
  3140                                  %endmacro
  3141                                  %macro                  readRealTimeClock 1
  3142                                                          mov     ebx,%1                                          ;DATETIME addr
  3143                                                          mov     al,eReadRealTimeClock                           ;function code
  3144                                                          int     _svc                                            ;invoke OS service
  3145                                  %endmacro
  3146                                  %macro                  resetSystem 0
  3147                                                          mov     al,eResetSystem                                 ;function code
  3148                                                          int     _svc                                            ;invoke OS service
  3149                                  %endmacro
  3150                                  %macro                  setConsoleString 0
  3151                                                          mov     al,eSetConsoleString                            ;function code
  3152                                                          int     _svc                                            ;invoke OS service
  3153                                  %endmacro
  3154                                  %macro                  unsignedToDecimalString 0
  3155                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3156                                                          int     _svc                                            ;invoke OS service
  3157                                  %endmacro
  3158                                  %macro                  unsignedToHexadecimal 0
  3159                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3160                                                          int     _svc                                            ;invoke OS service
  3161                                  %endmacro
  3162                                  %macro                  upperCaseString 0
  3163                                                          mov     al,eUpperCaseString                             ;function code
  3164                                                          int     _svc                                            ;invoke OS service
  3165                                  %endmacro
  3166                                  %macro                  yield 0
  3167                                                          mov     al,eYield                                       ;function code
  3168                                                          int     _svc                                            ;invoke OS service
  3169                                  %endmacro
  3170                                  ;=======================================================================================================================
  3171                                  ;
  3172                                  ;       Kernel Function Library
  3173                                  ;
  3174                                  ;=======================================================================================================================
  3175                                  ;=======================================================================================================================
  3176                                  ;
  3177                                  ;       Date and Time Helper Routines
  3178                                  ;
  3179                                  ;       GetYear
  3180                                  ;       IsLeapYear
  3181                                  ;       PutDateString
  3182                                  ;       PutDayString
  3183                                  ;       PutHourString
  3184                                  ;       PutMinuteString
  3185                                  ;       PutMonthString
  3186                                  ;       PutMonthNameString
  3187                                  ;       PutSecondString
  3188                                  ;       PutTimeString
  3189                                  ;       PutWeekdayString
  3190                                  ;       PutWeekdayNameString
  3191                                  ;       PutYearString
  3192                                  ;
  3193                                  ;=======================================================================================================================
  3194                                  ;-----------------------------------------------------------------------------------------------------------------------
  3195                                  ;
  3196                                  ;       Routine:        GetYear
  3197                                  ;
  3198                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3199                                  ;
  3200                                  ;       In:             DS:EBX  DATETIME address
  3201                                  ;
  3202                                  ;       Out:            ECX     year
  3203                                  ;
  3204                                  ;-----------------------------------------------------------------------------------------------------------------------
  3205                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3206                                                          imul    ecx,100                                         ;century * 100
  3207                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3208                                                          add     ecx,eax                                         ;year (YYYY)
  3209                                                          ret                                                     ;return
  3210                                  ;-----------------------------------------------------------------------------------------------------------------------
  3211                                  ;
  3212                                  ;       Routine:        IsLeapYear
  3213                                  ;
  3214                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3215                                  ;
  3216                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3217                                  ;
  3218                                  ;       Out:            ECX     0 = not a leap year
  3219                                  ;                               1 = leap year
  3220                                  ;
  3221                                  ;-----------------------------------------------------------------------------------------------------------------------
  3222                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3223                                                          mov     eax,ecx                                         ;EAX = YYYY
  3224                                                          xor     ecx,ecx                                         ;assume not leap year
  3225                                                          test    al,00000011b                                    ;multiple of four?
  3226                                                          jnz     .no                                             ;no, branch
  3227                                                          mov     dl,100                                          ;divisor
  3228                                                          div     dl                                              ;divide by 100
  3229                                                          test    ah,ah                                           ;multiple of 100?
  3230                                                          jnz     .yes                                            ;yes, branch
  3231                                                          test    al,00000011b                                    ;multiple of 400?
  3232                                                          jnz     .no                                             ;no, branch
  3233                                  .yes                    inc     ecx                                             ;indicate leap
  3234                                  .no                     ret                                                     ;return
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236                                  ;
  3237                                  ;       Routine:        PutDateString
  3238                                  ;
  3239                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3240                                  ;                       structure at ds:ebx.
  3241                                  ;
  3242                                  ;       In:             DS:EBX  DATETIME address
  3243                                  ;                       DS:EDX  output buffer address
  3244                                  ;
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  PutDateString           push    ecx                                             ;save non-volatile regs
  3247                                                          push    edi                                             ;
  3248                                                          push    es                                              ;
  3249                                                          push    ds                                              ;store data selector ...
  3250                                                          pop     es                                              ;... in extra segment reg
  3251                                                          mov     edi,edx                                         ;output buffer address
  3252                                                          mov     cl,10                                           ;divisor
  3253                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3254                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3255                                                          div     cl                                              ;AH = rem; AL = quotient
  3256                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3257                                                          cld                                                     ;forward strings
  3258                                                          stosd                                                   ;store "mm/"nul
  3259                                                          dec     edi                                             ;address of terminator
  3260                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3261                                                          div     cl                                              ;AH = rem; AL = quotient
  3262                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3263                                                          stosd                                                   ;store "dd/"nul
  3264                                                          dec     edi                                             ;address of terminator
  3265                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3266                                                          div     cl                                              ;AH = rem; AL = quotient
  3267                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3268                                                          stosd                                                   ;store "cc/"null
  3269                                                          dec     edi                                             ;address of terminator
  3270                                                          dec     edi                                             ;address of delimiter
  3271                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3272                                                          div     cl                                              ;AH = rem; AL = quotient
  3273                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3274                                                          stosb                                                   ;store quotient
  3275                                                          mov     al,ah                                           ;remainder
  3276                                                          stosb                                                   ;store remainder
  3277                                                          xor     al,al                                           ;null terminator
  3278                                                          stosb                                                   ;store terminator
  3279                                                          pop     es                                              ;restore non-volatile regs
  3280                                                          pop     edi                                             ;
  3281                                                          pop     ecx                                             ;
  3282                                                          ret                                                     ;return
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;       Routine:        PutDayString
  3286                                  ;
  3287                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3288                                  ;                       structure at ds:ebx.
  3289                                  ;
  3290                                  ;       In:             DS:EBX  DATETIME address
  3291                                  ;                       DS:EDX  output buffer address
  3292                                  ;
  3293                                  ;-----------------------------------------------------------------------------------------------------------------------
  3294                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3295                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3296                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3297                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3298                                                          pop     ecx                                             ;
  3299                                                          ret                                                     ;return
  3300                                  ;-----------------------------------------------------------------------------------------------------------------------
  3301                                  ;
  3302                                  ;       Routine:        PutHourString
  3303                                  ;
  3304                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3305                                  ;                       structure at ds:ebx.
  3306                                  ;
  3307                                  ;       In:             DS:EBX  DATETIME address
  3308                                  ;                       DS:EDX  output buffer address
  3309                                  ;
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3312                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3313                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3314                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3315                                                          pop     ecx                                             ;
  3316                                                          ret                                                     ;return
  3317                                  ;-----------------------------------------------------------------------------------------------------------------------
  3318                                  ;
  3319                                  ;       Routine:        PutMinuteString
  3320                                  ;
  3321                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3322                                  ;                       structure at ds:ebx.
  3323                                  ;
  3324                                  ;       In:             DS:EBX  DATETIME address
  3325                                  ;                       DS:EDX  output buffer address
  3326                                  ;
  3327                                  ;-----------------------------------------------------------------------------------------------------------------------
  3328                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3329                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3330                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3331                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3332                                                          pop     ecx                                             ;
  3333                                                          ret                                                     ;return
  3334                                  ;-----------------------------------------------------------------------------------------------------------------------
  3335                                  ;
  3336                                  ;       Routine:        PutMonthString
  3337                                  ;
  3338                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3339                                  ;                       structure at ds:ebx.
  3340                                  ;
  3341                                  ;       In:             DS:EBX  DATETIME address
  3342                                  ;                       DS:EDX  output buffer address
  3343                                  ;
  3344                                  ;-----------------------------------------------------------------------------------------------------------------------
  3345                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3346                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3347                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3348                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3349                                                          pop     ecx                                             ;
  3350                                                          ret                                                     ;return
  3351                                  ;-----------------------------------------------------------------------------------------------------------------------
  3352                                  ;
  3353                                  ;       Routine:        PutMonthNameString
  3354                                  ;
  3355                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3356                                  ;                       structure at ds:ebx.
  3357                                  ;
  3358                                  ;       In:             DS:EBX  DATETIME address
  3359                                  ;                       DS:EDX  output buffer address
  3360                                  ;
  3361                                  ;-----------------------------------------------------------------------------------------------------------------------
  3362                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3363                                                          push    edi                                             ;
  3364                                                          push    ds                                              ;
  3365                                                          push    es                                              ;
  3366                                                          push    ds                                              ;load data selector ...
  3367                                                          pop     es                                              ;... into extra segment
  3368                                                          mov     edi,edx                                         ;output buffer address
  3369                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3370                                                          dec     eax                                             ;month (0-11)
  3371                                                          shl     eax,2                                           ;offset into month name lookup table
  3372                                                          push    cs                                              ;load code selector ...
  3373                                                          pop     ds                                              ;... into data segment
  3374                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3375                                                          cld                                                     ;forward strings
  3376                                  .10                     lodsb                                                   ;name character
  3377                                                          stosb                                                   ;store in output buffer
  3378                                                          test    al,al                                           ;end of string?
  3379                                                          jnz     .10                                             ;no, continue
  3380                                                          pop     es                                              ;restore non-volatile regs
  3381                                                          pop     ds                                              ;
  3382                                                          pop     edi                                             ;
  3383                                                          pop     esi                                             ;
  3384                                                          ret                                                     ;return
  3385                                  ;-----------------------------------------------------------------------------------------------------------------------
  3386                                  ;
  3387                                  ;       Routine:        PutSecondString
  3388                                  ;
  3389                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3390                                  ;                       structure at ds:ebx.
  3391                                  ;
  3392                                  ;       In:             DS:EBX  DATETIME address
  3393                                  ;                       DS:EDX  output buffer address
  3394                                  ;
  3395                                  ;-----------------------------------------------------------------------------------------------------------------------
  3396                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3397                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3398                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3399                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3400                                                          pop     ecx                                             ;
  3401                                                          ret                                                     ;return
  3402                                  ;-----------------------------------------------------------------------------------------------------------------------
  3403                                  ;
  3404                                  ;       Routine:        PutTimeString
  3405                                  ;
  3406                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3407                                  ;                       structure at ds:ebx.
  3408                                  ;
  3409                                  ;       In:             DS:EBX  DATETIME address
  3410                                  ;                       DS:EDX  output buffer address
  3411                                  ;
  3412                                  ;-----------------------------------------------------------------------------------------------------------------------
  3413                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3414                                                          push    edi                                             ;
  3415                                                          push    es                                              ;
  3416                                                          push    ds                                              ;store data selector ...
  3417                                                          pop     es                                              ;... in extra segment reg
  3418                                                          mov     edi,edx                                         ;output buffer address
  3419                                                          mov     cl,10                                           ;divisor
  3420                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3421                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3422                                                          div     cl                                              ;ah = rem; al = quotient
  3423                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3424                                                          cld                                                     ;forward strings
  3425                                                          stosd                                                   ;store "mm/"nul
  3426                                                          dec     edi                                             ;address of terminator
  3427                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3428                                                          div     cl                                              ;ah = rem; al = quotient
  3429                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3430                                                          stosd                                                   ;store "dd/"nul
  3431                                                          dec     edi                                             ;address of terminator
  3432                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3433                                                          div     cl                                              ;ah = rem; al = quotient
  3434                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3435                                                          stosb                                                   ;store quotient
  3436                                                          mov     al,ah                                           ;remainder
  3437                                                          stosb                                                   ;store remainder
  3438                                                          xor     al,al                                           ;null terminator
  3439                                                          stosb                                                   ;store terminator
  3440                                                          pop     es                                              ;restore non-volatile regs
  3441                                                          pop     edi                                             ;
  3442                                                          pop     ecx                                             ;
  3443                                                          ret                                                     ;return
  3444                                  ;-----------------------------------------------------------------------------------------------------------------------
  3445                                  ;
  3446                                  ;       Routine:        PutWeekdayString
  3447                                  ;
  3448                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3449                                  ;                       structure at ds:ebx.
  3450                                  ;
  3451                                  ;       In:             DS:EBX  DATETIME address
  3452                                  ;                       DS:EDX  output buffer address
  3453                                  ;
  3454                                  ;-----------------------------------------------------------------------------------------------------------------------
  3455                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3456                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3457                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3458                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3459                                                          pop     ecx                                             ;
  3460                                                          ret                                                     ;return
  3461                                  ;-----------------------------------------------------------------------------------------------------------------------
  3462                                  ;
  3463                                  ;       Routine:        PutWeekdayNameString
  3464                                  ;
  3465                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3466                                  ;                       structure at ds:ebx.
  3467                                  ;
  3468                                  ;       In:             DS:EBX  DATETIME address
  3469                                  ;                       DS:EDX  output buffer address
  3470                                  ;
  3471                                  ;-----------------------------------------------------------------------------------------------------------------------
  3472                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3473                                                          push    edi                                             ;
  3474                                                          push    ds                                              ;
  3475                                                          push    es                                              ;
  3476                                                          push    ds                                              ;load data selector ...
  3477                                                          pop     es                                              ;... into extra segment
  3478                                                          mov     edi,edx                                         ;output buffer address
  3479                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3480                                                          shl     eax,2                                           ;offset into day name lookup table
  3481                                                          push    cs                                              ;load code selector ...
  3482                                                          pop     ds                                              ;... into data segment
  3483                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3484                                                          cld                                                     ;forward strings
  3485                                  .10                     lodsb                                                   ;name character
  3486                                                          stosb                                                   ;store in output buffer
  3487                                                          test    al,al                                           ;end of string?
  3488                                                          jnz     .10                                             ;no, continue
  3489                                                          pop     es                                              ;restore non-volatile regs
  3490                                                          pop     ds                                              ;
  3491                                                          pop     edi                                             ;
  3492                                                          pop     esi                                             ;
  3493                                                          ret                                                     ;return
  3494                                  ;-----------------------------------------------------------------------------------------------------------------------
  3495                                  ;
  3496                                  ;       Routine:        PutYearString
  3497                                  ;
  3498                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3499                                  ;                       structure at ds:ebx.
  3500                                  ;
  3501                                  ;       In:             DS:EBX  DATETIME address
  3502                                  ;                       DS:EDX  output buffer address
  3503                                  ;
  3504                                  ;-----------------------------------------------------------------------------------------------------------------------
  3505                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3506                                                          call    GetYear                                         ;ECX = YYYY
  3507                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3508                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3509                                                          pop     ecx                                             ;restore non-volatile regs
  3510                                                          ret                                                     ;return
  3511                                  ;-----------------------------------------------------------------------------------------------------------------------
  3512                                  ;
  3513                                  ;       Day Names
  3514                                  ;
  3515                                  ;-----------------------------------------------------------------------------------------------------------------------
  3516                                  czSunday                db      "Sunday",0
  3517                                  czMonday                db      "Monday",0
  3518                                  czTuesday               db      "Tuesday",0
  3519                                  czWednesday             db      "Wednesday",0
  3520                                  czThursday              db      "Thursday",0
  3521                                  czFriday                db      "Friday",0
  3522                                  czSaturday              db      "Saturday",0
  3523                                  ;-----------------------------------------------------------------------------------------------------------------------
  3524                                  ;
  3525                                  ;       Month Names
  3526                                  ;
  3527                                  ;-----------------------------------------------------------------------------------------------------------------------
  3528                                  czJanuary               db      "January",0
  3529                                  czFebruary              db      "February",0
  3530                                  czMarch                 db      "March",0
  3531                                  czApril                 db      "April",0
  3532                                  czMay                   db      "May",0
  3533                                  czJune                  db      "June",0
  3534                                  czJuly                  db      "July",0
  3535                                  czAugust                db      "August",0
  3536                                  czSeptember             db      "September",0
  3537                                  czOctober               db      "October",0
  3538                                  czNovember              db      "November",0
  3539                                  czDecember              db      "December",0
  3540                                  ;-----------------------------------------------------------------------------------------------------------------------
  3541                                  ;
  3542                                  ;       Day Names Lookup Table
  3543                                  ;
  3544                                  ;-----------------------------------------------------------------------------------------------------------------------
  3545                                                          align   4
  3546                                  tDayNames               equ     $
  3547                                                          dd      czSunday
  3548                                                          dd      czMonday
  3549                                                          dd      czTuesday
  3550                                                          dd      czWednesday
  3551                                                          dd      czThursday
  3552                                                          dd      czFriday
  3553                                                          dd      czSaturday
  3554                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3555                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3556                                  ;-----------------------------------------------------------------------------------------------------------------------
  3557                                  ;
  3558                                  ;       Month Names Lookup Table
  3559                                  ;
  3560                                  ;-----------------------------------------------------------------------------------------------------------------------
  3561                                                          align   4
  3562                                  tMonthNames             equ     $
  3563                                                          dd      czJanuary
  3564                                                          dd      czFebruary
  3565                                                          dd      czMarch
  3566                                                          dd      czApril
  3567                                                          dd      czMay
  3568                                                          dd      czJune
  3569                                                          dd      czJuly
  3570                                                          dd      czAugust
  3571                                                          dd      czSeptember
  3572                                                          dd      czOctober
  3573                                                          dd      czNovember
  3574                                                          dd      czDecember
  3575                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3576                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3577                                  ;=======================================================================================================================
  3578                                  ;
  3579                                  ;       Memory Helper Routines
  3580                                  ;
  3581                                  ;       AllocateMemory
  3582                                  ;       FreeMemory
  3583                                  ;
  3584                                  ;=======================================================================================================================
  3585                                  ;-----------------------------------------------------------------------------------------------------------------------
  3586                                  ;
  3587                                  ;       Routine:        AllocateMemory
  3588                                  ;
  3589                                  ;       Description:    This routine allocates a memory block for the given task.
  3590                                  ;
  3591                                  ;       In:             ECX     bytes of memory to allocate
  3592                                  ;
  3593                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3594                                  ;                               0       unable to allocate memory
  3595                                  ;
  3596                                  ;-----------------------------------------------------------------------------------------------------------------------
  3597                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  3598                                                          push    ecx                                             ;
  3599                                                          push    esi                                             ;
  3600                                                          push    ds                                              ;
  3601                                  ;
  3602                                  ;       Address kernel memory structures
  3603                                  ;
  3604                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3605                                                          pop     ds                                              ;... into data segment reg
  3606                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3607                                  ;
  3608                                  ;       Set requested size to minimum block size if requested size is too small.
  3609                                  ;
  3610                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3611                                                          jae     .10                                             ;no, branch
  3612                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3613                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3614                                  ;
  3615                                  ;       Find the first free memory block large enough to satisfy the request.
  3616                                  ;
  3617                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3618                                  .20                     test    eax,eax                                         ;end of free block chain?
  3619                                                          jz      .220                                            ;yes, branch
  3620                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3621                                                          jbe     .30                                             ;yes, branch
  3622                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3623                                                          jmp     .20                                             ;continue
  3624                                  ;-----------------------------------------------------------------------------------------------------------------------
  3625                                  ;
  3626                                  ;       Address the previous and next free memory blocks.
  3627                                  ;
  3628                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3629                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3630                                  ;
  3631                                  ;       Remove the free memory block from the forward free memory block chain.
  3632                                  ;
  3633                                                          test    ebx,ebx                                         ;any previous free memory block?
  3634                                                          jz      .40                                             ;no, branch
  3635                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3636                                                          jmp     .50                                             ;continue
  3637                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3638                                  ;
  3639                                  ;       Remove the free memory block from the reverse free memory block chain.
  3640                                  ;
  3641                                  .50                     test    edx,edx                                         ;any next free memory block?
  3642                                                          jz      .60                                             ;no, branch
  3643                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3644                                                          jmp     .70                                             ;continue
  3645                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3646                                  ;-----------------------------------------------------------------------------------------------------------------------
  3647                                  ;
  3648                                  ;       Determine if the free memory block can be split.
  3649                                  ;
  3650                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3651                                                          sub     ebx,ecx                                         ;subtract requested memory size
  3652                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3653                                                          jb      .150                                            ;no, branch
  3654                                  ;
  3655                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3656                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3657                                  ;       of the requested memory size.
  3658                                  ;
  3659                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3660                                                          mov     edx,eax                                         ;memory block address
  3661                                                          add     edx,ecx                                         ;address new new next contig block
  3662                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3663                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3664                                  ;
  3665                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3666                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3667                                  ;
  3668                                                          jecxz   .80                                             ;no next contig, branch
  3669                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3670                                                          jmp     .90                                             ;continue
  3671                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3672                                  ;
  3673                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3674                                  ;
  3675                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3676                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3677                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3678                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  3679                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3680                                                          xor     ebx,ebx                                         ;zero register
  3681                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3682                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3683                                  ;
  3684                                  ;       Find the proper location in the free block chain for the new free block
  3685                                  ;
  3686                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3687                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3688                                  .100                    jecxz   .110                                            ;branch if at end of chain
  3689                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3690                                                          jbe     .110                                            ;yes, branch
  3691                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3692                                                          jmp     .100                                            ;continue
  3693                                  ;
  3694                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3695                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3696                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3697                                  ;       block of hte next block, if there is one.
  3698                                  ;
  3699                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3700                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3701                                                          jecxz   .120                                            ;branch if no next block
  3702                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3703                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3704                                                          jmp     .130                                            ;continue
  3705                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3706                                  ;
  3707                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3708                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3709                                  ;       last user block pointers if necessary.
  3710                                  ;
  3711                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3712                                                          test    ebx,ebx                                         ;is there a previous block?
  3713                                                          jz      .140                                            ;no, branch
  3714                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3715                                                          jmp     .150                                            ;continue
  3716                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3717                                  ;
  3718                                  ;       Update the newly allocated block's owner and signature.
  3719                                  ;
  3720                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3721                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3722                                                          xor     edx,edx                                         ;zero register
  3723                                                          str     dx                                              ;load the task state register
  3724                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3725                                  ;
  3726                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3727                                  ;
  3728                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3729                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3730                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3731                                                          jb      .180                                            ;branch if block belongs to next task
  3732                                                          je      .170                                            ;branch if block belongs to this task
  3733                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3734                                                          jmp     .160                                            ;continue
  3735                                  ;
  3736                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3737                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3738                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3739                                  ;       place to insert the block.
  3740                                  ;
  3741                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3742                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3743                                                          jbe     .180                                            ;yes, branch
  3744                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3745                                                          test    ecx,ecx                                         ;end of chain?
  3746                                                          jz      .180                                            ;yes, branch
  3747                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3748                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3749                                                          je      .170                                            ;yes, continue search
  3750                                  ;
  3751                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3752                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3753                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3754                                  ;       do have a previous-block, we update that block's next-block pointer.
  3755                                  ;
  3756                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3757                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3758                                                          jecxz   .190                                            ;branch if no next-task block
  3759                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3760                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3761                                                          jmp     .200                                            ;continue
  3762                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3763                                  ;
  3764                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3765                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3766                                  ;       global first and/or last user-block pointers if necessary.
  3767                                  ;
  3768                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3769                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3770                                                          jz      .210                                            ;no, branch
  3771                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3772                                                          jmp     .220                                            ;continue
  3773                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3774                                  ;
  3775                                  ;       Restore registers and return to caller.
  3776                                  ;
  3777                                  .220                    pop     ds                                              ;restore non-volatie regs
  3778                                                          pop     esi                                             ;
  3779                                                          pop     ecx                                             ;
  3780                                                          pop     ebx                                             ;
  3781                                                          ret                                                     ;return
  3782                                  ;-----------------------------------------------------------------------------------------------------------------------
  3783                                  ;
  3784                                  ;       Routine:        FreeMemory
  3785                                  ;
  3786                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3787                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3788                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3789                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3790                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3791                                  ;
  3792                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3793                                  ;
  3794                                  ;       Out:            EAX     -1      invalid memory block
  3795                                  ;                               0       memory block freed
  3796                                  ;
  3797                                  ;-----------------------------------------------------------------------------------------------------------------------
  3798                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3799                                                          push    ecx                                             ;
  3800                                                          push    esi                                             ;
  3801                                                          push    edi                                             ;
  3802                                                          push    ds                                              ;
  3803                                                          push    es                                              ;
  3804                                  ;
  3805                                  ;       Address the root memory structure
  3806                                  ;
  3807                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3808                                                          pop     es                                              ;... into extra segment reg
  3809                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3810                                                          pop     ds                                              ;... into data segment reg
  3811                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3812                                                          mov     edi,edx                                         ;memory block address
  3813                                  ;
  3814                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3815                                  ;
  3816                                                          xor     eax,eax                                         ;indicate success
  3817                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3818                                                          je      .240                                            ;yes, branch
  3819                                                          dec     eax                                             ;indicate failure
  3820                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3821                                                          jne     .240                                            ;no, branch
  3822                                  ;-----------------------------------------------------------------------------------------------------------------------
  3823                                  ;
  3824                                  ;       Unlink the USER memory block.
  3825                                  ;
  3826                                  ;-----------------------------------------------------------------------------------------------------------------------
  3827                                  ;
  3828                                  ;       Set the block signature. Reset owner.
  3829                                  ;
  3830                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3831                                                          xor     eax,eax                                         ;zero register
  3832                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3833                                  ;
  3834                                  ;       Wipe user area.
  3835                                  ;
  3836                                                          push    edi                                             ;save block address
  3837                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3838                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3839                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3840                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3841                                                          rep     stosb                                           ;clear memory
  3842                                                          pop     edi                                             ;restore block address
  3843                                  ;
  3844                                  ;       Address the preceding and following USER memory blocks
  3845                                  ;
  3846                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3847                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3848                                  ;
  3849                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3850                                  ;       pointer to point to the USER block following this block.
  3851                                  ;
  3852                                                          test    ebx,ebx                                         ;is there a previous block?
  3853                                                          jz      .10                                             ;no, branch
  3854                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3855                                                          jmp     .20                                             ;continue
  3856                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3857                                  ;
  3858                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3859                                  ;       pointer to point to the USER block preceding this block.
  3860                                  ;
  3861                                  .20                     jecxz   .30                                             ;branch if no next block
  3862                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3863                                                          jmp     .40                                             ;continue
  3864                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ;
  3867                                  ;       Merge with a previous contiguous FREE memory block.
  3868                                  ;
  3869                                  ;-----------------------------------------------------------------------------------------------------------------------
  3870                                  ;
  3871                                  ;       Address the preceding and following contiguous memory blocks.
  3872                                  ;
  3873                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3874                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3875                                  ;
  3876                                  ;       Verify we have a previous contiguous FREE block.
  3877                                  ;
  3878                                                          test    ebx,ebx                                         ;is there a previous block?
  3879                                                          jz      .100                                            ;no, branch
  3880                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3881                                                          jne     .100                                            ;no, branch
  3882                                  ;
  3883                                  ;       Update adjacent block's contiguous pointers.
  3884                                  ;
  3885                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3886                                                          jecxz   .50                                             ;branch if no next contiguous block
  3887                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3888                                                          jmp     .60                                             ;continue
  3889                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3890                                  ;
  3891                                  ;       Update the size of the merged FREE block.
  3892                                  ;
  3893                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3894                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3895                                  ;
  3896                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3897                                  ;
  3898                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3899                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3900                                                          rep     stosb                                           ;clear memory header
  3901                                                          mov     edi,ebx                                         ;current block is now previous block
  3902                                  ;-----------------------------------------------------------------------------------------------------------------------
  3903                                  ;
  3904                                  ;       Unlink the previous contiguous FREE memory block
  3905                                  ;
  3906                                  ;-----------------------------------------------------------------------------------------------------------------------
  3907                                  ;
  3908                                  ;       Address the preceding and following USER memory blocks
  3909                                  ;
  3910                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3911                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3912                                  ;
  3913                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3914                                  ;       block pointer.
  3915                                  ;
  3916                                                          test    ebx,ebx                                         ;is there a previous block?
  3917                                                          jz      .70                                             ;no, branch
  3918                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3919                                                          jmp     .80                                             ;branch
  3920                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3921                                  ;
  3922                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3923                                  ;       pointer.
  3924                                  ;
  3925                                  .80                     jecxz   .90                                             ;branch if no next block
  3926                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3927                                                          jmp     .100                                            ;continue
  3928                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3929                                  ;-----------------------------------------------------------------------------------------------------------------------
  3930                                  ;
  3931                                  ;       Merge with a following contiguous FREE memory block.
  3932                                  ;
  3933                                  ;-----------------------------------------------------------------------------------------------------------------------
  3934                                  ;
  3935                                  ;       Verify we have a following contiguous FREE block.
  3936                                  ;
  3937                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3938                                                          jecxz   .170                                            ;branch if no next contiguous block
  3939                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3940                                                          jne     .170                                            ;no, branch
  3941                                  ;
  3942                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3943                                  ;
  3944                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3945                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3946                                  ;
  3947                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3948                                  ;
  3949                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3950                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3951                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3952                                                          jz      .110                                            ;no, branch
  3953                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3954                                                          jmp     .120                                            ;continue
  3955                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3956                                  ;-----------------------------------------------------------------------------------------------------------------------
  3957                                  ;
  3958                                  ;       Unlink the following contiguous FREE memory block
  3959                                  ;
  3960                                  ;-----------------------------------------------------------------------------------------------------------------------
  3961                                  ;
  3962                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3963                                  ;
  3964                                  .120                    push    edi                                             ;save this block
  3965                                                          mov     edi,ecx                                         ;next contiguous block
  3966                                                          push    ecx                                             ;save next contiguous block
  3967                                  ;
  3968                                  ;       Address the preceding and following USER memory blocks
  3969                                  ;
  3970                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3971                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3972                                  ;
  3973                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3974                                  ;       block pointer.
  3975                                  ;
  3976                                                          test    ebx,ebx                                         ;is there a previous block?
  3977                                                          jz      .130                                            ;no, branch
  3978                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3979                                                          jmp     .140                                            ;branch
  3980                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3981                                  ;
  3982                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3983                                  ;       pointer.
  3984                                  ;
  3985                                  .140                    jecxz   .150                                            ;branch if no next block
  3986                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3987                                                          jmp     .160                                            ;continue
  3988                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3989                                  ;
  3990                                  ;       Clear next contiguous block's header
  3991                                  ;
  3992                                  .160                    pop     edi                                             ;next congiguous block pointer
  3993                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3994                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3995                                                          rep     stosb                                           ;clear memory header
  3996                                                          pop     edi                                             ;this block's pointer
  3997                                  ;-----------------------------------------------------------------------------------------------------------------------
  3998                                  ;
  3999                                  ;       Insert the final FREE block back into the block chain.
  4000                                  ;
  4001                                  ;-----------------------------------------------------------------------------------------------------------------------
  4002                                  ;
  4003                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  4004                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  4005                                  ;       all are smaller in size.
  4006                                  ;
  4007                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  4008                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  4009                                  .180                    jecxz   .190                                            ;exit if no ptr
  4010                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  4011                                                          jb      .190                                            ;yes, branch
  4012                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  4013                                                          jmp     .180                                            ;continue
  4014                                  ;
  4015                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  4016                                  ;       larger free block. Update the next block's previous block pointer.
  4017                                  ;
  4018                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  4019                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  4020                                                          jecxz   .200                                            ;branch if no block found
  4021                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  4022                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  4023                                                          jmp     .210                                            ;continue
  4024                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  4025                                  ;
  4026                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  4027                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  4028                                  ;       next pointer.
  4029                                  ;
  4030                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  4031                                                          test    ebx,ebx                                         ;do we have a previous block?
  4032                                                          jz      .220                                            ;no, branch
  4033                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  4034                                                          jmp     .230                                            ;continue
  4035                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  4036                                  ;
  4037                                  ;       The memory free has completed.
  4038                                  ;
  4039                                  .230                    xor     eax,eax                                         ;indicate success
  4040                                  ;
  4041                                  ;       Restore and return.
  4042                                  ;
  4043                                  .240                    pop     es                                              ;restore non-volatile regs
  4044                                                          pop     ds                                              ;
  4045                                                          pop     edi                                             ;
  4046                                                          pop     esi                                             ;
  4047                                                          pop     ecx                                             ;
  4048                                                          pop     ebx                                             ;
  4049                                                          ret                                                     ;return
  4050                                  ;=======================================================================================================================
  4051                                  ;
  4052                                  ;       String Helper Routines
  4053                                  ;
  4054                                  ;       CompareMemory
  4055                                  ;       CopyMemory
  4056                                  ;       UpperCaseString
  4057                                  ;
  4058                                  ;=======================================================================================================================
  4059                                  ;-----------------------------------------------------------------------------------------------------------------------
  4060                                  ;
  4061                                  ;       Routine:        CompareMemory
  4062                                  ;
  4063                                  ;       Description:    This routine compares two byte arrays.
  4064                                  ;
  4065                                  ;       In:             DS:EDX  first source address
  4066                                  ;                       DS:EBX  second source address
  4067                                  ;                       ECX     comparison length
  4068                                  ;
  4069                                  ;       Out:            EDX     first source address
  4070                                  ;                       EBX     second source address
  4071                                  ;                       ECX     0       array 1 = array 2
  4072                                  ;                               <0      array 1 < array 2
  4073                                  ;                               >0      array 1 > array 2
  4074                                  ;
  4075                                  ;-----------------------------------------------------------------------------------------------------------------------
  4076                                  CompareMemory           push    esi                                             ;save non-volatile regs
  4077                                                          push    edi                                             ;
  4078                                                          push    es                                              ;
  4079                                                          push    ds                                              ;copy DS
  4080                                                          pop     es                                              ;... to ES
  4081                                                          mov     esi,edx                                         ;first source address
  4082                                                          mov     edi,ebx                                         ;second source address
  4083                                                          cld                                                     ;forward strings
  4084                                                          rep     cmpsb                                           ;compare bytes
  4085                                                          mov     al,0                                            ;default result
  4086                                                          jz      .10                                             ;branch if arrays equal
  4087                                                          mov     al,1                                            ;positive result
  4088                                                          jnc     .10                                             ;branch if target > source
  4089                                                          mov     al,-1                                           ;negative result
  4090                                  .10                     movsx   ecx,al                                          ;extend sign
  4091                                                          pop     es                                              ;restore non-volatile regs
  4092                                                          pop     edi                                             ;
  4093                                                          pop     esi                                             ;
  4094                                                          ret                                                     ;return
  4095                                  ;-----------------------------------------------------------------------------------------------------------------------
  4096                                  ;
  4097                                  ;       Routine:        CopyMemory
  4098                                  ;
  4099                                  ;       Description:    This routine copies a byte array.
  4100                                  ;
  4101                                  ;       In:             DS:EDX  first source address
  4102                                  ;                       DS:EBX  second source address
  4103                                  ;                       ECX     copy length
  4104                                  ;
  4105                                  ;-----------------------------------------------------------------------------------------------------------------------
  4106                                  CopyMemory              push    ecx                                             ;save non-volatile regs
  4107                                                          push    esi                                             ;
  4108                                                          push    edi                                             ;
  4109                                                          push    es                                              ;
  4110                                  ;
  4111                                  ;       Compare byte array
  4112                                  ;
  4113                                                          push    ds                                              ;load data selector
  4114                                                          pop     es                                              ;... into ES register
  4115                                                          mov     esi,edx                                         ;first source address
  4116                                                          mov     edi,ebx                                         ;second source address
  4117                                                          cld                                                     ;forward strings
  4118                                                          rep     movsb                                           ;copy bytes
  4119                                  ;
  4120                                  ;       Restore and return
  4121                                  ;
  4122                                                          pop     es                                              ;restore non-volatile regs
  4123                                                          pop     edi                                             ;
  4124                                                          pop     esi                                             ;
  4125                                                          pop     ecx                                             ;
  4126                                                          ret                                                     ;return
  4127                                  ;-----------------------------------------------------------------------------------------------------------------------
  4128                                  ;
  4129                                  ;       Routine:        UpperCaseString
  4130                                  ;
  4131                                  ;       Description:    This routine places all characters in the given string to upper case.
  4132                                  ;
  4133                                  ;       In:             DS:EDX  string address
  4134                                  ;
  4135                                  ;       Out:            EDX     string address
  4136                                  ;
  4137                                  ;-----------------------------------------------------------------------------------------------------------------------
  4138                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  4139                                                          mov     esi,edx                                         ;string address
  4140                                                          cld                                                     ;forward strings
  4141                                  .10                     lodsb                                                   ;string character
  4142                                                          test    al,al                                           ;null?
  4143                                                          jz      .20                                             ;yes, skip ahead
  4144                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4145                                                          jb      .10                                             ;no, continue
  4146                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4147                                                          ja      .10                                             ;no, continue
  4148                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  4149                                                          mov     [esi-1],al                                      ;upper character
  4150                                                          jmp     .10                                             ;continue
  4151                                  .20                     pop     esi                                             ;restore non-volatile regs
  4152                                                          ret                                                     ;return
  4153                                  ;=======================================================================================================================
  4154                                  ;
  4155                                  ;       Console Helper Routines
  4156                                  ;
  4157                                  ;       FirstConsoleColumn
  4158                                  ;       GetConsoleChar
  4159                                  ;       GetConsoleString
  4160                                  ;       NextConsoleColumn
  4161                                  ;       NextConsoleRow
  4162                                  ;       PreviousConsoleColumn
  4163                                  ;       PutConsoleChar
  4164                                  ;       PutConsoleHexByte
  4165                                  ;       PutConsoleHexDword
  4166                                  ;       PutConsoleHexWord
  4167                                  ;       PutConsoleOIAChar
  4168                                  ;       PutConsoleOIAShift
  4169                                  ;       PutConsoleString
  4170                                  ;       Yield
  4171                                  ;
  4172                                  ;=======================================================================================================================
  4173                                  ;-----------------------------------------------------------------------------------------------------------------------
  4174                                  ;
  4175                                  ;       Routine:        FirstConsoleColumn
  4176                                  ;
  4177                                  ;       Description:    This routine resets the console column to start of the row.
  4178                                  ;
  4179                                  ;       In:             DS      OS data selector
  4180                                  ;
  4181                                  ;-----------------------------------------------------------------------------------------------------------------------
  4182                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  4183                                                          mov     [wbConsoleColumn],al                            ;save column
  4184                                                          ret                                                     ;return
  4185                                  ;-----------------------------------------------------------------------------------------------------------------------
  4186                                  ;
  4187                                  ;       Routine:        GetConsoleChar
  4188                                  ;
  4189                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4190                                  ;
  4191                                  ;       Out:            AL      ASCII character code
  4192                                  ;                       AH      keyboard scan code
  4193                                  ;
  4194                                  ;-----------------------------------------------------------------------------------------------------------------------
  4195                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4196                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  4197                                                          or      eax,eax                                         ;do we have a message?
  4198                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  4199                                                          push    eax                                             ;save key codes
  4200                                                          and     eax,0FFFF0000h                                  ;mask for message type
  4201                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4202                                                          pop     eax                                             ;restore key codes
  4203                                                          jne     GetConsoleChar                                  ;no, try again
  4204                                                          and     eax,0000ffffh                                   ;mask for key codes
  4205                                                          ret                                                     ;return
  4206                                  ;-----------------------------------------------------------------------------------------------------------------------
  4207                                  ;
  4208                                  ;       Routine:        GetConsoleString
  4209                                  ;
  4210                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4211                                  ;
  4212                                  ;       In:             DS:EDX  target buffer address
  4213                                  ;                       ECX     maximum number of characters to accept
  4214                                  ;                       BH      echo to terminal
  4215                                  ;                       BL      terminating character
  4216                                  ;
  4217                                  ;-----------------------------------------------------------------------------------------------------------------------
  4218                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  4219                                                          push    esi                                             ;
  4220                                                          push    edi                                             ;
  4221                                                          push    es                                              ;
  4222                                                          push    ds                                              ;load data segment selector ...
  4223                                                          pop     es                                              ;... into extra segment register
  4224                                                          mov     edi,edx                                         ;edi = target buffer
  4225                                                          push    ecx                                             ;save maximum characters
  4226                                                          xor     al,al                                           ;zero register
  4227                                                          cld                                                     ;forward strings
  4228                                                          rep     stosb                                           ;zero fill buffer
  4229                                                          pop     ecx                                             ;maximum characters
  4230                                                          mov     edi,edx                                         ;edi = target buffer
  4231                                                          mov     esi,edx                                         ;esi = target buffer
  4232                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  4233                                  .20                     call    GetConsoleChar                                  ;al = next input char
  4234                                                          cmp     al,bl                                           ;is this the terminator?
  4235                                                          je      .50                                             ;yes, exit
  4236                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4237                                                          jne     .30                                             ;no, skip ahead
  4238                                                          cmp     esi,edi                                         ;at start of buffer?
  4239                                                          je      .20                                             ;yes, get next character
  4240                                                          dec     edi                                             ;backup target pointer
  4241                                                          mov     byte [edi],0                                    ;zero previous character
  4242                                                          inc     ecx                                             ;increment remaining chars
  4243                                                          test    bh,1                                            ;echo to console?
  4244                                                          jz      .20                                             ;no, get next character
  4245                                                          call    PreviousConsoleColumn                           ;backup console position
  4246                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4247                                                          call    PutConsoleChar                                  ;write space to console
  4248                                                          call    PlaceCursor                                     ;position the cursor
  4249                                                          jmp     .20                                             ;get next character
  4250                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4251                                                          jb      .20                                             ;no, get another character
  4252                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4253                                                          ja      .20                                             ;no, get another character
  4254                                                          stosb                                                   ;store character in buffer
  4255                                                          test    bh,1                                            ;echo to console?
  4256                                                          jz      .40                                             ;no, skip ahead
  4257                                                          call    PutConsoleChar                                  ;write character to console
  4258                                                          call    NextConsoleColumn                               ;advance console position
  4259                                                          call    PlaceCursor                                     ;position the cursor
  4260                                  .40                     dec     ecx                                             ;decrement remaining chars
  4261                                                          jmp     .10                                             ;next
  4262                                  .50                     xor     al,al                                           ;null
  4263                                                          stosb                                                   ;terminate buffer
  4264                                                          pop     es                                              ;restore non-volatile regs
  4265                                                          pop     edi                                             ;
  4266                                                          pop     esi                                             ;
  4267                                                          pop     ecx                                             ;
  4268                                                          ret                                                     ;return
  4269                                  ;-----------------------------------------------------------------------------------------------------------------------
  4270                                  ;
  4271                                  ;       Routine:        NextConsoleColumn
  4272                                  ;
  4273                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4274                                  ;                       incremented if the end of the current row is reached.
  4275                                  ;
  4276                                  ;       In:             DS      OS data selector
  4277                                  ;
  4278                                  ;-----------------------------------------------------------------------------------------------------------------------
  4279                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4280                                                          inc     al                                              ;increment column
  4281                                                          mov     [wbConsoleColumn],al                            ;save column
  4282                                                          cmp     al,ECONCOLS                                     ;end of row?
  4283                                                          jb      .10                                             ;no, skip ahead
  4284                                                          call    FirstConsoleColumn                              ;reset column to start of row
  4285                                                          call    NextConsoleRow                                  ;line feed to next row
  4286                                  .10                     ret                                                     ;return
  4287                                  ;-----------------------------------------------------------------------------------------------------------------------
  4288                                  ;
  4289                                  ;       Routine:        NextConsoleRow
  4290                                  ;
  4291                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4292                                  ;
  4293                                  ;       In:             DS      OS data selector
  4294                                  ;
  4295                                  ;-----------------------------------------------------------------------------------------------------------------------
  4296                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4297                                                          inc     al                                              ;increment row
  4298                                                          mov     [wbConsoleRow],al                               ;save row
  4299                                                          cmp     al,ECONROWS                                     ;end of screen?
  4300                                                          jb      .10                                             ;no, skip ahead
  4301                                                          call    ScrollConsoleRow                                ;scroll up one row
  4302                                                          mov     al,[wbConsoleRow]                               ;row
  4303                                                          dec     al                                              ;decrement row
  4304                                                          mov     [wbConsoleRow],al                               ;save row
  4305                                  .10                     ret                                                     ;return
  4306                                  ;-----------------------------------------------------------------------------------------------------------------------
  4307                                  ;
  4308                                  ;       Routine:        PreviousConsoleColumn
  4309                                  ;
  4310                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4311                                  ;                       the column is set to the last position in the row and the row is decremented.
  4312                                  ;
  4313                                  ;       In:             DS      OS data selector
  4314                                  ;
  4315                                  ;-----------------------------------------------------------------------------------------------------------------------
  4316                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4317                                                          or      al,al                                           ;start of row?
  4318                                                          jnz     .10                                             ;no, skip ahead
  4319                                                          mov     ah,[wbConsoleRow]                               ;current row
  4320                                                          or      ah,ah                                           ;top of screen?
  4321                                                          jz      .20                                             ;yes, exit with no change
  4322                                                          dec     ah                                              ;decrement row
  4323                                                          mov     [wbConsoleRow],ah                               ;save row
  4324                                                          mov     al,ECONCOLS                                     ;set maximum column
  4325                                  .10                     dec     al                                              ;decrement column
  4326                                                          mov     [wbConsoleColumn],al                            ;save column
  4327                                  .20                     ret                                                     ;return
  4328                                  ;-----------------------------------------------------------------------------------------------------------------------
  4329                                  ;
  4330                                  ;       Routine:        PutConsoleChar
  4331                                  ;
  4332                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4333                                  ;
  4334                                  ;       In:             AL      ASCII character
  4335                                  ;                       DS      OS data selector
  4336                                  ;
  4337                                  ;-----------------------------------------------------------------------------------------------------------------------
  4338                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4339                                                          push    es                                              ;
  4340                                                          push    EGDTCGA                                         ;load CGA selector ...
  4341                                                          pop     es                                              ;... into extra segment reg
  4342                                                          mov     cl,[wbConsoleColumn]                            ;column
  4343                                                          mov     ch,[wbConsoleRow]                               ;row
  4344                                                          call    SetConsoleChar                                  ;put character at row, column
  4345                                                          pop     es                                              ;restore non-volatile regs
  4346                                                          pop     ecx                                             ;
  4347                                                          ret                                                     ;return
  4348                                  ;-----------------------------------------------------------------------------------------------------------------------
  4349                                  ;
  4350                                  ;       Routine:        PutConsoleHexByte
  4351                                  ;
  4352                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4353                                  ;
  4354                                  ;       In:             AL      byte value
  4355                                  ;                       CL      column
  4356                                  ;                       CH      row
  4357                                  ;                       DS      OS data selector
  4358                                  ;                       ES      CGA selector
  4359                                  ;
  4360                                  ;-----------------------------------------------------------------------------------------------------------------------
  4361                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4362                                                          mov     bl,al                                           ;save byte value
  4363                                                          shr     al,4                                            ;hi-order nybble
  4364                                                          or      al,030h                                         ;apply ASCII zone
  4365                                                          cmp     al,03ah                                         ;numeric?
  4366                                                          jb      .10                                             ;yes, skip ahead
  4367                                                          add     al,7                                            ;add ASCII offset for alpha
  4368                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  4369                                                          mov     al,bl                                           ;byte value
  4370                                                          and     al,0fh                                          ;lo-order nybble
  4371                                                          or      al,30h                                          ;apply ASCII zone
  4372                                                          cmp     al,03ah                                         ;numeric?
  4373                                                          jb      .20                                             ;yes, skip ahead
  4374                                                          add     al,7                                            ;add ASCII offset for alpha
  4375                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  4376                                                          pop     ebx                                             ;restore non-volatile regs
  4377                                                          ret                                                     ;return
  4378                                  ;-----------------------------------------------------------------------------------------------------------------------
  4379                                  ;
  4380                                  ;       Routine:        PutConsoleHexDword
  4381                                  ;
  4382                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4383                                  ;
  4384                                  ;       In:             EAX     value
  4385                                  ;                       CL      column
  4386                                  ;                       CH      row
  4387                                  ;                       DS      OS data selector
  4388                                  ;                       ES      CGA selector
  4389                                  ;
  4390                                  ;-----------------------------------------------------------------------------------------------------------------------
  4391                                  PutConsoleHexDword      push    eax
  4392                                                          shr     eax,16
  4393                                                          call    PutConsoleHexWord
  4394                                                          pop     eax
  4395                                                          call    PutConsoleHexWord
  4396                                                          ret
  4397                                  ;-----------------------------------------------------------------------------------------------------------------------
  4398                                  ;
  4399                                  ;       Routine:        PutConsoleHexWord
  4400                                  ;
  4401                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4402                                  ;
  4403                                  ;       In:             EAX     value
  4404                                  ;                       CL      column
  4405                                  ;                       CH      row
  4406                                  ;                       DS      OS data selector
  4407                                  ;                       ES      CGA selector
  4408                                  ;
  4409                                  ;-----------------------------------------------------------------------------------------------------------------------
  4410                                  PutConsoleHexWord       push    eax
  4411                                                          shr     eax,8
  4412                                                          call    PutConsoleHexByte
  4413                                                          pop     eax
  4414                                                          call    PutConsoleHexByte
  4415                                                          ret
  4416                                  ;-----------------------------------------------------------------------------------------------------------------------
  4417                                  ;
  4418                                  ;       Routine:        PutConsoleOIAChar
  4419                                  ;
  4420                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4421                                  ;
  4422                                  ;       In:             DS      OS data selector
  4423                                  ;
  4424                                  ;-----------------------------------------------------------------------------------------------------------------------
  4425                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4426                                                          push    ecx                                             ;
  4427                                                          push    esi                                             ;
  4428                                                          push    ds                                              ;
  4429                                                          push    es                                              ;
  4430                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4431                                                          pop     ds                                              ;... into data segment register
  4432                                                          push    EGDTCGA                                         ;load CGA selector ...
  4433                                                          pop     es                                              ;... into extra segment register
  4434                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  4435                                                          mov     bh,ECONOIAROW                                   ;OIA row
  4436                                                          mov     bl,0                                            ;starting column
  4437                                                          mov     ecx,6                                           ;maximum scan codes
  4438                                  .10                     push    ecx                                             ;save remaining count
  4439                                                          mov     ecx,ebx                                         ;row, column
  4440                                                          lodsb                                                   ;read scan code
  4441                                                          or      al,al                                           ;scan code present?
  4442                                                          jz      .20                                             ;no, skip ahead
  4443                                                          call    PutConsoleHexByte                               ;display scan code
  4444                                                          jmp     .30                                             ;continue
  4445                                  .20                     mov     al,' '                                          ;ASCII space
  4446                                                          call    SetConsoleChar                                  ;display space
  4447                                                          mov     al,' '                                          ;ASCII space
  4448                                                          call    SetConsoleChar                                  ;display space
  4449                                  .30                     add     bl,2                                            ;next column (+2)
  4450                                                          pop     ecx                                             ;restore remaining
  4451                                                          loop    .10                                             ;next code
  4452                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  4453                                                          cmp     al,32                                           ;printable? (lower-bounds)
  4454                                                          jb      .40                                             ;no, skip ahead
  4455                                                          cmp     al,126                                          ;printable? (upper-bounds)
  4456                                                          ja      .40                                             ;no, skip ahead
  4457                                                          mov     ch,bh                                           ;OIA row
  4458                                                          mov     cl,40                                           ;character display column
  4459                                                          call    SetConsoleChar                                  ;display ASCII character
  4460                                  .40                     pop     es                                              ;restore non-volatile regs
  4461                                                          pop     ds                                              ;
  4462                                                          pop     esi                                             ;
  4463                                                          pop     ecx                                             ;
  4464                                                          pop     ebx                                             ;
  4465                                                          ret                                                     ;return
  4466                                  ;-----------------------------------------------------------------------------------------------------------------------
  4467                                  ;
  4468                                  ;       Routine:        PutConsoleOIAShift
  4469                                  ;
  4470                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4471                                  ;
  4472                                  ;       In:             BL      shift flags
  4473                                  ;                       BH      lock flags
  4474                                  ;                       DS      OS data selector
  4475                                  ;
  4476                                  ;-----------------------------------------------------------------------------------------------------------------------
  4477                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4478                                                          push    es                                              ;
  4479                                                          push    EGDTCGA                                         ;load CGA selector ...
  4480                                                          pop     es                                              ;... into ES register
  4481                                                          mov     ch,ECONOIAROW                                   ;OIA row
  4482                                                          mov     al,EASCIISPACE                                  ;space is default character
  4483                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4484                                                          jz      .10                                             ;no, skip ahead
  4485                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4486                                  .10                     mov     cl,14                                           ;indicator column
  4487                                                          call    SetConsoleChar                                  ;display ASCII character
  4488                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4489                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4490                                                          jz      .20                                             ;no, skip ahead
  4491                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4492                                  .20                     mov     cl,64                                           ;indicator column
  4493                                                          call    SetConsoleChar                                  ;display ASCII character
  4494                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4495                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4496                                                          jz      .30                                             ;no, skip ahead
  4497                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4498                                  .30                     mov     cl,15                                           ;indicator column
  4499                                                          call    SetConsoleChar                                  ;display ASCII character
  4500                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4501                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4502                                                          jz      .40                                             ;no, skip ahead
  4503                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4504                                  .40                     mov     cl,63                                           ;indicator column
  4505                                                          call    SetConsoleChar                                  ;display ASCII character
  4506                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4507                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4508                                                          jz      .50                                             ;no, skip ahead
  4509                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4510                                  .50                     mov     cl,16                                           ;indicator column
  4511                                                          call    SetConsoleChar                                  ;display ASCII character
  4512                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4513                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4514                                                          jz      .60                                             ;no, skip ahead
  4515                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  4516                                  .60                     mov     cl,62                                           ;indicator column
  4517                                                          call    SetConsoleChar                                  ;display ASCII character
  4518                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4519                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4520                                                          jz      .70                                             ;no, skip ahead
  4521                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  4522                                  .70                     mov     cl,78                                           ;indicator column
  4523                                                          call    SetConsoleChar                                  ;display ASCII character
  4524                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4525                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4526                                                          jz      .80                                             ;no, skip ahead
  4527                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  4528                                  .80                     mov     cl,77                                           ;indicator column
  4529                                                          call    SetConsoleChar                                  ;display ASCII character
  4530                                                          mov     al,EASCIISPACE                                  ;ASCII space
  4531                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4532                                                          jz      .90                                             ;no, skip ahead
  4533                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  4534                                  .90                     mov     cl,76                                           ;indicator column
  4535                                                          call    SetConsoleChar                                  ;display ASCII character
  4536                                                          pop     es                                              ;restore non-volatile regs
  4537                                                          pop     ecx                                             ;
  4538                                                          ret                                                     ;return
  4539                                  ;-----------------------------------------------------------------------------------------------------------------------
  4540                                  ;
  4541                                  ;       Routine:        PutConsoleString
  4542                                  ;
  4543                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4544                                  ;                       console position as needed.
  4545                                  ;
  4546                                  ;       In:             EDX     source address
  4547                                  ;                       DS      OS data selector
  4548                                  ;
  4549                                  ;-----------------------------------------------------------------------------------------------------------------------
  4550                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  4551                                                          mov     esi,edx                                         ;source address
  4552                                                          cld                                                     ;forward strings
  4553                                  .10                     lodsb                                                   ;ASCII character
  4554                                                          or      al,al                                           ;end of string?
  4555                                                          jz      .40                                             ;yes, skip ahead
  4556                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  4557                                                          jne     .20                                             ;no, skip ahead
  4558                                                          call    FirstConsoleColumn                              ;move to start of row
  4559                                                          jmp     .10                                             ;next character
  4560                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4561                                                          jne     .30                                             ;no, skip ahead
  4562                                                          call    NextConsoleRow                                  ;move to next row
  4563                                                          jmp     .10                                             ;next character
  4564                                  .30                     call    PutConsoleChar                                  ;output character to console
  4565                                                          call    NextConsoleColumn                               ;advance to next column
  4566                                                          jmp     .10                                             ;next character
  4567                                  .40                     pop     esi                                             ;restore non-volatile regs
  4568                                                          ret                                                     ;return
  4569                                  ;-----------------------------------------------------------------------------------------------------------------------
  4570                                  ;
  4571                                  ;       Routine:        Yield
  4572                                  ;
  4573                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4574                                  ;
  4575                                  ;-----------------------------------------------------------------------------------------------------------------------
  4576                                  Yield                   sti                                                     ;enable maskagle interrupts
  4577                                                          hlt                                                     ;halt until external interrupt
  4578                                                          ret                                                     ;return
  4579                                  ;=======================================================================================================================
  4580                                  ;
  4581                                  ;       Data-Type Conversion Helper Routines
  4582                                  ;
  4583                                  ;       DecimalToUnsigned
  4584                                  ;       HexadecimalToUnsigned
  4585                                  ;       UnsignedToDecimalString
  4586                                  ;       UnsignedToHexadecimal
  4587                                  ;
  4588                                  ;=======================================================================================================================
  4589                                  ;-----------------------------------------------------------------------------------------------------------------------
  4590                                  ;
  4591                                  ;       Routine:        DecimalToUnsigned
  4592                                  ;
  4593                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4594                                  ;
  4595                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4596                                  ;
  4597                                  ;       Output:         EAX     unsigned integer value
  4598                                  ;
  4599                                  ;-----------------------------------------------------------------------------------------------------------------------
  4600                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4601                                                          mov     esi,edx                                         ;source address
  4602                                                          xor     edx,edx                                         ;zero total
  4603                                  .10                     lodsb                                                   ;source byte
  4604                                                          cmp     al,','                                          ;comma?
  4605                                                          je      .10                                             ;yes, ignore
  4606                                                          test    al,al                                           ;end of string?
  4607                                                          jz      .30                                             ;yes, done
  4608                                                          cmp     al,'.'                                          ;decimal point?
  4609                                                          je      .30                                             ;yes, done
  4610                                                          cmp     al,'0'                                          ;numeral?
  4611                                                          jb      .20                                             ;no, invalid string
  4612                                                          cmp     al,'9'                                          ;numeral?
  4613                                                          ja      .20                                             ;no, invalid string
  4614                                                          and     al,00Fh                                         ;mask ASCII zone
  4615                                                          push    eax                                             ;save numeral
  4616                                                          shl     edx,1                                           ;total * 2
  4617                                                          mov     eax,edx                                         ;total * 2
  4618                                                          shl     edx,2                                           ;total * 8
  4619                                                          add     edx,eax                                         ;total * 10
  4620                                                          pop     eax                                             ;restore numeral
  4621                                                          add     edx,eax                                         ;accumulate decimal digit
  4622                                                          xor     eax,eax                                         ;zero register
  4623                                                          jmp     .10                                             ;next
  4624                                  .20                     xor     edx,edx                                         ;zero result on error
  4625                                  .30                     mov     eax,edx                                         ;result
  4626                                                          pop     esi                                             ;restore non-volatile regs
  4627                                                          ret                                                     ;return
  4628                                  ;-----------------------------------------------------------------------------------------------------------------------
  4629                                  ;
  4630                                  ;       Routine:        HexadecimalToUnsigned
  4631                                  ;
  4632                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4633                                  ;
  4634                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4635                                  ;
  4636                                  ;       Output:         EAX     unsigned integer value
  4637                                  ;
  4638                                  ;-----------------------------------------------------------------------------------------------------------------------
  4639                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4640                                                          mov     esi,edx                                         ;source address
  4641                                                          xor     edx,edx                                         ;zero register
  4642                                  .10                     lodsb                                                   ;source byte
  4643                                                          test    al,al                                           ;end of string?
  4644                                                          jz      .30                                             ;yes, branch
  4645                                                          cmp     al,'9'                                          ;hexadecimal?
  4646                                                          jna     .20                                             ;no, skip ahead
  4647                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4648                                  .20                     and     eax,0fh                                         ;remove ascii zone
  4649                                                          shl     edx,4                                           ;previous total x 16
  4650                                                          add     edx,eax                                         ;add prior value x 16
  4651                                                          jmp     .10                                             ;next
  4652                                  .30                     mov     eax,edx                                         ;result
  4653                                                          pop     esi                                             ;restore non-volatile regs
  4654                                                          ret                                                     ;return
  4655                                  ;-----------------------------------------------------------------------------------------------------------------------
  4656                                  ;
  4657                                  ;       Routine:        UnsignedToDecimalString
  4658                                  ;
  4659                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4660                                  ;
  4661                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4662                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4663                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4664                                  ;                       ECX     32-bit binary
  4665                                  ;                       DS:EDX  output buffer address
  4666                                  ;
  4667                                  ;-----------------------------------------------------------------------------------------------------------------------
  4668                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4669                                                          push    ecx                                             ;
  4670                                                          push    edi                                             ;
  4671                                                          push    es                                              ;
  4672                                                          push    ds                                              ;load data selector
  4673                                                          pop     es                                              ;... into extra segment reg
  4674                                                          mov     edi,edx                                         ;output buffer address
  4675                                                          and     bh,00001111b                                    ;zero internal flags
  4676                                                          mov     edx,ecx                                         ;binary
  4677                                                          mov     ecx,1000000000                                  ;10^9 divisor
  4678                                                          call    .30                                             ;divide and store
  4679                                                          mov     ecx,100000000                                   ;10^8 divisor
  4680                                                          call    .10                                             ;divide and store
  4681                                                          mov     ecx,10000000                                    ;10^7 divisor
  4682                                                          call    .30                                             ;divide and store
  4683                                                          mov     ecx,1000000                                     ;10^6 divisor
  4684                                                          call    .30                                             ;divide and store
  4685                                                          mov     ecx,100000                                      ;10^5 divisor
  4686                                                          call    .10                                             ;divide and store
  4687                                                          mov     ecx,10000                                       ;10^4 divisor
  4688                                                          call    .30                                             ;divide and store
  4689                                                          mov     ecx,1000                                        ;10^3 divisor
  4690                                                          call    .30                                             ;divide and store
  4691                                                          mov     ecx,100                                         ;10^2 divisor
  4692                                                          call    .10                                             ;divide and store
  4693                                                          mov     ecx,10                                          ;10^2 divisor
  4694                                                          call    .30                                             ;divide and store
  4695                                                          mov     eax,edx                                         ;10^1 remainder
  4696                                                          call    .40                                             ;store
  4697                                                          xor     al,al                                           ;null terminator
  4698                                                          stosb
  4699                                                          pop     es                                              ;restore non-volatile regs
  4700                                                          pop     edi                                             ;
  4701                                                          pop     ecx                                             ;
  4702                                                          pop     ebx                                             ;
  4703                                                          ret                                                     ;return
  4704                                  .10                     test    bh,00000010b                                    ;comma group delims?
  4705                                                          jz      .30                                             ;no, branch
  4706                                                          test    bh,00000001b                                    ;trim leading zeros?
  4707                                                          jz      .20                                             ;no, store delim
  4708                                                          test    bh,00010000b                                    ;non-zero found?
  4709                                                          jz      .30                                             ;no, branch
  4710                                  .20                     mov     al,','                                          ;delimiter
  4711                                                          stosb                                                   ;store delimiter
  4712                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  4713                                                          xor     edx,edx                                         ;zero hi-order
  4714                                                          div     ecx                                             ;divide by power of 10
  4715                                                          test    al,al                                           ;zero?
  4716                                                          jz      .50                                             ;yes, branch
  4717                                                          or      bh,00010000b                                    ;non-zero found
  4718                                  .40                     or      al,30h                                          ;ASCII zone
  4719                                                          stosb                                                   ;store digit
  4720                                                          ret                                                     ;return
  4721                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4722                                                          jz      .40                                             ;no, store and continue
  4723                                                          test    bh,00010000b                                    ;non-zero found?
  4724                                                          jnz     .40                                             ;yes, store and continue
  4725                                                          ret                                                     ;return
  4726                                  ;-----------------------------------------------------------------------------------------------------------------------
  4727                                  ;
  4728                                  ;       Routine:        UnsignedToHexadecimal
  4729                                  ;
  4730                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4731                                  ;
  4732                                  ;       Input:          DS:EDX  output buffer address
  4733                                  ;                       ECX     32-bit binary
  4734                                  ;
  4735                                  ;-----------------------------------------------------------------------------------------------------------------------
  4736                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4737                                                          mov     edi,edx                                         ;output buffer address
  4738                                                          mov     edx,ecx                                         ;32-bit unsigned
  4739                                                          xor     ecx,ecx                                         ;zero register
  4740                                                          mov     cl,8                                            ;nybble count
  4741                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4742                                                          mov     al,dl                                           ;????bbbb
  4743                                                          and     al,0fh                                          ;mask out bits 4-7
  4744                                                          or      al,30h                                          ;mask in ascii zone
  4745                                                          cmp     al,3ah                                          ;A through F?
  4746                                                          jb      .20                                             ;no, skip ahead
  4747                                                          add     al,7                                            ;41h through 46h
  4748                                  .20                     stosb                                                   ;store hexnum
  4749                                                          loop    .10                                             ;next nybble
  4750                                                          xor     al,al                                           ;zero reg
  4751                                                          stosb                                                   ;null terminate
  4752                                                          pop     edi                                             ;restore non-volatile regs
  4753                                                          ret                                                     ;return
  4754                                  ;=======================================================================================================================
  4755                                  ;
  4756                                  ;       Message Queue Helper Routines
  4757                                  ;
  4758                                  ;       GetMessage
  4759                                  ;       PutMessage
  4760                                  ;
  4761                                  ;=======================================================================================================================
  4762                                  ;-----------------------------------------------------------------------------------------------------------------------
  4763                                  ;
  4764                                  ;       Routine:        GetMessage
  4765                                  ;
  4766                                  ;       Description:    This routine reads and removes a message from the message queue.
  4767                                  ;
  4768                                  ;       Out:            EAX     lo-order message data
  4769                                  ;                       EDX     hi-order message data
  4770                                  ;
  4771                                  ;                       CY      0 = message read
  4772                                  ;                               1 = no message to read
  4773                                  ;
  4774                                  ;-----------------------------------------------------------------------------------------------------------------------
  4775                                  GetMessage              push    ebx                                             ;save non-volatile regs
  4776                                                          push    ecx                                             ;
  4777                                                          push    ds                                              ;
  4778                                                          push    ELDTMQ                                          ;load message queue selector ...
  4779                                                          pop     ds                                              ;... into data segment register
  4780                                                          mov     ebx,[MQHead]                                    ;head ptr
  4781                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  4782                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4783                                                          or      eax,edx                                         ;is queue empty?
  4784                                                          stc                                                     ;assume queue is emtpy
  4785                                                          jz      .20                                             ;yes, skip ahead
  4786                                                          xor     ecx,ecx                                         ;store zero
  4787                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  4788                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4789                                                          add     ebx,8                                           ;next queue element
  4790                                                          and     ebx,03fch                                       ;at end of queue?
  4791                                                          jnz     .10                                             ;no, skip ahead
  4792                                                          mov     bl,8                                            ;reset to 1st entry
  4793                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4794                                                          clc                                                     ;indicate message read
  4795                                  .20                     pop     ds                                              ;restore non-volatile regs
  4796                                                          pop     ecx                                             ;
  4797                                                          pop     ebx                                             ;
  4798                                                          ret                                                     ;return
  4799                                  ;-----------------------------------------------------------------------------------------------------------------------
  4800                                  ;
  4801                                  ;       Routine:        PutMessage
  4802                                  ;
  4803                                  ;       Description:    This routine adda a message to the message queue.
  4804                                  ;
  4805                                  ;       In:             ECX     hi-order data word
  4806                                  ;                       EDX     lo-order data word
  4807                                  ;
  4808                                  ;       Out:            CY      0 = success
  4809                                  ;                               1 = fail: queue is full
  4810                                  ;
  4811                                  ;-----------------------------------------------------------------------------------------------------------------------
  4812                                  PutMessage              push    ds                                              ;save non-volatile regs
  4813                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4814                                                          pop     ds                                              ;... into data segment register
  4815                                                          mov     eax,[MQTail]                                    ;tail ptr
  4816                                                          cmp     dword [eax],0                                   ;is queue full?
  4817                                                          stc                                                     ;assume failure
  4818                                                          jne     .20                                             ;yes, cannot store
  4819                                                          mov     [eax],edx                                       ;store lo-order data
  4820                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4821                                                          add     eax,8                                           ;next queue element adr
  4822                                                          and     eax,03fch                                       ;at end of queue?
  4823                                                          jnz     .10                                             ;no, skip ahead
  4824                                                          mov     al,8                                            ;reset to top of queue
  4825                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4826                                                          clc                                                     ;indicate success
  4827                                  .20                     pop     ds                                              ;restore non-volatile regs
  4828                                                          ret                                                     ;return
  4829                                  ;=======================================================================================================================
  4830                                  ;
  4831                                  ;       Memory-Mapped Video Routines
  4832                                  ;
  4833                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4834                                  ;
  4835                                  ;       ClearConsoleScreen
  4836                                  ;       ScrollConsoleRow
  4837                                  ;       SetConsoleChar
  4838                                  ;       SetConsoleString
  4839                                  ;
  4840                                  ;=======================================================================================================================
  4841                                  ;-----------------------------------------------------------------------------------------------------------------------
  4842                                  ;
  4843                                  ;       Routine:        ClearConsoleScreen
  4844                                  ;
  4845                                  ;       Description:    This routine clears the console (CGA) screen.
  4846                                  ;
  4847                                  ;-----------------------------------------------------------------------------------------------------------------------
  4848                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4849                                                          push    edi                                             ;
  4850                                                          push    ds                                              ;
  4851                                                          push    es                                              ;
  4852                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4853                                                          pop     ds                                              ;... into DS register
  4854                                                          push    EGDTCGA                                         ;load CGA selector ...
  4855                                                          pop     es                                              ;... into ES register
  4856                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4857                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4858                                                          xor     edi,edi                                         ;target offset
  4859                                                          cld                                                     ;forward strings
  4860                                                          rep     stosd                                           ;reset screen body
  4861                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4862                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4863                                                          rep     stosd                                           ;reset OIA line
  4864                                                          xor     al,al                                           ;zero register
  4865                                                          mov     [wbConsoleRow],al                               ;reset console row
  4866                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4867                                                          call    PlaceCursor                                     ;place cursor at current position
  4868                                                          pop     es                                              ;restore non-volatile regs
  4869                                                          pop     ds                                              ;
  4870                                                          pop     edi                                             ;
  4871                                                          pop     ecx                                             ;
  4872                                                          ret                                                     ;return
  4873                                  ;-----------------------------------------------------------------------------------------------------------------------
  4874                                  ;
  4875                                  ;       Routine:        ScrollConsoleRow
  4876                                  ;
  4877                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4878                                  ;
  4879                                  ;-----------------------------------------------------------------------------------------------------------------------
  4880                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4881                                                          push    esi                                             ;
  4882                                                          push    edi                                             ;
  4883                                                          push    ds                                              ;
  4884                                                          push    es                                              ;
  4885                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4886                                                          pop     ds                                              ;... into DS
  4887                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4888                                                          pop     es                                              ;... into ES
  4889                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4890                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4891                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4892                                                          cld                                                     ;forward strings
  4893                                                          rep     movsd                                           ;move 24 lines up
  4894                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4895                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4896                                                          rep     stosd                                           ;clear bottom row
  4897                                                          pop     es                                              ;restore non-volatile regs
  4898                                                          pop     ds                                              ;
  4899                                                          pop     edi                                             ;
  4900                                                          pop     esi                                             ;
  4901                                                          pop     ecx                                             ;
  4902                                                          ret                                                     ;return
  4903                                  ;-----------------------------------------------------------------------------------------------------------------------
  4904                                  ;
  4905                                  ;       Routine:        SetConsoleChar
  4906                                  ;
  4907                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4908                                  ;
  4909                                  ;       In:             AL      ASCII character
  4910                                  ;                       CL      column
  4911                                  ;                       CH      row
  4912                                  ;                       ES      CGA selector
  4913                                  ;
  4914                                  ;       Out:            EAX     last target address written (ES:)
  4915                                  ;                       CL      column + 1
  4916                                  ;
  4917                                  ;-----------------------------------------------------------------------------------------------------------------------
  4918                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4919                                                          movzx   eax,ch                                          ;row
  4920                                                          mov     ah,ECONCOLS                                     ;cols/row
  4921                                                          mul     ah                                              ;row * cols/row
  4922                                                          add     al,cl                                           ;add column
  4923                                                          adc     ah,0                                            ;handle carry
  4924                                                          shl     eax,1                                           ;screen offset
  4925                                                          mov     [es:eax],dl                                     ;store character
  4926                                                          inc     cl                                              ;next column
  4927                                                          ret                                                     ;return
  4928                                  ;-----------------------------------------------------------------------------------------------------------------------
  4929                                  ;
  4930                                  ;       Routine:        SetConsoleString
  4931                                  ;
  4932                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4933                                  ;
  4934                                  ;       In:             ESI     source offset (DS:)
  4935                                  ;                       CL      column
  4936                                  ;                       CH      row
  4937                                  ;                       ES      CGA selector
  4938                                  ;
  4939                                  ;-----------------------------------------------------------------------------------------------------------------------
  4940                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4941                                                          cld                                                     ;forward strings
  4942                                  .10                     lodsb                                                   ;next ASCII character
  4943                                                          test    al,al                                           ;end of string?
  4944                                                          jz      .20                                             ;yes, branch
  4945                                                          call    SetConsoleChar                                  ;store character
  4946                                                          jmp     .10                                             ;continue
  4947                                  .20                     pop     esi                                             ;restore non-volatile regs
  4948                                                          ret                                                     ;return
  4949                                  ;=======================================================================================================================
  4950                                  ;
  4951                                  ;       Input/Output Routines
  4952                                  ;
  4953                                  ;       These routines read and/or write directly to ports.
  4954                                  ;
  4955                                  ;       GetBaseMemSize
  4956                                  ;       GetExtendedMemSize
  4957                                  ;       GetROMMemSize
  4958                                  ;       PlaceCursor
  4959                                  ;       PutPrimaryEndOfInt
  4960                                  ;       PutSecondaryEndOfInt
  4961                                  ;       ReadRealTimeClock
  4962                                  ;       ResetSystem
  4963                                  ;       SetKeyboardLamps
  4964                                  ;       WaitForKeyInBuffer
  4965                                  ;       WaitForKeyOutBuffer
  4966                                  ;
  4967                                  ;=======================================================================================================================
  4968                                  ;-----------------------------------------------------------------------------------------------------------------------
  4969                                  ;
  4970                                  ;       Routine:        GetBaseMemSize
  4971                                  ;
  4972                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4973                                  ;
  4974                                  ;       Output:         EAX     base RAM size in bytes
  4975                                  ;
  4976                                  ;-----------------------------------------------------------------------------------------------------------------------
  4977                                  GetBaseMemSize          xor     eax,eax                                         ;zero register
  4978                                                          mov     al,ERTCBASERAMHI                                ;base RAM high register
  4979                                                          out     ERTCREGPORT,al                                  ;select base RAM high register
  4980                                                          in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4981                                                          mov     ah,al                                           ;save base RAM high
  4982                                                          mov     al,ERTCBASERAMLO                                ;base RAM low register
  4983                                                          out     ERTCREGPORT,al                                  ;select base RAM low register
  4984                                                          in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4985                                                          ret                                                     ;return to caller
  4986                                  ;-----------------------------------------------------------------------------------------------------------------------
  4987                                  ;
  4988                                  ;       Routine:        GetExtendedMemSize
  4989                                  ;
  4990                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4991                                  ;
  4992                                  ;       Output:         EAX     extended RAM size in bytes
  4993                                  ;
  4994                                  ;-----------------------------------------------------------------------------------------------------------------------
  4995                                  GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4996                                                          mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4997                                                          out     ERTCREGPORT,al                                  ;select extended RAM high register
  4998                                                          in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4999                                                          mov     ah,al                                           ;save extended RAM high
  5000                                                          mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  5001                                                          out     ERTCREGPORT,al                                  ;select extended RAM low register
  5002                                                          in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  5003                                                          ret                                                     ;return to caller
  5004                                  ;-----------------------------------------------------------------------------------------------------------------------
  5005                                  ;
  5006                                  ;       Routine:        GetROMMemSize
  5007                                  ;
  5008                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  5009                                  ;
  5010                                  ;       Output:         EAX     RAM size in bytes
  5011                                  ;
  5012                                  ;-----------------------------------------------------------------------------------------------------------------------
  5013                                  GetROMMemSize           xor     eax,eax                                         ;zero register
  5014                                                          mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  5015                                                          ret                                                     ;return
  5016                                  ;-----------------------------------------------------------------------------------------------------------------------
  5017                                  ;
  5018                                  ;       Routine:        PlaceCursor
  5019                                  ;
  5020                                  ;       Description:    This routine positions the cursor on the console.
  5021                                  ;
  5022                                  ;       In:             DS      OS data selector
  5023                                  ;
  5024                                  ;-----------------------------------------------------------------------------------------------------------------------
  5025                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  5026                                                          mov     al,[wbConsoleRow]                               ;AL = row
  5027                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  5028                                                          mul     ah                                              ;row offset
  5029                                                          add     al,[wbConsoleColumn]                            ;add column
  5030                                                          adc     ah,0                                            ;add overflow
  5031                                                          mov     ecx,eax                                         ;screen offset
  5032                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  5033                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  5034                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  5035                                                          out     dx,al                                           ;select register
  5036                                                          inc     edx                                             ;data port
  5037                                                          mov     al,ch                                           ;hi-order cursor loc
  5038                                                          out     dx,al                                           ;store hi-order loc
  5039                                                          dec     edx                                             ;register select port
  5040                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  5041                                                          out     dx,al                                           ;select register
  5042                                                          inc     edx                                             ;data port
  5043                                                          mov     al,cl                                           ;lo-order cursor loc
  5044                                                          out     dx,al                                           ;store lo-order loc
  5045                                                          pop     ecx                                             ;restore non-volatile regs
  5046                                                          ret                                                     ;return
  5047                                  ;-----------------------------------------------------------------------------------------------------------------------
  5048                                  ;
  5049                                  ;       Routine:        PutPrimaryEndOfInt
  5050                                  ;
  5051                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  5052                                  ;
  5053                                  ;-----------------------------------------------------------------------------------------------------------------------
  5054                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  5055                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5056                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  5057                                                          ret                                                     ;return
  5058                                  ;-----------------------------------------------------------------------------------------------------------------------
  5059                                  ;
  5060                                  ;       Routine:        PutSecondaryEndOfInt
  5061                                  ;
  5062                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  5063                                  ;
  5064                                  ;-----------------------------------------------------------------------------------------------------------------------
  5065                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  5066                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  5067                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  5068                                                          ret                                                     ;return
  5069                                  ;-----------------------------------------------------------------------------------------------------------------------
  5070                                  ;
  5071                                  ;       Routine:        ReadRealTimeClock
  5072                                  ;
  5073                                  ;       Description:    This routine gets current date time from the real-time clock.
  5074                                  ;
  5075                                  ;       In:             DS:EBX  DATETIME structure
  5076                                  ;
  5077                                  ;-----------------------------------------------------------------------------------------------------------------------
  5078                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  5079                                                          push    edi                                             ;
  5080                                                          push    es                                              ;
  5081                                                          push    ds                                              ;store data selector ...
  5082                                                          pop     es                                              ;... in es register
  5083                                                          mov     edi,ebx                                         ;date-time structure
  5084                                                          mov     al,ERTCSECONDREG                                ;second register
  5085                                                          out     ERTCREGPORT,al                                  ;select second register
  5086                                                          in      al,ERTCDATAPORT                                 ;read second register
  5087                                                          cld                                                     ;forward strings
  5088                                                          stosb                                                   ;store second value
  5089                                                          mov     al,ERTCMINUTEREG                                ;minute register
  5090                                                          out     ERTCREGPORT,al                                  ;select minute register
  5091                                                          in      al,ERTCDATAPORT                                 ;read minute register
  5092                                                          stosb                                                   ;store minute value
  5093                                                          mov     al,ERTCHOURREG                                  ;hour register
  5094                                                          out     ERTCREGPORT,al                                  ;select hour register
  5095                                                          in      al,ERTCDATAPORT                                 ;read hour register
  5096                                                          stosb                                                   ;store hour value
  5097                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  5098                                                          out     ERTCREGPORT,al                                  ;select weekday register
  5099                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  5100                                                          stosb                                                   ;store weekday value
  5101                                                          mov     al,ERTCDAYREG                                   ;day register
  5102                                                          out     ERTCREGPORT,al                                  ;select day register
  5103                                                          in      al,ERTCDATAPORT                                 ;read day register
  5104                                                          stosb                                                   ;store day value
  5105                                                          mov     al,ERTCMONTHREG                                 ;month register
  5106                                                          out     ERTCREGPORT,al                                  ;select month register
  5107                                                          in      al,ERTCDATAPORT                                 ;read month register
  5108                                                          stosb                                                   ;store month value
  5109                                                          mov     al,ERTCYEARREG                                  ;year register
  5110                                                          out     ERTCREGPORT,al                                  ;select year register
  5111                                                          in      al,ERTCDATAPORT                                 ;read year register
  5112                                                          stosb                                                   ;store year value
  5113                                                          mov     al,ERTCCENTURYREG                               ;century register
  5114                                                          out     ERTCREGPORT,al                                  ;select century register
  5115                                                          in      al,ERTCDATAPORT                                 ;read century register
  5116                                                          stosb                                                   ;store century value
  5117                                                          mov     al,ERTCSTATUSREG                                ;status register
  5118                                                          out     ERTCREGPORT,al                                  ;select status register
  5119                                                          in      al,ERTCDATAPORT                                 ;read status register
  5120                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  5121                                                          jnz     .20                                             ;skip ahead if binary values
  5122                                                          mov     esi,ebx                                         ;date-time structure address
  5123                                                          mov     edi,ebx                                         ;date-time structure address
  5124                                                          mov     ecx,8                                           ;loop counter
  5125                                  .10                     lodsb                                                   ;BCD value
  5126                                                          mov     ah,al                                           ;BCD value
  5127                                                          and     al,00001111b                                    ;low-order decimal zone
  5128                                                          and     ah,11110000b                                    ;hi-order decimal zone
  5129                                                          shr     ah,1                                            ;hi-order decimal * 8
  5130                                                          add     al,ah                                           ;low-order + hi-order * 8
  5131                                                          shr     ah,2                                            ;hi-order decimal * 2
  5132                                                          add     al,ah                                           ;low-order + hi-order * 10
  5133                                                          stosb                                                   ;replace BCD with binary
  5134                                                          loop    .10                                             ;next value
  5135                                  .20                     pop     es                                              ;restore non-volatile regs
  5136                                                          pop     edi                                             ;
  5137                                                          pop     esi                                             ;
  5138                                                          ret                                                     ;return
  5139                                  ;-----------------------------------------------------------------------------------------------------------------------
  5140                                  ;
  5141                                  ;       Routine:        ResetSystem
  5142                                  ;
  5143                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5144                                  ;
  5145                                  ;       Out:            N/A     This routine does not return.
  5146                                  ;
  5147                                  ;-----------------------------------------------------------------------------------------------------------------------
  5148                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5149                                                          loop    $                                               ;clear interrupts
  5150                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5151                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5152                                  .10                     sti                                                     ;enable maskable interrupts
  5153                                                          hlt                                                     ;halt until interrupt
  5154                                                          jmp     .10                                             ;repeat until reset kicks in
  5155                                  ;-----------------------------------------------------------------------------------------------------------------------
  5156                                  ;
  5157                                  ;       Routine:        SetKeyboardLamps
  5158                                  ;
  5159                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5160                                  ;
  5161                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5162                                  ;
  5163                                  ;-----------------------------------------------------------------------------------------------------------------------
  5164                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5165                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5166                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  5167                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5168                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5169                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5170                                                          mov     al,bh                                           ;set/reset lamps value
  5171                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  5172                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5173                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5174                                                          ret                                                     ;return
  5175                                  ;-----------------------------------------------------------------------------------------------------------------------
  5176                                  ;
  5177                                  ;       Routine:        WaitForKeyInBuffer
  5178                                  ;
  5179                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5180                                  ;
  5181                                  ;       Out:            ZF      1 = Input buffer ready
  5182                                  ;                               0 = Input buffer not ready after timeout
  5183                                  ;
  5184                                  ;-----------------------------------------------------------------------------------------------------------------------
  5185                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5186                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5187                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5188                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  5189                                                          loopnz  .10                                             ;yes, repeat till timeout
  5190                                                          pop     ecx                                             ;restore non-volatile regs
  5191                                                          ret                                                     ;return
  5192                                  ;-----------------------------------------------------------------------------------------------------------------------
  5193                                  ;
  5194                                  ;       Routine:        WaitForKeyOutBuffer
  5195                                  ;
  5196                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5197                                  ;
  5198                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5199                                  ;                               0 = Output buffer empty after timeout
  5200                                  ;
  5201                                  ;-----------------------------------------------------------------------------------------------------------------------
  5202                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5203                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5204                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5205                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  5206                                                          loopz   .10                                             ;loop until output buffer bit
  5207                                                          pop     ecx                                             ;restore non-volatile regs
  5208                                                          ret                                                     ;return
  5209                                  ;-----------------------------------------------------------------------------------------------------------------------
  5210                                  ;
  5211                                  ;       End of the Kernel Function Library
  5212                                  ;
  5213                                  ;-----------------------------------------------------------------------------------------------------------------------
  5214                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  5215                                  ;=======================================================================================================================
  5216                                  ;
  5217                                  ;       Console Task
  5218                                  ;
  5219                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5220                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5221                                  ;       screen and responds to user commands.
  5222                                  ;
  5223                                  ;=======================================================================================================================
  5224                                  ;-----------------------------------------------------------------------------------------------------------------------
  5225                                  ;
  5226                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5227                                  ;
  5228                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5229                                  ;
  5230                                  ;-----------------------------------------------------------------------------------------------------------------------
  5231                                  section                 constack                                                ;console task stack
  5232                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  5233                                  ;-----------------------------------------------------------------------------------------------------------------------
  5234                                  ;
  5235                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5236                                  ;
  5237                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5238                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5239                                  ;       16 descriptors. Six are initially defined.
  5240                                  ;
  5241                                  ;-----------------------------------------------------------------------------------------------------------------------
  5242                                  section                 conldt                                                  ;console local descriptors
  5243                                                          dq      004093004780007Fh                               ;04 TSS alias
  5244                                                          dq      004093004700007Fh                               ;0c LDT alias
  5245                                                          dq      00409300400006FFh                               ;14 stack
  5246                                                          dq      00CF93000000FFFFh                               ;1c data
  5247                                                          dq      00409B0050000FFFh                               ;24 code
  5248                                                          dq      00409300480007FFh                               ;2c message queue
  5249                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5250                                  ;-----------------------------------------------------------------------------------------------------------------------
  5251                                  ;
  5252                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5253                                  ;
  5254                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5255                                  ;       segment. CS to console code.
  5256                                  ;
  5257                                  ;-----------------------------------------------------------------------------------------------------------------------
  5258                                  section                 contss                                                  ;console task state segment
  5259                                                          dd      0                                               ;00 back-link tss
  5260                                                          dd      0700h                                           ;04 esp ring 0
  5261                                                          dd      0014h                                           ;08 ss ring 0
  5262                                                          dd      0700h                                           ;0c esp ring 1
  5263                                                          dd      0014h                                           ;10 es ring 1
  5264                                                          dd      0700h                                           ;14 esp ring 2
  5265                                                          dd      0014h                                           ;18 ss ring 2
  5266                                                          dd      0                                               ;1c cr ring 3
  5267                                                          dd      0                                               ;20 eip
  5268                                                          dd      0200h                                           ;24 eflags
  5269                                                          dd      0                                               ;28 eax
  5270                                                          dd      0                                               ;2c ecx
  5271                                                          dd      0                                               ;30 edx
  5272                                                          dd      0                                               ;34 ebx
  5273                                                          dd      0700h                                           ;38 esp ring 3
  5274                                                          dd      0                                               ;3c ebp
  5275                                                          dd      0                                               ;40 esi
  5276                                                          dd      0                                               ;44 edi
  5277                                                          dd      001Ch                                           ;48 es
  5278                                                          dd      0024h                                           ;4c cs
  5279                                                          dd      0014h                                           ;50 ss ring 3
  5280                                                          dd      001Ch                                           ;54 ds
  5281                                                          dd      0                                               ;58 fs
  5282                                                          dd      0                                               ;5c gs
  5283                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5284                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  5285                                  ;-----------------------------------------------------------------------------------------------------------------------
  5286                                  ;
  5287                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5288                                  ;
  5289                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5290                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5291                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5292                                  ;       event.
  5293                                  ;
  5294                                  ;-----------------------------------------------------------------------------------------------------------------------
  5295                                  section                 conmque                                                 ;console message queue
  5296                                                          dd      8                                               ;head pointer
  5297                                                          dd      8                                               ;tail pointer
  5298                                                          times   510 dd 0                                        ;queue elements
  5299                                  ;-----------------------------------------------------------------------------------------------------------------------
  5300                                  ;
  5301                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5302                                  ;
  5303                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5304                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5305                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5306                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5307                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5308                                  ;       board input, echoing to the console screen and responding to user commands.
  5309                                  ;
  5310                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5311                                  ;
  5312                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5313                                  ;                               |  Real Mode Interrupt Vectors                  |
  5314                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5315                                  ;                               |  Reserved BIOS Memory Area                    |
  5316                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5317                                  ;                               |  Shared Kernel Memory Area                    |
  5318                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5319                                  ;                               |  Global Descriptor Table (GDT)                |
  5320                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5321                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5322                                  ;                       002000  +-----------------------------------------------+
  5323                                  ;                               |  Interrupt Handlers                           |
  5324                                  ;                               |  Kernel Function Library                      |
  5325                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5326                                  ;                               |  Console Task Stack Area                      |
  5327                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5328                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5329                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5330                                  ;                               |  Console Task Task State Segment (TSS)        |
  5331                                  ;                       004800  +-----------------------------------------------+
  5332                                  ;                               |  Console Task Message Queue                   |
  5333                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5334                                  ;                               |  Console Task Code                            |
  5335                                  ;                               |  Console Task Constants                       |
  5336                                  ;                       006000  +===============================================+
  5337                                  ;
  5338                                  ;-----------------------------------------------------------------------------------------------------------------------
  5339                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5340                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  5341                                  
  5342                                                          clearConsoleScreen                                      ;clear the console screen
  5343                                                          putConsoleString czTitle                                ;display startup message
  5344                                                          putConsoleString czROMMem                               ;ROM memory label
  5345                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5346                                                          putConsoleString czKB                                   ;Kilobytes
  5347                                                          putConsoleString czNewLine                              ;new line
  5348                                                          putConsoleString czBaseMem                              ;base memory label
  5349                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5350                                                          putConsoleString czKB                                   ;Kilobytes
  5351                                                          putConsoleString czNewLine                              ;new line
  5352                                                          putConsoleString czExtendedMem                          ;extended memory label
  5353                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5354                                                          putConsoleString czKB                                   ;Kilobytes
  5355                                                          putConsoleString czNewLine                              ;new line
  5356                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5357                                                          placeCursor                                             ;set CRT cursor location
  5358                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5359                                                          putConsoleString czNewLine                              ;newline
  5360                                  
  5361                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  5362                                                          mov     ebx,wzConsoleToken                              ;token buffer
  5363                                                          call    ConTakeToken                                    ;handle console input
  5364                                                          mov     edx,wzConsoleToken                              ;token buffer
  5365                                                          call    ConDetermineCommand                             ;determine command number
  5366                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5367                                                          jb      .20                                             ;yes, branch
  5368                                  
  5369                                                          putConsoleString czUnknownCommand                       ;display error message
  5370                                  
  5371                                                          jmp     .10                                             ;next command
  5372                                  .20                     shl     eax,2                                           ;index into jump table
  5373                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  5374                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5375                                                          call    eax                                             ;call command handler
  5376                                                          jmp     .10                                             ;next command
  5377                                  ;-----------------------------------------------------------------------------------------------------------------------
  5378                                  ;
  5379                                  ;       Routine:        ConInitializeData
  5380                                  ;
  5381                                  ;       Description:    This routine initializes console task variables.
  5382                                  ;
  5383                                  ;-----------------------------------------------------------------------------------------------------------------------
  5384                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  5385                                                          push    edi                                             ;
  5386                                                          push    es                                              ;
  5387                                  ;
  5388                                  ;       Initialize console work areas.
  5389                                  ;
  5390                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  5391                                                          pop     es                                              ;... into extra segment register
  5392                                                          mov     edi,ECONDATA                                    ;OS console data address
  5393                                                          xor     al,al                                           ;initialization value
  5394                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  5395                                                          cld                                                     ;forward strings
  5396                                                          rep     stosb                                           ;initialize data
  5397                                  ;
  5398                                  ;       Initialize heap size
  5399                                  ;
  5400                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5401                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  5402                                  ;
  5403                                  ;       Initialize MEMROOT structure
  5404                                  ;
  5405                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5406                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5407                                                          xor     ecx,ecx                                         ;zero register
  5408                                                          mov     cl,4                                            ;count
  5409                                                          rep     stosd                                           ;store first/last contig and free addrs
  5410                                                          xor     eax,eax                                         ;zero register
  5411                                                          stosd                                                   ;zero first task block
  5412                                                          stosd                                                   ;zero last task block
  5413                                  ;
  5414                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5415                                  ;
  5416                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5417                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  5418                                                          stosd                                                   ;store signature
  5419                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  5420                                                          stosd                                                   ;store block size
  5421                                                          xor     ecx,ecx                                         ;zero register
  5422                                                          mov     cl,6                                            ;count
  5423                                                          xor     eax,eax                                         ;zero register
  5424                                                          rep     stosd                                           ;zero owner, reserved, pointers
  5425                                  ;
  5426                                  ;       Read memory sizes from ROM
  5427                                  ;
  5428                                                          getROMMemSize                                           ;get ROM memory size
  5429                                                          mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5430                                                          mov     ecx,eax                                         ;integer param
  5431                                                          mov     edx,wzROMMemSize                                ;output buffer param
  5432                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5433                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5434                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5435                                                          mov     [wdBaseMemSize],eax                             ;save base RAM count
  5436                                                          mov     ecx,eax                                         ;integer param
  5437                                                          mov     edx,wzBaseMemSize                               ;output buffer param
  5438                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5439                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5440                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5441                                                          mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5442                                                          mov     ecx,eax                                         ;integer param
  5443                                                          mov     edx,wzExtendedMemSize                           ;output buffer param
  5444                                                          mov     bh,3                                            ;no leading zeros; thousands grouping
  5445                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5446                                  ;
  5447                                  ;       Restore and return.
  5448                                  ;
  5449                                                          pop     es                                              ;restore non-volatile regs
  5450                                                          pop     edi                                             ;
  5451                                                          pop     ecx                                             ;
  5452                                                          ret                                                     ;return
  5453                                  ;-----------------------------------------------------------------------------------------------------------------------
  5454                                  ;
  5455                                  ;       Routine:        ConTakeToken
  5456                                  ;
  5457                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5458                                  ;
  5459                                  ;       In:             DS:EDX  source buffer address
  5460                                  ;                       DS:EBX  target buffer address
  5461                                  ;
  5462                                  ;       Out:            DS:EDX  source buffer address
  5463                                  ;                       DS:EBX  target buffer address
  5464                                  ;
  5465                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5466                                  ;
  5467                                  ;-----------------------------------------------------------------------------------------------------------------------
  5468                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  5469                                                          push    edi                                             ;
  5470                                                          push    es                                              ;
  5471                                                          push    ds                                              ;load data segment selector ...
  5472                                                          pop     es                                              ;... into extra segment reg
  5473                                                          mov     esi,edx                                         ;source buffer address
  5474                                                          mov     edi,ebx                                         ;target buffer address
  5475                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5476                                                          cld                                                     ;forward strings
  5477                                  .10                     lodsb                                                   ;load byte
  5478                                                          cmp     al,EASCIISPACE                                  ;space?
  5479                                                          je      .10                                             ;yes, continue
  5480                                                          test    al,al                                           ;end of line?
  5481                                                          jz      .40                                             ;yes, branch
  5482                                  .20                     stosb                                                   ;store byte
  5483                                                          lodsb                                                   ;load byte
  5484                                                          test    al,al                                           ;end of line?
  5485                                                          jz      .40                                             ;no, continue
  5486                                                          cmp     al,EASCIISPACE                                  ;space?
  5487                                                          jne     .20                                             ;no, continue
  5488                                  .30                     lodsb                                                   ;load byte
  5489                                                          cmp     al,EASCIISPACE                                  ;space?
  5490                                                          je      .30                                             ;yes, continue
  5491                                                          dec     esi                                             ;pre-position
  5492                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5493                                                          mov     edi,edx                                         ;source buffer address
  5494                                  .50                     lodsb                                                   ;remaining byte
  5495                                                          stosb                                                   ;move to front of buffer
  5496                                                          test    al,al                                           ;end of line?
  5497                                                          jnz     .50                                             ;no, continue
  5498                                                          pop     es                                              ;restore non-volatile regs
  5499                                                          pop     edi                                             ;
  5500                                                          pop     esi                                             ;
  5501                                                          ret                                                     ;return
  5502                                  ;-----------------------------------------------------------------------------------------------------------------------
  5503                                  ;
  5504                                  ;       Routine:        ConDetermineCommand
  5505                                  ;
  5506                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5507                                  ;
  5508                                  ;       input:          DS:EDX  command address
  5509                                  ;
  5510                                  ;       output:         EAX     >=0     = command nbr
  5511                                  ;                               0       = unknown command
  5512                                  ;
  5513                                  ;-----------------------------------------------------------------------------------------------------------------------
  5514                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5515                                                          push    ecx                                             ;
  5516                                                          push    esi                                             ;
  5517                                                          push    edi                                             ;
  5518                                  
  5519                                                          upperCaseString                                         ;upper-case string at EDX
  5520                                  
  5521                                                          mov     esi,tConCmdTbl                                  ;commands table
  5522                                                          xor     edi,edi                                         ;intialize command number
  5523                                                          cld                                                     ;forward strings
  5524                                  .10                     lodsb                                                   ;command length
  5525                                                          movzx   ecx,al                                          ;command length
  5526                                                          jecxz   .20                                             ;branch if end of table
  5527                                                          mov     ebx,esi                                         ;table entry address
  5528                                                          add     esi,ecx                                         ;next table entry address
  5529                                  
  5530                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5531                                  
  5532                                                          jecxz   .20                                             ;branch if equal
  5533                                                          inc     edi                                             ;increment command nbr
  5534                                                          jmp     .10                                             ;repeat
  5535                                  .20                     mov     eax,edi                                         ;command number
  5536                                                          pop     edi                                             ;restore non-volatile regs
  5537                                                          pop     esi                                             ;
  5538                                                          pop     ecx                                             ;
  5539                                                          pop     ebx                                             ;
  5540                                                          ret                                                     ;return
  5541                                  ;-----------------------------------------------------------------------------------------------------------------------
  5542                                  ;
  5543                                  ;       Routine:        ConClear
  5544                                  ;
  5545                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5546                                  ;
  5547                                  ;-----------------------------------------------------------------------------------------------------------------------
  5548                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5549                                                          ret                                                     ;return
  5550                                  ;-----------------------------------------------------------------------------------------------------------------------
  5551                                  ;
  5552                                  ;       Routine:        ConDate
  5553                                  ;
  5554                                  ;       Description:    This routine handles the DATE command.
  5555                                  ;
  5556                                  ;-----------------------------------------------------------------------------------------------------------------------
  5557                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5558                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5559                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5560                                                          putConsoleString  czNewLine                             ;write newline to console
  5561                                                          ret                                                     ;return
  5562                                  ;-----------------------------------------------------------------------------------------------------------------------
  5563                                  ;
  5564                                  ;       Routine:        ConDay
  5565                                  ;
  5566                                  ;       Description:    This routine handles the DAY command.
  5567                                  ;
  5568                                  ;-----------------------------------------------------------------------------------------------------------------------
  5569                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5570                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5571                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5572                                                          putConsoleString  czNewLine                             ;write newline to console
  5573                                                          ret                                                     ;return
  5574                                  ;-----------------------------------------------------------------------------------------------------------------------
  5575                                  ;
  5576                                  ;       Routine:        ConExit
  5577                                  ;
  5578                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5579                                  ;
  5580                                  ;-----------------------------------------------------------------------------------------------------------------------
  5581                                  ConExit                 resetSystem                                             ;issue system reset
  5582                                                          ret                                                     ;return
  5583                                  ;-----------------------------------------------------------------------------------------------------------------------
  5584                                  ;
  5585                                  ;       Routine:        ConFree
  5586                                  ;
  5587                                  ;       Description:    This routine handles the FREE command.
  5588                                  ;
  5589                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5590                                  ;
  5591                                  ;-----------------------------------------------------------------------------------------------------------------------
  5592                                  ConFree                 push    ebx                                             ;save non-volatile regs
  5593                                                          push    ecx                                             ;
  5594                                                          push    esi                                             ;
  5595                                                          push    edi                                             ;
  5596                                  ;
  5597                                  ;       Get address parameter
  5598                                  ;
  5599                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5600                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5601                                                          call    ConTakeToken                                    ;take first param as token
  5602                                  ;
  5603                                  ;       Convert input parameter from hexadecimal string to binary
  5604                                  ;
  5605                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5606                                                          je      .10                                             ;no, branch
  5607                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5608                                  
  5609                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5610                                  
  5611                                                          test    eax,eax                                         ;valid parameter?
  5612                                                          jz      .10                                             ;no, branch
  5613                                  ;
  5614                                  ;       Free memory block
  5615                                  ;
  5616                                                          freeMemory eax                                          ;free memory
  5617                                  
  5618                                                          cmp     eax,-1                                          ;memory freed?
  5619                                                          je      .10                                             ;no, branch
  5620                                  ;
  5621                                  ;       Indicate memory freed
  5622                                  ;
  5623                                                          putConsoleString czOK                                   ;indicate success
  5624                                  ;
  5625                                  ;       Restore and return
  5626                                  ;
  5627                                  .10                     pop     edi                                             ;restore non-volatile regs
  5628                                                          pop     esi                                             ;
  5629                                                          pop     ecx                                             ;
  5630                                                          pop     ebx                                             ;
  5631                                                          ret                                                     ;return
  5632                                  ;-----------------------------------------------------------------------------------------------------------------------
  5633                                  ;
  5634                                  ;       Routine:        ConHour
  5635                                  ;
  5636                                  ;       Description:    This routine Handles the HOUR command.
  5637                                  ;
  5638                                  ;-----------------------------------------------------------------------------------------------------------------------
  5639                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5640                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5641                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5642                                                          putConsoleString  czNewLine                             ;write newline to console
  5643                                                          ret                                                     ;return
  5644                                  ;-----------------------------------------------------------------------------------------------------------------------
  5645                                  ;
  5646                                  ;       Routine:        ConInt6
  5647                                  ;
  5648                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5649                                  ;
  5650                                  ;-----------------------------------------------------------------------------------------------------------------------
  5651                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  5652                                                          ret                                                     ;return (not executed)
  5653                                  ;-----------------------------------------------------------------------------------------------------------------------
  5654                                  ;
  5655                                  ;       Routine:        ConMalloc
  5656                                  ;
  5657                                  ;       Description:    This routine handles the MALLOC command.
  5658                                  ;
  5659                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5660                                  ;
  5661                                  ;-----------------------------------------------------------------------------------------------------------------------
  5662                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  5663                                                          push    ecx                                             ;
  5664                                                          push    esi                                             ;
  5665                                                          push    edi                                             ;
  5666                                  ;
  5667                                  ;       Get size parameter
  5668                                  ;
  5669                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5670                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5671                                                          call    ConTakeToken                                    ;take first param as token
  5672                                  ;
  5673                                  ;       Convert input parameter from decimal string to binary
  5674                                  ;
  5675                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5676                                                          je      .10                                             ;no, branch
  5677                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5678                                  
  5679                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5680                                  
  5681                                                          test    eax,eax                                         ;valid parameter?
  5682                                                          jz      .10                                             ;no, branch
  5683                                  ;
  5684                                  ;       Allocate memory block
  5685                                  ;
  5686                                                          allocateMemory eax                                      ;allocate memory
  5687                                  
  5688                                                          test    eax,eax                                         ;memory allocated?
  5689                                                          jz      .10                                             ;no, branch
  5690                                  ;
  5691                                  ;       Report allocated memory block address
  5692                                  ;
  5693                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5694                                                          mov     ecx,eax                                         ;memory address
  5695                                  
  5696                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5697                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5698                                                          putConsoleString czNewLine                              ;display new line
  5699                                  
  5700                                  .10                     pop     edi                                             ;restore non-volatile regs
  5701                                                          pop     esi                                             ;
  5702                                                          pop     ecx                                             ;
  5703                                                          pop     ebx                                             ;
  5704                                                          ret                                                     ;return
  5705                                  ;-----------------------------------------------------------------------------------------------------------------------
  5706                                  ;
  5707                                  ;       Routine:        ConMem
  5708                                  ;
  5709                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5710                                  ;
  5711                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5712                                  ;
  5713                                  ;-----------------------------------------------------------------------------------------------------------------------
  5714                                  ConMem                  push    ebx                                             ;save non-volatile regs
  5715                                                          push    esi                                             ;
  5716                                                          push    edi                                             ;
  5717                                  ;
  5718                                  ;                       update the source address if a parameter is given
  5719                                  ;
  5720                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5721                                                          mov     ebx,wzConsoleToken                              ;console command token address
  5722                                                          call    ConTakeToken                                    ;take first param as token
  5723                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  5724                                                          je      .10                                             ;no, branch
  5725                                                          mov     edx,wzConsoleToken                              ;first param as token address
  5726                                  
  5727                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5728                                  
  5729                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  5730                                  ;
  5731                                  ;                       setup source address and row count
  5732                                  ;
  5733                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5734                                                          xor     ecx,ecx                                         ;zero register
  5735                                                          mov     cl,16                                           ;row count
  5736                                  ;
  5737                                  ;                       start the row with the source address in hexadecimal
  5738                                  ;
  5739                                  .20                     push    ecx                                             ;save remaining rows
  5740                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5741                                                          mov     edx,edi                                         ;output buffer address
  5742                                                          mov     ecx,esi                                         ;console memory address
  5743                                  
  5744                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5745                                  
  5746                                                          add     edi,8                                           ;end of memory addr hexnum
  5747                                                          mov     al,' '                                          ;ascii space
  5748                                                          stosb                                                   ;store delimiter
  5749                                  ;
  5750                                  ;                       output 16 ASCII hexadecimal byte values for the row
  5751                                  ;
  5752                                                          xor     ecx,ecx                                         ;zero register
  5753                                                          mov     cl,16                                           ;loop count
  5754                                  .30                     push    ecx                                             ;save loop count
  5755                                                          lodsb                                                   ;memory byte
  5756                                                          mov     ah,al                                           ;memory byte
  5757                                                          shr     al,4                                            ;high-order in bits 3-0
  5758                                                          or      al,30h                                          ;apply ascii numeric zone
  5759                                                          cmp     al,3ah                                          ;numeric range?
  5760                                                          jb      .40                                             ;yes, skip ahead
  5761                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5762                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5763                                                          mov     al,ah                                           ;low-order in bits 3-0
  5764                                                          and     al,0fh                                          ;mask out high-order bits
  5765                                                          or      al,30h                                          ;apply ascii numeric zone
  5766                                                          cmp     al,3ah                                          ;numeric range?
  5767                                                          jb      .50                                             ;yes, skip ahead
  5768                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  5769                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5770                                                          mov     al,' '                                          ;ascii space
  5771                                                          stosb                                                   ;store ascii space delimiter
  5772                                                          pop     ecx                                             ;loop count
  5773                                                          loop    .30                                             ;next
  5774                                  ;
  5775                                  ;                       output printable ASCII character section for the row
  5776                                  ;
  5777                                                          sub     esi,16                                          ;reset source pointer
  5778                                                          mov     cl,16                                           ;loop count
  5779                                  .60                     lodsb                                                   ;source byte
  5780                                                          cmp     al,32                                           ;printable? (low-range test)
  5781                                                          jb      .70                                             ;no, skip ahead
  5782                                                          cmp     al,128                                          ;printable? (high-range test)
  5783                                                          jb      .80                                             ;yes, skip ahead
  5784                                  .70                     mov     al,' '                                          ;display space instead of printable
  5785                                  .80                     stosb                                                   ;store printable ascii byte
  5786                                                          loop    .60                                             ;next source byte
  5787                                                          xor     al,al                                           ;nul-terminator
  5788                                                          stosb                                                   ;terminate output line
  5789                                  ;
  5790                                  ;                       display constructed output buffer and newline
  5791                                  ;
  5792                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5793                                                          putConsoleString czNewLine                              ;display new line
  5794                                  ;
  5795                                  ;                       repeat until all lines displayed and preserve source address
  5796                                  ;
  5797                                                          pop     ecx                                             ;remaining rows
  5798                                                          loop    .20                                             ;next row
  5799                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  5800                                                          pop     edi                                             ;restore regs
  5801                                                          pop     esi                                             ;
  5802                                                          pop     ebx                                             ;
  5803                                                          ret                                                     ;return
  5804                                  ;-----------------------------------------------------------------------------------------------------------------------
  5805                                  ;
  5806                                  ;       Routine:        ConMinute
  5807                                  ;
  5808                                  ;       Description:    This routine Handles the MINUTE command.
  5809                                  ;
  5810                                  ;-----------------------------------------------------------------------------------------------------------------------
  5811                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5812                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5813                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5814                                                          putConsoleString  czNewLine                             ;write newline to console
  5815                                                          ret                                                     ;return
  5816                                  ;-----------------------------------------------------------------------------------------------------------------------
  5817                                  ;
  5818                                  ;       Routine:        ConMonth
  5819                                  ;
  5820                                  ;       Description:    This routine Handles the MONTH command.
  5821                                  ;
  5822                                  ;-----------------------------------------------------------------------------------------------------------------------
  5823                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5824                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5825                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5826                                                          putConsoleString  czNewLine                             ;write newline to console
  5827                                                          ret                                                     ;return
  5828                                  ;-----------------------------------------------------------------------------------------------------------------------
  5829                                  ;
  5830                                  ;       Routine:        ConMonthName
  5831                                  ;
  5832                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5833                                  ;
  5834                                  ;-----------------------------------------------------------------------------------------------------------------------
  5835                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5836                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5837                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5838                                                          putConsoleString   czNewLine                            ;write newline to console
  5839                                                          ret                                                     ;return
  5840                                  ;-----------------------------------------------------------------------------------------------------------------------
  5841                                  ;
  5842                                  ;       Routine:        ConPCIProbe
  5843                                  ;
  5844                                  ;       Description:    This routine handles the PCIProbe command.
  5845                                  ;
  5846                                  ;-----------------------------------------------------------------------------------------------------------------------
  5847                                  ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5848                                  ;
  5849                                  ;                       initialize variables
  5850                                  ;
  5851                                                          xor     al,al                                           ;zero register
  5852                                                          mov     [wbConsolePCIBus],al                            ;initialize bus
  5853                                                          mov     [wbConsolePCIDevice],al                         ;initialize device
  5854                                                          mov     [wbConsolePCIFunction],al                       ;initialize function
  5855                                  ;
  5856                                  ;                       construct PCI selector
  5857                                  ;
  5858                                  .10                     mov     ah,[wbConsolePCIBus]                            ;AH = bbbb bbbb
  5859                                                          mov     dl,[wbConsolePCIDevice]                         ;DL = ???d dddd
  5860                                                          shl     dl,3                                            ;DL = dddd d000
  5861                                                          mov     al,[wbConsolePCIFunction]                       ;AL = ???? ?fff
  5862                                                          and     al,007h                                         ;AL = 0000 0fff
  5863                                                          or      al,dl                                           ;AL = dddd dfff
  5864                                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5865                                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5866                                                          or      eax,80000000h                                   ;1000 0000 bbbb bbbb dddd dfff 0000 0000
  5867                                                          mov     [wdConsolePCISelector],eax                      ;save selector
  5868                                  ;
  5869                                  ;                       read PCI data register
  5870                                  ;
  5871                                                          mov     dx,0cf8h                                        ;register port
  5872                                                          out     dx,eax                                          ;select device
  5873                                                          mov     dx,0cfch                                        ;data port
  5874                                                          in      eax,dx                                          ;read register data
  5875                                                          mov     [wdConsolePCIData],eax                          ;save data
  5876                                  ;
  5877                                  ;                       interpret PCI data value and display finding
  5878                                  ;
  5879                                                          cmp     eax,0ffffffffh                                  ;not defined?
  5880                                                          je      .20                                             ;yes, branch
  5881                                                          mov     edx,wzConsoleToken                              ;output buffer
  5882                                                          call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5883                                  
  5884                                                          putConsoleString wzConsoleToken                         ;display bus as decimal
  5885                                  
  5886                                                          call    ConInterpretPCIData                             ;update flags based on data
  5887                                  
  5888                                                          putConsoleString czSpace
  5889                                                          putConsoleString [wdConsolePCIVendorStr]
  5890                                                          putConsoleString czSpace
  5891                                                          putConsoleString [wdConsolePCIChipStr]
  5892                                                          putConsoleString czNewLine                              ;display new line
  5893                                  ;
  5894                                  ;                       step to next function, device, bus
  5895                                  ;
  5896                                  .20                     inc     byte [wbConsolePCIFunction]                     ;next function
  5897                                                          cmp     byte [wbConsolePCIFunction],8                   ;at limit?
  5898                                                          jb      .10                                             ;no, continue
  5899                                                          mov     byte [wbConsolePCIFunction],0                   ;zero function
  5900                                                          inc     byte [wbConsolePCIDevice]                       ;next device
  5901                                                          cmp     byte [wbConsolePCIDevice],32                    ;at limit?
  5902                                                          jb      .10                                             ;no, continue
  5903                                                          mov     byte [wbConsolePCIDevice],0                     ;zero device
  5904                                                          inc     byte [wbConsolePCIBus]                          ;next bus
  5905                                                          cmp     byte [wbConsolePCIBus],0                        ;at limit?
  5906                                                          jb      .10                                             ;no, continue
  5907                                  
  5908                                                          jmp     .30
  5909                                  
  5910                                  ;
  5911                                  ;                       report if ethernet adapter found
  5912                                  ;
  5913                                                          test    byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet h/w switch set?
  5914                                                          jz      .30                                             ;branch if no
  5915                                  
  5916                                                          putConsoleString czEthernetAdapterFound                 ;report adapter found
  5917                                  ;
  5918                                  ;                       read base address register 0 at offset 10h
  5919                                  ;
  5920                                                          mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5921                                                          or      eax,10h                                         ;set function bits
  5922                                                          mov     dx,0cf8h                                        ;register port
  5923                                                          out     dx,eax                                          ;select register
  5924                                                          mov     dx,0cfch                                        ;data port
  5925                                                          in      eax,dx                                          ;register data
  5926                                                          mov     [wdConsoleEthernetMem],eax                      ;save ethernet memory mapped i/o addr
  5927                                  ;
  5928                                  ;                       report base address register 0 value
  5929                                  ;
  5930                                                          mov     ecx,eax                                         ;unsigned integer param
  5931                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5932                                  
  5933                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5934                                                          putConsoleString wzConsoleToken                         ;output string to console
  5935                                                          putConsoleString czNewLine                              ;output newline to console
  5936                                  ;
  5937                                  ;                       read base address register 2 at offset 18h
  5938                                  ;
  5939                                                          mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5940                                                          or      eax,18h                                         ;set function bits
  5941                                                          mov     dx,0cf8h                                        ;register port
  5942                                                          out     dx,eax                                          ;select register
  5943                                                          mov     dx,0cfch                                        ;data port
  5944                                                          in      eax,dx                                          ;register data
  5945                                                          and     al,0feh                                         ;clear bit zero
  5946                                                          mov     [wdConsoleEthernetPort],eax                     ;save ethernet i/o port
  5947                                  ;
  5948                                  ;                       report base address register 2 value
  5949                                  ;
  5950                                                          mov     ecx,eax                                         ;unsigned integer param
  5951                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5952                                  
  5953                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5954                                                          putConsoleString wzConsoleToken                         ;output string to console
  5955                                                          putConsoleString czNewLine                              ;output newline to console
  5956                                  ;
  5957                                  ;                       read ethernet control register using port i/o
  5958                                  ;
  5959                                                          mov     eax,[wdConsoleEthernetPort]                     ;ethernet i/o port
  5960                                                          mov     dx,ax                                           ;ethernet i/o port
  5961                                                          xor     eax,eax                                         ;control register (zero)
  5962                                                          out     dx,eax                                          ;select register
  5963                                                          add     dx,4                                            ;data register
  5964                                                          in      eax,dx                                          ;read register data
  5965                                                          mov     [wdConsoleEthernetCtrl],eax                     ;save ethernet control register value
  5966                                  ;
  5967                                  ;                       report adapter control register value
  5968                                  ;
  5969                                                          mov     ecx,eax                                         ;unsigned integer param
  5970                                                          mov     edx,wzConsoleToken                              ;target buffer address
  5971                                  
  5972                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5973                                                          putConsoleString wzConsoleToken                         ;output string to console
  5974                                                          putConsoleString czNewLine                              ;output newline to console
  5975                                  
  5976                                  .30                     pop     ebx                                             ;restore non-volatile regs
  5977                                                          ret                                                     ;return
  5978                                  ;-----------------------------------------------------------------------------------------------------------------------
  5979                                  ;
  5980                                  ;       Routine:        ConBuildPCIIdent
  5981                                  ;
  5982                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5983                                  ;                       Function code values.
  5984                                  ;
  5985                                  ;       In:             DS:EDX  output buffer address
  5986                                  ;
  5987                                  ;-----------------------------------------------------------------------------------------------------------------------
  5988                                  ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5989                                                          mov     edi,edx                                         ;output buffer address
  5990                                                          mov     al,[wbConsolePCIBus]                            ;current PCI bus (0-255)
  5991                                                          xor     ah,ah                                           ;zero high-order dividend
  5992                                                          mov     cl,100                                          ;divisor (10^2)
  5993                                                          div     cl                                              ;AL=100's, AH=bus MOD 100
  5994                                                          or      al,30h                                          ;apply ASCII zone
  5995                                                          cld                                                     ;forward strings
  5996                                                          stosb                                                   ;store 100's digit
  5997                                                          mov     al,ah                                           ;bus MOD 100
  5998                                                          xor     ah,ah                                           ;zero high-order dividend
  5999                                                          mov     cl,10                                           ;divisor (10^1)
  6000                                                          div     cl                                              ;AL=10's, AH=1's
  6001                                                          or      ax,3030h                                        ;apply ASCII zone
  6002                                                          stosw                                                   ;store 10's and 1's
  6003                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6004                                                          stosb                                                   ;store delimiter
  6005                                                          mov     al,[wbConsolePCIDevice]                         ;current PCI device (0-15)
  6006                                                          xor     ah,ah                                           ;zero high order dividend
  6007                                                          mov     cl,10                                           ;divisor (10^1)
  6008                                                          div     cl                                              ;AL=10's, AH=1's
  6009                                                          or      ax,3030h                                        ;apply ASCII zone
  6010                                                          stosw                                                   ;store 10's and 1's
  6011                                                          mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  6012                                                          stosb                                                   ;store delimiter
  6013                                                          mov     al,[wbConsolePCIFunction]                       ;current PCI function (0-7)
  6014                                                          or      al,30h                                          ;apply ASCII zone
  6015                                                          stosb                                                   ;store 1's
  6016                                                          xor     al,al                                           ;null terminator
  6017                                                          stosb                                                   ;store terminator
  6018                                                          pop     edi                                             ;restore non-volatile regs
  6019                                                          ret                                                     ;return
  6020                                  ;-----------------------------------------------------------------------------------------------------------------------
  6021                                  ;
  6022                                  ;       Routine:        ConInterpretPCIData
  6023                                  ;
  6024                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  6025                                  ;
  6026                                  ;-----------------------------------------------------------------------------------------------------------------------
  6027                                  ConInterpretPCIData     mov     eax,czApple
  6028                                                          cmp     word [wwConsolePCIVendor],EPCIVENDORAPPLE       ;Apple?
  6029                                                          jne     .10                                             ;no, branch
  6030                                                          mov     edx,czUSBController
  6031                                                          cmp     word [wwConsolePCIChip],EPCIAPPLEUSB            ;USB?
  6032                                                          je      .80                                             ;yes, branch
  6033                                                          mov     edx,czOther                                     ;other
  6034                                                          jmp     .80                                             ;continue
  6035                                  .10                     mov     eax,czIntel                                     ;Intel
  6036                                                          cmp     word [wwConsolePCIVendor],EPCIVENDORINTEL       ;Intel?
  6037                                                          jne     .20                                             ;no, branch
  6038                                                          mov     edx,czPro1000MT                                 ;Pro/1000 MT
  6039                                                          cmp     word [wwConsolePCIChip],EPCIINTELPRO1000MT      ;Pro/1000 MT?
  6040                                                          je      .80                                             ;yes, branch
  6041                                                          mov     edx,czPCIAndMem                                 ;PCI and Memory
  6042                                                          cmp     word [wwConsolePCIChip],EPCIINTELPCIMEM         ;PCI and Memory?
  6043                                                          je      .80                                             ;yes, branch
  6044                                                          mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  6045                                                          cmp     word [wwConsolePCIChip],EPCIINTELAD1881         ;Aureal 1881 SOUNDMAX?
  6046                                                          je      .80                                             ;yes, branch
  6047                                                          mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  6048                                                          cmp     word [wwConsolePCIChip],EPCIINTELPIIX3          ;PIIX3 PCI-to-IDE Bridge?
  6049                                                          je      .80                                             ;yes, branch
  6050                                                          mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  6051                                                          cmp     word [wwConsolePCIChip],EPCIINTEL82371AB        ;82371AB Bus Master?
  6052                                                          je      .80                                             ;yes, branch
  6053                                                          mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  6054                                                          cmp     word [wwConsolePCIChip],EPCIINTELPIIX4          ;PIIX4/4E/4M Power Mgmt Controller?
  6055                                                          je      .80                                             ;yes, branch
  6056                                                          mov     edx,czOther                                     ;other
  6057                                                          jmp     .80                                             ;continue
  6058                                  .20                     mov     eax,czOracle                                    ;Oracle
  6059                                                          cmp     word [wwConsolePCIVendor],EPCIVENDORORACLE      ;Oracle?
  6060                                                          jne     .30                                             ;no, branch
  6061                                                          mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  6062                                                          cmp     word [wwConsolePCIChip],EPCIORACLEVBOXGA        ;VirtualBox Graphics Adapter?
  6063                                                          je      .80                                             ;yes, branch
  6064                                                          mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  6065                                                          cmp     word [wwConsolePCIChip],EPCIORACLEVBOXDEVICE    ;VirtualBox Device?
  6066                                                          je      .80                                             ;yes, branch
  6067                                                          mov     edx,czOther                                     ;other
  6068                                                          jmp     .80                                             ;continue
  6069                                  .30                     mov     eax,czOther                                     ;other
  6070                                                          mov     edx,czOther                                     ;other
  6071                                  .80                     mov     [wdConsolePCIVendorStr],eax                     ;save vendor string
  6072                                                          mov     [wdConsolePCIChipStr],edx                       ;save chip string
  6073                                                          cmp     word [wwConsolePCIChip],EPCIINTELPRO1000MT      ;Pro/1000 MT Ethernet Adapter
  6074                                                          jne     .90                                             ;no, branch
  6075                                                          or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  6076                                                          mov     eax,[wdConsolePCISelector]                      ;PCI selector
  6077                                                          mov     [wdConsoleEthernetDevice],eax                   ;save as ethernet device selector
  6078                                  .90                     ret                                                     ;return
  6079                                  ;-----------------------------------------------------------------------------------------------------------------------
  6080                                  ;
  6081                                  ;       Routine:        ConSecond
  6082                                  ;
  6083                                  ;       Description:    This routine Handles the SECOND command.
  6084                                  ;
  6085                                  ;-----------------------------------------------------------------------------------------------------------------------
  6086                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6087                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  6088                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6089                                                          putConsoleString  czNewLine                             ;write newline to console
  6090                                                          ret                                                     ;return
  6091                                  ;-----------------------------------------------------------------------------------------------------------------------
  6092                                  ;
  6093                                  ;       Routine:        ConTime
  6094                                  ;
  6095                                  ;       Description:    This routine Handles the TIME command.
  6096                                  ;
  6097                                  ;-----------------------------------------------------------------------------------------------------------------------
  6098                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6099                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  6100                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6101                                                          putConsoleString  czNewLine                             ;write newline to console
  6102                                                          ret                                                     ;return
  6103                                  ;-----------------------------------------------------------------------------------------------------------------------
  6104                                  ;
  6105                                  ;       Routine:        ConVersion
  6106                                  ;
  6107                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  6108                                  ;
  6109                                  ;-----------------------------------------------------------------------------------------------------------------------
  6110                                  ConVersion              putConsoleString czTitle                                ;display version message
  6111                                                          ret                                                     ;return
  6112                                  ;-----------------------------------------------------------------------------------------------------------------------
  6113                                  ;
  6114                                  ;       Routine:        ConWeekday
  6115                                  ;
  6116                                  ;       Description:    This routine handles the WEEKDAY command.
  6117                                  ;
  6118                                  ;-----------------------------------------------------------------------------------------------------------------------
  6119                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6120                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  6121                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6122                                                          putConsoleString  czNewLine                             ;write newline to console
  6123                                                          ret                                                     ;return
  6124                                  ;-----------------------------------------------------------------------------------------------------------------------
  6125                                  ;
  6126                                  ;       Routine:        ConWeekdayName
  6127                                  ;
  6128                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  6129                                  ;
  6130                                  ;-----------------------------------------------------------------------------------------------------------------------
  6131                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  6132                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  6133                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  6134                                                          putConsoleString     czNewLine                                  ;write newline to console
  6135                                                          ret                                                             ;return
  6136                                  ;-----------------------------------------------------------------------------------------------------------------------
  6137                                  ;
  6138                                  ;       Routine:        ConYear
  6139                                  ;
  6140                                  ;       Description:    This routine Handles the YEAR command.
  6141                                  ;
  6142                                  ;-----------------------------------------------------------------------------------------------------------------------
  6143                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6144                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  6145                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  6146                                                          putConsoleString  czNewLine                             ;write newline to console
  6147                                                          ret                                                     ;return
  6148                                  ;-----------------------------------------------------------------------------------------------------------------------
  6149                                  ;
  6150                                  ;       Routine:        ConYearIsLeap
  6151                                  ;
  6152                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  6153                                  ;
  6154                                  ;-----------------------------------------------------------------------------------------------------------------------
  6155                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  6156                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  6157                                  
  6158                                                          jecxz   .10                                             ;branch if not leap
  6159                                  
  6160                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  6161                                  
  6162                                                          jmp     .20                                             ;continue
  6163                                  
  6164                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  6165                                  .20                     ret                                                     ;return
  6166                                  ;-----------------------------------------------------------------------------------------------------------------------
  6167                                  ;
  6168                                  ;       Tables
  6169                                  ;
  6170                                  ;-----------------------------------------------------------------------------------------------------------------------
  6171                                                                                                                  ;---------------------------------------
  6172                                                                                                                  ;  Command Jump Table
  6173                                                                                                                  ;---------------------------------------
  6174                                  tConJmpTbl              equ     $                                               ;command jump table
  6175                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6176                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6177                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6178                                                          dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6179                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  6180                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  6181                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6182                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6183                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  6184                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  6185                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  6186                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  6187                                                          dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6188                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  6189                                                          dd      ConDate         - ConCode                       ;date command routine offset
  6190                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  6191                                                          dd      ConFree         - ConCode                       ;free command routine offset
  6192                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  6193                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  6194                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  6195                                                          dd      ConTime         - ConCode                       ;time command routine offset
  6196                                                          dd      ConYear         - ConCode                       ;year command routine offset
  6197                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  6198                                                          dd      ConDay          - ConCode                       ;day command routine offset
  6199                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  6200                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  6201                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6202                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6203                                                                                                                  ;---------------------------------------
  6204                                                                                                                  ;  Command Name Table
  6205                                                                                                                  ;---------------------------------------
  6206                                  tConCmdTbl              equ     $                                               ;command name table
  6207                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6208                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6209                                                          db      11,"MONTH.NAME",0                               ;month.name command
  6210                                                          db      9,"PCIPROBE",0                                  ;pciprobe command
  6211                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  6212                                                          db      8,"VERSION",0                                   ;version command
  6213                                                          db      8,"WEEKDAY",0                                   ;weekday command
  6214                                                          db      7,"MALLOC",0                                    ;malloc command
  6215                                                          db      7,"MEMORY",0                                    ;memory command
  6216                                                          db      7,"MINUTE",0                                    ;minute command
  6217                                                          db      7,"SECOND",0                                    ;second command
  6218                                                          db      6,"CLEAR",0                                     ;clear command
  6219                                                          db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6220                                                          db      6,"MONTH",0                                     ;month command
  6221                                                          db      5,"DATE",0                                      ;date command
  6222                                                          db      5,"EXIT",0                                      ;exit command
  6223                                                          db      5,"FREE",0                                      ;free command
  6224                                                          db      5,"HOUR",0                                      ;hour command
  6225                                                          db      5,"INT6",0                                      ;int6 command
  6226                                                          db      5,"QUIT",0                                      ;quit command
  6227                                                          db      5,"TIME",0                                      ;time command
  6228                                                          db      5,"YEAR",0                                      ;year command
  6229                                                          db      4,"CLS",0                                       ;cls command
  6230                                                          db      4,"DAY",0                                       ;day command
  6231                                                          db      4,"MEM",0                                       ;mem command
  6232                                                          db      4,"VER",0                                       ;ver command
  6233                                                          db      0                                               ;end of table
  6234                                  ;-----------------------------------------------------------------------------------------------------------------------
  6235                                  ;
  6236                                  ;       Constants
  6237                                  ;
  6238                                  ;-----------------------------------------------------------------------------------------------------------------------
  6239                                  czApple                 db      "Apple",0                                       ;vendor name string
  6240                                  czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6241                                  czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6242                                  czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6243                                  czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6244                                  czIntel                 db      "Intel",0                                       ;vendor name string
  6245                                  czKB                    db      "KB",0                                          ;Kilobytes
  6246                                  czNewLine               db      13,10,0                                         ;new line string
  6247                                  czOK                    db      "ok",13,10,0                                    ;ok string
  6248                                  czOracle                db      "Oracle",0                                      ;vendor name string
  6249                                  czOther                 db      "Other",0                                       ;default name string
  6250                                  czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6251                                  czPeriod                db      ".",0                                           ;period delimiter
  6252                                  czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6253                                  czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6254                                  czPrompt                db      ":",0                                           ;prompt string
  6255                                  czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6256                                  czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6257                                  czSpace                 db      " ",0                                           ;space delimiter
  6258                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6259                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6260                                  czUSBController         db      "USB Controller",0                              ;USB controller string
  6261                                  czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6262                                  czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6263                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6264                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6265                                  cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6266                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6267                                  ;=======================================================================================================================
  6268                                  ;
  6269                                  ;       Background Task                                                         @disk: 009600   @mem: 006000
  6270                                  ;
  6271                                  ;       This task executes monitoring and self-correcting functions.
  6272                                  ;
  6273                                  ;                       000000  +-----------------------------------------------+
  6274                                  ;                               |  Real Mode Interrupt Vectors                  |
  6275                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  6276                                  ;                               |  Reserved BIOS Memory Area                    |
  6277                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  6278                                  ;                               |  Shared Kernel Memory Area                    |
  6279                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  6280                                  ;                               |  Global Descriptor Table (GDT)                |
  6281                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  6282                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  6283                                  ;                       002000  +-----------------------------------------------+
  6284                                  ;                               |  Interrupt Handlers                           |
  6285                                  ;                               |  Kernel Function Library                      |
  6286                                  ;                       004000  +===============================================+
  6287                                  ;                               |  Console Task Stack Area                      |
  6288                                  ;                       004700  +-----------------------------------------------+
  6289                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  6290                                  ;                       004780  +-----------------------------------------------+
  6291                                  ;                               |  Console Task Task State Segment (TSS)        |
  6292                                  ;                       004800  +-----------------------------------------------+
  6293                                  ;                               |  Console Task Message Queue                   |
  6294                                  ;                       005000  +-----------------------------------------------+
  6295                                  ;                               |  Console Task Code                            |
  6296                                  ;                               |  Console Task Constants                       |
  6297                                  ;                       006000  +===============================================+
  6298                                  ;                               |  Background Task Stack Area                   |
  6299                                  ;       SS:SP --------> 006700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0060h
  6300                                  ;                               |  Background Task Local Descriptor Table (LDT) |
  6301                                  ;                       006780  +-----------------------------------------------+               <-- TR = GDT.SEL 0068h
  6302                                  ;                               |  Background Task Task State Segment (TSS)     |
  6303                                  ;                       006800  +-----------------------------------------------+
  6304                                  ;                               |  Background Task Message Queue                |
  6305                                  ;       CS,CS:IP -----> 007000  +-----------------------------------------------+ CS:0000
  6306                                  ;                               |  Background Task Code                         |
  6307                                  ;                               |  Background Task Constants                    |
  6308                                  ;                       008000  +===============================================+
  6309                                  ;
  6310                                  ;=======================================================================================================================
  6311                                  ;-----------------------------------------------------------------------------------------------------------------------
  6312                                  ;
  6313                                  ;       Background Task Stack                                                   @disk: 009600   @mem:  006000
  6314                                  ;
  6315                                  ;       This is the stack for the background task. It supports 448 nested calls.
  6316                                  ;
  6317                                  ;-----------------------------------------------------------------------------------------------------------------------
  6318                                  section                 bgstack                                                 ;background task stack
  6319                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  6320                                  ;-----------------------------------------------------------------------------------------------------------------------
  6321                                  ;
  6322                                  ;       Background Task Local Descriptor Table                                  @disk: 009D00   @mem:  006700
  6323                                  ;
  6324                                  ;       This is the LDT for the background task. It defines the stack, code, data and queue segments as well as data
  6325                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  6326                                  ;       16 descriptors. Six are initially defined.
  6327                                  ;
  6328                                  ;-----------------------------------------------------------------------------------------------------------------------
  6329                                  section                 bgldt                                                   ;background task local descriptors
  6330                                                          dq      004093006780007Fh                               ;04 TSS alias           128B  @ 6780
  6331                                                          dq      004093006700007Fh                               ;0C LDT alias           128B  @ 6700
  6332                                                          dq      00409300600006FFh                               ;14 stack               1792B @ 6600
  6333                                                          dq      00CF93000000FFFFh                               ;1C data                4GB   @ 0000
  6334                                                          dq      00409B0070000FFFh                               ;24 code                4KB   @ 7000
  6335                                                          dq      00409300680007FFh                               ;2C message queue       2KB   @ 6800
  6336                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  6337                                  ;-----------------------------------------------------------------------------------------------------------------------
  6338                                  ;
  6339                                  ;       Background Task State Segment                                           @disk: 009D80   @mem:  006780
  6340                                  ;
  6341                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  6342                                  ;       segment. CS to console code.
  6343                                  ;
  6344                                  ;-----------------------------------------------------------------------------------------------------------------------
  6345                                  section                 bgtss                                                   ;background task state segment
  6346                                                          dd      0                                               ;00 back-link tss
  6347                                                          dd      0700h                                           ;04 esp ring 0
  6348                                                          dd      0014h                                           ;08 ss ring 0
  6349                                                          dd      0700h                                           ;0C esp ring 1
  6350                                                          dd      0014h                                           ;10 es ring 1
  6351                                                          dd      0700h                                           ;14 esp ring 2
  6352                                                          dd      0014h                                           ;18 ss ring 2
  6353                                                          dd      0                                               ;1C cr ring 3
  6354                                                          dd      0                                               ;20 eip
  6355                                                          dd      0200h                                           ;24 eflags
  6356                                                          dd      0                                               ;28 eax
  6357                                                          dd      0                                               ;2C ecx
  6358                                                          dd      0                                               ;30 edx
  6359                                                          dd      0                                               ;34 ebx
  6360                                                          dd      0700h                                           ;38 esp ring 3
  6361                                                          dd      0                                               ;3C ebp
  6362                                                          dd      0                                               ;40 esi
  6363                                                          dd      0                                               ;44 edi
  6364                                                          dd      001Ch                                           ;48 es
  6365                                                          dd      0024h                                           ;4C cs
  6366                                                          dd      0014h                                           ;50 ss ring 3
  6367                                                          dd      001Ch                                           ;54 ds
  6368                                                          dd      0                                               ;58 fs
  6369                                                          dd      0                                               ;5c gs
  6370                                                          dd      ESELBACKGROUNDLDT                               ;60 ldt selector in gdt
  6371                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  6372                                  ;-----------------------------------------------------------------------------------------------------------------------
  6373                                  ;
  6374                                  ;       Background Task Message Queue                                           @disk: 009E00   @mem: 006800
  6375                                  ;
  6376                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  6377                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  6378                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  6379                                  ;       event.
  6380                                  ;
  6381                                  ;-----------------------------------------------------------------------------------------------------------------------
  6382                                  section                 bgmque                                                  ;console message queue
  6383                                                          dd      8                                               ;head pointer
  6384                                                          dd      8                                               ;tail pointer
  6385                                                          times   510 dd 0                                        ;queue elements
  6386                                  ;-----------------------------------------------------------------------------------------------------------------------
  6387                                  ;
  6388                                  ;       Background Task Code                                                    @disk: 00A600   @mem: 007000
  6389                                  ;
  6390                                  ;-----------------------------------------------------------------------------------------------------------------------
  6391                                  section                 bgcode  vstart=07000h                                   ;labels relative to 7000h
  6392                                  BackgroundCode          call    BgInitializeData                                ;initialize the background variables
  6393                                  
  6394                                  .10                     readRealTimeClock wsBgDateTime                          ;read real-time clock data
  6395                                                          putTimeString     wsBgDateTime,wzBgTime                 ;create ASCII time string
  6396                                                          compareMemory     wzBgTime,wzBgTimeCmpr,EBGTIMELEN      ;compare to previous time string
  6397                                  
  6398                                                          jecxz   .10                                             ;repeat if equal
  6399                                                          push    es                                              ;save non-volatile reg
  6400                                                          push    EGDTCGA                                         ;load CGA selector ...
  6401                                                          pop     es                                              ;... into extra segment reg
  6402                                                          mov     esi,wzBgTime                                    ;string address
  6403                                                          mov     ch,24                                           ;OIA row
  6404                                                          mov     cl,67                                           ;OIA column
  6405                                  
  6406                                                          setConsoleString                                        ;display string
  6407                                  
  6408                                                          pop     es                                              ;restore non-volatile reg
  6409                                  
  6410                                                          copyMemory        wzBgTime,wzBgTimeCmpr,EBGTIMELEN      ;copy to comparison string
  6411                                                          yield                                                   ;halt until interrupt
  6412                                  
  6413                                                          jmp     .10                                             ;continue
  6414                                  ;-----------------------------------------------------------------------------------------------------------------------
  6415                                  ;
  6416                                  ;       Routine:        BgInitializeData
  6417                                  ;
  6418                                  ;       Description:    This routine initializes background task variables.
  6419                                  ;
  6420                                  ;-----------------------------------------------------------------------------------------------------------------------
  6421                                  BgInitializeData        push    ecx                                             ;save non-volatile regs
  6422                                                          push    edi                                             ;
  6423                                                          push    es                                              ;
  6424                                  ;
  6425                                  ;       Initialize console work areas
  6426                                  ;
  6427                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  6428                                                          pop     es                                              ;... into extra segment register
  6429                                                          mov     edi,EBGDATA                                     ;OS console data address
  6430                                                          xor     al,al                                           ;initialization value
  6431                                                          mov     ecx,EBGDATALEN                                  ;size of OS console data
  6432                                                          cld                                                     ;forward strings
  6433                                                          rep     stosb                                           ;initialize data
  6434                                  ;
  6435                                  ;       Restore and return
  6436                                  ;
  6437                                                          pop     es                                              ;restore non-volatile regs
  6438                                                          pop     edi                                             ;
  6439                                                          pop     ecx                                             ;
  6440                                                          ret                                                     ;return
  6441                                  ;-----------------------------------------------------------------------------------------------------------------------
  6442                                  ;
  6443                                  ;       Background Task Constants
  6444                                  ;
  6445                                  ;-----------------------------------------------------------------------------------------------------------------------
  6446                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  6447                                  %endif
  6448                                  %ifdef BUILDDISK
  6449                                  ;-----------------------------------------------------------------------------------------------------------------------
  6450                                  ;
  6451                                  ;       Free Disk Space                                                         @disk: 00B600   @mem:  n/a
  6452                                  ;
  6453                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6454                                  ;
  6455                                  ;-----------------------------------------------------------------------------------------------------------------------
  6456                                  section                 unused                                                  ;unused disk space
  6457                                                          times   EBOOTDISKBYTES-0B600h db 0F6h                   ;fill to end of disk image
  6458                                  %endif
  6459                                  ;=======================================================================================================================
  6460                                  ;
  6461                                  ;       End of Program Code
  6462                                  ;
  6463                                  ;=======================================================================================================================
