     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.004
     6                                  ;
     7                                  ;       Description:    In this sample program, the loader is expanded to validate the CPU type and place the CPU into
     8                                  ;                       protected mode.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  ;
   210                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   211                                  ;
   212                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   213                                  ;       external devices and signals a hardware interrupt to the CPU.
   214                                  ;
   215                                  ;-----------------------------------------------------------------------------------------------------------------------
   216                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   217                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   218                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   219                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   220                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   221                                  ;-----------------------------------------------------------------------------------------------------------------------
   222                                  ;
   223                                  ;       8253 Programmable Interval Timer                                        EPIT...
   224                                  ;
   225                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   226                                  ;       approximately 18.2 times per second.
   227                                  ;
   228                                  ;-----------------------------------------------------------------------------------------------------------------------
   229                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   230                                  ;-----------------------------------------------------------------------------------------------------------------------
   231                                  ;
   232                                  ;       x86 CPU Architecture                                                    ;EX86...
   233                                  ;
   234                                  ;-----------------------------------------------------------------------------------------------------------------------
   235                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   239                                  ;
   240                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   241                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   242                                  ;
   243                                  ;       0.......        Segment is not present in memory (triggers int 11)
   244                                  ;       1.......        Segment is present in memory
   245                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   246                                  ;       ...0....        Segment is a system segment
   247                                  ;       ...00010                Local Descriptor Table
   248                                  ;       ...00101                Task Gate
   249                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   250                                  ;       ...01100                Call Gate (386)
   251                                  ;       ...01110                Interrupt Gate (386)
   252                                  ;       ...01111                Trap Gate (386)
   253                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   254                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   255                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   256                                  ;
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   259                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       Firmware-Defined Values
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   268                                  ;
   269                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   270                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   271                                  ;
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   274                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   275                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   276                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   277                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   278                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   279                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   280                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   281                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   282                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   283                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  ;
   286                                  ;       Standards-Based Values
   287                                  ;
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ;
   291                                  ;       ASCII                                                                   EASCII...
   292                                  ;
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   295                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       Operating System Values
   299                                  ;
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   304                                  ;
   305                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   306                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   310                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   311                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   312                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   313                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   314                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   315                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;       Console Constants                                                       ECON...
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ECONCOLS                equ     80                                              ;columns per row
   320                                  ECONROWS                equ     24                                              ;console rows
   321                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   322                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   323                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   324                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   325                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   330                                  EGDTCGA                 equ     020h                                            ;cga video selector
   331                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   332                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   333                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   334                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   335                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   336                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   337                                  ;-----------------------------------------------------------------------------------------------------------------------
   338                                  ;       Kernel Constants                                                        EKRN...
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   341                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   342                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   343                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   344                                  ;=======================================================================================================================
   345                                  ;
   346                                  ;       Structures
   347                                  ;
   348                                  ;=======================================================================================================================
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;
   351                                  ;       OSDATA
   352                                  ;
   353                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   354                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  struc                   OSDATA
   358 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   359 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   360 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   361 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   362 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   363 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   364 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   365 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   366 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   367 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   368 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   369 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   370 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   371 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   372 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   373 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   374 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   375 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   376 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   377 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   378 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   379 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   380 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   381 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   382 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   383 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   384 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   385 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   386 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   387 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   388 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   389 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   390 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   391 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   392 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   393 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   394 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   395 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   396 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   397 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   398 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   399 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   400 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   401 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   402 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   403 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   404 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   405 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   406 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   407 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   408 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   409 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   410 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   411 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   412 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   413 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   414 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   415 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   416 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   417 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   418 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   419 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   420 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   421 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   422 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   423 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   424 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   425 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   426 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   427 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   428 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   429 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   430 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   431 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   432 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   433 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   434 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   435 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   436 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   437 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   438 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   439 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   440 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   441 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   442 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   443 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   444 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   445 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   446 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   447 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   448 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   449 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   450 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   451 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   452 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   453 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   454 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   455 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   456 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   457 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   458 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ;
   461                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   462                                  ;
   463                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   464                                  ;
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ECONDATA                equ     ($)
   467 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   468 00000804 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   469 00000808 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   470 00000858 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   471 00000859 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   472                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;       End of OS Variables
   476                                  ;
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  endstruc
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  ;
   481                                  ;       Macros
   482                                  ;
   483                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   484                                  ;
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  %macro                  mint    1
   487                                  _%1                     equ     ($-$$) / EX86DESCLEN
   488                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   489                                  %endmacro
   490                                  %macro                  mtrap   1
   491                                  _%1                     equ     ($-$$) / EX86DESCLEN
   492                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   493                                  %endmacro
   494                                  %macro                  menter  1
   495                                  ?%1                     equ     ($-$$)
   496                                  %endmacro
   497                                  %macro                  tsvce   1
   498                                  e%1                     equ     ($-tsvc)/4
   499                                                          dd      %1
   500                                  %endmacro
   501                                  %ifdef BUILDBOOT
   502                                  ;=======================================================================================================================
   503                                  ;
   504                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   505                                  ;
   506                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   507                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   508                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   509                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   510                                  ;
   511                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   512                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   513                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   514                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   515                                  ;       immediately followed by a disk parameter table.
   516                                  ;
   517                                  ;=======================================================================================================================
   518                                                          cpu     8086                                            ;assume minimal CPU
   519                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   520                                                          bits    16                                              ;16-bit code at power-up
   521                                  %ifdef BUILDPREP
   522                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   523                                  %else
   524 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   525                                  %endif
   526                                  ;-----------------------------------------------------------------------------------------------------------------------
   527                                  ;
   528                                  ;       Disk Parameter Table
   529                                  ;
   530                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   531                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   532                                  ;
   533                                  ;-----------------------------------------------------------------------------------------------------------------------
   534 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   535 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   536 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   537 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   538 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   539 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   540 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   541 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   542 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   543                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   544 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   545 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   546 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   547                                  ;
   548                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   549                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   550                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   551                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   552                                  ;       given several possible starting values for CS:IP.
   553                                  ;
   554                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   555 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   556                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   557 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   558 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   559 00000025 B104                                            mov     cl,4                                            ;shift count
   560 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   561 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   562 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   563                                  ;
   564                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   565                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   566                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   567                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   568                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   569                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   570                                  ;
   571 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   572 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   573 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   574 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   575 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   576                                  ;
   577                                  ;       Our boot addressability is now set up according to the following diagram.
   578                                  ;
   579                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   580                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   581                                  ;                               |  256 = 100h bytes                             |
   582                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   583                                  ;                               |  Boot Sector (vstart=0100h)                   |
   584                                  ;                               |  1 sector = 512 = 200h bytes                  |
   585                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   586                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   587                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   588                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   589                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   590                                  ;                               |  2 sectors = 1024 = 400h bytes
   591                                  ;                       009400  +-----------------------------------------------+ DS:1900
   592                                  ;
   593                                  ;       On entry, DL indicates the drive being booted from.
   594                                  ;
   595 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   596                                  ;
   597                                  ;       Compute directory i/o buffer address.
   598                                  ;
   599 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   600 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   601 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   602 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   603                                  ;
   604                                  ;       Compute segment where os.com will be loaded.
   605                                  ;
   606 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   607 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   608 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   609 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   610                                  ;
   611                                  ;       Set the video mode to 80 column, 25 row, text.
   612                                  ;
   613 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   614 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   615                                  ;
   616                                  ;       Write a message to the console so we know we have our addressability established.
   617                                  ;
   618 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   619 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   620                                  ;
   621                                  ;       Initialize the number of directory sectors to search.
   622                                  ;
   623 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   624 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   625                                  ;
   626                                  ;       Compute number of directory sectors and initialize overhead count.
   627                                  ;
   628 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   629 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   630 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   631 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   632                                  ;
   633                                  ;       Compute directory entries per sector.
   634                                  ;
   635 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   636 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   637 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   638                                  ;
   639                                  ;       Compute first logical directory sector and update overhead count.
   640                                  ;
   641 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   642 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   643 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   644 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   645 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   646 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   647                                  ;
   648                                  ;       Read directory sector.
   649                                  ;
   650 0000008E B001                    .30                     mov     al,1                                            ;sector count
   651 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   652 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   653 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   654                                  ;
   655                                  ;       Setup variables to search this directory sector.
   656                                  ;
   657 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   658 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   659 000000A1 7603                                            jna     .40                                             ;no, continue
   660 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   661 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   662 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   663 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   664                                  ;
   665                                  ;       Loop through directory sectors searching for kernel program.
   666                                  ;
   667 000000B1 56                      .50                     push    si                                              ;save kernel name address
   668 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   669 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   670 000000B6 FC                                              cld                                                     ;forward strings
   671 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   672 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   673 000000BA 5E                                              pop     si                                              ;restore kernel name address
   674 000000BB 7418                                            je      .60                                             ;exit loop if found
   675 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   676 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   677 000000C2 75ED                                            jnz     .50                                             ;next entry
   678                                  ;
   679                                  ;       Repeat search if we are not at the end of the directory.
   680                                  ;
   681 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   682 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   683 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   684 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   685 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   686                                  ;
   687                                  ;       If we find the kernel program in the directory, read the FAT.
   688                                  ;
   689 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   690 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   691 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   692 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   693 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   694 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   695                                  ;
   696                                  ;       Get the starting cluster of the kernel program and target address.
   697                                  ;
   698 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   699 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   700                                  ;
   701                                  ;       Read each program cluster into RAM.
   702                                  ;
   703 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   704 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   705 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   706 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   707 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   708 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   709 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   710 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   711 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   712                                  ;
   713                                  ;       Update buffer pointer for next cluster.
   714                                  ;
   715 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   716 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   717 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   718 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   719 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   720                                  ;
   721                                  ;       Compute next cluster number.
   722                                  ;
   723 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   724 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   725 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   726 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   727 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   728 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   729 00000120 83E701                                          and     di,1                                            ;get low bit
   730 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   731 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   732 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   733                                  ;
   734                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   735                                  ;
   736 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   737 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   738 00000130 B104                                            mov     cl,4                                            ;shift count
   739 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   740 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   741 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   742 0000013A 75B2                                            jne     .70                                             ;no, continue
   743                                  ;
   744                                  ;       Transfer control to the operating system program.
   745                                  ;
   746 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   747 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   748 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   749                                  ;
   750                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   751                                  ;
   752 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   753 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   754 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   755 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   756 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   757 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   758 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   759 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   760 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   761 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   762                                  ;
   763                                  ;       Try maxtries times to read sector.
   764                                  ;
   765 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   766 00000160 53                      .10                     push    bx                                              ;save buffer address
   767 00000161 51                                              push    cx                                              ;save retry count
   768 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   769 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   770 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   771 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   772 0000016F 59                                              pop     cx                                              ;restore retry count
   773 00000170 5B                                              pop     bx                                              ;restore buffer address
   774 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   775 00000173 E2EB                                            loop    .10                                             ;retry
   776                                  ;
   777                                  ;       Handle disk error: convert to ASCII and store in error string.
   778                                  ;
   779 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   780 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   781 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   782 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   783 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   784 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   785 00000183 7203                                            jb      .20                                             ;continue if numeral
   786 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   787 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   788 0000018A 7203                                            jb      .30                                             ;continue if numeral
   789 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   790 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   791 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   792 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   793                                  ;
   794                                  ;       Wait for a key press.
   795                                  ;
   796 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   797 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   798 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   799 0000019E FB                                              sti                                                     ;enable maskable interrupts
   800 0000019F F4                                              hlt                                                     ;wait for interrupt
   801 000001A0 EBF6                                            jmp     .10                                             ;repeat
   802                                  ;
   803                                  ;       Reset the system.
   804                                  ;
   805 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   806 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   807 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   808 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   809 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   810                                  ;
   811                                  ;       Display text message.
   812                                  ;
   813 000001AA FC                      BootPrint               cld                                                     ;forward strings
   814 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   815 000001AC 84C0                                            test    al,al                                           ;end of string?
   816 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   817 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   818 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   819 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   820 000001B6 C3                      BootReturn              ret                                                     ;return
   821                                  ;-----------------------------------------------------------------------------------------------------------------------
   822                                  ;
   823                                  ;       Constants
   824                                  ;
   825                                  ;-----------------------------------------------------------------------------------------------------------------------
   826 000001B7 90                                              align   2
   827 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   828 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   828 000001C3 4F4D               
   829 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   829 000001CE 530D0A00           
   830 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   830 000001DB 7220               
   831 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   832 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   832 000001E9 6700               
   833                                  ;-----------------------------------------------------------------------------------------------------------------------
   834                                  ;
   835                                  ;       Work Areas
   836                                  ;
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838 000001EB 90                                              align   2
   839 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   840 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   841 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   842 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   843 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   844                                  wwReadCountCommand      equ     $                                               ;read count and command
   845 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   846 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   847                                  wwDriveHead             equ     $                                               ;drive, head (word)
   848 000001F8 00                      wbDrive                 db      0                                               ;drive
   849 000001F9 00                      wbHead                  db      0                                               ;head
   850                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   851 000001FA 00                                              db      0                                               ;sector
   852 000001FB 00                      wbTrack                 db      0                                               ;track
   853 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   854 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   855                                  %endif
   856                                  %ifdef BUILDPREP
   857                                  ;=======================================================================================================================
   858                                  ;
   859                                  ;       Diskette Preparation Code
   860                                  ;
   861                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   862                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   863                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   864                                  ;
   865                                  ;=======================================================================================================================
   866                                  ;
   867                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   868                                  ;
   869                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   870                                                          call    BootPrint                                       ;display message
   871                                  ;
   872                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   873                                  ;
   874                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   875                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   876                                                          jnz     .20                                             ;continue if key pressed
   877                                                          sti                                                     ;enable interrupts
   878                                                          hlt                                                     ;wait for interrupt
   879                                                          jmp     .10                                             ;repeat
   880                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   881                                                          je      .30                                             ;yes, branch
   882                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   883                                                          jne     .10                                             ;no, repeat
   884                                                          jmp     .120                                            ;yes, exit program
   885                                  ;
   886                                  ;       Display writing-sector message and patch the JMP instruction.
   887                                  ;
   888                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   889                                                          call    BootPrint                                       ;display message
   890                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   891                                                          mov     ax,01Bh                                         ;address past disk parameter table
   892                                                          mov     [bx],ax                                         ;update the JMP instruction
   893                                  ;
   894                                  ;       Try to read the boot sector.
   895                                  ;
   896                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   897                                  .40                     push    cx                                              ;save remaining tries
   898                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   899                                                          mov     dx,0                                            ;head zero, drive zero
   900                                                          mov     cx,1                                            ;track zero, sector one
   901                                                          mov     al,1                                            ;one sector
   902                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   903                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   904                                                          pop     cx                                              ;restore remaining retries
   905                                                          jnc     .50                                             ;skip ahead if successful
   906                                                          loop    .40                                             ;try again
   907                                                          mov     si,czPrepMsg20                                  ;read-error message address
   908                                                          jmp     .70                                             ;branch to error routine
   909                                  ;
   910                                  ;       Copy diskette parms from input buffer to output buffer.
   911                                  ;
   912                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   913                                                          add     si,11                                           ;skip over JMP and system ID
   914                                                          mov     di,Boot                                         ;output buffer address
   915                                                          add     di,11                                           ;skip over JMP and system ID
   916                                                          mov     cx,19                                           ;length of diskette parameters
   917                                                          cld                                                     ;forward string copies
   918                                                          rep     movsb                                           ;copy diskette parameters
   919                                  ;
   920                                  ;       Try to write boot sector to diskette.
   921                                  ;
   922                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   923                                  .60                     push    cx                                              ;save remaining tries
   924                                                          mov     bx,Boot                                         ;output buffer address
   925                                                          mov     dx,0                                            ;head zero, drive zero
   926                                                          mov     cx,1                                            ;track zero, sector one
   927                                                          mov     al,1                                            ;one sector
   928                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   929                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   930                                                          pop     cx                                              ;restore remaining retries
   931                                                          jnc     .100                                            ;skip ahead if successful
   932                                                          loop    .60                                             ;try again
   933                                                          mov     si,czPrepMsg30                                  ;write-error message address
   934                                  ;
   935                                  ;       Convert the error code to ASCII and display the error message.
   936                                  ;
   937                                  .70                     push    ax                                              ;save error code
   938                                                          mov     al,ah                                           ;copy error code
   939                                                          mov     ah,0                                            ;AX = error code
   940                                                          mov     dl,10h                                          ;hexadecimal divisor
   941                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
   942                                                          or      ax,03030h                                       ;add ASCII zone digits
   943                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
   944                                                          jb      .80                                             ;yes, continue
   945                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
   946                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
   947                                                          jb      .90                                             ;yes, continue
   948                                                          add     al,7                                            ;no, make ASCII
   949                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
   950                                                          call    BootPrint                                       ;write error message
   951                                                          pop     ax                                              ;restore error code
   952                                  ;
   953                                  ;       Display the completion message.
   954                                  ;
   955                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
   956                                                          mov     al,ah                                           ;BIOS return code
   957                                                          cmp     al,0                                            ;success?
   958                                                          je      .110                                            ;yes, continue
   959                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
   960                                                          cmp     al,1                                            ;disk parameter error?
   961                                                          je      .110                                            ;yes, continue
   962                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
   963                                                          cmp     al,2                                            ;address mark not found?
   964                                                          je      .110                                            ;yes, continue
   965                                                          mov     si,czPrepMsgErr3                                ;protected disk message
   966                                                          cmp     al,3                                            ;protected disk?
   967                                                          je      .110                                            ;yes, continue
   968                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
   969                                                          cmp     al,6                                            ;diskette removed?
   970                                                          je      .110                                            ;yes, continue
   971                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
   972                                                          cmp     al,80H                                          ;drive timed out?
   973                                                          je      .110                                            ;yes, continue
   974                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
   975                                  .110                    call    BootPrint                                       ;display result message
   976                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
   977                                                          int     021h                                            ;terminate DOS program
   978                                                          ret                                                     ;return (should not execute)
   979                                  ;-----------------------------------------------------------------------------------------------------------------------
   980                                  ;
   981                                  ;       Diskette Preparation Messages
   982                                  ;
   983                                  ;-----------------------------------------------------------------------------------------------------------------------
   984                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
   985                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
   986                                                          db      13,10
   987                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
   988                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
   989                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   990                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
   991                                                          db      13,10,0
   992                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
   993                                                          db      13,10,0
   994                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   995                                                          db      13,10,0
   996                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   997                                                          db      13,10,0
   998                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   999                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1000                                                          db      13,10,0
  1001                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1002                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1003                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1004                                                          db      13,10,"and retry."
  1005                                                          db      13,10,0
  1006                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1007                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1008                                                          db      13,10,"using another diskette."
  1009                                                          db      13,10,0
  1010                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1011                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1012                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1013                                                          db      13,10,0
  1014                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1015                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1016                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1017                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1018                                                          db      13,10,"is properly inserted in the diskette drive."
  1019                                                          db      13,10,0
  1020                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1021                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1022                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1023                                                          db      13,10,0
  1024                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1025                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1026                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1027                                                          db      13,10,0
  1028                                  wcPrepInBuf             equ     $
  1029                                  %endif
  1030                                  %ifdef BUILDDISK
  1031                                  ;=======================================================================================================================
  1032                                  ;
  1033                                  ;       File Allocation Tables
  1034                                  ;
  1035                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1036                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1037                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1038                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1039                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1040                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1041                                  ;       the last cluster in the chain.
  1042                                  ;
  1043                                  ;       Every three bytes encode two FAT entries as follows:
  1044                                  ;
  1045                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1046                                  ;
  1047                                  ;=======================================================================================================================
  1048                                  ;-----------------------------------------------------------------------------------------------------------------------
  1049                                  ;
  1050                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1051                                  ;
  1052                                  ;-----------------------------------------------------------------------------------------------------------------------
  1053                                  section                 fat1                                                    ;first copy of FAT
  1054 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1055 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1056 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1057 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1058 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1059 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1060 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1061 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1062 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1063 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1064 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1065 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1066                                  ;-----------------------------------------------------------------------------------------------------------------------
  1067                                  ;
  1068                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1069                                  ;
  1070                                  ;-----------------------------------------------------------------------------------------------------------------------
  1071                                  section                 fat2                                                    ;second copy of FAT
  1072 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1073 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1074 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1075 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1076 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1077 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1078 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1079 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1080 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1081 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1082 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1083 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1084                                  ;-----------------------------------------------------------------------------------------------------------------------
  1085                                  ;
  1086                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1087                                  ;
  1088                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1089                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1090                                  ;       copy.
  1091                                  ;
  1092                                  ;-----------------------------------------------------------------------------------------------------------------------
  1093                                  section                 dir                                                     ;diskette directory
  1094 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1094 00000009 4F4D               
  1095 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1096 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1097 00000016 0000                                            dw      0h                                              ;time
  1098 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1099 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1100 0000001A 0200                                            dw      2                                               ;first cluster
  1101 0000001C 00540000                                        dd      05400h                                          ;file size
  1102 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1103                                  %endif
  1104                                  %ifdef BUILDCOM
  1105                                  ;=======================================================================================================================
  1106                                  ;
  1107                                  ;       OS.COM
  1108                                  ;
  1109                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1110                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1111                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1112                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1113                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1114                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1115                                  ;
  1116                                  ;       Our loader addressability is set up according to the following diagram.
  1117                                  ;
  1118                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1119                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1120                                  ;                               |  256 = 100h bytes                             |
  1121                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1122                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1123                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1124                                  ;                       007e00  +-----------------------------------------------+
  1125                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1126                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1127                                  ;                               |                                               |
  1128                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1129                                  ;                               |                                               |
  1130                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1131                                  ;                               |  Loader Code                                  |
  1132                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1133                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1134                                  ;
  1135                                  ;=======================================================================================================================
  1136                                  ;-----------------------------------------------------------------------------------------------------------------------
  1137                                  ;
  1138                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1139                                  ;
  1140                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1141                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1142                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1143                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1144                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1145                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1146                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1147                                  ;       registers.
  1148                                  ;
  1149                                  ;-----------------------------------------------------------------------------------------------------------------------
  1150                                                          cpu     8086                                            ;assume minimal CPU
  1151                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1152                                                          bits    16                                              ;this is 16-bit code
  1153 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1154 00000001 1F                                              pop     ds                                              ;...as our data segment
  1155 00000002 0E                                              push    cs                                              ;use the code segment
  1156 00000003 07                                              pop     es                                              ;...as our extra segment
  1157                                  ;
  1158                                  ;       Write a message to the console so we know we have our addressability established.
  1159                                  ;
  1160 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1161 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1162                                  ;
  1163                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1164                                  ;
  1165 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1166 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1167 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1168 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1169                                                          cpu     386                                             ;allow 80386 instructions
  1170 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1171 00000017 E89600                                          call    PutTTYString                                    ;display message
  1172                                  ;
  1173                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1174                                  ;
  1175 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1176 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1177 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1178 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1179 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1180 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1181 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1182 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1183 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1184 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1185                                  ;
  1186                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1187                                  ;
  1188 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1189 00000038 07                                              pop     es                                              ;... as target segment
  1190 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1191 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1192 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1193 00000041 FC                                              cld                                                     ;forward strings
  1194 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1195 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1196 00000047 E86600                                          call    PutTTYString                                    ;display message
  1197                                  ;
  1198                                  ;       Switch to protected mode.
  1199                                  ;
  1200 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1201 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1202 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1203 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1204 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1205 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1206 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1207 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1208 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1209 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1210 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1211                                  ;
  1212                                  ;       Enable hardware and maskable interrupts.
  1213                                  ;
  1214 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1215 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1216 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1217 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1218                                  ;
  1219                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1220                                  ;
  1221 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1222 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1223 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1224                                  ;-----------------------------------------------------------------------------------------------------------------------
  1225                                  ;
  1226                                  ;       Routine:        LoaderExit
  1227                                  ;
  1228                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1229                                  ;
  1230                                  ;       In:             DS:SI   string address
  1231                                  ;
  1232                                  ;-----------------------------------------------------------------------------------------------------------------------
  1233 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1234                                  ;
  1235                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1236                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1237                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1238                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1239                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1240                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1241                                  ;
  1242 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1243 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1244 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1245 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1246 00000085 F4                                              hlt                                                     ;wait for interrupt
  1247 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1248                                  ;
  1249                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1250                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1251                                  ;       HLT until the system resets.
  1252                                  ;
  1253 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1254 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1255 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1256 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1257 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1258                                  ;-----------------------------------------------------------------------------------------------------------------------
  1259                                  ;
  1260                                  ;       Routine:        GetCPUType
  1261                                  ;
  1262                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1263                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1264                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1265                                  ;
  1266                                  ;       Out:            AX      0 = 808x, v20, etc.
  1267                                  ;                               1 = 80186
  1268                                  ;                               2 = 80286
  1269                                  ;                               3 = 80386
  1270                                  ;
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1273 00000092 B120                                            mov     cl,32                                           ;shift count
  1274 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1275 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1276 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1277                                                          cpu     186
  1278 0000009A 54                                              push    sp                                              ;save stack pointer
  1279 0000009B 59                                              pop     cx                                              ;...into cx
  1280 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1281 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1282                                                          cpu     286
  1283 000000A0 40                                              inc     ax                                              ;AX = 2
  1284 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1285 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1286 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1287 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1288 000000AE 40                                              inc     ax                                              ;AX = 3
  1289 000000AF C3                      .10                     ret                                                     ;return
  1290                                  ;-----------------------------------------------------------------------------------------------------------------------
  1291                                  ;
  1292                                  ;       Routine:        PutTTYString
  1293                                  ;
  1294                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1295                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1296                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1297                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1298                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1299                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1300                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1301                                  ;                       to LODSB is not needed.
  1302                                  ;
  1303                                  ;       In:             DS:SI   address of string
  1304                                  ;
  1305                                  ;       Out:            DF      0
  1306                                  ;                       ZF      1
  1307                                  ;                       AL      0
  1308                                  ;
  1309                                  ;-----------------------------------------------------------------------------------------------------------------------
  1310 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1311 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1312 000000B2 84C0                                            test    al,al                                           ;end of string?
  1313 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1314 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1315 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1316 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1317 000000BC C3                      .20                     ret                                                     ;return
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;       Loader Data
  1321                                  ;
  1322                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1323                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1324                                  ;
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326 000000BD 90                                              align   2
  1327 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1328 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1329 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1330 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1331 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1331 000000D1 74696E672073797374-
  1331 000000DA 656D20726571756972-
  1331 000000E3 657320616E20693338-
  1331 000000EC 36206F72206C617465-
  1331 000000F5 722070726F63657373-
  1331 000000FE 6F722E0D0A         
  1332 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1332 0000010C 65737320616E79206B-
  1332 00000115 657920746F20726573-
  1332 0000011E 746172742074686520-
  1332 00000127 636F6D70757465722E-
  1332 00000130 0D0A00             
  1333 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1334 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1334 00000145 7265640D0A00       
  1335 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1335 00000154 616465640D0A00     
  1336 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1336 00000164 4F530D0A00         
  1337 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1338                                  ;=======================================================================================================================
  1339                                  ;
  1340                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1341                                  ;
  1342                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1343                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1344                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1345                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1346                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1347                                  ;
  1348                                  ;=======================================================================================================================
  1349                                  ;=======================================================================================================================
  1350                                  ;
  1351                                  ;       Kernel Tables
  1352                                  ;
  1353                                  ;=======================================================================================================================
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1357                                  ;
  1358                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1359                                  ;       first descriptor must be all nulls.
  1360                                  ;
  1361                                  ;       6   5         4         3         2         1         0
  1362                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1363                                  ;       ----------------------------------------------------------------
  1364                                  ;       h......hffffmmmma......ab......................bn..............n
  1365                                  ;
  1366                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1367                                  ;               ffff                                                            flags
  1368                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1369                                  ;                       a......a                                                access
  1370                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1371                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1372                                  ;
  1373                                  ;       00000000                                                                all areas have base addresses below 2^24
  1374                                  ;               0...                                                            single-byte size granularity
  1375                                  ;               1...                                                            4-kilobyte size granularity
  1376                                  ;               .0..                                                            16-bit default for code segments
  1377                                  ;               .1..                                                            32-bit default for code segments
  1378                                  ;               ..0.                                                            intel-reserved; should be zero
  1379                                  ;               ...0                                                            available for operating system use
  1380                                  ;                   0000                                                        segment is less than 2^16 in size
  1381                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1382                                  ;                       1.......                                                segment is present in memory
  1383                                  ;                       .00.....                                                segment is of privilege level 0
  1384                                  ;                       ...0....                                                segment is of system or gate type
  1385                                  ;                       ...00010                                                local decriptor table (LDT)
  1386                                  ;                       ...01001                                                task state segment (TSS) available
  1387                                  ;                       ...01011                                                task state segment (TSS) busy
  1388                                  ;                       ...10...                                                data segment
  1389                                  ;                       ...10011                                                writable data (accessed)
  1390                                  ;                       ...11...                                                code segment
  1391                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1392                                  ;
  1393                                  ;-----------------------------------------------------------------------------------------------------------------------
  1394                                  section                 gdt                                                     ;global descriptor table
  1395 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1396 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1397 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1398 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1399 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1400 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1401 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1402 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1403 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1404 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1405 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1406 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1407 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1408 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1409 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1410                                  ;-----------------------------------------------------------------------------------------------------------------------
  1411                                  ;
  1412                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1413                                  ;
  1414                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1415                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1416                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1417                                  ;
  1418                                  ;       6   5         4         3         2         1         0
  1419                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1420                                  ;       ----------------------------------------------------------------
  1421                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1422                                  ;
  1423                                  ;       h...h   high-order offset (bits 16-31)
  1424                                  ;       P       present (0=unused interrupt)
  1425                                  ;       zz      descriptor privilege level
  1426                                  ;       S       storage segment (must be zero for IDT)
  1427                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1428                                  ;       S...S   handling code selector in GDT
  1429                                  ;       l...l   lo-order offset (bits 0-15)
  1430                                  ;
  1431                                  ;-----------------------------------------------------------------------------------------------------------------------
  1432                                  section                 idt                                                     ;interrupt descriptor table
  1433                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1433                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1433 00000000 00004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1434                                                          mtrap   singlestep                                      ;01 single step
  1434                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1434 00000008 02004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1435                                                          mtrap   nmi                                             ;02 non-maskable
  1435                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1435 00000010 04004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1436                                                          mtrap   break                                           ;03 break
  1436                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1436 00000018 06004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1437                                                          mtrap   into                                            ;04 into
  1437                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1437 00000020 08004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1438                                                          mtrap   bounds                                          ;05 bounds
  1438                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1438 00000028 0A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1439                                                          mtrap   badopcode                                       ;06 bad op code
  1439                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1439 00000030 0C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1440                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1440                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1440 00000038 0E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1441                                                          mtrap   doublefault                                     ;08 double-fault
  1441                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1441 00000040 10004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1442                                                          mtrap   operand                                         ;09 operand
  1442                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1442 00000048 12004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1443                                                          mtrap   badtss                                          ;0a bad TSS
  1443                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1443 00000050 14004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1444                                                          mtrap   notpresent                                      ;0b not-present
  1444                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1444 00000058 16004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1445                                                          mtrap   stacklimit                                      ;0c stack limit
  1445                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1445 00000060 18004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1446                                                          mtrap   protection                                      ;0d general protection fault
  1446                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1446 00000068 1A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1447                                                          mtrap   int14                                           ;0e (reserved)
  1447                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1447 00000070 1C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1448                                                          mtrap   int15                                           ;0f (reserved)
  1448                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1448 00000078 1E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1449                                                          mtrap   coproccalc                                      ;10 (reserved)
  1449                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1449 00000080 20004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1450                                                          mtrap   int17                                           ;11 (reserved)
  1450                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1450 00000088 22004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1451                                                          mtrap   int18                                           ;12 (reserved)
  1451                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1451 00000090 24004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1452                                                          mtrap   int19                                           ;13 (reserved)
  1452                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1452 00000098 26004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1453                                                          mtrap   int20                                           ;14 (reserved)
  1453                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1453 000000A0 28004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1454                                                          mtrap   int21                                           ;15 (reserved)
  1454                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1454 000000A8 2A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1455                                                          mtrap   int22                                           ;16 (reserved)
  1455                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1455 000000B0 2C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1456                                                          mtrap   int23                                           ;17 (reserved)
  1456                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1456 000000B8 2E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1457                                                          mtrap   int24                                           ;18 (reserved)
  1457                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1457 000000C0 30004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1458                                                          mtrap   int25                                           ;19 (reserved)
  1458                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1458 000000C8 32004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1459                                                          mtrap   int26                                           ;1a (reserved)
  1459                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1459 000000D0 34004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1460                                                          mtrap   int27                                           ;1b (reserved)
  1460                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1460 000000D8 36004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1461                                                          mtrap   int28                                           ;1c (reserved)
  1461                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1461 000000E0 38004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1462                                                          mtrap   int29                                           ;1d (reserved)
  1462                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1462 000000E8 3A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1463                                                          mtrap   int30                                           ;1e (reserved)
  1463                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1463 000000F0 3C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1464                                                          mtrap   int31                                           ;1f (reserved)
  1464                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1464 000000F8 3E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1465                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1465                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1465 00000100 41004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1466                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1466                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1466 00000108 92004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1467                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1467                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1467 00000110 95004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1468                                                          mint    com2                                            ;23 IRQ3 com2
  1468                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1468 00000118 98004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1469                                                          mint    com1                                            ;24 IRQ4 com1
  1469                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1469 00000120 9B004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1470                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1470                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1470 00000128 9E004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1471                                                          mint    diskette                                        ;26 IRQ6 diskette
  1471                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1471 00000130 A1004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1472                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1472                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1472 00000138 BB004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1473                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1473                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1473 00000140 BE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1474                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1474                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1474 00000148 C1004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1475                                                          mint    irq10                                           ;2a IRQA (reserved)
  1475                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1475 00000150 C4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1476                                                          mint    irq11                                           ;2b IRQB (reserved)
  1476                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1476 00000158 C7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1477                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1477                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1477 00000160 CA004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1478                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1478                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1478 00000168 CD004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1479                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1479                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1479 00000170 D0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1480                                                          mint    irq15                                           ;2f IRQF (reserved)
  1480                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1480 00000178 D3004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1481                                                          mtrap   svc                                             ;30 OS services
  1481                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1481 00000180 E5004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1482 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1483                                  ;=======================================================================================================================
  1484                                  ;
  1485                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1486                                  ;
  1487                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1488                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1489                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1490                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1491                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1492                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1493                                  ;       label is referenced in the "mint" and "mint" macros found in the IDT to specify the address of the handlers.
  1494                                  ;
  1495                                  ;=======================================================================================================================
  1496                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1497                                                          cpu     386                                             ;allow 80386 instructions
  1498                                                          bits    32                                              ;this is 32-bit code
  1499                                  ;=======================================================================================================================
  1500                                  ;
  1501                                  ;       CPU Interrupt Handlers
  1502                                  ;
  1503                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1504                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1505                                  ;
  1506                                  ;=======================================================================================================================
  1507                                  ;-----------------------------------------------------------------------------------------------------------------------
  1508                                  ;
  1509                                  ;       INT0    Divide By Zero
  1510                                  ;
  1511                                  ;-----------------------------------------------------------------------------------------------------------------------
  1512                                                          menter  dividebyzero                                    ;divide by zero
  1512                              <1> ?%1 equ ($-$$)
  1513 00000000 EB3E                                            jmp     ReportInterrupt                                 ;report interrupt
  1514                                  ;-----------------------------------------------------------------------------------------------------------------------
  1515                                  ;
  1516                                  ;       INT1    Single Step
  1517                                  ;
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519                                                          menter  singlestep                                      ;single step
  1519                              <1> ?%1 equ ($-$$)
  1520 00000002 EB3C                                            jmp     ReportInterrupt                                 ;report interrupt
  1521                                  ;-----------------------------------------------------------------------------------------------------------------------
  1522                                  ;
  1523                                  ;       INT2    Non-Maskable Interrupt
  1524                                  ;
  1525                                  ;-----------------------------------------------------------------------------------------------------------------------
  1526                                                          menter  nmi                                             ;non-maskable
  1526                              <1> ?%1 equ ($-$$)
  1527 00000004 EB3A                                            jmp     ReportInterrupt                                 ;report interrupt
  1528                                  ;-----------------------------------------------------------------------------------------------------------------------
  1529                                  ;
  1530                                  ;       INT3    Break
  1531                                  ;
  1532                                  ;-----------------------------------------------------------------------------------------------------------------------
  1533                                                          menter  break                                           ;break
  1533                              <1> ?%1 equ ($-$$)
  1534 00000006 EB38                                            jmp     ReportInterrupt                                 ;report interrupt
  1535                                  ;-----------------------------------------------------------------------------------------------------------------------
  1536                                  ;
  1537                                  ;       INT4    Into
  1538                                  ;
  1539                                  ;-----------------------------------------------------------------------------------------------------------------------
  1540                                                          menter  into                                            ;into
  1540                              <1> ?%1 equ ($-$$)
  1541 00000008 EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1542                                  ;-----------------------------------------------------------------------------------------------------------------------
  1543                                  ;
  1544                                  ;       INT5    Bounds
  1545                                  ;
  1546                                  ;-----------------------------------------------------------------------------------------------------------------------
  1547                                                          menter  bounds                                          ;bounds
  1547                              <1> ?%1 equ ($-$$)
  1548 0000000A EB34                                            jmp     ReportInterrupt                                 ;report interrupt
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  ;
  1551                                  ;       INT6    Bad Operation Code
  1552                                  ;
  1553                                  ;-----------------------------------------------------------------------------------------------------------------------
  1554                                                          menter  badopcode                                       ;bad opcode interrupt
  1554                              <1> ?%1 equ ($-$$)
  1555 0000000C EB32                                            jmp     ReportInterrupt                                 ;report interrupt
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557                                  ;
  1558                                  ;       INT7    No Coprocessor
  1559                                  ;
  1560                                  ;-----------------------------------------------------------------------------------------------------------------------
  1561                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1561                              <1> ?%1 equ ($-$$)
  1562 0000000E EB30                                            jmp     ReportInterrupt                                 ;report interrupt
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  ;
  1565                                  ;       INT8    Double Fault
  1566                                  ;
  1567                                  ;-----------------------------------------------------------------------------------------------------------------------
  1568                                                          menter  doublefault                                     ;doublefault interrupt
  1568                              <1> ?%1 equ ($-$$)
  1569 00000010 EB2E                                            jmp     ReportInterrupt                                 ;report interrupt
  1570                                  ;-----------------------------------------------------------------------------------------------------------------------
  1571                                  ;
  1572                                  ;       INT9    Operand
  1573                                  ;
  1574                                  ;-----------------------------------------------------------------------------------------------------------------------
  1575                                                          menter  operand                                         ;operand interrupt
  1575                              <1> ?%1 equ ($-$$)
  1576 00000012 EB2C                                            jmp     ReportInterrupt                                 ;report interrupt
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                  ;
  1579                                  ;       INT10   Bad Task State Segment
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                                          menter  badtss                                          ;bad TSS interrupt
  1582                              <1> ?%1 equ ($-$$)
  1583 00000014 EB2A                                            jmp     ReportInterrupt                                 ;report interrupt
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;       INT11   Not Present
  1587                                  ;
  1588                                  ;-----------------------------------------------------------------------------------------------------------------------
  1589                                                          menter  notpresent                                      ;not present interrupt
  1589                              <1> ?%1 equ ($-$$)
  1590 00000016 EB28                                            jmp     ReportInterrupt                                 ;report interrupt
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT12   Stack Limit
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  stacklimit                                      ;stack limit interrupt
  1596                              <1> ?%1 equ ($-$$)
  1597 00000018 EB26                                            jmp     ReportInterrupt                                 ;report interrupt
  1598                                  ;-----------------------------------------------------------------------------------------------------------------------
  1599                                  ;
  1600                                  ;       INT13   General Protection Fault
  1601                                  ;
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                                          menter  protection                                      ;protection fault interrupt
  1603                              <1> ?%1 equ ($-$$)
  1604 0000001A EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  ;
  1607                                  ;       INT14   Reserved
  1608                                  ;
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                                          menter  int14                                           ;(reserved)
  1610                              <1> ?%1 equ ($-$$)
  1611 0000001C EB22                                            jmp     ReportInterrupt                                 ;report interrupt
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                  ;
  1614                                  ;       INT15   Reserved
  1615                                  ;
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                                          menter  int15                                           ;(reserved)
  1617                              <1> ?%1 equ ($-$$)
  1618 0000001E EB20                                            jmp     ReportInterrupt                                 ;report interrupt
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                  ;
  1621                                  ;       INT16   Coprocessor Calculation
  1622                                  ;
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                                          menter  coproccalc                                      ;coprocessor calculation
  1624                              <1> ?%1 equ ($-$$)
  1625 00000020 EB1E                                            jmp     ReportInterrupt                                 ;report interrupt
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  ;
  1628                                  ;       INT17   Reserved
  1629                                  ;
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                                          menter  int17                                           ;(reserved)
  1631                              <1> ?%1 equ ($-$$)
  1632 00000022 EB1C                                            jmp     ReportInterrupt                                 ;report interrupt
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  ;
  1635                                  ;       INT18   Reserved
  1636                                  ;
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                                          menter  int18                                           ;(reserved)
  1638                              <1> ?%1 equ ($-$$)
  1639 00000024 EB1A                                            jmp     ReportInterrupt                                 ;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;       INT19   Reserved
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                                          menter  int19                                           ;(reserved)
  1645                              <1> ?%1 equ ($-$$)
  1646 00000026 EB18                                            jmp     ReportInterrupt                                 ;report interrupt
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                  ;
  1649                                  ;       INT20   Reserved
  1650                                  ;
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                                          menter  int20                                           ;(reserved)
  1652                              <1> ?%1 equ ($-$$)
  1653 00000028 EB16                                            jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT21   Reserved
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  int21                                           ;(reserved)
  1659                              <1> ?%1 equ ($-$$)
  1660 0000002A EB14                                            jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT22   Reserved
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  int22                                           ;(reserved)
  1666                              <1> ?%1 equ ($-$$)
  1667 0000002C EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  ;
  1670                                  ;       INT23   Reserved
  1671                                  ;
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                                          menter  int23                                           ;(reserved)
  1673                              <1> ?%1 equ ($-$$)
  1674 0000002E EB10                                            jmp     ReportInterrupt                                 ;report interrupt
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                  ;
  1677                                  ;       INT24   Reserved
  1678                                  ;
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                                          menter  int24                                           ;(reserved)
  1680                              <1> ?%1 equ ($-$$)
  1681 00000030 EB0E                                            jmp     ReportInterrupt                                 ;report interrupt
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  ;
  1684                                  ;       INT25   Reserved
  1685                                  ;
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                                          menter  int25                                           ;(reserved)
  1687                              <1> ?%1 equ ($-$$)
  1688 00000032 EB0C                                            jmp     ReportInterrupt                                 ;report interrupt
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  ;
  1691                                  ;       INT26   Reserved
  1692                                  ;
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                                          menter  int26                                           ;(reserved)
  1694                              <1> ?%1 equ ($-$$)
  1695 00000034 EB0A                                            jmp     ReportInterrupt                                 ;report interrupt
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  ;
  1698                                  ;       INT27   Reserved
  1699                                  ;
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                                          menter  int27                                           ;(reserved)
  1701                              <1> ?%1 equ ($-$$)
  1702 00000036 EB08                                            jmp     ReportInterrupt                                 ;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       INT28   Reserved
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                                          menter  int28                                           ;(reserved)
  1708                              <1> ?%1 equ ($-$$)
  1709 00000038 EB06                                            jmp     ReportInterrupt                                 ;report interrupt
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;       INT29   Reserved
  1713                                  ;
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                                          menter  int29                                           ;(reserved)
  1715                              <1> ?%1 equ ($-$$)
  1716 0000003A EB04                                            jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT30   Reserved
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  int30                                           ;(reserved)
  1722                              <1> ?%1 equ ($-$$)
  1723 0000003C EB02                                            jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT31   Reserved
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  int31                                           ;(reserved)
  1729                              <1> ?%1 equ ($-$$)
  1730 0000003E EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       Routine:        ReportInterrupt
  1734                                  ;
  1735                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1736                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739 00000040 CF                      ReportInterrupt         iretd                                                   ;return
  1740                                  ;=======================================================================================================================
  1741                                  ;
  1742                                  ;       Hardware Device Interupts
  1743                                  ;
  1744                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1745                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1746                                  ;       (BX=2028h).
  1747                                  ;
  1748                                  ;=======================================================================================================================
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       IRQ0    Clock Tick Interrupt
  1752                                  ;
  1753                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1754                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1755                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1756                                  ;
  1757                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1758                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1759                                  ;
  1760                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1761                                  ;       zero, the floppy disk motors are turned off.
  1762                                  ;
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                                          menter  clocktick                                       ;clock tick interrupt
  1764                              <1> ?%1 equ ($-$$)
  1765 00000041 50                                              push    eax                                             ;save non-volatile regs
  1766 00000042 52                                              push    edx                                             ;
  1767 00000043 1E                                              push    ds                                              ;
  1768                                  ;
  1769                                  ;       End the interrupt.
  1770                                  ;
  1771 00000044 E8DC000000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1772                                  ;
  1773                                  ;       Update the clock tick count and the elapsed days as needed.
  1774                                  ;
  1775 00000049 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1776 0000004B 1F                                              pop     ds                                              ;... into data segment register
  1777 0000004C A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1778 00000051 40                                              inc     eax                                             ;increment clock ticks
  1779 00000052 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1780 00000057 7208                                            jb      irq0.10                                         ;no, skip ahead
  1781 00000059 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1782 0000005F 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1783 00000061 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1784                                  ;
  1785                                  ;       Decrement floppy disk motor timeout.
  1786                                  ;
  1787 00000066 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1788 0000006D 741E                                            je      irq0.20                                         ;yes, skip ahead
  1789 0000006F FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1790 00000075 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1791                                  ;
  1792                                  ;       Turn off the floppy disk motor if appropriate.
  1793                                  ;
  1794 00000077 FB                                              sti                                                     ;enable maskable interrupts
  1795 00000078 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1796 0000007A B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1797 0000007C EC                                              in      al,dx                                           ;FDC main status byte
  1798 0000007D A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1799 0000007F 75F7                                            jnz     irq0.15                                         ;wait while busy
  1800 00000081 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1801 00000083 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1802 00000088 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1803 0000008A B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1804 0000008C EE                                              out     dx,al                                           ;turn motor off
  1805                                  ;
  1806                                  ;       Enable maskable interrupts.
  1807                                  ;
  1808 0000008D FB                      irq0.20                 sti                                                     ;enable maskable interrupts
  1809                                  ;
  1810                                  ;       Restore and return.
  1811                                  ;
  1812 0000008E 1F                                              pop     ds                                              ;restore modified regs
  1813 0000008F 5A                                              pop     edx                                             ;
  1814 00000090 58                                              pop     eax                                             ;
  1815 00000091 CF                                              iretd                                                   ;return
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       IRQ1    Keyboard Interrupt
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  keyboard                                        ;keyboard interrrupt
  1821                              <1> ?%1 equ ($-$$)
  1822 00000092 50                                              push    eax                                             ;
  1823 00000093 EB48                                            jmp     hwint                                           ;
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                  ;
  1826                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  1827                                  ;
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                                          menter  iochannel                                       ;secondary 8259A cascade
  1829                              <1> ?%1 equ ($-$$)
  1830 00000095 50                                              push    eax                                             ;save modified regs
  1831 00000096 EB45                                            jmp     hwint                                           ;end interrupt and return
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  com2                                            ;serial port 2 interrupt
  1837                              <1> ?%1 equ ($-$$)
  1838 00000098 50                                              push    eax                                             ;save modified regs
  1839 00000099 EB42                                            jmp     hwint                                           ;end interrupt and return
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  ;
  1842                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                                          menter  com1                                            ;serial port 1 interrupt
  1845                              <1> ?%1 equ ($-$$)
  1846 0000009B 50                                              push    eax                                             ;save modified regs
  1847 0000009C EB3F                                            jmp     hwint                                           ;end interrupt and return
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  lpt2                                            ;parallel port 2 interrupt
  1853                              <1> ?%1 equ ($-$$)
  1854 0000009E 50                                              push    eax                                             ;save modified regs
  1855 0000009F EB3C                                            jmp     hwint                                           ;end interrupt and return
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  ;
  1858                                  ;       IRQ6    Diskette Hardware Interrupt
  1859                                  ;
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861                                                          menter  diskette                                        ;floppy disk interrupt
  1861                              <1> ?%1 equ ($-$$)
  1862 000000A1 50                                              push    eax                                             ;save non-volatile regs
  1863 000000A2 1E                                              push    ds                                              ;
  1864 000000A3 E87D000000                                      call    PutPrimaryEndOfInt                              ;end the interrupt
  1865 000000A8 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1866 000000AA 1F                                              pop     ds                                              ;... into DS register
  1867 000000AB A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  1868 000000B0 0C80                                            or      al,10000000b                                    ;set IRQ flag
  1869 000000B2 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  1870 000000B7 FB                                              sti                                                     ;enable maskable interrupts
  1871 000000B8 1F                                              pop     ds                                              ;restore non-volatile regs
  1872 000000B9 58                                              pop     eax                                             ;
  1873 000000BA CF                                              iretd                                                   ;return from interrupt
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                  ;
  1876                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  1877                                  ;
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                                          menter  lpt1                                            ;parallel port 1 interrupt
  1879                              <1> ?%1 equ ($-$$)
  1880 000000BB 50                                              push    eax                                             ;save modified regs
  1881 000000BC EB1F                                            jmp     hwint                                           ;end interrupt and return
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  rtclock                                         ;real-time clock interrupt
  1887                              <1> ?%1 equ ($-$$)
  1888 000000BE 50                                              push    eax                                             ;save modified regs
  1889 000000BF EB15                                            jmp     hwwint                                          ;end interrupt and return
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  1895                              <1> ?%1 equ ($-$$)
  1896 000000C1 50                                              push    eax                                             ;save modified regs
  1897 000000C2 EB12                                            jmp     hwwint                                          ;end interrupt and return
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;       IRQ10   Reserved Hardware Interrupt
  1901                                  ;
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                                          menter  irq10                                           ;reserved
  1903                              <1> ?%1 equ ($-$$)
  1904 000000C4 50                                              push    eax                                             ;save modified regs
  1905 000000C5 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                  ;
  1908                                  ;       IRQ11   Reserved Hardware Interrupt
  1909                                  ;
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                                          menter  irq11                                           ;reserved
  1911                              <1> ?%1 equ ($-$$)
  1912 000000C7 50                                              push    eax                                             ;save modified regs
  1913 000000C8 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                  ;
  1916                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  1917                                  ;
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  1919                              <1> ?%1 equ ($-$$)
  1920 000000CA 50                                              push    eax                                             ;save modified regs
  1921 000000CB EB09                                            jmp     hwwint                                          ;end interrupt and return
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                  ;
  1924                                  ;       IRQ13   Coprocessor Hardware Interrupt
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                                          menter  coprocessor                                     ;coprocessor interrupt
  1927                              <1> ?%1 equ ($-$$)
  1928 000000CD 50                                              push    eax                                             ;save modified regs
  1929 000000CE EB06                                            jmp     hwwint                                          ;end interrupt and return
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                  ;
  1932                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  1933                                  ;
  1934                                  ;-----------------------------------------------------------------------------------------------------------------------
  1935                                                          menter  fixeddisk                                       ;fixed disk interrupt
  1935                              <1> ?%1 equ ($-$$)
  1936 000000D0 50                                              push    eax                                             ;save modified regs
  1937 000000D1 EB03                                            jmp     hwwint                                          ;end interrupt and return
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       IRQ15   Reserved Hardware Interrupt
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  irq15                                           ;reserved
  1943                              <1> ?%1 equ ($-$$)
  1944 000000D3 50                                              push    eax                                             ;save modified regs
  1945 000000D4 EB00                                            jmp     hwwint                                          ;end interrupt and return
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;       Exit from hardware interrupt
  1949                                  ;
  1950                                  ;-----------------------------------------------------------------------------------------------------------------------
  1951 000000D6 E84F000000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  1952 000000DB EB05                                            jmp     hwint90                                         ;skip ahead
  1953 000000DD E843000000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1954 000000E2 FB                      hwint90                 sti                                                     ;enable maskable interrupts
  1955 000000E3 58                                              pop     eax                                             ;restore modified regs
  1956 000000E4 CF                                              iretd                                                   ;return from interrupt
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                  ;
  1959                                  ;       INT 30h Operating System Software Service Interrupt
  1960                                  ;
  1961                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1962                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  1963                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1964                                  ;       the entry address of the specific function from a table.
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                                          menter  svc
  1967                              <1> ?%1 equ ($-$$)
  1968 000000E5 3C01                                            cmp     al,maxtsvc                                      ;is our function out of range?
  1969 000000E7 730D                                            jae     svc90                                           ;yes, skip ahead
  1970 000000E9 0FB6C0                                          movzx   eax,al                                          ;function
  1971 000000EC C1E002                                          shl     eax,2                                           ;offset into table
  1972 000000EF 2EFF90[F7000000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  1973 000000F6 CF                      svc90                   iretd                                                   ;return from interrupt
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  ;
  1976                                  ;       Service Request Table
  1977                                  ;
  1978                                  ;
  1979                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1980                                  ;
  1981                                  ;-----------------------------------------------------------------------------------------------------------------------
  1982                                  tsvc                    tsvce   PlaceCursor                                     ;place the cursor at the current loc
  1982                              <1> tsvc :
  1982                              <1> e%1 equ ($-tsvc)/4
  1982 000000F7 [FB000000]          <1>  dd %1
  1983                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                  ;
  1986                                  ;       Service Request Macros
  1987                                  ;
  1988                                  ;       These macros provide positional parameterization of service request calls.
  1989                                  ;
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  %macro                  placeCursor 0
  1992                                                          mov     al,ePlaceCursor                                 ;function code
  1993                                                          int     _svc                                            ;invoke OS service
  1994                                  %endmacro
  1995                                  ;=======================================================================================================================
  1996                                  ;
  1997                                  ;       Kernel Function Library
  1998                                  ;
  1999                                  ;=======================================================================================================================
  2000                                  ;=======================================================================================================================
  2001                                  ;
  2002                                  ;       Input/Output Routines
  2003                                  ;
  2004                                  ;       These routines read and/or write directly to ports.
  2005                                  ;
  2006                                  ;       PlaceCursor
  2007                                  ;       PutPrimaryEndOfInt
  2008                                  ;       PutSecondaryEndOfInt
  2009                                  ;
  2010                                  ;=======================================================================================================================
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                  ;
  2013                                  ;       Routine:        PlaceCursor
  2014                                  ;
  2015                                  ;       Description:    This routine positions the cursor on the console.
  2016                                  ;
  2017                                  ;       In:             DS      OS data selector
  2018                                  ;
  2019                                  ;-----------------------------------------------------------------------------------------------------------------------
  2020 000000FB 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2021 000000FC A059080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2022 00000101 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2023 00000103 F6E4                                            mul     ah                                              ;row offset
  2024 00000105 020558080000                                    add     al,[wbConsoleColumn]                            ;add column
  2025 0000010B 80D400                                          adc     ah,0                                            ;add overflow
  2026 0000010E 89C1                                            mov     ecx,eax                                         ;screen offset
  2027 00000110 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2028 00000112 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2029 00000114 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2030 00000116 EE                                              out     dx,al                                           ;select register
  2031 00000117 42                                              inc     edx                                             ;data port
  2032 00000118 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2033 0000011A EE                                              out     dx,al                                           ;store hi-order loc
  2034 0000011B 4A                                              dec     edx                                             ;register select port
  2035 0000011C B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2036 0000011E EE                                              out     dx,al                                           ;select register
  2037 0000011F 42                                              inc     edx                                             ;data port
  2038 00000120 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2039 00000122 EE                                              out     dx,al                                           ;store lo-order loc
  2040 00000123 59                                              pop     ecx                                             ;restore non-volatile regs
  2041 00000124 C3                                              ret                                                     ;return
  2042                                  ;-----------------------------------------------------------------------------------------------------------------------
  2043                                  ;
  2044                                  ;       Routine:        PutPrimaryEndOfInt
  2045                                  ;
  2046                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2047                                  ;
  2048                                  ;-----------------------------------------------------------------------------------------------------------------------
  2049 00000125 B020                    PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2050 00000127 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2051 00000129 C3                                              ret                                                     ;return
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  ;
  2054                                  ;       Routine:        PutSecondaryEndOfInt
  2055                                  ;
  2056                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2057                                  ;
  2058                                  ;-----------------------------------------------------------------------------------------------------------------------
  2059 0000012A B020                    PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2060 0000012C E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2061 0000012E C3                                              ret                                                     ;return
  2062                                  ;-----------------------------------------------------------------------------------------------------------------------
  2063                                  ;
  2064                                  ;       End of the Kernel Function Library
  2065                                  ;
  2066                                  ;-----------------------------------------------------------------------------------------------------------------------
  2067 0000012F 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2068                                  ;=======================================================================================================================
  2069                                  ;
  2070                                  ;       Console Task
  2071                                  ;
  2072                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2073                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2074                                  ;       screen and responds to user commands.
  2075                                  ;
  2076                                  ;=======================================================================================================================
  2077                                  ;-----------------------------------------------------------------------------------------------------------------------
  2078                                  ;
  2079                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2080                                  ;
  2081                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2082                                  ;
  2083                                  ;-----------------------------------------------------------------------------------------------------------------------
  2084                                  section                 constack                                                ;console task stack
  2085 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2086                                  ;-----------------------------------------------------------------------------------------------------------------------
  2087                                  ;
  2088                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2089                                  ;
  2090                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2091                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2092                                  ;       16 descriptors. Six are initially defined.
  2093                                  ;
  2094                                  ;-----------------------------------------------------------------------------------------------------------------------
  2095                                  section                 conldt                                                  ;console local descriptors
  2096 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2097 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2098 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2099 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2100 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  2101 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  2102 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2103                                  ;-----------------------------------------------------------------------------------------------------------------------
  2104                                  ;
  2105                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2106                                  ;
  2107                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2108                                  ;       segment. CS to console code.
  2109                                  ;
  2110                                  ;-----------------------------------------------------------------------------------------------------------------------
  2111                                  section                 contss                                                  ;console task state segment
  2112 00000000 00000000                                        dd      0                                               ;00 back-link tss
  2113 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  2114 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  2115 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  2116 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  2117 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  2118 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  2119 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  2120 00000020 00000000                                        dd      0                                               ;20 eip
  2121 00000024 00020000                                        dd      0200h                                           ;24 eflags
  2122 00000028 00000000                                        dd      0                                               ;28 eax
  2123 0000002C 00000000                                        dd      0                                               ;2c ecx
  2124 00000030 00000000                                        dd      0                                               ;30 edx
  2125 00000034 00000000                                        dd      0                                               ;34 ebx
  2126 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  2127 0000003C 00000000                                        dd      0                                               ;3c ebp
  2128 00000040 00000000                                        dd      0                                               ;40 esi
  2129 00000044 00000000                                        dd      0                                               ;44 edi
  2130 00000048 1C000000                                        dd      001Ch                                           ;48 es
  2131 0000004C 24000000                                        dd      0024h                                           ;4c cs
  2132 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  2133 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  2134 00000058 00000000                                        dd      0                                               ;58 fs
  2135 0000005C 00000000                                        dd      0                                               ;5c gs
  2136 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2137 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2138                                  ;-----------------------------------------------------------------------------------------------------------------------
  2139                                  ;
  2140                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2141                                  ;
  2142                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2143                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2144                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2145                                  ;       event.
  2146                                  ;
  2147                                  ;-----------------------------------------------------------------------------------------------------------------------
  2148                                  section                 conmque                                                 ;console message queue
  2149 00000000 08000000                                        dd      8                                               ;head pointer
  2150 00000004 08000000                                        dd      8                                               ;tail pointer
  2151 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153                                  ;
  2154                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2155                                  ;
  2156                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2157                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2158                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2159                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2160                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2161                                  ;       board input, echoing to the console screen and responding to user commands.
  2162                                  ;
  2163                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2164                                  ;
  2165                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2166                                  ;                               |  Real Mode Interrupt Vectors                  |
  2167                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2168                                  ;                               |  Reserved BIOS Memory Area                    |
  2169                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2170                                  ;                               |  Shared Kernel Memory Area                    |
  2171                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2172                                  ;                               |  Global Descriptor Table (GDT)                |
  2173                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2174                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2175                                  ;                       002000  +-----------------------------------------------+
  2176                                  ;                               |  Interrupt Handlers                           |
  2177                                  ;                               |  Kernel Function Library                      |
  2178                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2179                                  ;                               |  Console Task Stack Area                      |
  2180                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2181                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2182                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2183                                  ;                               |  Console Task Task State Segment (TSS)        |
  2184                                  ;                       004800  +-----------------------------------------------+
  2185                                  ;                               |  Console Task Message Queue                   |
  2186                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2187                                  ;                               |  Console Task Code                            |
  2188                                  ;                               |  Console Task Constants                       |
  2189                                  ;                       006000  +===============================================+
  2190                                  ;
  2191                                  ;-----------------------------------------------------------------------------------------------------------------------
  2192                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2193                                  ;
  2194                                  ;       Initialize console work areas to low values.
  2195                                  ;
  2196 00000000 BF00080000              ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  2197 00000005 30C0                                            xor     al,al                                           ;initialization value
  2198 00000007 B95A000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  2199 0000000C FC                                              cld                                                     ;forward strings
  2200 0000000D F3AA                                            rep     stosb                                           ;initialize data
  2201                                  ;
  2202                                  ;       Initialize the active panel variables.
  2203                                  ;
  2204 0000000F B8[C1000000]                                    mov     eax,czPnlCon001                                 ;initial console panel
  2205 00000014 A300080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  2206                                  ;
  2207                                  ;       Address the console screen memory.
  2208                                  ;
  2209 00000019 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  2210 0000001B 07                                              pop     es                                              ;...into extra segment reg
  2211                                  ;
  2212                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  2213                                  ;
  2214 0000001C BF000F0000                                      mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  2215 00000021 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2216 00000026 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2217 0000002B F3AB                                            rep     stosd                                           ;reset OIA
  2218                                  ;
  2219                                  ;       Clear the console rows. (This is done after every attention key).
  2220                                  ;
  2221 0000002D 31FF                    .20                     xor     edi,edi                                         ;target offset
  2222 0000002F B9C0030000                                      mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  2223 00000034 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initialization value
  2224 00000039 F3AB                                            rep     stosd                                           ;reset screen body
  2225                                  ;
  2226                                  ;       Reset the input field row and column. Address the panel template.
  2227                                  ;
  2228 0000003B 31C0                                            xor     eax,eax                                         ;zero register
  2229 0000003D A304080000                                      mov     [wdConsoleInput],eax                            ;zero input addr
  2230 00000042 A259080000                                      mov     [wbConsoleRow],al                               ;zero console row
  2231 00000047 A258080000                                      mov     [wbConsoleColumn],al                            ;zero console column
  2232                                  ;
  2233                                  ;       Load the field address. Exit loop if address is null.
  2234                                  ;
  2235 0000004C 8B3500080000                                    mov     esi,[wdConsolePanel]                            ;panel template
  2236 00000052 AD                      .30                     lodsd                                                   ;field value addr
  2237 00000053 85C0                                            test    eax,eax                                         ;end of panel?
  2238 00000055 7453                                            jz      .70                                             ;yes, exit loop
  2239 00000057 89C3                                            mov     ebx,eax                                         ;field value addr
  2240                                  ;
  2241                                  ;       Load the field row, column, color and length.
  2242                                  ;
  2243 00000059 AC                                              lodsb                                                   ;attributes
  2244 0000005A 88C5                                            mov     ch,al                                           ;row
  2245 0000005C AC                                              lodsb                                                   ;column
  2246 0000005D 88C1                                            mov     cl,al                                           ;column
  2247 0000005F AC                                              lodsb                                                   ;color
  2248 00000060 88C6                                            mov     dh,al                                           ;color
  2249 00000062 AC                                              lodsb                                                   ;length
  2250 00000063 88C2                                            mov     dl,al                                           ;length
  2251                                  ;
  2252                                  ;       Test the row high-bit for input field indication
  2253                                  ;
  2254 00000065 F6C580                                          test    ch,080h                                         ;input field?
  2255 00000068 741C                                            jz      .40                                             ;no, branch
  2256 0000006A 80E57F                                          and     ch,07Fh                                         ;clear input field indicator
  2257                                  ;
  2258                                  ;       Save the row and column if this is the first input field
  2259                                  ;
  2260 0000006D A059080000                                      mov     al,[wbConsoleRow]                               ;console row
  2261 00000072 0A0558080000                                    or      al,[wbConsoleColumn]                            ;already have an input field?
  2262 00000078 750C                                            jnz     .40                                             ;yes, branch
  2263 0000007A 882D59080000                                    mov     [wbConsoleRow],ch                               ;update console row
  2264 00000080 880D58080000                                    mov     [wbConsoleColumn],cl                            ;update console column
  2265                                  ;
  2266                                  ;       Compute the target offset.
  2267                                  ;
  2268 00000086 0FB6C5                  .40                     movzx   eax,ch                                          ;row
  2269 00000089 B450                                            mov     ah,ECONCOLS                                     ;columns per row
  2270 0000008B F6E4                                            mul     ah                                              ;row offset
  2271 0000008D 00C8                                            add     al,cl                                           ;add column
  2272 0000008F 80D400                                          adc     ah,0                                            ;handle overflow
  2273 00000092 D1E0                                            shl     eax,1                                           ;two-bytes per column
  2274 00000094 89C7                                            mov     edi,eax                                         ;target offset
  2275                                  ;
  2276                                  ;       Display the field contents
  2277                                  ;
  2278 00000096 87DE                                            xchg    ebx,esi                                         ;swap panel and field addr
  2279 00000098 0FB6CA                                          movzx   ecx,dl                                          ;length
  2280 0000009B 88F4                                            mov     ah,dh                                           ;color
  2281 0000009D AC                      .50                     lodsb                                                   ;character
  2282 0000009E 84C0                                            test    al,al                                           ;end of value?
  2283 000000A0 7404                                            jz      .60                                             ;yes, branch
  2284 000000A2 66AB                                            stosw                                                   ;store character and color
  2285 000000A4 E2F7                                            loop    .50                                             ;next character
  2286 000000A6 87DE                    .60                     xchg    ebx,esi                                         ;swap panel and field addr
  2287 000000A8 EBA8                                            jmp     short .30                                       ;next field
  2288                                  ;
  2289                                  ;       Place the cursor if we have an input field
  2290                                  ;
  2291 000000AA 8A2559080000            .70                     mov     ah,[wbConsoleRow]                               ;field row
  2292 000000B0 A058080000                                      mov     al,[wbConsoleColumn]                            ;field column
  2293 000000B5 08E0                                            or      al,ah                                           ;input field?
  2294 000000B7 7404                                            jz      .80                                             ;no, branch
  2295                                                          placeCursor                                             ;position the cursor
  2295 000000B9 B000                <1>  mov al,ePlaceCursor
  2295 000000BB CD30                <1>  int _svc
  2296                                  ;
  2297                                  ;       Enter halt loop
  2298                                  ;
  2299 000000BD FB                      .80                     sti                                                     ;enable interrupts
  2300 000000BE F4                                              hlt                                                     ;halt until interrupt
  2301 000000BF EBFC                                            jmp     .80                                             ;continue halt loop
  2302                                  ;-----------------------------------------------------------------------------------------------------------------------
  2303                                  ;
  2304                                  ;       Constants
  2305                                  ;
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307                                  ;-----------------------------------------------------------------------------------------------------------------------
  2308                                  ;
  2309                                  ;       Panels
  2310                                  ;
  2311                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  2312                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  2313                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  2314                                  ;
  2315                                  ;-----------------------------------------------------------------------------------------------------------------------
  2316 000000C1 [ED000000]              czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  2317 000000C5 00000206                                        db      00,00,02h,06                                    ;flags+row, col, attr, length
  2318 000000C9 [F3000000]                                      dd      czFldTitleCon001
  2319 000000CD 001E0714                                        db      00,30,07h,20
  2320 000000D1 [07010000]                                      dd      czFldDatTmCon001
  2321 000000D5 003F0211                                        db      00,63,02h,17
  2322 000000D9 [18010000]                                      dd      czFldPrmptCon001
  2323 000000DD 17000701                                        db      23,00,07h,01
  2324 000000E1 08080000                                        dd      wzConsoleInBuffer
  2325 000000E5 97010F4F                                        db      128+23,01,0Fh,79
  2326 000000E9 00000000                                        dd      0                                               ;end of panel
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                  ;
  2329                                  ;       Strings
  2330                                  ;
  2331                                  ;-----------------------------------------------------------------------------------------------------------------------
  2332 000000ED 434F4E303031            czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  2333 000000F3 437573746F6D4F5320-     czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  2333 000000FC 56657273696F6E2031-
  2333 00000105 2E30               
  2334 00000107 44442D4D4D4D2D5959-     czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  2334 00000110 59592048483A4D4D   
  2335 00000118 3A                      czFldPrmptCon001        db      ":"                                             ;command prompt
  2336 00000119 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  2337                                  %endif
  2338                                  %ifdef BUILDDISK
  2339                                  ;-----------------------------------------------------------------------------------------------------------------------
  2340                                  ;
  2341                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2342                                  ;
  2343                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2344                                  ;
  2345                                  ;-----------------------------------------------------------------------------------------------------------------------
  2346                                  section                 unused                                                  ;unused disk space
  2347 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2348                                  %endif
  2349                                  ;=======================================================================================================================
  2350                                  ;
  2351                                  ;       End of Program Code
  2352                                  ;
  2353                                  ;=======================================================================================================================
