     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.004
     6                                  ;
     7                                  ;       Description:    In this sample program, the loader is expanded to validate the CPU type and place the CPU into
     8                                  ;                       protected mode.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  ;
   210                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   211                                  ;
   212                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   213                                  ;       external devices and signals a hardware interrupt to the CPU.
   214                                  ;
   215                                  ;-----------------------------------------------------------------------------------------------------------------------
   216                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   217                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   218                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   219                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   220                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   221                                  ;-----------------------------------------------------------------------------------------------------------------------
   222                                  ;
   223                                  ;       8253 Programmable Interval Timer                                        EPIT...
   224                                  ;
   225                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   226                                  ;       approximately 18.2 times per second.
   227                                  ;
   228                                  ;-----------------------------------------------------------------------------------------------------------------------
   229                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   230                                  ;-----------------------------------------------------------------------------------------------------------------------
   231                                  ;
   232                                  ;       x86 CPU Architecture                                                    ;EX86...
   233                                  ;
   234                                  ;-----------------------------------------------------------------------------------------------------------------------
   235                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   239                                  ;
   240                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   241                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   242                                  ;
   243                                  ;       0.......        Segment is not present in memory (triggers int 11)
   244                                  ;       1.......        Segment is present in memory
   245                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   246                                  ;       ...0....        Segment is a system segment
   247                                  ;       ...00010                Local Descriptor Table
   248                                  ;       ...00101                Task Gate
   249                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   250                                  ;       ...01100                Call Gate (386)
   251                                  ;       ...01110                Interrupt Gate (386)
   252                                  ;       ...01111                Trap Gate (386)
   253                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   254                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   255                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   256                                  ;
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   259                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       Firmware-Defined Values
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   268                                  ;
   269                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   270                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   271                                  ;
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   274                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   275                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   276                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   277                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   278                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   279                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   280                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   281                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   282                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   283                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  ;
   286                                  ;       Standards-Based Values
   287                                  ;
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ;
   291                                  ;       ASCII                                                                   EASCII...
   292                                  ;
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   295                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       Operating System Values
   299                                  ;
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   304                                  ;
   305                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   306                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   310                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   311                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   312                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   313                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   314                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   315                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;       Console Constants                                                       ECON...
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ECONCOLS                equ     80                                              ;columns per row
   320                                  ECONROWS                equ     24                                              ;console rows
   321                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   322                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   323                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   324                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   325                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   330                                  EGDTCGA                 equ     020h                                            ;cga video selector
   331                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   332                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   333                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   334                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   335                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   336                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   337                                  ;-----------------------------------------------------------------------------------------------------------------------
   338                                  ;       Kernel Constants                                                        EKRN...
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   341                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   342                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   343                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   344                                  ;=======================================================================================================================
   345                                  ;
   346                                  ;       Structures
   347                                  ;
   348                                  ;=======================================================================================================================
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;
   351                                  ;       OSDATA
   352                                  ;
   353                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   354                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  struc                   OSDATA
   358 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   359 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   360 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   361 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   362 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   363 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   364 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   365 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   366 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   367 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   368 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   369 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   370 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   371 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   372 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   373 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   374 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   375 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   376 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   377 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   378 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   379 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   380 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   381 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   382 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   383 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   384 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   385 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   386 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   387 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   388 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   389 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   390 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   391 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   392 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   393 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   394 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   395 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   396 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   397 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   398 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   399 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   400 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   401 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   402 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   403 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   404 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   405 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   406 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   407 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   408 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   409 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   410 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   411 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   412 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   413 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   414 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   415 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   416 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   417 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   418 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   419 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   420 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   421 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   422 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   423 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   424 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   425 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   426 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   427 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   428 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   429 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   430 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   431 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   432 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   433 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   434 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   435 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   436 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   437 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   438 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   439 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   440 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   441 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   442 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   443 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   444 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   445 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   446 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   447 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   448 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   449 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   450 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   451 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   452 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   453 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   454 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   455 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   456 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   457 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   458 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ;
   461                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   462                                  ;
   463                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   464                                  ;
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ECONDATA                equ     ($)
   467 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   468 00000804 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   469 00000854 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   470 00000855 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   471                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;
   474                                  ;       End of OS Variables
   475                                  ;
   476                                  ;-----------------------------------------------------------------------------------------------------------------------
   477                                  endstruc
   478                                  ;-----------------------------------------------------------------------------------------------------------------------
   479                                  ;
   480                                  ;       Macros
   481                                  ;
   482                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   483                                  ;
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  %macro                  mint    1
   486                                  _%1                     equ     ($-$$) / EX86DESCLEN
   487                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   488                                  %endmacro
   489                                  %macro                  mtrap   1
   490                                  _%1                     equ     ($-$$) / EX86DESCLEN
   491                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   492                                  %endmacro
   493                                  %macro                  menter  1
   494                                  ?%1                     equ     ($-$$)
   495                                  %endmacro
   496                                  %macro                  tsvce   1
   497                                  e%1                     equ     ($-tsvc)/4
   498                                                          dd      %1
   499                                  %endmacro
   500                                  %ifdef BUILDBOOT
   501                                  ;=======================================================================================================================
   502                                  ;
   503                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   504                                  ;
   505                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   506                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   507                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   508                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   509                                  ;
   510                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   511                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   512                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   513                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   514                                  ;       immediately followed by a disk parameter table.
   515                                  ;
   516                                  ;=======================================================================================================================
   517                                                          cpu     8086                                            ;assume minimal CPU
   518                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   519                                                          bits    16                                              ;16-bit code at power-up
   520                                  %ifdef BUILDPREP
   521                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   522                                  %else
   523                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   524                                  %endif
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  ;
   527                                  ;       Disk Parameter Table
   528                                  ;
   529                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   530                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   531                                  ;
   532                                  ;-----------------------------------------------------------------------------------------------------------------------
   533                                                          db      "CustomOS"                                      ;eight-byte label
   534                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   535                                  cbClusterSectors        db      1                                               ;sectors per cluster
   536                                  cwReservedSectors       dw      1                                               ;reserved sectors
   537                                  cbFatCount              db      2                                               ;file allocation table copies
   538                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   539                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   540                                  cbDiskType              db      0F0h                                            ;1.44MB
   541                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   542                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   543                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   544                                  cwDiskSides             dw      2                                               ;sides per disk
   545                                  cwSpecialSectors        dw      0                                               ;special sectors
   546                                  ;
   547                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   548                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   549                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   550                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   551                                  ;       given several possible starting values for CS:IP.
   552                                  ;
   553                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   554                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   555                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   556                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   557                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   558                                                          mov     cl,4                                            ;shift count
   559                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   560                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   561                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   562                                  ;
   563                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   564                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   565                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   566                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   567                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   568                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   569                                  ;
   570                                                          sub     bx,16                                           ;BX = 07b0
   571                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   572                                                          mov     es,bx                                           ;ES = 07b0 = psp
   573                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   574                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   575                                  ;
   576                                  ;       Our boot addressability is now set up according to the following diagram.
   577                                  ;
   578                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   579                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   580                                  ;                               |  256 = 100h bytes                             |
   581                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   582                                  ;                               |  Boot Sector (vstart=0100h)                   |
   583                                  ;                               |  1 sector = 512 = 200h bytes                  |
   584                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   585                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   586                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   587                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   588                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   589                                  ;                               |  2 sectors = 1024 = 400h bytes
   590                                  ;                       009400  +-----------------------------------------------+ DS:1900
   591                                  ;
   592                                  ;       On entry, DL indicates the drive being booted from.
   593                                  ;
   594                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   595                                  ;
   596                                  ;       Compute directory i/o buffer address.
   597                                  ;
   598                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   599                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   600                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   601                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   602                                  ;
   603                                  ;       Compute segment where os.com will be loaded.
   604                                  ;
   605                                                          shr     ax,cl                                           ;AX = 0150
   606                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   607                                                          sub     ax,16                                           ;AX = 08f0
   608                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   609                                  ;
   610                                  ;       Set the video mode to 80 column, 25 row, text.
   611                                  ;
   612                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   613                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   614                                  ;
   615                                  ;       Write a message to the console so we know we have our addressability established.
   616                                  ;
   617                                                          mov     si,czLoadMsg                                    ;loading message
   618                                                          call    BootPrint                                       ;display loader message
   619                                  ;
   620                                  ;       Initialize the number of directory sectors to search.
   621                                  ;
   622                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   623                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   624                                  ;
   625                                  ;       Compute number of directory sectors and initialize overhead count.
   626                                  ;
   627                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   628                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   629                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   630                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   631                                  ;
   632                                  ;       Compute directory entries per sector.
   633                                  ;
   634                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   635                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   636                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   637                                  ;
   638                                  ;       Compute first logical directory sector and update overhead count.
   639                                  ;
   640                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   641                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   642                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   643                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   644                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   645                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   646                                  ;
   647                                  ;       Read directory sector.
   648                                  ;
   649                                  .30                     mov     al,1                                            ;sector count
   650                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   651                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   652                                                          call    ReadSector                                      ;read sector into es:bx
   653                                  ;
   654                                  ;       Setup variables to search this directory sector.
   655                                  ;
   656                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   657                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   658                                                          jna     .40                                             ;no, continue
   659                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   660                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   661                                                          mov     si,cbKernelProgram                              ;program name
   662                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   663                                  ;
   664                                  ;       Loop through directory sectors searching for kernel program.
   665                                  ;
   666                                  .50                     push    si                                              ;save kernel name address
   667                                                          push    di                                              ;save dir i/o buffer address
   668                                                          mov     cx,11                                           ;length of 8+3 name
   669                                                          cld                                                     ;forward strings
   670                                                          repe    cmpsb                                           ;compare entry name
   671                                                          pop     di                                              ;restore dir i/o buffer address
   672                                                          pop     si                                              ;restore kernel name address
   673                                                          je      .60                                             ;exit loop if found
   674                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   675                                                          dec     ax                                              ;decrement remaining entries
   676                                                          jnz     .50                                             ;next entry
   677                                  ;
   678                                  ;       Repeat search if we are not at the end of the directory.
   679                                  ;
   680                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   681                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   682                                                          jne     .30                                             ;no, get next sector
   683                                                          mov     si,czNoKernel                                   ;missing kernel message
   684                                                          jmp     BootExit                                        ;display message and exit
   685                                  ;
   686                                  ;       If we find the kernel program in the directory, read the FAT.
   687                                  ;
   688                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   689                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   690                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   691                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   692                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   693                                                          call    ReadSector                                      ;read FAT into buffer
   694                                  ;
   695                                  ;       Get the starting cluster of the kernel program and target address.
   696                                  ;
   697                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   698                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   699                                  ;
   700                                  ;       Read each program cluster into RAM.
   701                                  ;
   702                                  .70                     push    ax                                              ;save cluster nbr
   703                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   704                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   705                                                          mov     [wbReadCount],cl                                ;save sectors to read
   706                                                          xor     ch,ch                                           ;CX = sectors per cluster
   707                                                          mul     cx                                              ;DX:AX = logical cluster sector
   708                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   709                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   710                                                          call    ReadSector                                      ;read sectors into ES:BX
   711                                  ;
   712                                  ;       Update buffer pointer for next cluster.
   713                                  ;
   714                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   715                                                          xor     ah,ah                                           ;AX = sectors per cluster
   716                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   717                                                          add     bx,ax                                           ;BX = next cluster target address
   718                                                          pop     ax                                              ;AX = restore cluster nbr
   719                                  ;
   720                                  ;       Compute next cluster number.
   721                                  ;
   722                                                          mov     cx,ax                                           ;CX = cluster nbr
   723                                                          mov     di,ax                                           ;DI = cluster nbr
   724                                                          shr     ax,1                                            ;AX = cluster/2
   725                                                          mov     dx,ax                                           ;DX = cluster/2
   726                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   727                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   728                                                          and     di,1                                            ;get low bit
   729                                                          add     di,ax                                           ;add one if cluster is odd
   730                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   731                                                          mov     ax,[di]                                         ;get cluster bytes
   732                                  ;
   733                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   734                                  ;
   735                                                          test    cl,1                                            ;is cluster odd?
   736                                                          jz      .80                                             ;no, skip ahead
   737                                                          mov     cl,4                                            ;shift count
   738                                                          shr     ax,cl                                           ;shift nybble low
   739                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   740                                                          cmp     ax,0FFFh                                        ;end of chain?
   741                                                          jne     .70                                             ;no, continue
   742                                  ;
   743                                  ;       Transfer control to the operating system program.
   744                                  ;
   745                                                          db      0EAh                                            ;jmp seg:offset
   746                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   747                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   748                                  ;
   749                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   750                                  ;
   751                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   752                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   753                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   754                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   755                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   756                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   757                                                          mov     ax,dx                                           ;AX = cyl sector
   758                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   759                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   760                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   761                                  ;
   762                                  ;       Try maxtries times to read sector.
   763                                  ;
   764                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   765                                  .10                     push    bx                                              ;save buffer address
   766                                                          push    cx                                              ;save retry count
   767                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   768                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   769                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   770                                                          int     EBIOSINTDISKETTE                                ;read sector
   771                                                          pop     cx                                              ;restore retry count
   772                                                          pop     bx                                              ;restore buffer address
   773                                                          jnc     BootReturn                                      ;skip ahead if done
   774                                                          loop    .10                                             ;retry
   775                                  ;
   776                                  ;       Handle disk error: convert to ASCII and store in error string.
   777                                  ;
   778                                                          mov     al,ah                                           ;AL = bios error code
   779                                                          xor     ah,ah                                           ;AX = bios error code
   780                                                          mov     dl,16                                           ;divisor for base 16
   781                                                          div     dl                                              ;AL = hi order, AH = lo order
   782                                                          or      ax,03030h                                       ;apply ASCII zone bits
   783                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   784                                                          jb      .20                                             ;continue if numeral
   785                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   786                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   787                                                          jb      .30                                             ;continue if numeral
   788                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   789                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   790                                                          mov     si,czErrorMsg                                   ;error message address
   791                                  BootExit                call    BootPrint                                       ;display messge to console
   792                                  ;
   793                                  ;       Wait for a key press.
   794                                  ;
   795                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   796                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   797                                                          jnz     .20                                             ;continue if key pressed
   798                                                          sti                                                     ;enable maskable interrupts
   799                                                          hlt                                                     ;wait for interrupt
   800                                                          jmp     .10                                             ;repeat
   801                                  ;
   802                                  ;       Reset the system.
   803                                  ;
   804                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   805                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   806                                  .30                     sti                                                     ;enable maskable interrupts
   807                                                          hlt                                                     ;stop until reset, int, nmi
   808                                                          jmp     .30                                             ;loop until restart kicks in
   809                                  ;
   810                                  ;       Display text message.
   811                                  ;
   812                                  BootPrint               cld                                                     ;forward strings
   813                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
   814                                                          test    al,al                                           ;end of string?
   815                                                          jz      BootReturn                                      ;... yes, exit our loop
   816                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   817                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   818                                                          jmp     .10                                             ;repeat until done
   819                                  BootReturn              ret                                                     ;return
   820                                  ;-----------------------------------------------------------------------------------------------------------------------
   821                                  ;
   822                                  ;       Constants
   823                                  ;
   824                                  ;-----------------------------------------------------------------------------------------------------------------------
   825                                                          align   2
   826                                  cwEntryLen              dw      32                                              ;length of directory entry
   827                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   828                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   829                                  czErrorMsg              db      "Disk error "                                   ;error message
   830                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   831                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
   832                                  ;-----------------------------------------------------------------------------------------------------------------------
   833                                  ;
   834                                  ;       Work Areas
   835                                  ;
   836                                  ;-----------------------------------------------------------------------------------------------------------------------
   837                                                          align   2
   838                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
   839                                  wwEntriesLeft           dw      0                                               ;directory entries to search
   840                                  wwOverhead              dw      0                                               ;overhead sectors
   841                                  wwSectorEntries         dw      0                                               ;directory entries per sector
   842                                  wwLogicalSector         dw      0                                               ;current logical sector
   843                                  wwReadCountCommand      equ     $                                               ;read count and command
   844                                  wbReadCount             db      0                                               ;sectors to read
   845                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   846                                  wwDriveHead             equ     $                                               ;drive, head (word)
   847                                  wbDrive                 db      0                                               ;drive
   848                                  wbHead                  db      0                                               ;head
   849                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   850                                                          db      0                                               ;sector
   851                                  wbTrack                 db      0                                               ;track
   852                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
   853                                                          db      055h,0AAh                                       ;end of sector signature
   854                                  %endif
   855                                  %ifdef BUILDPREP
   856                                  ;=======================================================================================================================
   857                                  ;
   858                                  ;       Diskette Preparation Code
   859                                  ;
   860                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   861                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   862                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   863                                  ;
   864                                  ;=======================================================================================================================
   865                                  ;
   866                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   867                                  ;
   868                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   869                                                          call    BootPrint                                       ;display message
   870                                  ;
   871                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   872                                  ;
   873                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   874                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   875                                                          jnz     .20                                             ;continue if key pressed
   876                                                          sti                                                     ;enable interrupts
   877                                                          hlt                                                     ;wait for interrupt
   878                                                          jmp     .10                                             ;repeat
   879                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   880                                                          je      .30                                             ;yes, branch
   881                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   882                                                          jne     .10                                             ;no, repeat
   883                                                          jmp     .120                                            ;yes, exit program
   884                                  ;
   885                                  ;       Display writing-sector message and patch the JMP instruction.
   886                                  ;
   887                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   888                                                          call    BootPrint                                       ;display message
   889                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   890                                                          mov     ax,01Bh                                         ;address past disk parameter table
   891                                                          mov     [bx],ax                                         ;update the JMP instruction
   892                                  ;
   893                                  ;       Try to read the boot sector.
   894                                  ;
   895                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   896                                  .40                     push    cx                                              ;save remaining tries
   897                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   898                                                          mov     dx,0                                            ;head zero, drive zero
   899                                                          mov     cx,1                                            ;track zero, sector one
   900                                                          mov     al,1                                            ;one sector
   901                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   902                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   903                                                          pop     cx                                              ;restore remaining retries
   904                                                          jnc     .50                                             ;skip ahead if successful
   905                                                          loop    .40                                             ;try again
   906                                                          mov     si,czPrepMsg20                                  ;read-error message address
   907                                                          jmp     .70                                             ;branch to error routine
   908                                  ;
   909                                  ;       Copy diskette parms from input buffer to output buffer.
   910                                  ;
   911                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   912                                                          add     si,11                                           ;skip over JMP and system ID
   913                                                          mov     di,Boot                                         ;output buffer address
   914                                                          add     di,11                                           ;skip over JMP and system ID
   915                                                          mov     cx,19                                           ;length of diskette parameters
   916                                                          cld                                                     ;forward string copies
   917                                                          rep     movsb                                           ;copy diskette parameters
   918                                  ;
   919                                  ;       Try to write boot sector to diskette.
   920                                  ;
   921                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   922                                  .60                     push    cx                                              ;save remaining tries
   923                                                          mov     bx,Boot                                         ;output buffer address
   924                                                          mov     dx,0                                            ;head zero, drive zero
   925                                                          mov     cx,1                                            ;track zero, sector one
   926                                                          mov     al,1                                            ;one sector
   927                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   928                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   929                                                          pop     cx                                              ;restore remaining retries
   930                                                          jnc     .100                                            ;skip ahead if successful
   931                                                          loop    .60                                             ;try again
   932                                                          mov     si,czPrepMsg30                                  ;write-error message address
   933                                  ;
   934                                  ;       Convert the error code to ASCII and display the error message.
   935                                  ;
   936                                  .70                     push    ax                                              ;save error code
   937                                                          mov     al,ah                                           ;copy error code
   938                                                          mov     ah,0                                            ;AX = error code
   939                                                          mov     dl,10h                                          ;hexadecimal divisor
   940                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
   941                                                          or      ax,03030h                                       ;add ASCII zone digits
   942                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
   943                                                          jb      .80                                             ;yes, continue
   944                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
   945                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
   946                                                          jb      .90                                             ;yes, continue
   947                                                          add     al,7                                            ;no, make ASCII
   948                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
   949                                                          call    BootPrint                                       ;write error message
   950                                                          pop     ax                                              ;restore error code
   951                                  ;
   952                                  ;       Display the completion message.
   953                                  ;
   954                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
   955                                                          mov     al,ah                                           ;BIOS return code
   956                                                          cmp     al,0                                            ;success?
   957                                                          je      .110                                            ;yes, continue
   958                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
   959                                                          cmp     al,1                                            ;disk parameter error?
   960                                                          je      .110                                            ;yes, continue
   961                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
   962                                                          cmp     al,2                                            ;address mark not found?
   963                                                          je      .110                                            ;yes, continue
   964                                                          mov     si,czPrepMsgErr3                                ;protected disk message
   965                                                          cmp     al,3                                            ;protected disk?
   966                                                          je      .110                                            ;yes, continue
   967                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
   968                                                          cmp     al,6                                            ;diskette removed?
   969                                                          je      .110                                            ;yes, continue
   970                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
   971                                                          cmp     al,80H                                          ;drive timed out?
   972                                                          je      .110                                            ;yes, continue
   973                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
   974                                  .110                    call    BootPrint                                       ;display result message
   975                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
   976                                                          int     021h                                            ;terminate DOS program
   977                                                          ret                                                     ;return (should not execute)
   978                                  ;-----------------------------------------------------------------------------------------------------------------------
   979                                  ;
   980                                  ;       Diskette Preparation Messages
   981                                  ;
   982                                  ;-----------------------------------------------------------------------------------------------------------------------
   983                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
   984                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
   985                                                          db      13,10
   986                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
   987                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
   988                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   989                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
   990                                                          db      13,10,0
   991                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
   992                                                          db      13,10,0
   993                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   994                                                          db      13,10,0
   995                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   996                                                          db      13,10,0
   997                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   998                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   999                                                          db      13,10,0
  1000                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1001                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1002                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1003                                                          db      13,10,"and retry."
  1004                                                          db      13,10,0
  1005                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1006                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1007                                                          db      13,10,"using another diskette."
  1008                                                          db      13,10,0
  1009                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1010                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1011                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1012                                                          db      13,10,0
  1013                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1014                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1015                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1016                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1017                                                          db      13,10,"is properly inserted in the diskette drive."
  1018                                                          db      13,10,0
  1019                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1020                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1021                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1022                                                          db      13,10,0
  1023                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1024                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1025                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1026                                                          db      13,10,0
  1027                                  wcPrepInBuf             equ     $
  1028                                  %endif
  1029                                  %ifdef BUILDDISK
  1030                                  ;=======================================================================================================================
  1031                                  ;
  1032                                  ;       File Allocation Tables
  1033                                  ;
  1034                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1035                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1036                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1037                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1038                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1039                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1040                                  ;       the last cluster in the chain.
  1041                                  ;
  1042                                  ;       Every three bytes encode two FAT entries as follows:
  1043                                  ;
  1044                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1045                                  ;
  1046                                  ;=======================================================================================================================
  1047                                  ;-----------------------------------------------------------------------------------------------------------------------
  1048                                  ;
  1049                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1050                                  ;
  1051                                  ;-----------------------------------------------------------------------------------------------------------------------
  1052                                  section                 fat1                                                    ;first copy of FAT
  1053                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1054                                                          db      005h,060h,000h, 007h,080h,000h
  1055                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1056                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1057                                                          db      011h,020h,001h, 013h,040h,001h
  1058                                                          db      015h,060h,001h, 017h,080h,001h
  1059                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1060                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1061                                                          db      021h,020h,002h, 023h,040h,002h
  1062                                                          db      025h,060h,002h, 027h,080h,002h
  1063                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1064                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1065                                  ;-----------------------------------------------------------------------------------------------------------------------
  1066                                  ;
  1067                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1068                                  ;
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070                                  section                 fat2                                                    ;second copy of FAT
  1071                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1072                                                          db      005h,060h,000h, 007h,080h,000h
  1073                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1074                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1075                                                          db      011h,020h,001h, 013h,040h,001h
  1076                                                          db      015h,060h,001h, 017h,080h,001h
  1077                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1078                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1079                                                          db      021h,020h,002h, 023h,040h,002h
  1080                                                          db      025h,060h,002h, 027h,080h,002h
  1081                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1082                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084                                  ;
  1085                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1086                                  ;
  1087                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1088                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1089                                  ;       copy.
  1090                                  ;
  1091                                  ;-----------------------------------------------------------------------------------------------------------------------
  1092                                  section                 dir                                                     ;diskette directory
  1093                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1094                                                          db      020h                                            ;attribute (archive bit set)
  1095                                                          times   10 db 0                                         ;unused
  1096                                                          dw      0h                                              ;time
  1097                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1098                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1099                                                          dw      2                                               ;first cluster
  1100                                                          dd      05400h                                          ;file size
  1101                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1102                                  %endif
  1103                                  %ifdef BUILDCOM
  1104                                  ;=======================================================================================================================
  1105                                  ;
  1106                                  ;       OS.COM
  1107                                  ;
  1108                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1109                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1110                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1111                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1112                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1113                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1114                                  ;
  1115                                  ;       Our loader addressability is set up according to the following diagram.
  1116                                  ;
  1117                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1118                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1119                                  ;                               |  256 = 100h bytes                             |
  1120                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1121                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1122                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1123                                  ;                       007e00  +-----------------------------------------------+
  1124                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1125                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1126                                  ;                               |                                               |
  1127                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1128                                  ;                               |                                               |
  1129                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1130                                  ;                               |  Loader Code                                  |
  1131                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1132                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1133                                  ;
  1134                                  ;=======================================================================================================================
  1135                                  ;-----------------------------------------------------------------------------------------------------------------------
  1136                                  ;
  1137                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1138                                  ;
  1139                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1140                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1141                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1142                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1143                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1144                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1145                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1146                                  ;       registers.
  1147                                  ;
  1148                                  ;-----------------------------------------------------------------------------------------------------------------------
  1149                                                          cpu     8086                                            ;assume minimal CPU
  1150                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1151                                                          bits    16                                              ;this is 16-bit code
  1152 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1153 00000001 1F                                              pop     ds                                              ;...as our data segment
  1154 00000002 0E                                              push    cs                                              ;use the code segment
  1155 00000003 07                                              pop     es                                              ;...as our extra segment
  1156                                  ;
  1157                                  ;       Write a message to the console so we know we have our addressability established.
  1158                                  ;
  1159 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1160 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1161                                  ;
  1162                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1163                                  ;
  1164 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1165 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1166 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1167 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1168                                                          cpu     386                                             ;allow 80386 instructions
  1169 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1170 00000017 E89600                                          call    PutTTYString                                    ;display message
  1171                                  ;
  1172                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1173                                  ;
  1174 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1175 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1176 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1177 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1178 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1179 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1180 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1181 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1182 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1183 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1184                                  ;
  1185                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1186                                  ;
  1187 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1188 00000038 07                                              pop     es                                              ;... as target segment
  1189 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1190 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1191 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1192 00000041 FC                                              cld                                                     ;forward strings
  1193 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1194 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1195 00000047 E86600                                          call    PutTTYString                                    ;display message
  1196                                  ;
  1197                                  ;       Switch to protected mode.
  1198                                  ;
  1199 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1200 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1201 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1202 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1203 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1204 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1205 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1206 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1207 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1208 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1209 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1210                                  ;
  1211                                  ;       Enable hardware and maskable interrupts.
  1212                                  ;
  1213 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1214 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1215 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1216 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1217                                  ;
  1218                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1219                                  ;
  1220 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1221 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1222 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1223                                  ;-----------------------------------------------------------------------------------------------------------------------
  1224                                  ;
  1225                                  ;       Routine:        LoaderExit
  1226                                  ;
  1227                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1228                                  ;
  1229                                  ;       In:             DS:SI   string address
  1230                                  ;
  1231                                  ;-----------------------------------------------------------------------------------------------------------------------
  1232 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1233                                  ;
  1234                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1235                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1236                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1237                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1238                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1239                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1240                                  ;
  1241 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1242 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1243 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1244 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1245 00000085 F4                                              hlt                                                     ;wait for interrupt
  1246 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1247                                  ;
  1248                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1249                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1250                                  ;       HLT until the system resets.
  1251                                  ;
  1252 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1253 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1254 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1255 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1256 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1257                                  ;-----------------------------------------------------------------------------------------------------------------------
  1258                                  ;
  1259                                  ;       Routine:        GetCPUType
  1260                                  ;
  1261                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1262                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1263                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1264                                  ;
  1265                                  ;       Out:            AX      0 = 808x, v20, etc.
  1266                                  ;                               1 = 80186
  1267                                  ;                               2 = 80286
  1268                                  ;                               3 = 80386
  1269                                  ;
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1272 00000092 B120                                            mov     cl,32                                           ;shift count
  1273 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1274 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1275 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1276                                                          cpu     186
  1277 0000009A 54                                              push    sp                                              ;save stack pointer
  1278 0000009B 59                                              pop     cx                                              ;...into cx
  1279 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1280 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1281                                                          cpu     286
  1282 000000A0 40                                              inc     ax                                              ;AX = 2
  1283 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1284 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1285 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1286 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1287 000000AE 40                                              inc     ax                                              ;AX = 3
  1288 000000AF C3                      .10                     ret                                                     ;return
  1289                                  ;-----------------------------------------------------------------------------------------------------------------------
  1290                                  ;
  1291                                  ;       Routine:        PutTTYString
  1292                                  ;
  1293                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1294                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1295                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1296                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1297                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1298                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1299                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1300                                  ;                       to LODSB is not needed.
  1301                                  ;
  1302                                  ;       In:             DS:SI   address of string
  1303                                  ;
  1304                                  ;       Out:            DF      0
  1305                                  ;                       ZF      1
  1306                                  ;                       AL      0
  1307                                  ;
  1308                                  ;-----------------------------------------------------------------------------------------------------------------------
  1309 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1310 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1311 000000B2 84C0                                            test    al,al                                           ;end of string?
  1312 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1313 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1314 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1315 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1316 000000BC C3                      .20                     ret                                                     ;return
  1317                                  ;-----------------------------------------------------------------------------------------------------------------------
  1318                                  ;
  1319                                  ;       Loader Data
  1320                                  ;
  1321                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1322                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1323                                  ;
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325 000000BD 90                                              align   2
  1326 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1327 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1328 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1329 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1330 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1330 000000D1 74696E672073797374-
  1330 000000DA 656D20726571756972-
  1330 000000E3 657320616E20693338-
  1330 000000EC 36206F72206C617465-
  1330 000000F5 722070726F63657373-
  1330 000000FE 6F722E0D0A         
  1331 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1331 0000010C 65737320616E79206B-
  1331 00000115 657920746F20726573-
  1331 0000011E 746172742074686520-
  1331 00000127 636F6D70757465722E-
  1331 00000130 0D0A00             
  1332 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1333 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1333 00000145 7265640D0A00       
  1334 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1334 00000154 616465640D0A00     
  1335 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1335 00000164 4F530D0A00         
  1336 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1337                                  ;=======================================================================================================================
  1338                                  ;
  1339                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1340                                  ;
  1341                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1342                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1343                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1344                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1345                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1346                                  ;
  1347                                  ;=======================================================================================================================
  1348                                  ;=======================================================================================================================
  1349                                  ;
  1350                                  ;       Kernel Tables
  1351                                  ;
  1352                                  ;=======================================================================================================================
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1356                                  ;
  1357                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1358                                  ;       first descriptor must be all nulls.
  1359                                  ;
  1360                                  ;       6   5         4         3         2         1         0
  1361                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1362                                  ;       ----------------------------------------------------------------
  1363                                  ;       h......hffffmmmma......ab......................bn..............n
  1364                                  ;
  1365                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1366                                  ;               ffff                                                            flags
  1367                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1368                                  ;                       a......a                                                access
  1369                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1370                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1371                                  ;
  1372                                  ;       00000000                                                                all areas have base addresses below 2^24
  1373                                  ;               0...                                                            single-byte size granularity
  1374                                  ;               1...                                                            4-kilobyte size granularity
  1375                                  ;               .0..                                                            16-bit default for code segments
  1376                                  ;               .1..                                                            32-bit default for code segments
  1377                                  ;               ..0.                                                            intel-reserved; should be zero
  1378                                  ;               ...0                                                            available for operating system use
  1379                                  ;                   0000                                                        segment is less than 2^16 in size
  1380                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1381                                  ;                       1.......                                                segment is present in memory
  1382                                  ;                       .00.....                                                segment is of privilege level 0
  1383                                  ;                       ...0....                                                segment is of system or gate type
  1384                                  ;                       ...00010                                                local decriptor table (LDT)
  1385                                  ;                       ...01001                                                task state segment (TSS) available
  1386                                  ;                       ...01011                                                task state segment (TSS) busy
  1387                                  ;                       ...10...                                                data segment
  1388                                  ;                       ...10011                                                writable data (accessed)
  1389                                  ;                       ...11...                                                code segment
  1390                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1391                                  ;
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  section                 gdt                                                     ;global descriptor table
  1394 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1395 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1396 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1397 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1398 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1399 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1400 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1401 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1402 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1403 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1404 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1405 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1406 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1407 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1408 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1409                                  ;-----------------------------------------------------------------------------------------------------------------------
  1410                                  ;
  1411                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1412                                  ;
  1413                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1414                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1415                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1416                                  ;
  1417                                  ;       6   5         4         3         2         1         0
  1418                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1419                                  ;       ----------------------------------------------------------------
  1420                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1421                                  ;
  1422                                  ;       h...h   high-order offset (bits 16-31)
  1423                                  ;       P       present (0=unused interrupt)
  1424                                  ;       zz      descriptor privilege level
  1425                                  ;       S       storage segment (must be zero for IDT)
  1426                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1427                                  ;       S...S   handling code selector in GDT
  1428                                  ;       l...l   lo-order offset (bits 0-15)
  1429                                  ;
  1430                                  ;-----------------------------------------------------------------------------------------------------------------------
  1431                                  section                 idt                                                     ;interrupt descriptor table
  1432                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1432                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1432 00000000 00004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1433                                                          mtrap   singlestep                                      ;01 single step
  1433                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1433 00000008 02004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1434                                                          mtrap   nmi                                             ;02 non-maskable
  1434                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1434 00000010 04004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1435                                                          mtrap   break                                           ;03 break
  1435                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1435 00000018 06004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1436                                                          mtrap   into                                            ;04 into
  1436                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1436 00000020 08004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1437                                                          mtrap   bounds                                          ;05 bounds
  1437                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1437 00000028 0A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1438                                                          mtrap   badopcode                                       ;06 bad op code
  1438                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1438 00000030 0C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1439                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1439                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1439 00000038 0E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1440                                                          mtrap   doublefault                                     ;08 double-fault
  1440                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1440 00000040 10004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1441                                                          mtrap   operand                                         ;09 operand
  1441                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1441 00000048 12004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1442                                                          mtrap   badtss                                          ;0a bad TSS
  1442                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1442 00000050 14004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1443                                                          mtrap   notpresent                                      ;0b not-present
  1443                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1443 00000058 16004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1444                                                          mtrap   stacklimit                                      ;0c stack limit
  1444                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1444 00000060 18004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1445                                                          mtrap   protection                                      ;0d general protection fault
  1445                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1445 00000068 1A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1446                                                          mtrap   int14                                           ;0e (reserved)
  1446                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1446 00000070 1C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1447                                                          mtrap   int15                                           ;0f (reserved)
  1447                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1447 00000078 1E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1448                                                          mtrap   coproccalc                                      ;10 (reserved)
  1448                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1448 00000080 20004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1449                                                          mtrap   int17                                           ;11 (reserved)
  1449                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1449 00000088 22004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1450                                                          mtrap   int18                                           ;12 (reserved)
  1450                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1450 00000090 24004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1451                                                          mtrap   int19                                           ;13 (reserved)
  1451                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1451 00000098 26004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1452                                                          mtrap   int20                                           ;14 (reserved)
  1452                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1452 000000A0 28004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1453                                                          mtrap   int21                                           ;15 (reserved)
  1453                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1453 000000A8 2A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1454                                                          mtrap   int22                                           ;16 (reserved)
  1454                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1454 000000B0 2C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1455                                                          mtrap   int23                                           ;17 (reserved)
  1455                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1455 000000B8 2E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1456                                                          mtrap   int24                                           ;18 (reserved)
  1456                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1456 000000C0 30004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1457                                                          mtrap   int25                                           ;19 (reserved)
  1457                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1457 000000C8 32004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1458                                                          mtrap   int26                                           ;1a (reserved)
  1458                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1458 000000D0 34004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1459                                                          mtrap   int27                                           ;1b (reserved)
  1459                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1459 000000D8 36004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1460                                                          mtrap   int28                                           ;1c (reserved)
  1460                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1460 000000E0 38004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1461                                                          mtrap   int29                                           ;1d (reserved)
  1461                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1461 000000E8 3A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1462                                                          mtrap   int30                                           ;1e (reserved)
  1462                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1462 000000F0 3C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1463                                                          mtrap   int31                                           ;1f (reserved)
  1463                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1463 000000F8 3E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1464                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1464                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1464 00000100 41004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1465                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1465                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1465 00000108 92004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1466                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1466                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1466 00000110 95004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1467                                                          mint    com2                                            ;23 IRQ3 com2
  1467                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1467 00000118 98004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1468                                                          mint    com1                                            ;24 IRQ4 com1
  1468                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1468 00000120 9B004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1469                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1469                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1469 00000128 9E004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1470                                                          mint    diskette                                        ;26 IRQ6 diskette
  1470                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1470 00000130 A1004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1471                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1471                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1471 00000138 BB004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1472                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1472                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1472 00000140 BE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1473                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1473                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1473 00000148 C1004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1474                                                          mint    irq10                                           ;2a IRQA (reserved)
  1474                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1474 00000150 C4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1475                                                          mint    irq11                                           ;2b IRQB (reserved)
  1475                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1475 00000158 C7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1476                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1476                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1476 00000160 CA004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1477                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1477                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1477 00000168 CD004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1478                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1478                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1478 00000170 D0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1479                                                          mint    irq15                                           ;2f IRQF (reserved)
  1479                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1479 00000178 D3004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1480                                                          mtrap   svc                                             ;30 OS services
  1480                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1480 00000180 E5004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1481 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1482                                  ;=======================================================================================================================
  1483                                  ;
  1484                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1485                                  ;
  1486                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1487                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1488                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1489                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1490                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1491                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1492                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1493                                  ;
  1494                                  ;=======================================================================================================================
  1495                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1496                                                          cpu     386                                             ;allow 80386 instructions
  1497                                                          bits    32                                              ;this is 32-bit code
  1498                                  ;=======================================================================================================================
  1499                                  ;
  1500                                  ;       CPU Interrupt Handlers
  1501                                  ;
  1502                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1503                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1504                                  ;
  1505                                  ;=======================================================================================================================
  1506                                  ;-----------------------------------------------------------------------------------------------------------------------
  1507                                  ;
  1508                                  ;       INT0    Divide By Zero
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                                          menter  dividebyzero                                    ;divide by zero
  1511                              <1> ?%1 equ ($-$$)
  1512 00000000 EB3E                                            jmp     ReportInterrupt                                 ;report interrupt
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                  ;
  1515                                  ;       INT1    Single Step
  1516                                  ;
  1517                                  ;-----------------------------------------------------------------------------------------------------------------------
  1518                                                          menter  singlestep                                      ;single step
  1518                              <1> ?%1 equ ($-$$)
  1519 00000002 EB3C                                            jmp     ReportInterrupt                                 ;report interrupt
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  ;
  1522                                  ;       INT2    Non-Maskable Interrupt
  1523                                  ;
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                                          menter  nmi                                             ;non-maskable
  1525                              <1> ?%1 equ ($-$$)
  1526 00000004 EB3A                                            jmp     ReportInterrupt                                 ;report interrupt
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  ;
  1529                                  ;       INT3    Break
  1530                                  ;
  1531                                  ;-----------------------------------------------------------------------------------------------------------------------
  1532                                                          menter  break                                           ;break
  1532                              <1> ?%1 equ ($-$$)
  1533 00000006 EB38                                            jmp     ReportInterrupt                                 ;report interrupt
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  ;
  1536                                  ;       INT4    Into
  1537                                  ;
  1538                                  ;-----------------------------------------------------------------------------------------------------------------------
  1539                                                          menter  into                                            ;into
  1539                              <1> ?%1 equ ($-$$)
  1540 00000008 EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1541                                  ;-----------------------------------------------------------------------------------------------------------------------
  1542                                  ;
  1543                                  ;       INT5    Bounds
  1544                                  ;
  1545                                  ;-----------------------------------------------------------------------------------------------------------------------
  1546                                                          menter  bounds                                          ;bounds
  1546                              <1> ?%1 equ ($-$$)
  1547 0000000A EB34                                            jmp     ReportInterrupt                                 ;report interrupt
  1548                                  ;-----------------------------------------------------------------------------------------------------------------------
  1549                                  ;
  1550                                  ;       INT6    Bad Operation Code
  1551                                  ;
  1552                                  ;-----------------------------------------------------------------------------------------------------------------------
  1553                                                          menter  badopcode                                       ;bad opcode interrupt
  1553                              <1> ?%1 equ ($-$$)
  1554 0000000C EB32                                            jmp     ReportInterrupt                                 ;report interrupt
  1555                                  ;-----------------------------------------------------------------------------------------------------------------------
  1556                                  ;
  1557                                  ;       INT7    No Coprocessor
  1558                                  ;
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1560                              <1> ?%1 equ ($-$$)
  1561 0000000E EB30                                            jmp     ReportInterrupt                                 ;report interrupt
  1562                                  ;-----------------------------------------------------------------------------------------------------------------------
  1563                                  ;
  1564                                  ;       INT8    Double Fault
  1565                                  ;
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                                          menter  doublefault                                     ;doublefault interrupt
  1567                              <1> ?%1 equ ($-$$)
  1568 00000010 EB2E                                            jmp     ReportInterrupt                                 ;report interrupt
  1569                                  ;-----------------------------------------------------------------------------------------------------------------------
  1570                                  ;
  1571                                  ;       INT9    Operand
  1572                                  ;
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                                          menter  operand                                         ;operand interrupt
  1574                              <1> ?%1 equ ($-$$)
  1575 00000012 EB2C                                            jmp     ReportInterrupt                                 ;report interrupt
  1576                                  ;-----------------------------------------------------------------------------------------------------------------------
  1577                                  ;
  1578                                  ;       INT10   Bad Task State Segment
  1579                                  ;
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                                          menter  badtss                                          ;bad TSS interrupt
  1581                              <1> ?%1 equ ($-$$)
  1582 00000014 EB2A                                            jmp     ReportInterrupt                                 ;report interrupt
  1583                                  ;-----------------------------------------------------------------------------------------------------------------------
  1584                                  ;
  1585                                  ;       INT11   Not Present
  1586                                  ;
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                                          menter  notpresent                                      ;not present interrupt
  1588                              <1> ?%1 equ ($-$$)
  1589 00000016 EB28                                            jmp     ReportInterrupt                                 ;report interrupt
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;
  1592                                  ;       INT12   Stack Limit
  1593                                  ;
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                                          menter  stacklimit                                      ;stack limit interrupt
  1595                              <1> ?%1 equ ($-$$)
  1596 00000018 EB26                                            jmp     ReportInterrupt                                 ;report interrupt
  1597                                  ;-----------------------------------------------------------------------------------------------------------------------
  1598                                  ;
  1599                                  ;       INT13   General Protection Fault
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                                          menter  protection                                      ;protection fault interrupt
  1602                              <1> ?%1 equ ($-$$)
  1603 0000001A EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;       INT14   Reserved
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                                          menter  int14                                           ;(reserved)
  1609                              <1> ?%1 equ ($-$$)
  1610 0000001C EB22                                            jmp     ReportInterrupt                                 ;report interrupt
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  ;
  1613                                  ;       INT15   Reserved
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                                          menter  int15                                           ;(reserved)
  1616                              <1> ?%1 equ ($-$$)
  1617 0000001E EB20                                            jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT16   Coprocessor Calculation
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  coproccalc                                      ;coprocessor calculation
  1623                              <1> ?%1 equ ($-$$)
  1624 00000020 EB1E                                            jmp     ReportInterrupt                                 ;report interrupt
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT17   Reserved
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  int17                                           ;(reserved)
  1630                              <1> ?%1 equ ($-$$)
  1631 00000022 EB1C                                            jmp     ReportInterrupt                                 ;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;       INT18   Reserved
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                                          menter  int18                                           ;(reserved)
  1637                              <1> ?%1 equ ($-$$)
  1638 00000024 EB1A                                            jmp     ReportInterrupt                                 ;report interrupt
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                  ;
  1641                                  ;       INT19   Reserved
  1642                                  ;
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                                          menter  int19                                           ;(reserved)
  1644                              <1> ?%1 equ ($-$$)
  1645 00000026 EB18                                            jmp     ReportInterrupt                                 ;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;       INT20   Reserved
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                                          menter  int20                                           ;(reserved)
  1651                              <1> ?%1 equ ($-$$)
  1652 00000028 EB16                                            jmp     ReportInterrupt                                 ;report interrupt
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  ;
  1655                                  ;       INT21   Reserved
  1656                                  ;
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                                          menter  int21                                           ;(reserved)
  1658                              <1> ?%1 equ ($-$$)
  1659 0000002A EB14                                            jmp     ReportInterrupt                                 ;report interrupt
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;       INT22   Reserved
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                                          menter  int22                                           ;(reserved)
  1665                              <1> ?%1 equ ($-$$)
  1666 0000002C EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       INT23   Reserved
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                                          menter  int23                                           ;(reserved)
  1672                              <1> ?%1 equ ($-$$)
  1673 0000002E EB10                                            jmp     ReportInterrupt                                 ;report interrupt
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  ;
  1676                                  ;       INT24   Reserved
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                                          menter  int24                                           ;(reserved)
  1679                              <1> ?%1 equ ($-$$)
  1680 00000030 EB0E                                            jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT25   Reserved
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  int25                                           ;(reserved)
  1686                              <1> ?%1 equ ($-$$)
  1687 00000032 EB0C                                            jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT26   Reserved
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  int26                                           ;(reserved)
  1693                              <1> ?%1 equ ($-$$)
  1694 00000034 EB0A                                            jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT27   Reserved
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  int27                                           ;(reserved)
  1700                              <1> ?%1 equ ($-$$)
  1701 00000036 EB08                                            jmp     ReportInterrupt                                 ;report interrupt
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;       INT28   Reserved
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                                          menter  int28                                           ;(reserved)
  1707                              <1> ?%1 equ ($-$$)
  1708 00000038 EB06                                            jmp     ReportInterrupt                                 ;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;       INT29   Reserved
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                                          menter  int29                                           ;(reserved)
  1714                              <1> ?%1 equ ($-$$)
  1715 0000003A EB04                                            jmp     ReportInterrupt                                 ;report interrupt
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  ;
  1718                                  ;       INT30   Reserved
  1719                                  ;
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                                          menter  int30                                           ;(reserved)
  1721                              <1> ?%1 equ ($-$$)
  1722 0000003C EB02                                            jmp     ReportInterrupt                                 ;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;       INT31   Reserved
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                                          menter  int31                                           ;(reserved)
  1728                              <1> ?%1 equ ($-$$)
  1729 0000003E EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       Routine:        ReportInterrupt
  1733                                  ;
  1734                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1735                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738 00000040 CF                      ReportInterrupt         iretd                                                   ;return
  1739                                  ;=======================================================================================================================
  1740                                  ;
  1741                                  ;       Hardware Device Interupts
  1742                                  ;
  1743                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1744                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1745                                  ;       (BX=2028h).
  1746                                  ;
  1747                                  ;=======================================================================================================================
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       IRQ0    Clock Tick Interrupt
  1751                                  ;
  1752                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1753                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1754                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1755                                  ;
  1756                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1757                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1758                                  ;
  1759                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1760                                  ;       zero, the floppy disk motors are turned off.
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  clocktick                                       ;clock tick interrupt
  1763                              <1> ?%1 equ ($-$$)
  1764 00000041 50                                              push    eax                                             ;save non-volatile regs
  1765 00000042 52                                              push    edx                                             ;
  1766 00000043 1E                                              push    ds                                              ;
  1767                                  ;
  1768                                  ;       End the interrupt.
  1769                                  ;
  1770 00000044 E8DC000000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1771                                  ;
  1772                                  ;       Update the clock tick count and the elapsed days as needed.
  1773                                  ;
  1774 00000049 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1775 0000004B 1F                                              pop     ds                                              ;... into data segment register
  1776 0000004C A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1777 00000051 40                                              inc     eax                                             ;increment clock ticks
  1778 00000052 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1779 00000057 7208                                            jb      irq0.10                                         ;no, skip ahead
  1780 00000059 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1781 0000005F 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1782 00000061 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1783                                  ;
  1784                                  ;       Decrement floppy disk motor timeout.
  1785                                  ;
  1786 00000066 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1787 0000006D 741E                                            je      irq0.20                                         ;yes, skip ahead
  1788 0000006F FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1789 00000075 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1790                                  ;
  1791                                  ;       Turn off the floppy disk motor if appropriate.
  1792                                  ;
  1793 00000077 FB                                              sti                                                     ;enable maskable interrupts
  1794 00000078 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1795 0000007A B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1796 0000007C EC                                              in      al,dx                                           ;FDC main status byte
  1797 0000007D A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1798 0000007F 75F7                                            jnz     irq0.15                                         ;wait while busy
  1799 00000081 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1800 00000083 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1801 00000088 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1802 0000008A B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1803 0000008C EE                                              out     dx,al                                           ;turn motor off
  1804                                  ;
  1805                                  ;       Enable maskable interrupts.
  1806                                  ;
  1807 0000008D FB                      irq0.20                 sti                                                     ;enable maskable interrupts
  1808                                  ;
  1809                                  ;       Restore and return.
  1810                                  ;
  1811 0000008E 1F                                              pop     ds                                              ;restore modified regs
  1812 0000008F 5A                                              pop     edx                                             ;
  1813 00000090 58                                              pop     eax                                             ;
  1814 00000091 CF                                              iretd                                                   ;return
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  ;
  1817                                  ;       IRQ1    Keyboard Interrupt
  1818                                  ;
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                                          menter  keyboard                                        ;keyboard interrrupt
  1820                              <1> ?%1 equ ($-$$)
  1821 00000092 50                                              push    eax                                             ;
  1822 00000093 EB48                                            jmp     hwint                                           ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  iochannel                                       ;secondary 8259A cascade
  1828                              <1> ?%1 equ ($-$$)
  1829 00000095 50                                              push    eax                                             ;save modified regs
  1830 00000096 EB45                                            jmp     hwint                                           ;end interrupt and return
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  ;
  1833                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  1834                                  ;
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                                          menter  com2                                            ;serial port 2 interrupt
  1836                              <1> ?%1 equ ($-$$)
  1837 00000098 50                                              push    eax                                             ;save modified regs
  1838 00000099 EB42                                            jmp     hwint                                           ;end interrupt and return
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  com1                                            ;serial port 1 interrupt
  1844                              <1> ?%1 equ ($-$$)
  1845 0000009B 50                                              push    eax                                             ;save modified regs
  1846 0000009C EB3F                                            jmp     hwint                                           ;end interrupt and return
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                  ;
  1849                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  1850                                  ;
  1851                                  ;-----------------------------------------------------------------------------------------------------------------------
  1852                                                          menter  lpt2                                            ;parallel port 2 interrupt
  1852                              <1> ?%1 equ ($-$$)
  1853 0000009E 50                                              push    eax                                             ;save modified regs
  1854 0000009F EB3C                                            jmp     hwint                                           ;end interrupt and return
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       IRQ6    Diskette Hardware Interrupt
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  diskette                                        ;floppy disk interrupt
  1860                              <1> ?%1 equ ($-$$)
  1861 000000A1 50                                              push    eax                                             ;save non-volatile regs
  1862 000000A2 1E                                              push    ds                                              ;
  1863 000000A3 E87D000000                                      call    PutPrimaryEndOfInt                              ;end the interrupt
  1864 000000A8 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1865 000000AA 1F                                              pop     ds                                              ;... into DS register
  1866 000000AB A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  1867 000000B0 0C80                                            or      al,10000000b                                    ;set IRQ flag
  1868 000000B2 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  1869 000000B7 FB                                              sti                                                     ;enable maskable interrupts
  1870 000000B8 1F                                              pop     ds                                              ;restore non-volatile regs
  1871 000000B9 58                                              pop     eax                                             ;
  1872 000000BA CF                                              iretd                                                   ;return from interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  lpt1                                            ;parallel port 1 interrupt
  1878                              <1> ?%1 equ ($-$$)
  1879 000000BB 50                                              push    eax                                             ;save modified regs
  1880 000000BC EB1F                                            jmp     hwint                                           ;end interrupt and return
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  rtclock                                         ;real-time clock interrupt
  1886                              <1> ?%1 equ ($-$$)
  1887 000000BE 50                                              push    eax                                             ;save modified regs
  1888 000000BF EB15                                            jmp     hwwint                                          ;end interrupt and return
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  1894                              <1> ?%1 equ ($-$$)
  1895 000000C1 50                                              push    eax                                             ;save modified regs
  1896 000000C2 EB12                                            jmp     hwwint                                          ;end interrupt and return
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  ;
  1899                                  ;       IRQ10   Reserved Hardware Interrupt
  1900                                  ;
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                                          menter  irq10                                           ;reserved
  1902                              <1> ?%1 equ ($-$$)
  1903 000000C4 50                                              push    eax                                             ;save modified regs
  1904 000000C5 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;       IRQ11   Reserved Hardware Interrupt
  1908                                  ;
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                                          menter  irq11                                           ;reserved
  1910                              <1> ?%1 equ ($-$$)
  1911 000000C7 50                                              push    eax                                             ;save modified regs
  1912 000000C8 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  1918                              <1> ?%1 equ ($-$$)
  1919 000000CA 50                                              push    eax                                             ;save modified regs
  1920 000000CB EB09                                            jmp     hwwint                                          ;end interrupt and return
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;       IRQ13   Coprocessor Hardware Interrupt
  1924                                  ;
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                                          menter  coprocessor                                     ;coprocessor interrupt
  1926                              <1> ?%1 equ ($-$$)
  1927 000000CD 50                                              push    eax                                             ;save modified regs
  1928 000000CE EB06                                            jmp     hwwint                                          ;end interrupt and return
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  fixeddisk                                       ;fixed disk interrupt
  1934                              <1> ?%1 equ ($-$$)
  1935 000000D0 50                                              push    eax                                             ;save modified regs
  1936 000000D1 EB03                                            jmp     hwwint                                          ;end interrupt and return
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;       IRQ15   Reserved Hardware Interrupt
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                                          menter  irq15                                           ;reserved
  1942                              <1> ?%1 equ ($-$$)
  1943 000000D3 50                                              push    eax                                             ;save modified regs
  1944 000000D4 EB00                                            jmp     hwwint                                          ;end interrupt and return
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       Exit from hardware interrupt
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950 000000D6 E84F000000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  1951 000000DB EB05                                            jmp     hwint90                                         ;skip ahead
  1952 000000DD E843000000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1953 000000E2 FB                      hwint90                 sti                                                     ;enable maskable interrupts
  1954 000000E3 58                                              pop     eax                                             ;restore modified regs
  1955 000000E4 CF                                              iretd                                                   ;return from interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT 30h Operating System Software Service Interrupt
  1959                                  ;
  1960                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1961                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  1962                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1963                                  ;       the entry address of the specific function from a table.
  1964                                  ;
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                                          menter  svc
  1966                              <1> ?%1 equ ($-$$)
  1967 000000E5 3C01                                            cmp     al,maxtsvc                                      ;is our function out of range?
  1968 000000E7 730D                                            jae     svc90                                           ;yes, skip ahead
  1969 000000E9 0FB6C0                                          movzx   eax,al                                          ;function
  1970 000000EC C1E002                                          shl     eax,2                                           ;offset into table
  1971 000000EF 2EFF90[F7000000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  1972 000000F6 CF                      svc90                   iretd                                                   ;return from interrupt
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                  ;
  1975                                  ;       Service Request Table
  1976                                  ;
  1977                                  ;
  1978                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  tsvc                    tsvce   PlaceCursor                                     ;place the cursor at the current loc
  1981                              <1> tsvc :
  1981                              <1> e%1 equ ($-tsvc)/4
  1981 000000F7 [FB000000]          <1>  dd %1
  1982                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  ;
  1985                                  ;       Service Request Macros
  1986                                  ;
  1987                                  ;       These macros provide positional parameterization of service request calls.
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  %macro                  placeCursor 0
  1991                                                          mov     al,ePlaceCursor                                 ;function code
  1992                                                          int     _svc                                            ;invoke OS service
  1993                                  %endmacro
  1994                                  ;=======================================================================================================================
  1995                                  ;
  1996                                  ;       Kernel Function Library
  1997                                  ;
  1998                                  ;=======================================================================================================================
  1999                                  ;=======================================================================================================================
  2000                                  ;
  2001                                  ;       Input/Output Routines
  2002                                  ;
  2003                                  ;       These routines read and/or write directly to ports.
  2004                                  ;
  2005                                  ;       PlaceCursor
  2006                                  ;       PutPrimaryEndOfInt
  2007                                  ;       PutSecondaryEndOfInt
  2008                                  ;
  2009                                  ;=======================================================================================================================
  2010                                  ;-----------------------------------------------------------------------------------------------------------------------
  2011                                  ;
  2012                                  ;       Routine:        PlaceCursor
  2013                                  ;
  2014                                  ;       Description:    This routine positions the cursor on the console.
  2015                                  ;
  2016                                  ;       In:             DS      OS data selector
  2017                                  ;
  2018                                  ;-----------------------------------------------------------------------------------------------------------------------
  2019 000000FB 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2020 000000FC A055080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2021 00000101 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2022 00000103 F6E4                                            mul     ah                                              ;row offset
  2023 00000105 020554080000                                    add     al,[wbConsoleColumn]                            ;add column
  2024 0000010B 80D400                                          adc     ah,0                                            ;add overflow
  2025 0000010E 89C1                                            mov     ecx,eax                                         ;screen offset
  2026 00000110 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2027 00000112 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2028 00000114 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2029 00000116 EE                                              out     dx,al                                           ;select register
  2030 00000117 42                                              inc     edx                                             ;data port
  2031 00000118 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2032 0000011A EE                                              out     dx,al                                           ;store hi-order loc
  2033 0000011B 4A                                              dec     edx                                             ;register select port
  2034 0000011C B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2035 0000011E EE                                              out     dx,al                                           ;select register
  2036 0000011F 42                                              inc     edx                                             ;data port
  2037 00000120 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2038 00000122 EE                                              out     dx,al                                           ;store lo-order loc
  2039 00000123 59                                              pop     ecx                                             ;restore non-volatile regs
  2040 00000124 C3                                              ret                                                     ;return
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;
  2043                                  ;       Routine:        PutPrimaryEndOfInt
  2044                                  ;
  2045                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048 00000125 B020                    PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2049 00000127 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2050 00000129 C3                                              ret                                                     ;return
  2051                                  ;-----------------------------------------------------------------------------------------------------------------------
  2052                                  ;
  2053                                  ;       Routine:        PutSecondaryEndOfInt
  2054                                  ;
  2055                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2056                                  ;
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058 0000012A B020                    PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2059 0000012C E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2060 0000012E C3                                              ret                                                     ;return
  2061                                  ;-----------------------------------------------------------------------------------------------------------------------
  2062                                  ;
  2063                                  ;       End of the Kernel Function Library
  2064                                  ;
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066 0000012F 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2067                                  ;=======================================================================================================================
  2068                                  ;
  2069                                  ;       Console Task
  2070                                  ;
  2071                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2072                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2073                                  ;       screen and responds to user commands.
  2074                                  ;
  2075                                  ;=======================================================================================================================
  2076                                  ;-----------------------------------------------------------------------------------------------------------------------
  2077                                  ;
  2078                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2079                                  ;
  2080                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2081                                  ;
  2082                                  ;-----------------------------------------------------------------------------------------------------------------------
  2083                                  section                 constack                                                ;console task stack
  2084 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2085                                  ;-----------------------------------------------------------------------------------------------------------------------
  2086                                  ;
  2087                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2088                                  ;
  2089                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2090                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2091                                  ;       16 descriptors. Six are initially defined.
  2092                                  ;
  2093                                  ;-----------------------------------------------------------------------------------------------------------------------
  2094                                  section                 conldt                                                  ;console local descriptors
  2095 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2096 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2097 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2098 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2099 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  2100 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  2101 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2102                                  ;-----------------------------------------------------------------------------------------------------------------------
  2103                                  ;
  2104                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2105                                  ;
  2106                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2107                                  ;       segment. CS to console code.
  2108                                  ;
  2109                                  ;-----------------------------------------------------------------------------------------------------------------------
  2110                                  section                 contss                                                  ;console task state segment
  2111 00000000 00000000                                        dd      0                                               ;00 back-link tss
  2112 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  2113 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  2114 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  2115 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  2116 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  2117 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  2118 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  2119 00000020 00000000                                        dd      0                                               ;20 eip
  2120 00000024 00020000                                        dd      0200h                                           ;24 eflags
  2121 00000028 00000000                                        dd      0                                               ;28 eax
  2122 0000002C 00000000                                        dd      0                                               ;2c ecx
  2123 00000030 00000000                                        dd      0                                               ;30 edx
  2124 00000034 00000000                                        dd      0                                               ;34 ebx
  2125 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  2126 0000003C 00000000                                        dd      0                                               ;3c ebp
  2127 00000040 00000000                                        dd      0                                               ;40 esi
  2128 00000044 00000000                                        dd      0                                               ;44 edi
  2129 00000048 1C000000                                        dd      001Ch                                           ;48 es
  2130 0000004C 24000000                                        dd      0024h                                           ;4c cs
  2131 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  2132 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  2133 00000058 00000000                                        dd      0                                               ;58 fs
  2134 0000005C 00000000                                        dd      0                                               ;5c gs
  2135 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2136 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138                                  ;
  2139                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2140                                  ;
  2141                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2142                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2143                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2144                                  ;       event.
  2145                                  ;
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                  section                 conmque                                                 ;console message queue
  2148 00000000 08000000                                        dd      8                                               ;head pointer
  2149 00000004 08000000                                        dd      8                                               ;tail pointer
  2150 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  ;
  2153                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2154                                  ;
  2155                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2156                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2157                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2158                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2159                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2160                                  ;       board input, echoing to the console screen and responding to user commands.
  2161                                  ;
  2162                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2163                                  ;
  2164                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2165                                  ;                               |  Real Mode Interrupt Vectors                  |
  2166                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2167                                  ;                               |  Reserved BIOS Memory Area                    |
  2168                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2169                                  ;                               |  Shared Kernel Memory Area                    |
  2170                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2171                                  ;                               |  Global Descriptor Table (GDT)                |
  2172                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2173                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2174                                  ;                       002000  +-----------------------------------------------+
  2175                                  ;                               |  Interrupt Handlers                           |
  2176                                  ;                               |  Kernel Function Library                      |
  2177                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2178                                  ;                               |  Console Task Stack Area                      |
  2179                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2180                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2181                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2182                                  ;                               |  Console Task Task State Segment (TSS)        |
  2183                                  ;                       004800  +-----------------------------------------------+
  2184                                  ;                               |  Console Task Message Queue                   |
  2185                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2186                                  ;                               |  Console Task Code                            |
  2187                                  ;                               |  Console Task Constants                       |
  2188                                  ;                       006000  +===============================================+
  2189                                  ;
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2192                                  ;
  2193                                  ;       Initialize console work areas to low values.
  2194                                  ;
  2195 00000000 BF00080000              ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  2196 00000005 30C0                                            xor     al,al                                           ;initialization value
  2197 00000007 B956000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  2198 0000000C FC                                              cld                                                     ;forward strings
  2199 0000000D F3AA                                            rep     stosb                                           ;initialize data
  2200                                  ;
  2201                                  ;       Initialize the active panel variables.
  2202                                  ;
  2203 0000000F B8[B6000000]                                    mov     eax,czPnlCon001                                 ;initial console panel
  2204 00000014 A300080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  2205                                  ;
  2206                                  ;       Address the console screen memory.
  2207                                  ;
  2208 00000019 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  2209 0000001B 07                                              pop     es                                              ;...into extra segment reg
  2210                                  ;
  2211                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  2212                                  ;
  2213 0000001C BF000F0000                                      mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  2214 00000021 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2215 00000026 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2216 0000002B F3AB                                            rep     stosd                                           ;reset OIA
  2217                                  ;
  2218                                  ;       Clear the console rows. (This is done after every attention key).
  2219                                  ;
  2220 0000002D 31FF                    .20                     xor     edi,edi                                         ;target offset
  2221 0000002F B9C0030000                                      mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  2222 00000034 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initialization value
  2223 00000039 F3AB                                            rep     stosd                                           ;reset screen body
  2224                                  ;
  2225                                  ;       Reset the input field input address, row and column.
  2226                                  ;
  2227 0000003B 31C0                                            xor     eax,eax                                         ;zero register
  2228 0000003D A255080000                                      mov     [wbConsoleRow],al                               ;zero console row
  2229 00000042 A254080000                                      mov     [wbConsoleColumn],al                            ;zero console column
  2230                                  ;
  2231                                  ;       Load the field address from the panel. Exit loop if address is null.
  2232                                  ;
  2233 00000047 8B1D00080000                                    mov     ebx,[wdConsolePanel]                            ;first field template addr
  2234 0000004D 8B33                    .30                     mov     esi,[ebx]                                       ;field value addr
  2235 0000004F 85F6                                            test    esi,esi                                         ;end of panel?
  2236 00000051 7450                                            jz      .70                                             ;yes, exit loop
  2237                                  ;
  2238                                  ;       Load the field row, column, color and length.
  2239                                  ;
  2240 00000053 8A6B04                                          mov     ch,[ebx+4]                                      ;row
  2241 00000056 8A4B05                                          mov     cl,[ebx+5]                                      ;column
  2242 00000059 8A7306                                          mov     dh,[ebx+6]                                      ;color
  2243 0000005C 8A5307                                          mov     dl,[ebx+7]                                      ;length
  2244                                  ;
  2245                                  ;       Test the row high-bit for input field indication.
  2246                                  ;
  2247 0000005F F6C580                                          test    ch,080h                                         ;input field?
  2248 00000062 741C                                            jz      .40                                             ;no, branch
  2249 00000064 80E57F                                          and     ch,07Fh                                         ;clear input field indicator
  2250                                  ;
  2251                                  ;       Save the row and column if this is the first input field.
  2252                                  ;
  2253 00000067 A055080000                                      mov     al,[wbConsoleRow]                               ;console row
  2254 0000006C 0A0554080000                                    or      al,[wbConsoleColumn]                            ;already have an input field?
  2255 00000072 750C                                            jnz     .40                                             ;yes, branch
  2256 00000074 882D55080000                                    mov     [wbConsoleRow],ch                               ;update console row
  2257 0000007A 880D54080000                                    mov     [wbConsoleColumn],cl                            ;update console column
  2258                                  ;
  2259                                  ;       Compute the target offset.
  2260                                  ;
  2261 00000080 0FB6C5                  .40                     movzx   eax,ch                                          ;row
  2262 00000083 B450                                            mov     ah,ECONCOLS                                     ;columns per row
  2263 00000085 F6E4                                            mul     ah                                              ;row offset
  2264 00000087 00C8                                            add     al,cl                                           ;add column
  2265 00000089 80D400                                          adc     ah,0                                            ;handle overflow
  2266 0000008C D1E0                                            shl     eax,1                                           ;two-bytes per column
  2267 0000008E 89C7                                            mov     edi,eax                                         ;target offset
  2268                                  ;
  2269                                  ;       Display the field contents.
  2270                                  ;
  2271 00000090 0FB6CA                                          movzx   ecx,dl                                          ;length
  2272 00000093 88F4                                            mov     ah,dh                                           ;color
  2273 00000095 AC                      .50                     lodsb                                                   ;field character
  2274 00000096 84C0                                            test    al,al                                           ;end of value?
  2275 00000098 7404                                            jz      .60                                             ;yes, branch
  2276 0000009A 66AB                                            stosw                                                   ;store character and color
  2277 0000009C E2F7                                            loop    .50                                             ;next character
  2278 0000009E 83C308                  .60                     add     ebx,8                                           ;next field addr
  2279 000000A1 EBAA                                            jmp     short .30                                       ;next field
  2280                                  ;
  2281                                  ;       Place the cursor at the input field.
  2282                                  ;
  2283 000000A3 8A2555080000            .70                     mov     ah,[wbConsoleRow]                               ;field row
  2284 000000A9 A054080000                                      mov     al,[wbConsoleColumn]                            ;field column
  2285                                                          placeCursor                                             ;position the cursor
  2285 000000AE B000                <1>  mov al,ePlaceCursor
  2285 000000B0 CD30                <1>  int _svc
  2286                                  ;
  2287                                  ;       Enter halt loop
  2288                                  ;
  2289 000000B2 FB                      .80                     sti                                                     ;enable interrupts
  2290 000000B3 F4                                              hlt                                                     ;halt until interrupt
  2291 000000B4 EBFC                                            jmp     .80                                             ;continue halt loop
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                  ;
  2294                                  ;       Constants
  2295                                  ;
  2296                                  ;-----------------------------------------------------------------------------------------------------------------------
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                  ;
  2299                                  ;       Panels
  2300                                  ;
  2301                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  2302                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  2303                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  2304                                  ;
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306 000000B6 [E2000000]              czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  2307 000000BA 00000206                                        db      00,00,02h,06                                    ;flags+row, col, attr, length
  2308 000000BE [E8000000]                                      dd      czFldTitleCon001
  2309 000000C2 001E0714                                        db      00,30,07h,20
  2310 000000C6 [FC000000]                                      dd      czFldDatTmCon001
  2311 000000CA 003F0211                                        db      00,63,02h,17
  2312 000000CE [0D010000]                                      dd      czFldPrmptCon001
  2313 000000D2 17000701                                        db      23,00,07h,01
  2314 000000D6 04080000                                        dd      wzConsoleInBuffer
  2315 000000DA 9701074F                                        db      128+23,01,07h,79
  2316 000000DE 00000000                                        dd      0                                               ;end of panel
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  ;
  2319                                  ;       Strings
  2320                                  ;
  2321                                  ;-----------------------------------------------------------------------------------------------------------------------
  2322 000000E2 434F4E303031            czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  2323 000000E8 437573746F6D4F5320-     czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  2323 000000F1 56657273696F6E2031-
  2323 000000FA 2E30               
  2324 000000FC 44442D4D4D4D2D5959-     czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  2324 00000105 59592048483A4D4D   
  2325 0000010D 3A                      czFldPrmptCon001        db      ":"                                             ;command prompt
  2326 0000010E 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  2327                                  %endif
  2328                                  %ifdef BUILDDISK
  2329                                  ;-----------------------------------------------------------------------------------------------------------------------
  2330                                  ;
  2331                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2332                                  ;
  2333                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2334                                  ;
  2335                                  ;-----------------------------------------------------------------------------------------------------------------------
  2336                                  section                 unused                                                  ;unused disk space
  2337                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2338                                  %endif
  2339                                  ;=======================================================================================================================
  2340                                  ;
  2341                                  ;       End of Program Code
  2342                                  ;
  2343                                  ;=======================================================================================================================
