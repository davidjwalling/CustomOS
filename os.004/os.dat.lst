     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.004
     6                                  ;
     7                                  ;       Description:    In this sample program, the loader is expanded to validate the CPU type and place the CPU into
     8                                  ;                       protected mode.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  ;
   210                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   211                                  ;
   212                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   213                                  ;       external devices and signals a hardware interrupt to the CPU.
   214                                  ;
   215                                  ;-----------------------------------------------------------------------------------------------------------------------
   216                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   217                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   218                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   219                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   220                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   221                                  ;-----------------------------------------------------------------------------------------------------------------------
   222                                  ;
   223                                  ;       8253 Programmable Interval Timer                                        EPIT...
   224                                  ;
   225                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   226                                  ;       approximately 18.2 times per second.
   227                                  ;
   228                                  ;-----------------------------------------------------------------------------------------------------------------------
   229                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   230                                  ;-----------------------------------------------------------------------------------------------------------------------
   231                                  ;
   232                                  ;       x86 CPU Architecture                                                    ;EX86...
   233                                  ;
   234                                  ;-----------------------------------------------------------------------------------------------------------------------
   235                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   239                                  ;
   240                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   241                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   242                                  ;
   243                                  ;       0.......        Segment is not present in memory (triggers int 11)
   244                                  ;       1.......        Segment is present in memory
   245                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   246                                  ;       ...0....        Segment is a system segment
   247                                  ;       ...00010                Local Descriptor Table
   248                                  ;       ...00101                Task Gate
   249                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   250                                  ;       ...01100                Call Gate (386)
   251                                  ;       ...01110                Interrupt Gate (386)
   252                                  ;       ...01111                Trap Gate (386)
   253                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   254                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   255                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   256                                  ;
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   259                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   260                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   261                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   262                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   263                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   264                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   265                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  ;
   268                                  ;       Firmware-Defined Values
   269                                  ;
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   274                                  ;
   275                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   276                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   277                                  ;
   278                                  ;-----------------------------------------------------------------------------------------------------------------------
   279                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   280                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   281                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   282                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   283                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   284                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   285                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   286                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   287                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   288                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   289                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;
   292                                  ;       Standards-Based Values
   293                                  ;
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  ;
   297                                  ;       ASCII                                                                   EASCII...
   298                                  ;
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   301                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   302                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       Operating System Values
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  ;
   310                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   311                                  ;
   312                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   313                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   314                                  ;
   315                                  ;-----------------------------------------------------------------------------------------------------------------------
   316                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   317                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   318                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   319                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   320                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   321                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   322                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;       Console Constants                                                       ECON...
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ECONCOLS                equ     80                                              ;columns per row
   327                                  ECONROWS                equ     24                                              ;console rows
   328                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   329                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   330                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   331                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   332                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   337                                  EGDTCGA                 equ     020h                                            ;cga video selector
   338                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   339                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   340                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   341                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   342                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   343                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;       Kernel Constants                                                        EKRN...
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   348                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   349                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   350                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   351                                  ;=======================================================================================================================
   352                                  ;
   353                                  ;       Structures
   354                                  ;
   355                                  ;=======================================================================================================================
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;
   358                                  ;       OSDATA
   359                                  ;
   360                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   361                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   362                                  ;
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  struc                   OSDATA
   365 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   366 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   367 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   368 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   369 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   370 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   371 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   372 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   373 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   374 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   375 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   376 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   377 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   378 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   379 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   380 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   381 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   382 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   383 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   384 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   385 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   386 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   387 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   388 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   389 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   390 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   391 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   392 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   393 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   394 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   395 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   396 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   397 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   398 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   399 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   400 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   401 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   402 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   403 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   404 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   405 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   406 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   407 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   408 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   409 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   410 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   411 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   412 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   413 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   414 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   415 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   416 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   417 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   418 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   419 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   420 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   421 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   422 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   423 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   424 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   425 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   426 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   427 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   428 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   429 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   430 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   431 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   432 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   433 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   434 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   435 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   436 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   437 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   438 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   439 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   440 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   441 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   442 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   443 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   444 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   445 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   446 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   447 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   448 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   449 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   450 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   451 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   452 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   453 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   454 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   455 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   456 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   457 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   458 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   459 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   460 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   461 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   462 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   463 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   464 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   465 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ;
   468                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   469                                  ;
   470                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   471                                  ;
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ECONDATA                equ     ($)
   474 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   475 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   476                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  ;
   479                                  ;       End of OS Variables
   480                                  ;
   481                                  ;-----------------------------------------------------------------------------------------------------------------------
   482                                  endstruc
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;       Macros
   486                                  ;
   487                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   488                                  ;
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  %macro                  mint    1
   491                                  _%1                     equ     ($-$$) / EX86DESCLEN
   492                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   493                                  %endmacro
   494                                  %macro                  mtrap   1
   495                                  _%1                     equ     ($-$$) / EX86DESCLEN
   496                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   497                                  %endmacro
   498                                  %macro                  menter  1
   499                                  ?%1                     equ     ($-$$)
   500                                  %endmacro
   501                                  %macro                  tsvce   1
   502                                  e%1                     equ     ($-tsvc)/4
   503                                                          dd      %1
   504                                  %endmacro
   505                                  %ifdef BUILDBOOT
   506                                  ;=======================================================================================================================
   507                                  ;
   508                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   509                                  ;
   510                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   511                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   512                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   513                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   514                                  ;
   515                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   516                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   517                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   518                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   519                                  ;       immediately followed by a disk parameter table.
   520                                  ;
   521                                  ;=======================================================================================================================
   522                                                          cpu     8086                                            ;assume minimal CPU
   523                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   524                                                          bits    16                                              ;16-bit code at power-up
   525                                  %ifdef BUILDPREP
   526                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   527                                  %else
   528 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   529                                  %endif
   530                                  ;-----------------------------------------------------------------------------------------------------------------------
   531                                  ;
   532                                  ;       Disk Parameter Table
   533                                  ;
   534                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   535                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   536                                  ;
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   539 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   540 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   541 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   542 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   543 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   544 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   545 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   546 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   547                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   548 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   549 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   550 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   551                                  ;
   552                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   553                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   554                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   555                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   556                                  ;       given several possible starting values for CS:IP.
   557                                  ;
   558                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   559 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   560                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   561 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   562 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   563 00000025 B104                                            mov     cl,4                                            ;shift count
   564 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   565 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   566 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   567                                  ;
   568                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   569                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   570                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   571                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   572                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   573                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   574                                  ;
   575 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   576 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   577 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   578 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   579 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   580                                  ;
   581                                  ;       Our boot addressability is now set up according to the following diagram.
   582                                  ;
   583                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   584                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   585                                  ;                               |  256 = 100h bytes                             |
   586                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   587                                  ;                               |  Boot Sector (vstart=0100h)                   |
   588                                  ;                               |  1 sector = 512 = 200h bytes                  |
   589                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   590                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   591                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   592                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   593                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   594                                  ;                               |  2 sectors = 1024 = 400h bytes
   595                                  ;                       009400  +-----------------------------------------------+ DS:1900
   596                                  ;
   597                                  ;       On entry, DL indicates the drive being booted from.
   598                                  ;
   599 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   600                                  ;
   601                                  ;       Compute directory i/o buffer address.
   602                                  ;
   603 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   604 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   605 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   606 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   607                                  ;
   608                                  ;       Compute segment where os.com will be loaded.
   609                                  ;
   610 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   611 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   612 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   613 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   614                                  ;
   615                                  ;       Set the video mode to 80 column, 25 row, text.
   616                                  ;
   617 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   618 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   619                                  ;
   620                                  ;       Write a message to the console so we know we have our addressability established.
   621                                  ;
   622 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   623 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   624                                  ;
   625                                  ;       Initialize the number of directory sectors to search.
   626                                  ;
   627 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   628 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   629                                  ;
   630                                  ;       Compute number of directory sectors and initialize overhead count.
   631                                  ;
   632 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   633 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   634 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   635 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   636                                  ;
   637                                  ;       Compute directory entries per sector.
   638                                  ;
   639 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   640 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   641 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   642                                  ;
   643                                  ;       Compute first logical directory sector and update overhead count.
   644                                  ;
   645 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   646 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   647 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   648 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   649 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   650 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   651                                  ;
   652                                  ;       Read directory sector.
   653                                  ;
   654 0000008E B001                    .30                     mov     al,1                                            ;sector count
   655 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   656 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   657 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   658                                  ;
   659                                  ;       Setup variables to search this directory sector.
   660                                  ;
   661 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   662 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   663 000000A1 7603                                            jna     .40                                             ;no, continue
   664 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   665 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   666 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   667 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   668                                  ;
   669                                  ;       Loop through directory sectors searching for kernel program.
   670                                  ;
   671 000000B1 56                      .50                     push    si                                              ;save kernel name address
   672 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   673 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   674 000000B6 FC                                              cld                                                     ;forward strings
   675 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   676 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   677 000000BA 5E                                              pop     si                                              ;restore kernel name address
   678 000000BB 7418                                            je      .60                                             ;exit loop if found
   679 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   680 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   681 000000C2 75ED                                            jnz     .50                                             ;next entry
   682                                  ;
   683                                  ;       Repeat search if we are not at the end of the directory.
   684                                  ;
   685 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   686 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   687 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   688 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   689 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   690                                  ;
   691                                  ;       If we find the kernel program in the directory, read the FAT.
   692                                  ;
   693 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   694 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   695 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   696 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   697 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   698 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   699                                  ;
   700                                  ;       Get the starting cluster of the kernel program and target address.
   701                                  ;
   702 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   703 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   704                                  ;
   705                                  ;       Read each program cluster into RAM.
   706                                  ;
   707 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   708 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   709 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   710 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   711 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   712 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   713 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   714 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   715 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   716                                  ;
   717                                  ;       Update buffer pointer for next cluster.
   718                                  ;
   719 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   720 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   721 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   722 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   723 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   724                                  ;
   725                                  ;       Compute next cluster number.
   726                                  ;
   727 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   728 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   729 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   730 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   731 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   732 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   733 00000120 83E701                                          and     di,1                                            ;get low bit
   734 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   735 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   736 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   737                                  ;
   738                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   739                                  ;
   740 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   741 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   742 00000130 B104                                            mov     cl,4                                            ;shift count
   743 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   744 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   745 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   746 0000013A 75B2                                            jne     .70                                             ;no, continue
   747                                  ;
   748                                  ;       Transfer control to the operating system program.
   749                                  ;
   750 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   751 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   752 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   753                                  ;
   754                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   755                                  ;
   756 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   757 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   758 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   759 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   760 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   761 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   762 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   763 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   764 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   765 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   766                                  ;
   767                                  ;       Try maxtries times to read sector.
   768                                  ;
   769 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   770 00000160 53                      .10                     push    bx                                              ;save buffer address
   771 00000161 51                                              push    cx                                              ;save retry count
   772 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   773 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   774 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   775 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   776 0000016F 59                                              pop     cx                                              ;restore retry count
   777 00000170 5B                                              pop     bx                                              ;restore buffer address
   778 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   779 00000173 E2EB                                            loop    .10                                             ;retry
   780                                  ;
   781                                  ;       Handle disk error: convert to ASCII and store in error string.
   782                                  ;
   783 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   784 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   785 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   786 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   787 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   788 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   789 00000183 7203                                            jb      .20                                             ;continue if numeral
   790 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   791 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   792 0000018A 7203                                            jb      .30                                             ;continue if numeral
   793 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   794 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   795 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   796 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   797                                  ;
   798                                  ;       Wait for a key press.
   799                                  ;
   800 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   801 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   802 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   803 0000019E FB                                              sti                                                     ;enable maskable interrupts
   804 0000019F F4                                              hlt                                                     ;wait for interrupt
   805 000001A0 EBF6                                            jmp     .10                                             ;repeat
   806                                  ;
   807                                  ;       Reset the system.
   808                                  ;
   809 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   810 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   811 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   812 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   813 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   814                                  ;
   815                                  ;       Display text message.
   816                                  ;
   817 000001AA FC                      BootPrint               cld                                                     ;forward strings
   818 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   819 000001AC 84C0                                            test    al,al                                           ;end of string?
   820 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   821 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   822 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   823 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   824 000001B6 C3                      BootReturn              ret                                                     ;return
   825                                  ;-----------------------------------------------------------------------------------------------------------------------
   826                                  ;
   827                                  ;       Constants
   828                                  ;
   829                                  ;-----------------------------------------------------------------------------------------------------------------------
   830 000001B7 90                                              align   2
   831 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   832 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   832 000001C3 4F4D               
   833 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   833 000001CE 530D0A00           
   834 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   834 000001DB 7220               
   835 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   836 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   836 000001E9 6700               
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838                                  ;
   839                                  ;       Work Areas
   840                                  ;
   841                                  ;-----------------------------------------------------------------------------------------------------------------------
   842 000001EB 90                                              align   2
   843 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   844 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   845 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   846 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   847 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   848                                  wwReadCountCommand      equ     $                                               ;read count and command
   849 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   850 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   851                                  wwDriveHead             equ     $                                               ;drive, head (word)
   852 000001F8 00                      wbDrive                 db      0                                               ;drive
   853 000001F9 00                      wbHead                  db      0                                               ;head
   854                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   855 000001FA 00                                              db      0                                               ;sector
   856 000001FB 00                      wbTrack                 db      0                                               ;track
   857 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   858 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   859                                  %endif
   860                                  %ifdef BUILDPREP
   861                                  ;=======================================================================================================================
   862                                  ;
   863                                  ;       Diskette Preparation Code
   864                                  ;
   865                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   866                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   867                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   868                                  ;
   869                                  ;=======================================================================================================================
   870                                  ;
   871                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   872                                  ;
   873                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   874                                                          call    BootPrint                                       ;display message
   875                                  ;
   876                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   877                                  ;
   878                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   879                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   880                                                          jnz     .20                                             ;continue if key pressed
   881                                                          sti                                                     ;enable interrupts
   882                                                          hlt                                                     ;wait for interrupt
   883                                                          jmp     .10                                             ;repeat
   884                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   885                                                          je      .30                                             ;yes, branch
   886                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   887                                                          jne     .10                                             ;no, repeat
   888                                                          jmp     .120                                            ;yes, exit program
   889                                  ;
   890                                  ;       Display writing-sector message and patch the JMP instruction.
   891                                  ;
   892                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   893                                                          call    BootPrint                                       ;display message
   894                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   895                                                          mov     ax,01Bh                                         ;address past disk parameter table
   896                                                          mov     [bx],ax                                         ;update the JMP instruction
   897                                  ;
   898                                  ;       Try to read the boot sector.
   899                                  ;
   900                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   901                                  .40                     push    cx                                              ;save remaining tries
   902                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   903                                                          mov     dx,0                                            ;head zero, drive zero
   904                                                          mov     cx,1                                            ;track zero, sector one
   905                                                          mov     al,1                                            ;one sector
   906                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   907                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   908                                                          pop     cx                                              ;restore remaining retries
   909                                                          jnc     .50                                             ;skip ahead if successful
   910                                                          loop    .40                                             ;try again
   911                                                          mov     si,czPrepMsg20                                  ;read-error message address
   912                                                          jmp     .70                                             ;branch to error routine
   913                                  ;
   914                                  ;       Copy diskette parms from input buffer to output buffer.
   915                                  ;
   916                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   917                                                          add     si,11                                           ;skip over JMP and system ID
   918                                                          mov     di,Boot                                         ;output buffer address
   919                                                          add     di,11                                           ;skip over JMP and system ID
   920                                                          mov     cx,19                                           ;length of diskette parameters
   921                                                          cld                                                     ;forward string copies
   922                                                          rep     movsb                                           ;copy diskette parameters
   923                                  ;
   924                                  ;       Try to write boot sector to diskette.
   925                                  ;
   926                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   927                                  .60                     push    cx                                              ;save remaining tries
   928                                                          mov     bx,Boot                                         ;output buffer address
   929                                                          mov     dx,0                                            ;head zero, drive zero
   930                                                          mov     cx,1                                            ;track zero, sector one
   931                                                          mov     al,1                                            ;one sector
   932                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   933                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   934                                                          pop     cx                                              ;restore remaining retries
   935                                                          jnc     .100                                            ;skip ahead if successful
   936                                                          loop    .60                                             ;try again
   937                                                          mov     si,czPrepMsg30                                  ;write-error message address
   938                                  ;
   939                                  ;       Convert the error code to ASCII and display the error message.
   940                                  ;
   941                                  .70                     push    ax                                              ;save error code
   942                                                          mov     al,ah                                           ;copy error code
   943                                                          mov     ah,0                                            ;AX = error code
   944                                                          mov     dl,10h                                          ;hexadecimal divisor
   945                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
   946                                                          or      ax,03030h                                       ;add ASCII zone digits
   947                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
   948                                                          jb      .80                                             ;yes, continue
   949                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
   950                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
   951                                                          jb      .90                                             ;yes, continue
   952                                                          add     al,7                                            ;no, make ASCII
   953                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
   954                                                          call    BootPrint                                       ;write error message
   955                                                          pop     ax                                              ;restore error code
   956                                  ;
   957                                  ;       Display the completion message.
   958                                  ;
   959                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
   960                                                          mov     al,ah                                           ;BIOS return code
   961                                                          cmp     al,0                                            ;success?
   962                                                          je      .110                                            ;yes, continue
   963                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
   964                                                          cmp     al,1                                            ;disk parameter error?
   965                                                          je      .110                                            ;yes, continue
   966                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
   967                                                          cmp     al,2                                            ;address mark not found?
   968                                                          je      .110                                            ;yes, continue
   969                                                          mov     si,czPrepMsgErr3                                ;protected disk message
   970                                                          cmp     al,3                                            ;protected disk?
   971                                                          je      .110                                            ;yes, continue
   972                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
   973                                                          cmp     al,6                                            ;diskette removed?
   974                                                          je      .110                                            ;yes, continue
   975                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
   976                                                          cmp     al,80H                                          ;drive timed out?
   977                                                          je      .110                                            ;yes, continue
   978                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
   979                                  .110                    call    BootPrint                                       ;display result message
   980                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
   981                                                          int     021h                                            ;terminate DOS program
   982                                                          ret                                                     ;return (should not execute)
   983                                  ;-----------------------------------------------------------------------------------------------------------------------
   984                                  ;
   985                                  ;       Diskette Preparation Messages
   986                                  ;
   987                                  ;-----------------------------------------------------------------------------------------------------------------------
   988                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
   989                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
   990                                                          db      13,10
   991                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
   992                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
   993                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   994                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
   995                                                          db      13,10,0
   996                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
   997                                                          db      13,10,0
   998                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   999                                                          db      13,10,0
  1000                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1001                                                          db      13,10,0
  1002                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1003                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1004                                                          db      13,10,0
  1005                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1006                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1007                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1008                                                          db      13,10,"and retry."
  1009                                                          db      13,10,0
  1010                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1011                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1012                                                          db      13,10,"using another diskette."
  1013                                                          db      13,10,0
  1014                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1015                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1016                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1017                                                          db      13,10,0
  1018                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1019                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1020                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1021                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1022                                                          db      13,10,"is properly inserted in the diskette drive."
  1023                                                          db      13,10,0
  1024                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1025                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1026                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1027                                                          db      13,10,0
  1028                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1029                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1030                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1031                                                          db      13,10,0
  1032                                  wcPrepInBuf             equ     $
  1033                                  %endif
  1034                                  %ifdef BUILDDISK
  1035                                  ;=======================================================================================================================
  1036                                  ;
  1037                                  ;       File Allocation Tables
  1038                                  ;
  1039                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1040                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1041                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1042                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1043                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1044                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1045                                  ;       the last cluster in the chain.
  1046                                  ;
  1047                                  ;       Every three bytes encode two FAT entries as follows:
  1048                                  ;
  1049                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1050                                  ;
  1051                                  ;=======================================================================================================================
  1052                                  ;-----------------------------------------------------------------------------------------------------------------------
  1053                                  ;
  1054                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1055                                  ;
  1056                                  ;-----------------------------------------------------------------------------------------------------------------------
  1057                                  section                 fat1                                                    ;first copy of FAT
  1058                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1059                                                          db      005h,060h,000h, 007h,080h,000h
  1060                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1061                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1062                                                          db      011h,020h,001h, 013h,040h,001h
  1063                                                          db      015h,060h,001h, 017h,080h,001h
  1064                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1065                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1066                                                          db      021h,020h,002h, 023h,040h,002h
  1067                                                          db      025h,060h,002h, 027h,080h,002h
  1068                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1069                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1070                                  ;-----------------------------------------------------------------------------------------------------------------------
  1071                                  ;
  1072                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1073                                  ;
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  section                 fat2                                                    ;second copy of FAT
  1076                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1077                                                          db      005h,060h,000h, 007h,080h,000h
  1078                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1079                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1080                                                          db      011h,020h,001h, 013h,040h,001h
  1081                                                          db      015h,060h,001h, 017h,080h,001h
  1082                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1083                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1084                                                          db      021h,020h,002h, 023h,040h,002h
  1085                                                          db      025h,060h,002h, 027h,080h,002h
  1086                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1087                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1088                                  ;-----------------------------------------------------------------------------------------------------------------------
  1089                                  ;
  1090                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1091                                  ;
  1092                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1093                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1094                                  ;       copy.
  1095                                  ;
  1096                                  ;-----------------------------------------------------------------------------------------------------------------------
  1097                                  section                 dir                                                     ;diskette directory
  1098                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1099                                                          db      020h                                            ;attribute (archive bit set)
  1100                                                          times   10 db 0                                         ;unused
  1101                                                          dw      0h                                              ;time
  1102                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1103                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1104                                                          dw      2                                               ;first cluster
  1105                                                          dd      05400h                                          ;file size
  1106                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1107                                  %endif
  1108                                  %ifdef BUILDCOM
  1109                                  ;=======================================================================================================================
  1110                                  ;
  1111                                  ;       OS.COM
  1112                                  ;
  1113                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1114                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1115                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1116                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1117                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1118                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1119                                  ;
  1120                                  ;       Our loader addressability is set up according to the following diagram.
  1121                                  ;
  1122                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1123                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1124                                  ;                               |  256 = 100h bytes                             |
  1125                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1126                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1127                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1128                                  ;                       007e00  +-----------------------------------------------+
  1129                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1130                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1131                                  ;                               |                                               |
  1132                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1133                                  ;                               |                                               |
  1134                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1135                                  ;                               |  Loader Code                                  |
  1136                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1137                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1138                                  ;
  1139                                  ;=======================================================================================================================
  1140                                  ;-----------------------------------------------------------------------------------------------------------------------
  1141                                  ;
  1142                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1143                                  ;
  1144                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1145                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1146                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1147                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1148                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1149                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1150                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1151                                  ;       registers.
  1152                                  ;
  1153                                  ;-----------------------------------------------------------------------------------------------------------------------
  1154                                                          cpu     8086                                            ;assume minimal CPU
  1155                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1156                                                          bits    16                                              ;this is 16-bit code
  1157                                  Loader                  push    cs                                              ;use the code segment
  1158                                                          pop     ds                                              ;...as our data segment
  1159                                                          push    cs                                              ;use the code segment
  1160                                                          pop     es                                              ;...as our extra segment
  1161                                  ;
  1162                                  ;       Write a message to the console so we know we have our addressability established.
  1163                                  ;
  1164                                                          mov     si,czStartingMsg                                ;starting message
  1165                                                          call    PutTTYString                                    ;display loader message
  1166                                  ;
  1167                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1168                                  ;
  1169                                                          call    GetCPUType                                      ;AL = cpu type
  1170                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1171                                                          cmp     al,3                                            ;80386+?
  1172                                                          jb      LoaderExit                                      ;no, exit with error message
  1173                                                          cpu     386                                             ;allow 80386 instructions
  1174                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1175                                                          call    PutTTYString                                    ;display message
  1176                                  ;
  1177                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1178                                  ;
  1179                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1180                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1181                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1182                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1183                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1184                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1185                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1186                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1187                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1188                                                          call    PutTTYString                                    ;display message
  1189                                  ;
  1190                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1191                                  ;
  1192                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1193                                                          pop     es                                              ;... as target segment
  1194                                                          xor     di,di                                           ;ES:DI = target address
  1195                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1196                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1197                                                          cld                                                     ;forward strings
  1198                                                          rep     movsb                                           ;copy kernel image
  1199                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1200                                                          call    PutTTYString                                    ;display message
  1201                                  ;
  1202                                  ;       Switch to protected mode.
  1203                                  ;
  1204                                                          xor     si,si                                           ;ES:SI = gdt addr
  1205                                                          mov     ss,si                                           ;protected mode ss
  1206                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1207                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1208                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1209                                                          mov     dx,001Fh                                        ;outer delay loop count
  1210                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1211                                                          loop    $                                               ;wait out pending interrupts
  1212                                                          dec     dx                                              ;restore outer loop count
  1213                                                          jnz     .10                                             ;continue outer loop
  1214                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1215                                  ;
  1216                                  ;       Enable hardware and maskable interrupts.
  1217                                  ;
  1218                                                          xor     al,al                                           ;enable all registers code
  1219                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1220                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1221                                                          sti                                                     ;enable maskable interrupts
  1222                                  ;
  1223                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1224                                  ;
  1225                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1226                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1227                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1228                                  ;-----------------------------------------------------------------------------------------------------------------------
  1229                                  ;
  1230                                  ;       Routine:        LoaderExit
  1231                                  ;
  1232                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1233                                  ;
  1234                                  ;       In:             DS:SI   string address
  1235                                  ;
  1236                                  ;-----------------------------------------------------------------------------------------------------------------------
  1237                                  LoaderExit              call    PutTTYString                                    ;display error message
  1238                                  ;
  1239                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1240                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1241                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1242                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1243                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1244                                  ;
  1245                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1246                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1247                                                          jnz     .40                                             ;exit if key pressed
  1248                                                          sti                                                     ;enable maskable interrupts
  1249                                                          hlt                                                     ;wait for interrupt
  1250                                                          jmp     .30                                             ;repeat until keypress
  1251                                  ;
  1252                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1253                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1254                                  ;       HLT until the system resets.
  1255                                  ;
  1256                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1257                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1258                                  .50                     sti                                                     ;enable maskable interrupts
  1259                                                          hlt                                                     ;stop until reset, int, nmi
  1260                                                          jmp     .50                                             ;loop until restart kicks in
  1261                                  ;-----------------------------------------------------------------------------------------------------------------------
  1262                                  ;
  1263                                  ;       Routine:        GetCPUType
  1264                                  ;
  1265                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1266                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1267                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1268                                  ;
  1269                                  ;       Out:            AX      0 = 808x, v20, etc.
  1270                                  ;                               1 = 80186
  1271                                  ;                               2 = 80286
  1272                                  ;                               3 = 80386
  1273                                  ;
  1274                                  ;-----------------------------------------------------------------------------------------------------------------------
  1275                                  GetCPUType              mov     al,1                                            ;AL = 1
  1276                                                          mov     cl,32                                           ;shift count
  1277                                                          shr     al,cl                                           ;try a 32-bit shift
  1278                                                          or      al,al                                           ;did the shift happen?
  1279                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1280                                                          cpu     186
  1281                                                          push    sp                                              ;save stack pointer
  1282                                                          pop     cx                                              ;...into cx
  1283                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1284                                                          jne     .10                                             ;yes, cpu is 80186
  1285                                                          cpu     286
  1286                                                          inc     ax                                              ;AX = 2
  1287                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1288                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1289                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1290                                                          jz      .10                                             ;yes, cpu is 80286
  1291                                                          inc     ax                                              ;AX = 3
  1292                                  .10                     ret                                                     ;return
  1293                                  ;-----------------------------------------------------------------------------------------------------------------------
  1294                                  ;
  1295                                  ;       Routine:        PutTTYString
  1296                                  ;
  1297                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1298                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1299                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1300                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1301                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1302                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1303                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1304                                  ;                       to LODSB is not needed.
  1305                                  ;
  1306                                  ;       In:             DS:SI   address of string
  1307                                  ;
  1308                                  ;       Out:            DF      0
  1309                                  ;                       ZF      1
  1310                                  ;                       AL      0
  1311                                  ;
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  PutTTYString            cld                                                     ;forward strings
  1314                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1315                                                          test    al,al                                           ;end of string?
  1316                                                          jz      .20                                             ;... yes, exit our loop
  1317                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1318                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1319                                                          jmp     .10                                             ;repeat until done
  1320                                  .20                     ret                                                     ;return
  1321                                  ;-----------------------------------------------------------------------------------------------------------------------
  1322                                  ;
  1323                                  ;       Loader Data
  1324                                  ;
  1325                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1326                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1327                                  ;
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                                          align   2
  1330                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1331                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1332                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1333                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1334                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1335                                                          db      "Please press any key to restart the computer.",13,10,0
  1336                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1337                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1338                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1339                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1340                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1341                                  ;=======================================================================================================================
  1342                                  ;
  1343                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1344                                  ;
  1345                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1346                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1347                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1348                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1349                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1350                                  ;
  1351                                  ;=======================================================================================================================
  1352                                  ;=======================================================================================================================
  1353                                  ;
  1354                                  ;       Kernel Tables
  1355                                  ;
  1356                                  ;=======================================================================================================================
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  ;
  1359                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1360                                  ;
  1361                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1362                                  ;       first descriptor must be all nulls.
  1363                                  ;
  1364                                  ;       6   5         4         3         2         1         0
  1365                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1366                                  ;       ----------------------------------------------------------------
  1367                                  ;       h......hffffmmmma......ab......................bn..............n
  1368                                  ;
  1369                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1370                                  ;               ffff                                                            flags
  1371                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1372                                  ;                       a......a                                                access
  1373                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1374                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1375                                  ;
  1376                                  ;       00000000                                                                all areas have base addresses below 2^24
  1377                                  ;               0...                                                            single-byte size granularity
  1378                                  ;               1...                                                            4-kilobyte size granularity
  1379                                  ;               .0..                                                            16-bit default for code segments
  1380                                  ;               .1..                                                            32-bit default for code segments
  1381                                  ;               ..0.                                                            intel-reserved; should be zero
  1382                                  ;               ...0                                                            available for operating system use
  1383                                  ;                   0000                                                        segment is less than 2^16 in size
  1384                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1385                                  ;                       1.......                                                segment is present in memory
  1386                                  ;                       .00.....                                                segment is of privilege level 0
  1387                                  ;                       ...0....                                                segment is of system or gate type
  1388                                  ;                       ...00010                                                local decriptor table (LDT)
  1389                                  ;                       ...01001                                                task state segment (TSS) available
  1390                                  ;                       ...01011                                                task state segment (TSS) busy
  1391                                  ;                       ...10...                                                data segment
  1392                                  ;                       ...10011                                                writable data (accessed)
  1393                                  ;                       ...11...                                                code segment
  1394                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1395                                  ;
  1396                                  ;-----------------------------------------------------------------------------------------------------------------------
  1397                                  section                 gdt                                                     ;global descriptor table
  1398                                                          dq      0000000000000000h                               ;00 required null selector
  1399                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1400                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1401                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1402                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1403                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1404                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1405                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1406                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1407                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1408                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1409                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1410                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1411                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1412                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  ;
  1415                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1416                                  ;
  1417                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1418                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1419                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1420                                  ;
  1421                                  ;       6   5         4         3         2         1         0
  1422                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1423                                  ;       ----------------------------------------------------------------
  1424                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1425                                  ;
  1426                                  ;       h...h   high-order offset (bits 16-31)
  1427                                  ;       P       present (0=unused interrupt)
  1428                                  ;       zz      descriptor privilege level
  1429                                  ;       S       storage segment (must be zero for IDT)
  1430                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1431                                  ;       S...S   handling code selector in GDT
  1432                                  ;       l...l   lo-order offset (bits 0-15)
  1433                                  ;
  1434                                  ;-----------------------------------------------------------------------------------------------------------------------
  1435                                  section                 idt                                                     ;interrupt descriptor table
  1436                                                          mint    dividebyzero                                    ;00 divide by zero
  1437                                                          mint    singlestep                                      ;01 single step
  1438                                                          mint    nmi                                             ;02 non-maskable
  1439                                                          mint    break                                           ;03 break
  1440                                                          mint    into                                            ;04 into
  1441                                                          mint    bounds                                          ;05 bounds
  1442                                                          mint    badopcode                                       ;06 bad op code
  1443                                                          mint    nocoproc                                        ;07 no coprocessor
  1444                                                          mint    doublefault                                     ;08 double-fault
  1445                                                          mint    operand                                         ;09 operand
  1446                                                          mint    badtss                                          ;0a bad TSS
  1447                                                          mint    notpresent                                      ;0b not-present
  1448                                                          mint    stacklimit                                      ;0c stack limit
  1449                                                          mint    protection                                      ;0d general protection fault
  1450                                                          mint    int14                                           ;0e (reserved)
  1451                                                          mint    int15                                           ;0f (reserved)
  1452                                                          mint    coproccalc                                      ;10 (reserved)
  1453                                                          mint    int17                                           ;11 (reserved)
  1454                                                          mint    int18                                           ;12 (reserved)
  1455                                                          mint    int19                                           ;13 (reserved)
  1456                                                          mint    int20                                           ;14 (reserved)
  1457                                                          mint    int21                                           ;15 (reserved)
  1458                                                          mint    int22                                           ;16 (reserved)
  1459                                                          mint    int23                                           ;17 (reserved)
  1460                                                          mint    int24                                           ;18 (reserved)
  1461                                                          mint    int25                                           ;19 (reserved)
  1462                                                          mint    int26                                           ;1a (reserved)
  1463                                                          mint    int27                                           ;1b (reserved)
  1464                                                          mint    int28                                           ;1c (reserved)
  1465                                                          mint    int29                                           ;1d (reserved)
  1466                                                          mint    int30                                           ;1e (reserved)
  1467                                                          mint    int31                                           ;1f (reserved)
  1468                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1469                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1470                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1471                                                          mtrap   com2                                            ;23 IRQ3 com2
  1472                                                          mtrap   com1                                            ;24 IRQ4 com1
  1473                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1474                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1475                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1476                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1477                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1478                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1479                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1480                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1481                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1482                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1483                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1484                                                          mtrap   svc                                             ;30 OS services
  1485                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1486                                  ;=======================================================================================================================
  1487                                  ;
  1488                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1489                                  ;
  1490                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1491                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1492                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1493                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1494                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1495                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1496                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1497                                  ;
  1498                                  ;=======================================================================================================================
  1499                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1500                                                          cpu     386                                             ;allow 80386 instructions
  1501                                                          bits    32                                              ;this is 32-bit code
  1502                                  ;=======================================================================================================================
  1503                                  ;
  1504                                  ;       CPU Interrupt Handlers
  1505                                  ;
  1506                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1507                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1508                                  ;
  1509                                  ;=======================================================================================================================
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                  ;
  1512                                  ;       INT0    Divide By Zero
  1513                                  ;
  1514                                  ;-----------------------------------------------------------------------------------------------------------------------
  1515                                                          menter  dividebyzero                                    ;divide by zero
  1516                                                          push    0                                               ;store interrupt nbr
  1517                                                          push    czIntDivideByZero                               ;store message offset
  1518                                                          jmp     ReportInterrupt                                 ;report interrupt
  1519                                  ;-----------------------------------------------------------------------------------------------------------------------
  1520                                  ;
  1521                                  ;       INT1    Single Step
  1522                                  ;
  1523                                  ;-----------------------------------------------------------------------------------------------------------------------
  1524                                                          menter  singlestep                                      ;single step
  1525                                                          push    1                                               ;store interrupt nbr
  1526                                                          push    czIntSingleStep                                 ;store message offset
  1527                                                          jmp     ReportInterrupt                                 ;report interrupt
  1528                                  ;-----------------------------------------------------------------------------------------------------------------------
  1529                                  ;
  1530                                  ;       INT2    Non-Maskable Interrupt
  1531                                  ;
  1532                                  ;-----------------------------------------------------------------------------------------------------------------------
  1533                                                          menter  nmi                                             ;non-maskable
  1534                                                          push    2                                               ;store interrupt nbr
  1535                                                          push    czIntNonMaskable                                ;store message offset
  1536                                                          jmp     ReportInterrupt                                 ;report interrupt
  1537                                  ;-----------------------------------------------------------------------------------------------------------------------
  1538                                  ;
  1539                                  ;       INT3    Break
  1540                                  ;
  1541                                  ;-----------------------------------------------------------------------------------------------------------------------
  1542                                                          menter  break                                           ;break
  1543                                                          push    3                                               ;store interrupt nbr
  1544                                                          push    czIntBreak                                      ;store message offset
  1545                                                          jmp     ReportInterrupt                                 ;report interrupt
  1546                                  ;-----------------------------------------------------------------------------------------------------------------------
  1547                                  ;
  1548                                  ;       INT4    Into
  1549                                  ;
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                                          menter  into                                            ;into
  1552                                                          push    4                                               ;store interrupt nbr
  1553                                                          push    czIntInto                                       ;store message offset
  1554                                                          jmp     ReportInterrupt                                 ;report interrupt
  1555                                  ;-----------------------------------------------------------------------------------------------------------------------
  1556                                  ;
  1557                                  ;       INT5    Bounds
  1558                                  ;
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                                          menter  bounds                                          ;bounds
  1561                                                          push    5                                               ;store interrupt nbr
  1562                                                          push    czIntBounds                                     ;store message offset
  1563                                                          jmp     ReportInterrupt                                 ;report interrupt
  1564                                  ;-----------------------------------------------------------------------------------------------------------------------
  1565                                  ;
  1566                                  ;       INT6    Bad Operation Code
  1567                                  ;
  1568                                  ;-----------------------------------------------------------------------------------------------------------------------
  1569                                                          menter  badopcode                                       ;bad opcode interrupt
  1570                                                          push    6                                               ;store interrupt nbr
  1571                                                          push    czIntBadOpCode                                  ;store message offset
  1572                                                          jmp     ReportInterrupt                                 ;report interrupt
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                  ;
  1575                                  ;       INT7    No Coprocessor
  1576                                  ;
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1579                                                          push    7                                               ;store interrupt nbr
  1580                                                          push    czIntNoCoprocessor                              ;store message offset
  1581                                                          jmp     ReportInterrupt                                 ;report interrupt
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                  ;
  1584                                  ;       INT8    Double Fault
  1585                                  ;
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                                          menter  doublefault                                     ;doublefault interrupt
  1588                                                          push    8                                               ;store interrupt nbr
  1589                                                          push    czIntDoubleFault                                ;store message offset
  1590                                                          jmp     ReportInterrupt                                 ;report interrupt
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT9    Operand
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  operand                                         ;operand interrupt
  1597                                                          push    9                                               ;store interrupt nbr
  1598                                                          push    czIntOperand                                    ;store message offset
  1599                                                          jmp     ReportInterrupt                                 ;report interrupt
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;
  1602                                  ;       INT10   Bad Task State Segment
  1603                                  ;
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                                          menter  badtss                                          ;bad TSS interrupt
  1606                                                          push    10                                              ;store interrupt nbr
  1607                                                          push    czIntBadTSS                                     ;store message offset
  1608                                                          jmp     ReportInterrupt                                 ;report interrupt
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT11   Not Present
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  notpresent                                      ;not present interrupt
  1615                                                          push    11                                              ;store interrupt nbr
  1616                                                          push    czIntNotPresent                                 ;store message offset
  1617                                                          jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT12   Stack Limit
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  stacklimit                                      ;stack limit interrupt
  1624                                                          push    12                                              ;store interrupt nbr
  1625                                                          push    czIntStackLimit                                 ;store message offset
  1626                                                          jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT13   General Protection Fault
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  protection                                      ;protection fault interrupt
  1633                                                          push    13                                              ;store interrupt nbr
  1634                                                          push    czIntProtection                                 ;store message offset
  1635                                                          jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT14   Reserved
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  int14                                           ;(reserved)
  1642                                                          push    14                                              ;store interrupt nbr
  1643                                                          push    czIntReserved                                   ;store message offset
  1644                                                          jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT15   Reserved
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  int15                                           ;(reserved)
  1651                                                          push    15                                              ;store interrupt nbr
  1652                                                          push    czIntReserved                                   ;store message offset
  1653                                                          jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT16   Coprocessor Calculation
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  coproccalc                                      ;coprocessor calculation
  1660                                                          push    16                                              ;store interrupt nbr
  1661                                                          push    czIntCoprocessorCalc                            ;store message offset
  1662                                                          jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT17   Reserved
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  int17                                           ;(reserved)
  1669                                                          push    17                                              ;store interrupt nbr
  1670                                                          push    czIntReserved                                   ;store message offset
  1671                                                          jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT18   Reserved
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  int18                                           ;(reserved)
  1678                                                          push    18                                              ;store interrupt nbr
  1679                                                          push    czIntReserved                                   ;store message offset
  1680                                                          jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT19   Reserved
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  int19                                           ;(reserved)
  1687                                                          push    19                                              ;store interrupt nbr
  1688                                                          push    czIntReserved                                   ;store message offset
  1689                                                          jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT20   Reserved
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  int20                                           ;(reserved)
  1696                                                          push    20                                              ;store interrupt nbr
  1697                                                          push    czIntReserved                                   ;store message offset
  1698                                                          jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT21   Reserved
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  int21                                           ;(reserved)
  1705                                                          push    21                                              ;store interrupt nbr
  1706                                                          push    czIntReserved                                   ;store message offset
  1707                                                          jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT22   Reserved
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  int22                                           ;(reserved)
  1714                                                          push    22                                              ;store interrupt nbr
  1715                                                          push    czIntReserved                                   ;store message offset
  1716                                                          jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT23   Reserved
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  int23                                           ;(reserved)
  1723                                                          push    23                                              ;store interrupt nbr
  1724                                                          push    czIntReserved                                   ;store message offset
  1725                                                          jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT24   Reserved
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  int24                                           ;(reserved)
  1732                                                          push    24                                              ;store interrupt nbr
  1733                                                          push    czIntReserved                                   ;store message offset
  1734                                                          jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT25   Reserved
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  int25                                           ;(reserved)
  1741                                                          push    25                                              ;store interrupt nbr
  1742                                                          push    czIntReserved                                   ;store message offset
  1743                                                          jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT26   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int26                                           ;(reserved)
  1750                                                          push    26                                              ;store interrupt nbr
  1751                                                          push    czIntReserved                                   ;store message offset
  1752                                                          jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT27   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int27                                           ;(reserved)
  1759                                                          push    27                                              ;store interrupt nbr
  1760                                                          push    czIntReserved                                   ;store message offset
  1761                                                          jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT28   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int28                                           ;(reserved)
  1768                                                          push    28                                              ;store interrupt nbr
  1769                                                          push    czIntReserved                                   ;store message offset
  1770                                                          jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT29   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int29                                           ;(reserved)
  1777                                                          push    29                                              ;store interrupt nbr
  1778                                                          push    czIntReserved                                   ;store message offset
  1779                                                          jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT30   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int30                                           ;(reserved)
  1786                                                          push    30                                              ;store interrupt nbr
  1787                                                          push    czIntReserved                                   ;store message offset
  1788                                                          jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT31   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int31                                           ;(reserved)
  1795                                                          push    31                                              ;store interrupt nbr
  1796                                                          push    czIntReserved                                   ;store message offset
  1797                                                          jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       Routine:        ReportInterrupt
  1801                                  ;
  1802                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1803                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1804                                  ;
  1805                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1806                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  ReportInterrupt         pop     eax                                             ;error message address
  1810                                                          pop     eax                                             ;interrupt number
  1811                                                          iretd                                                   ;return
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       Processor Interrupt Name Strings
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  czIntDivideByZero       db      "Division by zero",0
  1818                                  czIntSingleStep         db      "Single step",0
  1819                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1820                                  czIntBreak              db      "Break",0
  1821                                  czIntInto               db      "Into",0
  1822                                  czIntBounds             db      "Bounds",0
  1823                                  czIntBadOpCode          db      "Bad Operation Code",0
  1824                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1825                                  czIntDoubleFault        db      "Double Fault",0
  1826                                  czIntOperand            db      "Operand",0
  1827                                  czIntBadTSS             db      "Bad Task State Segment",0
  1828                                  czIntNotPresent         db      "Not Present",0
  1829                                  czIntStackLimit         db      "Stack Limit",0
  1830                                  czIntProtection         db      "General Protection Fault",0
  1831                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1832                                  czIntReserved           db      "Reserved",0
  1833                                  ;=======================================================================================================================
  1834                                  ;
  1835                                  ;       Hardware Device Interupts
  1836                                  ;
  1837                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1838                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1839                                  ;       (BX=2028h).
  1840                                  ;
  1841                                  ;=======================================================================================================================
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                  ;
  1844                                  ;       IRQ0    Clock Tick Interrupt
  1845                                  ;
  1846                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1847                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1848                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1849                                  ;
  1850                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1851                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1852                                  ;
  1853                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1854                                  ;       zero, the floppy disk motors are turned off.
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  clocktick                                       ;clock tick interrupt
  1858                                                          push    eax                                             ;save non-volatile regs
  1859                                                          push    edx                                             ;
  1860                                                          push    ds                                              ;
  1861                                  ;
  1862                                  ;       Update the clock tick count and the elapsed days as needed.
  1863                                  ;
  1864                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1865                                                          pop     ds                                              ;... into data segment register
  1866                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1867                                                          inc     eax                                             ;increment clock ticks
  1868                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1869                                                          jb      irq0.10                                         ;no, skip ahead
  1870                                                          inc     byte [wbClockDays]                              ;increment clock days
  1871                                                          xor     eax,eax                                         ;reset clock ticks
  1872                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1873                                  ;
  1874                                  ;       Decrement floppy disk motor timeout.
  1875                                  ;
  1876                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1877                                                          je      irq0.20                                         ;yes, skip ahead
  1878                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1879                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1880                                  ;
  1881                                  ;       Turn off the floppy disk motor if appropriate.
  1882                                  ;
  1883                                                          sti                                                     ;enable maskable interrupts
  1884                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1885                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1886                                                          in      al,dx                                           ;FDC main status byte
  1887                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1888                                                          jnz     irq0.15                                         ;wait while busy
  1889                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1890                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1891                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1892                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1893                                                          out     dx,al                                           ;turn motor off
  1894                                  ;
  1895                                  ;       Signal the end of the hardware interrupt.
  1896                                  ;
  1897                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1898                                  ;
  1899                                  ;       Restore and return.
  1900                                  ;
  1901                                                          pop     ds                                              ;restore modified regs
  1902                                                          pop     edx                                             ;
  1903                                                          pop     eax                                             ;
  1904                                                          iretd                                                   ;return
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;       IRQ1    Keyboard Interrupt
  1908                                  ;
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                                          menter  keyboard                                        ;keyboard interrrupt
  1911                                                          push    eax                                             ;
  1912                                                          jmp     hwint                                           ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                                          menter  iochannel                                       ;secondary 8259A cascade
  1919                                                          push    eax                                             ;save modified regs
  1920                                                          jmp     hwint                                           ;end interrupt and return
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  1924                                  ;
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                                          menter  com2                                            ;serial port 2 interrupt
  1927                                                          push    eax                                             ;save modified regs
  1928                                                          jmp     hwint                                           ;end interrupt and return
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  com1                                            ;serial port 1 interrupt
  1935                                                          push    eax                                             ;save modified regs
  1936                                                          jmp     hwint                                           ;end interrupt and return
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                                          menter  lpt2                                            ;parallel port 2 interrupt
  1943                                                          push    eax                                             ;save modified regs
  1944                                                          jmp     hwint                                           ;end interrupt and return
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       IRQ6    Diskette Hardware Interrupt
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  diskette                                        ;floppy disk interrupt
  1951                                                          push    eax                                             ;save non-volatile regs
  1952                                                          push    ds                                              ;
  1953                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1954                                                          pop     ds                                              ;... into DS register
  1955                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  1956                                                          or      al,10000000b                                    ;set IRQ flag
  1957                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  1958                                                          pop     ds                                              ;restore non-volatile regs
  1959                                                          jmp     hwint                                           ;end primary PIC interrupt
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                  ;
  1962                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  1963                                  ;
  1964                                  ;-----------------------------------------------------------------------------------------------------------------------
  1965                                                          menter  lpt1                                            ;parallel port 1 interrupt
  1966                                                          push    eax                                             ;save modified regs
  1967                                                          jmp     hwint                                           ;end interrupt and return
  1968                                  ;-----------------------------------------------------------------------------------------------------------------------
  1969                                  ;
  1970                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------------------------------------------------
  1973                                                          menter  rtclock                                         ;real-time clock interrupt
  1974                                                          push    eax                                             ;save modified regs
  1975                                                          jmp     hwwint                                          ;end interrupt and return
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                  ;
  1978                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  1982                                                          push    eax                                             ;save modified regs
  1983                                                          jmp     hwwint                                          ;end interrupt and return
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                  ;
  1986                                  ;       IRQ10   Reserved Hardware Interrupt
  1987                                  ;
  1988                                  ;-----------------------------------------------------------------------------------------------------------------------
  1989                                                          menter  irq10                                           ;reserved
  1990                                                          push    eax                                             ;save modified regs
  1991                                                          jmp     hwwint                                          ;end interrupt and return
  1992                                  ;-----------------------------------------------------------------------------------------------------------------------
  1993                                  ;
  1994                                  ;       IRQ11   Reserved Hardware Interrupt
  1995                                  ;
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                                          menter  irq11                                           ;reserved
  1998                                                          push    eax                                             ;save modified regs
  1999                                                          jmp     hwwint                                          ;end interrupt and return
  2000                                  ;-----------------------------------------------------------------------------------------------------------------------
  2001                                  ;
  2002                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2003                                  ;
  2004                                  ;-----------------------------------------------------------------------------------------------------------------------
  2005                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2006                                                          push    eax                                             ;save modified regs
  2007                                                          jmp     hwwint                                          ;end interrupt and return
  2008                                  ;-----------------------------------------------------------------------------------------------------------------------
  2009                                  ;
  2010                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2011                                  ;
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                                          menter  coprocessor                                     ;coprocessor interrupt
  2014                                                          push    eax                                             ;save modified regs
  2015                                                          jmp     hwwint                                          ;end interrupt and return
  2016                                  ;-----------------------------------------------------------------------------------------------------------------------
  2017                                  ;
  2018                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2022                                                          push    eax                                             ;save modified regs
  2023                                                          jmp     hwwint                                          ;end interrupt and return
  2024                                  ;-----------------------------------------------------------------------------------------------------------------------
  2025                                  ;
  2026                                  ;       IRQ15   Reserved Hardware Interrupt
  2027                                  ;
  2028                                  ;-----------------------------------------------------------------------------------------------------------------------
  2029                                                          menter  irq15                                           ;reserved
  2030                                                          push    eax                                             ;save modified regs
  2031                                                          jmp     hwwint                                          ;end interrupt and return
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                  ;
  2034                                  ;       Exit from hardware interrupt
  2035                                  ;
  2036                                  ;-----------------------------------------------------------------------------------------------------------------------
  2037                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2038                                                          jmp     hwint90                                         ;skip ahead
  2039                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2040                                  hwint90                 pop     eax                                             ;restore modified regs
  2041                                                          iretd                                                   ;return from interrupt
  2042                                  ;-----------------------------------------------------------------------------------------------------------------------
  2043                                  ;
  2044                                  ;       INT 30h Operating System Software Service Interrupt
  2045                                  ;
  2046                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2047                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2048                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2049                                  ;       the entry address of the specific function from a table.
  2050                                  ;
  2051                                  ;-----------------------------------------------------------------------------------------------------------------------
  2052                                                          menter  svc
  2053                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2054                                                          jae     svc90                                           ;yes, skip ahead
  2055                                                          movzx   eax,al                                          ;function
  2056                                                          shl     eax,2                                           ;offset into table
  2057                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2058                                  svc90                   iretd                                                   ;return from interrupt
  2059                                  ;-----------------------------------------------------------------------------------------------------------------------
  2060                                  ;
  2061                                  ;       Service Request Table
  2062                                  ;
  2063                                  ;
  2064                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2065                                  ;
  2066                                  ;-----------------------------------------------------------------------------------------------------------------------
  2067                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2068                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2069                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2070                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2071                                  ;-----------------------------------------------------------------------------------------------------------------------
  2072                                  ;
  2073                                  ;       Service Request Macros
  2074                                  ;
  2075                                  ;       These macros provide positional parameterization of service request calls.
  2076                                  ;
  2077                                  ;-----------------------------------------------------------------------------------------------------------------------
  2078                                  %macro                  clearConsoleScreen 0
  2079                                                          mov     al,eClearConsoleScreen                          ;function code
  2080                                                          int     _svc                                            ;invoke OS service
  2081                                  %endmacro
  2082                                  %macro                  placeCursor 0
  2083                                                          mov     al,ePlaceCursor                                 ;function code
  2084                                                          int     _svc                                            ;invoke OS service
  2085                                  %endmacro
  2086                                  %macro                  putConsoleString 1
  2087                                                          mov     edx,%1                                          ;string address
  2088                                                          mov     al,ePutConsoleString                            ;function code
  2089                                                          int     _svc                                            ;invoke OS service
  2090                                  %endmacro
  2091                                  ;=======================================================================================================================
  2092                                  ;
  2093                                  ;       Kernel Function Library
  2094                                  ;
  2095                                  ;=======================================================================================================================
  2096                                  ;=======================================================================================================================
  2097                                  ;
  2098                                  ;       Console Helper Routines
  2099                                  ;
  2100                                  ;       FirstConsoleColumn
  2101                                  ;       NextConsoleColumn
  2102                                  ;       NextConsoleRow
  2103                                  ;       PutConsoleChar
  2104                                  ;       PutConsoleString
  2105                                  ;
  2106                                  ;=======================================================================================================================
  2107                                  ;-----------------------------------------------------------------------------------------------------------------------
  2108                                  ;
  2109                                  ;       Routine:        FirstConsoleColumn
  2110                                  ;
  2111                                  ;       Description:    This routine resets the console column to start of the row.
  2112                                  ;
  2113                                  ;       In:             DS      OS data selector
  2114                                  ;
  2115                                  ;-----------------------------------------------------------------------------------------------------------------------
  2116                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2117                                                          mov     [wbConsoleColumn],al                            ;save column
  2118                                                          ret                                                     ;return
  2119                                  ;-----------------------------------------------------------------------------------------------------------------------
  2120                                  ;
  2121                                  ;       Routine:        NextConsoleColumn
  2122                                  ;
  2123                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2124                                  ;                       incremented if the end of the current row is reached.
  2125                                  ;
  2126                                  ;       In:             DS      OS data selector
  2127                                  ;
  2128                                  ;-----------------------------------------------------------------------------------------------------------------------
  2129                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2130                                                          inc     al                                              ;increment column
  2131                                                          mov     [wbConsoleColumn],al                            ;save column
  2132                                                          cmp     al,ECONCOLS                                     ;end of row?
  2133                                                          jb      .10                                             ;no, skip ahead
  2134                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2135                                                          call    NextConsoleRow                                  ;line feed to next row
  2136                                  .10                     ret                                                     ;return
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138                                  ;
  2139                                  ;       Routine:        NextConsoleRow
  2140                                  ;
  2141                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2142                                  ;
  2143                                  ;       In:             DS      OS data selector
  2144                                  ;
  2145                                  ;-----------------------------------------------------------------------------------------------------------------------
  2146                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2147                                                          inc     al                                              ;increment row
  2148                                                          mov     [wbConsoleRow],al                               ;save row
  2149                                                          cmp     al,ECONROWS                                     ;end of screen?
  2150                                                          jb      .10                                             ;no, skip ahead
  2151                                                          call    ScrollConsoleRow                                ;scroll up one row
  2152                                                          mov     al,[wbConsoleRow]                               ;row
  2153                                                          dec     al                                              ;decrement row
  2154                                                          mov     [wbConsoleRow],al                               ;save row
  2155                                  .10                     ret                                                     ;return
  2156                                  ;-----------------------------------------------------------------------------------------------------------------------
  2157                                  ;
  2158                                  ;       Routine:        PutConsoleChar
  2159                                  ;
  2160                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2161                                  ;
  2162                                  ;       In:             AL      ASCII character
  2163                                  ;                       DS      OS data selector
  2164                                  ;
  2165                                  ;-----------------------------------------------------------------------------------------------------------------------
  2166                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2167                                                          push    es                                              ;
  2168                                                          push    EGDTCGA                                         ;load CGA selector ...
  2169                                                          pop     es                                              ;... into extra segment reg
  2170                                                          mov     cl,[wbConsoleColumn]                            ;column
  2171                                                          mov     ch,[wbConsoleRow]                               ;row
  2172                                                          call    SetConsoleChar                                  ;put character at row, column
  2173                                                          pop     es                                              ;restore non-volatile regs
  2174                                                          pop     ecx                                             ;
  2175                                                          ret                                                     ;return
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  ;
  2178                                  ;       Routine:        PutConsoleString
  2179                                  ;
  2180                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2181                                  ;                       console position as needed.
  2182                                  ;
  2183                                  ;       In:             EDX     source address
  2184                                  ;                       DS      OS data selector
  2185                                  ;
  2186                                  ;-----------------------------------------------------------------------------------------------------------------------
  2187                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2188                                                          mov     esi,edx                                         ;source address
  2189                                                          cld                                                     ;forward strings
  2190                                  .10                     lodsb                                                   ;ASCII character
  2191                                                          or      al,al                                           ;end of string?
  2192                                                          jz      .40                                             ;yes, skip ahead
  2193                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2194                                                          jne     .20                                             ;no, skip ahead
  2195                                                          call    FirstConsoleColumn                              ;move to start of row
  2196                                                          jmp     .10                                             ;next character
  2197                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2198                                                          jne     .30                                             ;no, skip ahead
  2199                                                          call    NextConsoleRow                                  ;move to next row
  2200                                                          jmp     .10                                             ;next character
  2201                                  .30                     call    PutConsoleChar                                  ;output character to console
  2202                                                          call    NextConsoleColumn                               ;advance to next column
  2203                                                          jmp     .10                                             ;next character
  2204                                  .40                     pop     esi                                             ;restore non-volatile regs
  2205                                                          ret                                                     ;return
  2206                                  ;=======================================================================================================================
  2207                                  ;
  2208                                  ;       Memory-Mapped Video Routines
  2209                                  ;
  2210                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2211                                  ;
  2212                                  ;       ClearConsoleScreen
  2213                                  ;       ScrollConsoleRow
  2214                                  ;       SetConsoleChar
  2215                                  ;
  2216                                  ;=======================================================================================================================
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       Routine:        ClearConsoleScreen
  2220                                  ;
  2221                                  ;       Description:    This routine clears the console (CGA) screen.
  2222                                  ;
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2225                                                          push    edi                                             ;
  2226                                                          push    ds                                              ;
  2227                                                          push    es                                              ;
  2228                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2229                                                          pop     ds                                              ;... into DS register
  2230                                                          push    EGDTCGA                                         ;load CGA selector ...
  2231                                                          pop     es                                              ;... into ES register
  2232                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2233                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2234                                                          xor     edi,edi                                         ;target offset
  2235                                                          cld                                                     ;forward strings
  2236                                                          rep     stosd                                           ;reset screen body
  2237                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2238                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2239                                                          rep     stosd                                           ;reset OIA line
  2240                                                          xor     al,al                                           ;zero register
  2241                                                          mov     [wbConsoleRow],al                               ;reset console row
  2242                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2243                                                          call    PlaceCursor                                     ;place cursor at current position
  2244                                                          pop     es                                              ;restore non-volatile regs
  2245                                                          pop     ds                                              ;
  2246                                                          pop     edi                                             ;
  2247                                                          pop     ecx                                             ;
  2248                                                          ret                                                     ;return
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  ;
  2251                                  ;       Routine:        ScrollConsoleRow
  2252                                  ;
  2253                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2254                                  ;
  2255                                  ;-----------------------------------------------------------------------------------------------------------------------
  2256                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2257                                                          push    esi                                             ;
  2258                                                          push    edi                                             ;
  2259                                                          push    ds                                              ;
  2260                                                          push    es                                              ;
  2261                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2262                                                          pop     ds                                              ;... into DS
  2263                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2264                                                          pop     es                                              ;... into ES
  2265                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2266                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2267                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2268                                                          cld                                                     ;forward strings
  2269                                                          rep     movsd                                           ;move 24 lines up
  2270                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2271                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2272                                                          rep     stosd                                           ;clear bottom row
  2273                                                          pop     es                                              ;restore non-volatile regs
  2274                                                          pop     ds                                              ;
  2275                                                          pop     edi                                             ;
  2276                                                          pop     esi                                             ;
  2277                                                          pop     ecx                                             ;
  2278                                                          ret                                                     ;return
  2279                                  ;-----------------------------------------------------------------------------------------------------------------------
  2280                                  ;
  2281                                  ;       Routine:        SetConsoleChar
  2282                                  ;
  2283                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2284                                  ;
  2285                                  ;       In:             AL      ASCII character
  2286                                  ;                       CL      column
  2287                                  ;                       CH      row
  2288                                  ;                       ES      CGA selector
  2289                                  ;
  2290                                  ;       Out:            EAX     last target address written (ES:)
  2291                                  ;                       CL      column + 1
  2292                                  ;
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2295                                                          movzx   eax,ch                                          ;row
  2296                                                          mov     ah,ECONCOLS                                     ;cols/row
  2297                                                          mul     ah                                              ;row * cols/row
  2298                                                          add     al,cl                                           ;add column
  2299                                                          adc     ah,0                                            ;handle carry
  2300                                                          shl     eax,1                                           ;screen offset
  2301                                                          mov     [es:eax],dl                                     ;store character
  2302                                                          inc     cl                                              ;next column
  2303                                                          ret                                                     ;return
  2304                                  ;=======================================================================================================================
  2305                                  ;
  2306                                  ;       Input/Output Routines
  2307                                  ;
  2308                                  ;       These routines read and/or write directly to ports.
  2309                                  ;
  2310                                  ;       PlaceCursor
  2311                                  ;       PutPrimaryEndOfInt
  2312                                  ;       PutSecondaryEndOfInt
  2313                                  ;
  2314                                  ;=======================================================================================================================
  2315                                  ;-----------------------------------------------------------------------------------------------------------------------
  2316                                  ;
  2317                                  ;       Routine:        PlaceCursor
  2318                                  ;
  2319                                  ;       Description:    This routine positions the cursor on the console.
  2320                                  ;
  2321                                  ;       In:             DS      OS data selector
  2322                                  ;
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2325                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2326                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2327                                                          mul     ah                                              ;row offset
  2328                                                          add     al,[wbConsoleColumn]                            ;add column
  2329                                                          adc     ah,0                                            ;add overflow
  2330                                                          mov     ecx,eax                                         ;screen offset
  2331                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2332                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2333                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2334                                                          out     dx,al                                           ;select register
  2335                                                          inc     edx                                             ;data port
  2336                                                          mov     al,ch                                           ;hi-order cursor loc
  2337                                                          out     dx,al                                           ;store hi-order loc
  2338                                                          dec     edx                                             ;register select port
  2339                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2340                                                          out     dx,al                                           ;select register
  2341                                                          inc     edx                                             ;data port
  2342                                                          mov     al,cl                                           ;lo-order cursor loc
  2343                                                          out     dx,al                                           ;store lo-order loc
  2344                                                          pop     ecx                                             ;restore non-volatile regs
  2345                                                          ret                                                     ;return
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       Routine:        PutPrimaryEndOfInt
  2349                                  ;
  2350                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2351                                  ;
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2354                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2355                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2356                                                          ret                                                     ;return
  2357                                  ;-----------------------------------------------------------------------------------------------------------------------
  2358                                  ;
  2359                                  ;       Routine:        PutSecondaryEndOfInt
  2360                                  ;
  2361                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2362                                  ;
  2363                                  ;-----------------------------------------------------------------------------------------------------------------------
  2364                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2365                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2366                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2367                                                          ret                                                     ;return
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369                                  ;
  2370                                  ;       End of the Kernel Function Library
  2371                                  ;
  2372                                  ;-----------------------------------------------------------------------------------------------------------------------
  2373                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2374                                  ;=======================================================================================================================
  2375                                  ;
  2376                                  ;       Console Task
  2377                                  ;
  2378                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2379                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2380                                  ;       screen and responds to user commands.
  2381                                  ;
  2382                                  ;=======================================================================================================================
  2383                                  ;-----------------------------------------------------------------------------------------------------------------------
  2384                                  ;
  2385                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2386                                  ;
  2387                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2388                                  ;
  2389                                  ;-----------------------------------------------------------------------------------------------------------------------
  2390                                  section                 constack                                                ;console task stack
  2391                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2392                                  ;-----------------------------------------------------------------------------------------------------------------------
  2393                                  ;
  2394                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2395                                  ;
  2396                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2397                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2398                                  ;       16 descriptors. Six are initially defined.
  2399                                  ;
  2400                                  ;-----------------------------------------------------------------------------------------------------------------------
  2401                                  section                 conldt                                                  ;console local descriptors
  2402                                                          dq      004093004780007Fh                               ;04 TSS alias
  2403                                                          dq      004093004700007Fh                               ;0c LDT alias
  2404                                                          dq      00409300400006FFh                               ;14 stack
  2405                                                          dq      00CF93000000FFFFh                               ;1c data
  2406                                                          dq      00409B0050000FFFh                               ;24 code
  2407                                                          dq      00409300480007FFh                               ;2c message queue
  2408                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2409                                  ;-----------------------------------------------------------------------------------------------------------------------
  2410                                  ;
  2411                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2412                                  ;
  2413                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2414                                  ;       segment. CS to console code.
  2415                                  ;
  2416                                  ;-----------------------------------------------------------------------------------------------------------------------
  2417                                  section                 contss                                                  ;console task state segment
  2418                                                          dd      0                                               ;00 back-link tss
  2419                                                          dd      0700h                                           ;04 esp ring 0
  2420                                                          dd      0014h                                           ;08 ss ring 0
  2421                                                          dd      0700h                                           ;0c esp ring 1
  2422                                                          dd      0014h                                           ;10 es ring 1
  2423                                                          dd      0700h                                           ;14 esp ring 2
  2424                                                          dd      0014h                                           ;18 ss ring 2
  2425                                                          dd      0                                               ;1c cr ring 3
  2426                                                          dd      0                                               ;20 eip
  2427                                                          dd      0200h                                           ;24 eflags
  2428                                                          dd      0                                               ;28 eax
  2429                                                          dd      0                                               ;2c ecx
  2430                                                          dd      0                                               ;30 edx
  2431                                                          dd      0                                               ;34 ebx
  2432                                                          dd      0700h                                           ;38 esp ring 3
  2433                                                          dd      0                                               ;3c ebp
  2434                                                          dd      0                                               ;40 esi
  2435                                                          dd      0                                               ;44 edi
  2436                                                          dd      001Ch                                           ;48 es
  2437                                                          dd      0024h                                           ;4c cs
  2438                                                          dd      0014h                                           ;50 ss ring 3
  2439                                                          dd      001Ch                                           ;54 ds
  2440                                                          dd      0                                               ;58 fs
  2441                                                          dd      0                                               ;5c gs
  2442                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2443                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2444                                  ;-----------------------------------------------------------------------------------------------------------------------
  2445                                  ;
  2446                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2447                                  ;
  2448                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2449                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2450                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2451                                  ;       event.
  2452                                  ;
  2453                                  ;-----------------------------------------------------------------------------------------------------------------------
  2454                                  section                 conmque                                                 ;console message queue
  2455                                                          dd      8                                               ;head pointer
  2456                                                          dd      8                                               ;tail pointer
  2457                                                          times   510 dd 0                                        ;queue elements
  2458                                  ;-----------------------------------------------------------------------------------------------------------------------
  2459                                  ;
  2460                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2461                                  ;
  2462                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2463                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2464                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2465                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2466                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2467                                  ;       board input, echoing to the console screen and responding to user commands.
  2468                                  ;
  2469                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2470                                  ;
  2471                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2472                                  ;                               |  Real Mode Interrupt Vectors                  |
  2473                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2474                                  ;                               |  Reserved BIOS Memory Area                    |
  2475                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2476                                  ;                               |  Shared Kernel Memory Area                    |
  2477                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2478                                  ;                               |  Global Descriptor Table (GDT)                |
  2479                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2480                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2481                                  ;                       002000  +-----------------------------------------------+
  2482                                  ;                               |  Interrupt Handlers                           |
  2483                                  ;                               |  Kernel Function Library                      |
  2484                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2485                                  ;                               |  Console Task Stack Area                      |
  2486                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2487                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2488                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2489                                  ;                               |  Console Task Task State Segment (TSS)        |
  2490                                  ;                       004800  +-----------------------------------------------+
  2491                                  ;                               |  Console Task Message Queue                   |
  2492                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2493                                  ;                               |  Console Task Code                            |
  2494                                  ;                               |  Console Task Constants                       |
  2495                                  ;                       006000  +===============================================+
  2496                                  ;
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2499                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  2500                                  
  2501                                                          putConsoleString czTitle                                ;display startup message
  2502                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2503                                                          placeCursor                                             ;set CRT cursor location
  2504                                  
  2505                                  .20                     sti                                                     ;enable interrupts
  2506                                                          hlt                                                     ;halt until interrupt
  2507                                                          jmp     .20                                             ;continue halt loop
  2508                                  ;-----------------------------------------------------------------------------------------------------------------------
  2509                                  ;
  2510                                  ;       Routine:        ConInitializeData
  2511                                  ;
  2512                                  ;       Description:    This routine initializes console task variables.
  2513                                  ;
  2514                                  ;-----------------------------------------------------------------------------------------------------------------------
  2515                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  2516                                                          push    edi                                             ;
  2517                                                          push    es                                              ;
  2518                                  ;
  2519                                  ;       Initialize console work areas.
  2520                                  ;
  2521                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2522                                                          pop     es                                              ;... into extra segment register
  2523                                                          mov     edi,ECONDATA                                    ;OS console data address
  2524                                                          xor     al,al                                           ;initialization value
  2525                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2526                                                          cld                                                     ;forward strings
  2527                                                          rep     stosb                                           ;initialize data
  2528                                                          mov     byte [wbConsoleRow],5                           ;avoid overwriting loader messages
  2529                                  ;
  2530                                  ;       Restore and return.
  2531                                  ;
  2532                                                          pop     es                                              ;restore non-volatile regs
  2533                                                          pop     edi                                             ;
  2534                                                          pop     ecx                                             ;
  2535                                                          ret                                                     ;return
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537                                  ;
  2538                                  ;       Constants
  2539                                  ;
  2540                                  ;-----------------------------------------------------------------------------------------------------------------------
  2541                                  czNewLine               db      13,10,0                                         ;new line string
  2542                                  czPrompt                db      ":",0                                           ;prompt string
  2543                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  2544                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2545                                  %endif
  2546                                  %ifdef BUILDDISK
  2547                                  ;-----------------------------------------------------------------------------------------------------------------------
  2548                                  ;
  2549                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2550                                  ;
  2551                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2552                                  ;
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  section                 unused                                                  ;unused disk space
  2555                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2556                                  %endif
  2557                                  ;=======================================================================================================================
  2558                                  ;
  2559                                  ;       End of Program Code
  2560                                  ;
  2561                                  ;=======================================================================================================================
