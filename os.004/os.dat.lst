     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.004
     6                                  ;
     7                                  ;       Description:    In this sample program, the loader is expanded to validate the CPU type and place the CPU into
     8                                  ;                       protected mode.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;
   165                                  ;=======================================================================================================================
   166                                  ;-----------------------------------------------------------------------------------------------------------------------
   167                                  ;
   168                                  ;       Hardware-Defined Values
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;
   173                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   174                                  ;
   175                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   176                                  ;       for CGA, EGA, VGA and compatible video modes.
   177                                  ;
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   180                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   181                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   182                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   183                                  ;-----------------------------------------------------------------------------------------------------------------------
   184                                  ;
   185                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   186                                  ;
   187                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   188                                  ;
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   191                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   192                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   193                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   194                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  ;
   197                                  ;       8042 Keyboard Controller                                                EKEYB...
   198                                  ;
   199                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   200                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   201                                  ;
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   204                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   208                                  ;
   209                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   210                                  ;       external devices and signals a hardware interrupt to the CPU.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   214                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   215                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   216                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   217                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   218                                  ;-----------------------------------------------------------------------------------------------------------------------
   219                                  ;
   220                                  ;       8253 Programmable Interval Timer                                        EPIT...
   221                                  ;
   222                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   223                                  ;       approximately 18.2 times per second.
   224                                  ;
   225                                  ;-----------------------------------------------------------------------------------------------------------------------
   226                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  ;
   229                                  ;       x86 CPU Architecture                                                    ;EX86...
   230                                  ;
   231                                  ;-----------------------------------------------------------------------------------------------------------------------
   232                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;
   235                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   236                                  ;
   237                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   238                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   239                                  ;
   240                                  ;       0.......        Segment is not present in memory (triggers int 11)
   241                                  ;       1.......        Segment is present in memory
   242                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   243                                  ;       ...0....        Segment is a system segment
   244                                  ;       ...00010                Local Descriptor Table
   245                                  ;       ...00101                Task Gate
   246                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   247                                  ;       ...01100                Call Gate (386)
   248                                  ;       ...01110                Interrupt Gate (386)
   249                                  ;       ...01111                Trap Gate (386)
   250                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   251                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   252                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   256                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   257                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   258                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   259                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   260                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   261                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   262                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       Firmware-Defined Values
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   271                                  ;
   272                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   273                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   277                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   278                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   279                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   280                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   281                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   282                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   283                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   284                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   285                                  ;-----------------------------------------------------------------------------------------------------------------------
   286                                  ;
   287                                  ;       Standards-Based Values
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;
   292                                  ;       ASCII                                                                   EASCII...
   293                                  ;
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   296                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   297                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Operating System Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   306                                  ;
   307                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   308                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   312                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   313                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   314                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   315                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   316                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   317                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;       Console Constants                                                       ECON...
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ECONCOLS                equ     80                                              ;columns per row
   322                                  ECONROWS                equ     24                                              ;console rows
   323                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   324                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   325                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   326                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   327                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   332                                  EGDTCGA                 equ     020h                                            ;cga video selector
   333                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   334                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   335                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   336                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   337                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   338                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  ;       Kernel Constants                                                        EKRN...
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   343                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   344                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   345                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   346                                  ;=======================================================================================================================
   347                                  ;
   348                                  ;       Structures
   349                                  ;
   350                                  ;=======================================================================================================================
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       OSDATA
   354                                  ;
   355                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   356                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   357                                  ;
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  struc                   OSDATA
   360 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   361 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   362 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   363 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   364 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   365 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   366 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   367 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   368 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   369 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   370 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   371 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   372 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   373 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   374 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   375 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   376 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   377 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   378 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   379 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   380 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   381 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   382 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   383 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   384 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   385 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   386 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   387 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   388 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   389 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   390 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   391 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   392 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   393 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   394 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   395 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   396 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   397 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   398 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   399 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   400 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   401 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   402 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   403 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   404 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   405 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   406 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   407 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   408 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   409 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   410 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   411 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   412 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   413 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   414 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   415 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   416 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   417 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   418 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   419 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   420 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   421 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   422 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   423 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   424 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   425 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   426 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   427 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   428 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   429 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   430 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   431 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   432 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   433 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   434 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   435 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   436 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   437 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   438 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   439 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   440 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   441 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   442 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   443 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   444 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   445 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   446 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   447 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   448 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   449 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   450 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   451 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   452 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   453 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   454 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   455 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   456 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   457 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   458 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   459 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   460 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  ;
   463                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   464                                  ;
   465                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   466                                  ;
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  ECONDATA                equ     ($)
   469 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   470 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   471                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;
   474                                  ;       End of OS Variables
   475                                  ;
   476                                  ;-----------------------------------------------------------------------------------------------------------------------
   477                                  endstruc
   478                                  ;-----------------------------------------------------------------------------------------------------------------------
   479                                  ;
   480                                  ;       Macros
   481                                  ;
   482                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   483                                  ;
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  %macro                  mint    1
   486                                  _%1                     equ     ($-$$) / EX86DESCLEN
   487                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   488                                  %endmacro
   489                                  %macro                  mtrap   1
   490                                  _%1                     equ     ($-$$) / EX86DESCLEN
   491                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   492                                  %endmacro
   493                                  %macro                  menter  1
   494                                  ?%1                     equ     ($-$$)
   495                                  %endmacro
   496                                  %macro                  tsvce   1
   497                                  e%1                     equ     ($-tsvc)/4
   498                                                          dd      %1
   499                                  %endmacro
   500                                  %ifdef BUILDBOOT
   501                                  ;=======================================================================================================================
   502                                  ;
   503                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   504                                  ;
   505                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   506                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   507                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   508                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   509                                  ;
   510                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   511                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   512                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   513                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   514                                  ;       immediately followed by a disk parameter table.
   515                                  ;
   516                                  ;=======================================================================================================================
   517                                                          cpu     8086                                            ;assume minimal CPU
   518                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   519                                                          bits    16                                              ;16-bit code at power-up
   520                                  %ifdef BUILDPREP
   521                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   522                                  %else
   523 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   524                                  %endif
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  ;
   527                                  ;       Disk Parameter Table
   528                                  ;
   529                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   530                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   531                                  ;
   532                                  ;-----------------------------------------------------------------------------------------------------------------------
   533 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   534 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   535 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   536 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   537 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   538 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   539 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   540 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   541 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   542                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   543 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   544 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   545 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   546                                  ;
   547                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   548                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   549                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   550                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   551                                  ;       given several possible starting values for CS:IP.
   552                                  ;
   553                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   554 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   555                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   556 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   557 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   558 00000025 B104                                            mov     cl,4                                            ;shift count
   559 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   560 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   561 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   562                                  ;
   563                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   564                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   565                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   566                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   567                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   568                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   569                                  ;
   570 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   571 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   572 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   573 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   574 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   575                                  ;
   576                                  ;       Our boot addressability is now set up according to the following diagram.
   577                                  ;
   578                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   579                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   580                                  ;                               |  256 = 100h bytes                             |
   581                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   582                                  ;                               |  Boot Sector (vstart=0100h)                   |
   583                                  ;                               |  1 sector = 512 = 200h bytes                  |
   584                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   585                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   586                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   587                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   588                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   589                                  ;                               |  2 sectors = 1024 = 400h bytes
   590                                  ;                       009400  +-----------------------------------------------+ DS:1900
   591                                  ;
   592                                  ;       On entry, DL indicates the drive being booted from.
   593                                  ;
   594 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   595                                  ;
   596                                  ;       Compute directory i/o buffer address.
   597                                  ;
   598 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   599 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   600 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   601 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   602                                  ;
   603                                  ;       Compute segment where os.com will be loaded.
   604                                  ;
   605 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   606 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   607 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   608 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   609                                  ;
   610                                  ;       Set the video mode to 80 column, 25 row, text.
   611                                  ;
   612 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   613 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   614                                  ;
   615                                  ;       Write a message to the console so we know we have our addressability established.
   616                                  ;
   617 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   618 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   619                                  ;
   620                                  ;       Initialize the number of directory sectors to search.
   621                                  ;
   622 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   623 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   624                                  ;
   625                                  ;       Compute number of directory sectors and initialize overhead count.
   626                                  ;
   627 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   628 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   629 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   630 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   631                                  ;
   632                                  ;       Compute directory entries per sector.
   633                                  ;
   634 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   635 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   636 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   637                                  ;
   638                                  ;       Compute first logical directory sector and update overhead count.
   639                                  ;
   640 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   641 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   642 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   643 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   644 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   645 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   646                                  ;
   647                                  ;       Read directory sector.
   648                                  ;
   649 0000008E B001                    .30                     mov     al,1                                            ;sector count
   650 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   651 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   652 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   653                                  ;
   654                                  ;       Setup variables to search this directory sector.
   655                                  ;
   656 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   657 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   658 000000A1 7603                                            jna     .40                                             ;no, continue
   659 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   660 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   661 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   662 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   663                                  ;
   664                                  ;       Loop through directory sectors searching for kernel program.
   665                                  ;
   666 000000B1 56                      .50                     push    si                                              ;save kernel name address
   667 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   668 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   669 000000B6 FC                                              cld                                                     ;forward strings
   670 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   671 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   672 000000BA 5E                                              pop     si                                              ;restore kernel name address
   673 000000BB 7418                                            je      .60                                             ;exit loop if found
   674 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   675 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   676 000000C2 75ED                                            jnz     .50                                             ;next entry
   677                                  ;
   678                                  ;       Repeat search if we are not at the end of the directory.
   679                                  ;
   680 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   681 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   682 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   683 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   684 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   685                                  ;
   686                                  ;       If we find the kernel program in the directory, read the FAT.
   687                                  ;
   688 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   689 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   690 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   691 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   692 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   693 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   694                                  ;
   695                                  ;       Get the starting cluster of the kernel program and target address.
   696                                  ;
   697 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   698 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   699                                  ;
   700                                  ;       Read each program cluster into RAM.
   701                                  ;
   702 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   703 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   704 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   705 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   706 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   707 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   708 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   709 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   710 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   711                                  ;
   712                                  ;       Update buffer pointer for next cluster.
   713                                  ;
   714 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   715 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   716 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   717 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   718 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   719                                  ;
   720                                  ;       Compute next cluster number.
   721                                  ;
   722 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   723 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   724 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   725 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   726 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   727 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   728 00000120 83E701                                          and     di,1                                            ;get low bit
   729 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   730 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   731 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   732                                  ;
   733                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   734                                  ;
   735 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   736 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   737 00000130 B104                                            mov     cl,4                                            ;shift count
   738 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   739 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   740 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   741 0000013A 75B2                                            jne     .70                                             ;no, continue
   742                                  ;
   743                                  ;       Transfer control to the operating system program.
   744                                  ;
   745 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   746 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   747 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   748                                  ;
   749                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   750                                  ;
   751 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   752 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   753 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   754 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   755 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   756 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   757 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   758 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   759 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   760 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   761                                  ;
   762                                  ;       Try maxtries times to read sector.
   763                                  ;
   764 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   765 00000160 53                      .10                     push    bx                                              ;save buffer address
   766 00000161 51                                              push    cx                                              ;save retry count
   767 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   768 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   769 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   770 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   771 0000016F 59                                              pop     cx                                              ;restore retry count
   772 00000170 5B                                              pop     bx                                              ;restore buffer address
   773 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   774 00000173 E2EB                                            loop    .10                                             ;retry
   775                                  ;
   776                                  ;       Handle disk error: convert to ASCII and store in error string.
   777                                  ;
   778 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   779 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   780 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   781 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   782 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   783 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   784 00000183 7203                                            jb      .20                                             ;continue if numeral
   785 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   786 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   787 0000018A 7203                                            jb      .30                                             ;continue if numeral
   788 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   789 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   790 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   791 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   792                                  ;
   793                                  ;       Wait for a key press.
   794                                  ;
   795 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   796 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   797 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   798 0000019E FB                                              sti                                                     ;enable maskable interrupts
   799 0000019F F4                                              hlt                                                     ;wait for interrupt
   800 000001A0 EBF6                                            jmp     .10                                             ;repeat
   801                                  ;
   802                                  ;       Reset the system.
   803                                  ;
   804 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   805 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   806 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   807 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   808 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   809                                  ;
   810                                  ;       Display text message.
   811                                  ;
   812 000001AA FC                      BootPrint               cld                                                     ;forward strings
   813 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   814 000001AC 84C0                                            test    al,al                                           ;end of string?
   815 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   816 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   817 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   818 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   819 000001B6 C3                      BootReturn              ret                                                     ;return
   820                                  ;-----------------------------------------------------------------------------------------------------------------------
   821                                  ;
   822                                  ;       Constants
   823                                  ;
   824                                  ;-----------------------------------------------------------------------------------------------------------------------
   825 000001B7 90                                              align   2
   826 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   827 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   827 000001C3 4F4D               
   828 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   828 000001CE 530D0A00           
   829 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   829 000001DB 7220               
   830 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   831 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   831 000001E9 6700               
   832                                  ;-----------------------------------------------------------------------------------------------------------------------
   833                                  ;
   834                                  ;       Work Areas
   835                                  ;
   836                                  ;-----------------------------------------------------------------------------------------------------------------------
   837 000001EB 90                                              align   2
   838 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   839 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   840 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   841 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   842 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   843                                  wwReadCountCommand      equ     $                                               ;read count and command
   844 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   845 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   846                                  wwDriveHead             equ     $                                               ;drive, head (word)
   847 000001F8 00                      wbDrive                 db      0                                               ;drive
   848 000001F9 00                      wbHead                  db      0                                               ;head
   849                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   850 000001FA 00                                              db      0                                               ;sector
   851 000001FB 00                      wbTrack                 db      0                                               ;track
   852 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   853 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   854                                  %endif
   855                                  %ifdef BUILDPREP
   856                                  ;=======================================================================================================================
   857                                  ;
   858                                  ;       Diskette Preparation Code
   859                                  ;
   860                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   861                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   862                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   863                                  ;
   864                                  ;=======================================================================================================================
   865                                  ;
   866                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   867                                  ;
   868                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   869                                                          call    BootPrint                                       ;display message
   870                                  ;
   871                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   872                                  ;
   873                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   874                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   875                                                          jnz     .20                                             ;continue if key pressed
   876                                                          sti                                                     ;enable interrupts
   877                                                          hlt                                                     ;wait for interrupt
   878                                                          jmp     .10                                             ;repeat
   879                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   880                                                          je      .30                                             ;yes, branch
   881                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   882                                                          jne     .10                                             ;no, repeat
   883                                                          jmp     .120                                            ;yes, exit program
   884                                  ;
   885                                  ;       Display writing-sector message and patch the JMP instruction.
   886                                  ;
   887                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   888                                                          call    BootPrint                                       ;display message
   889                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   890                                                          mov     ax,01Bh                                         ;address past disk parameter table
   891                                                          mov     [bx],ax                                         ;update the JMP instruction
   892                                  ;
   893                                  ;       Try to read the boot sector.
   894                                  ;
   895                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   896                                  .40                     push    cx                                              ;save remaining tries
   897                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   898                                                          mov     dx,0                                            ;head zero, drive zero
   899                                                          mov     cx,1                                            ;track zero, sector one
   900                                                          mov     ax,0201h                                        ;read one sector
   901                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   902                                                          pop     cx                                              ;restore remaining retries
   903                                                          jnc     .50                                             ;skip ahead if successful
   904                                                          loop    .40                                             ;try again
   905                                                          mov     si,czPrepMsg20                                  ;read-error message address
   906                                                          jmp     .70                                             ;branch to error routine
   907                                  ;
   908                                  ;       Copy diskette parms from input buffer to output buffer.
   909                                  ;
   910                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   911                                                          add     si,11                                           ;skip over JMP and system ID
   912                                                          mov     di,Boot                                         ;output buffer address
   913                                                          add     di,11                                           ;skip over JMP and system ID
   914                                                          mov     cx,19                                           ;length of diskette parameters
   915                                                          cld                                                     ;forward string copies
   916                                                          rep     movsb                                           ;copy diskette parameters
   917                                  ;
   918                                  ;       Try to write boot sector to diskette.
   919                                  ;
   920                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   921                                  .60                     push    cx                                              ;save remaining tries
   922                                                          mov     bx,Boot                                         ;output buffer address
   923                                                          mov     dx,0                                            ;head zero, drive zero
   924                                                          mov     cx,1                                            ;track zero, sector one
   925                                                          mov     ax,0301h                                        ;write one sector
   926                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   927                                                          pop     cx                                              ;restore remaining retries
   928                                                          jnc     .100                                            ;skip ahead if successful
   929                                                          loop    .60                                             ;try again
   930                                                          mov     si,czPrepMsg30                                  ;write-error message address
   931                                  ;
   932                                  ;       Convert the error code to ASCII and display the error message.
   933                                  ;
   934                                  .70                     push    ax                                              ;save error code
   935                                                          mov     al,ah                                           ;copy error code
   936                                                          mov     ah,0                                            ;AX = error code
   937                                                          mov     dl,10h                                          ;hexadecimal divisor
   938                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
   939                                                          or      ax,03030h                                       ;add ASCII zone digits
   940                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
   941                                                          jb      .80                                             ;yes, continue
   942                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
   943                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
   944                                                          jb      .90                                             ;yes, continue
   945                                                          add     al,7                                            ;no, make ASCII
   946                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
   947                                                          call    BootPrint                                       ;write error message
   948                                                          pop     ax                                              ;restore error code
   949                                  ;
   950                                  ;       Display the completion message.
   951                                  ;
   952                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
   953                                                          mov     al,ah                                           ;BIOS return code
   954                                                          cmp     al,0                                            ;success?
   955                                                          je      .110                                            ;yes, continue
   956                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
   957                                                          cmp     al,1                                            ;disk parameter error?
   958                                                          je      .110                                            ;yes, continue
   959                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
   960                                                          cmp     al,2                                            ;address mark not found?
   961                                                          je      .110                                            ;yes, continue
   962                                                          mov     si,czPrepMsgErr3                                ;protected disk message
   963                                                          cmp     al,3                                            ;protected disk?
   964                                                          je      .110                                            ;yes, continue
   965                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
   966                                                          cmp     al,6                                            ;diskette removed?
   967                                                          je      .110                                            ;yes, continue
   968                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
   969                                                          cmp     al,80H                                          ;drive timed out?
   970                                                          je      .110                                            ;yes, continue
   971                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
   972                                  .110                    call    BootPrint                                       ;display result message
   973                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
   974                                                          int     021h                                            ;terminate DOS program
   975                                                          ret                                                     ;return (should not execute)
   976                                  ;-----------------------------------------------------------------------------------------------------------------------
   977                                  ;
   978                                  ;       Diskette Preparation Messages
   979                                  ;
   980                                  ;-----------------------------------------------------------------------------------------------------------------------
   981                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
   982                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   983                                                          db      13,10
   984                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
   985                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
   986                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   987                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
   988                                                          db      13,10,0
   989                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
   990                                                          db      13,10,0
   991                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   992                                                          db      13,10,0
   993                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   994                                                          db      13,10,0
   995                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   996                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   997                                                          db      13,10,0
   998                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
   999                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1000                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1001                                                          db      13,10,"and retry."
  1002                                                          db      13,10,0
  1003                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1004                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1005                                                          db      13,10,"using another diskette."
  1006                                                          db      13,10,0
  1007                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1008                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1009                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1010                                                          db      13,10,0
  1011                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1012                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1013                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1014                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1015                                                          db      13,10,"is properly inserted in the diskette drive."
  1016                                                          db      13,10,0
  1017                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1018                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1019                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1020                                                          db      13,10,0
  1021                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1022                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1023                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1024                                                          db      13,10,0
  1025                                  wcPrepInBuf             equ     $
  1026                                  %endif
  1027                                  %ifdef BUILDDISK
  1028                                  ;=======================================================================================================================
  1029                                  ;
  1030                                  ;       File Allocation Tables
  1031                                  ;
  1032                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1033                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1034                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1035                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1036                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1037                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1038                                  ;       the last cluster in the chain.
  1039                                  ;
  1040                                  ;       Every three bytes encode two FAT entries as follows:
  1041                                  ;
  1042                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1043                                  ;
  1044                                  ;=======================================================================================================================
  1045                                  ;-----------------------------------------------------------------------------------------------------------------------
  1046                                  ;
  1047                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1048                                  ;
  1049                                  ;-----------------------------------------------------------------------------------------------------------------------
  1050                                  section                 fat1                                                    ;first copy of FAT
  1051                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1052                                                          db      005h,060h,000h, 007h,080h,000h
  1053                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1054                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1055                                                          db      011h,020h,001h, 013h,040h,001h
  1056                                                          db      015h,060h,001h, 017h,080h,001h
  1057                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1058                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1059                                                          db      021h,020h,002h, 023h,040h,002h
  1060                                                          db      025h,060h,002h, 027h,080h,002h
  1061                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1062                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1063                                  ;-----------------------------------------------------------------------------------------------------------------------
  1064                                  ;
  1065                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1066                                  ;
  1067                                  ;-----------------------------------------------------------------------------------------------------------------------
  1068                                  section                 fat2                                                    ;second copy of FAT
  1069                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1070                                                          db      005h,060h,000h, 007h,080h,000h
  1071                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1072                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1073                                                          db      011h,020h,001h, 013h,040h,001h
  1074                                                          db      015h,060h,001h, 017h,080h,001h
  1075                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1076                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1077                                                          db      021h,020h,002h, 023h,040h,002h
  1078                                                          db      025h,060h,002h, 027h,080h,002h
  1079                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1080                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1081                                  ;-----------------------------------------------------------------------------------------------------------------------
  1082                                  ;
  1083                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1084                                  ;
  1085                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1086                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1087                                  ;       copy.
  1088                                  ;
  1089                                  ;-----------------------------------------------------------------------------------------------------------------------
  1090                                  section                 dir                                                     ;diskette directory
  1091                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1092                                                          db      020h                                            ;attribute (archive bit set)
  1093                                                          times   10 db 0                                         ;unused
  1094                                                          dw      0h                                              ;time
  1095                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1096                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1097                                                          dw      2                                               ;first cluster
  1098                                                          dd      05400h                                          ;file size
  1099                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1100                                  %endif
  1101                                  %ifdef BUILDCOM
  1102                                  ;=======================================================================================================================
  1103                                  ;
  1104                                  ;       OS.COM
  1105                                  ;
  1106                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1107                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1108                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1109                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1110                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1111                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1112                                  ;
  1113                                  ;       Our loader addressability is set up according to the following diagram.
  1114                                  ;
  1115                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1116                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1117                                  ;                               |  256 = 100h bytes                             |
  1118                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1119                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1120                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1121                                  ;                       007e00  +-----------------------------------------------+
  1122                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1123                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1124                                  ;                               |                                               |
  1125                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1126                                  ;                               |                                               |
  1127                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1128                                  ;                               |  Loader Code                                  |
  1129                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1130                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1131                                  ;
  1132                                  ;=======================================================================================================================
  1133                                  ;-----------------------------------------------------------------------------------------------------------------------
  1134                                  ;
  1135                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1136                                  ;
  1137                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1138                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1139                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1140                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1141                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1142                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1143                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1144                                  ;       registers.
  1145                                  ;
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                                          cpu     8086                                            ;assume minimal CPU
  1148                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1149                                                          bits    16                                              ;this is 16-bit code
  1150                                  Loader                  push    cs                                              ;use the code segment
  1151                                                          pop     ds                                              ;...as our data segment
  1152                                                          push    cs                                              ;use the code segment
  1153                                                          pop     es                                              ;...as our extra segment
  1154                                  ;
  1155                                  ;       Write a message to the console so we know we have our addressability established.
  1156                                  ;
  1157                                                          mov     si,czStartingMsg                                ;starting message
  1158                                                          call    PutTTYString                                    ;display loader message
  1159                                  ;
  1160                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1161                                  ;
  1162                                                          call    GetCPUType                                      ;AL = cpu type
  1163                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1164                                                          cmp     al,3                                            ;80386+?
  1165                                                          jb      LoaderExit                                      ;no, exit with error message
  1166                                                          cpu     386                                             ;allow 80386 instructions
  1167                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1168                                                          call    PutTTYString                                    ;display message
  1169                                  ;
  1170                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1171                                  ;
  1172                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1173                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1174                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1175                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1176                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1177                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1178                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1179                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1180                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1181                                                          call    PutTTYString                                    ;display message
  1182                                  ;
  1183                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1184                                  ;
  1185                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1186                                                          pop     es                                              ;... as target segment
  1187                                                          xor     di,di                                           ;ES:DI = target address
  1188                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1189                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1190                                                          cld                                                     ;forward strings
  1191                                                          rep     movsb                                           ;copy kernel image
  1192                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1193                                                          call    PutTTYString                                    ;display message
  1194                                  ;
  1195                                  ;       Switch to protected mode.
  1196                                  ;
  1197                                                          xor     si,si                                           ;ES:SI = gdt addr
  1198                                                          mov     ss,si                                           ;protected mode ss
  1199                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1200                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1201                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1202                                                          mov     dx,001Fh                                        ;outer delay loop count
  1203                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1204                                                          loop    $                                               ;wait out pending interrupts
  1205                                                          dec     dx                                              ;restore outer loop count
  1206                                                          jnz     .10                                             ;continue outer loop
  1207                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1208                                  ;
  1209                                  ;       Enable hardware and maskable interrupts.
  1210                                  ;
  1211                                                          xor     al,al                                           ;enable all registers code
  1212                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1213                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1214                                                          sti                                                     ;enable maskable interrupts
  1215                                  ;
  1216                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1217                                  ;
  1218                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1219                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1220                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1221                                  ;-----------------------------------------------------------------------------------------------------------------------
  1222                                  ;
  1223                                  ;       Routine:        LoaderExit
  1224                                  ;
  1225                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1226                                  ;
  1227                                  ;       In:             DS:SI   string address
  1228                                  ;
  1229                                  ;-----------------------------------------------------------------------------------------------------------------------
  1230                                  LoaderExit              call    PutTTYString                                    ;display error message
  1231                                  ;
  1232                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1233                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1234                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1235                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1236                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1237                                  ;
  1238                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1239                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1240                                                          jnz     .40                                             ;exit if key pressed
  1241                                                          sti                                                     ;enable maskable interrupts
  1242                                                          hlt                                                     ;wait for interrupt
  1243                                                          jmp     .30                                             ;repeat until keypress
  1244                                  ;
  1245                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1246                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1247                                  ;       HLT until the system resets.
  1248                                  ;
  1249                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1250                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1251                                  .50                     sti                                                     ;enable maskable interrupts
  1252                                                          hlt                                                     ;stop until reset, int, nmi
  1253                                                          jmp     .50                                             ;loop until restart kicks in
  1254                                  ;-----------------------------------------------------------------------------------------------------------------------
  1255                                  ;
  1256                                  ;       Routine:        GetCPUType
  1257                                  ;
  1258                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1259                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1260                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1261                                  ;
  1262                                  ;       Out:            AX      0 = 808x, v20, etc.
  1263                                  ;                               1 = 80186
  1264                                  ;                               2 = 80286
  1265                                  ;                               3 = 80386
  1266                                  ;
  1267                                  ;-----------------------------------------------------------------------------------------------------------------------
  1268                                  GetCPUType              mov     al,1                                            ;AL = 1
  1269                                                          mov     cl,32                                           ;shift count
  1270                                                          shr     al,cl                                           ;try a 32-bit shift
  1271                                                          or      al,al                                           ;did the shift happen?
  1272                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1273                                                          cpu     186
  1274                                                          push    sp                                              ;save stack pointer
  1275                                                          pop     cx                                              ;...into cx
  1276                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1277                                                          jne     .10                                             ;yes, cpu is 80186
  1278                                                          cpu     286
  1279                                                          inc     ax                                              ;AX = 2
  1280                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1281                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1282                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1283                                                          jz      .10                                             ;yes, cpu is 80286
  1284                                                          inc     ax                                              ;AX = 3
  1285                                  .10                     ret                                                     ;return
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  ;
  1288                                  ;       Routine:        PutTTYString
  1289                                  ;
  1290                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1291                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1292                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1293                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1294                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1295                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1296                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1297                                  ;                       to LODSB is not needed.
  1298                                  ;
  1299                                  ;       In:             DS:SI   address of string
  1300                                  ;
  1301                                  ;       Out:            DF      0
  1302                                  ;                       ZF      1
  1303                                  ;                       AL      0
  1304                                  ;
  1305                                  ;-----------------------------------------------------------------------------------------------------------------------
  1306                                  PutTTYString            cld                                                     ;forward strings
  1307                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1308                                                          test    al,al                                           ;end of string?
  1309                                                          jz      .20                                             ;... yes, exit our loop
  1310                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1311                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1312                                                          jmp     .10                                             ;repeat until done
  1313                                  .20                     ret                                                     ;return
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  ;
  1316                                  ;       Loader Data
  1317                                  ;
  1318                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1319                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1320                                  ;
  1321                                  ;-----------------------------------------------------------------------------------------------------------------------
  1322                                                          align   2
  1323                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1324                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1325                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1326                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1327                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1328                                                          db      "Please press any key to restart the computer.",13,10,0
  1329                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1330                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1331                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1332                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1333                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1334                                  ;=======================================================================================================================
  1335                                  ;
  1336                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1337                                  ;
  1338                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1339                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1340                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1341                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1342                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1343                                  ;
  1344                                  ;=======================================================================================================================
  1345                                  ;=======================================================================================================================
  1346                                  ;
  1347                                  ;       Kernel Tables
  1348                                  ;
  1349                                  ;=======================================================================================================================
  1350                                  ;-----------------------------------------------------------------------------------------------------------------------
  1351                                  ;
  1352                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1353                                  ;
  1354                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1355                                  ;       first descriptor must be all nulls.
  1356                                  ;
  1357                                  ;       6   5         4         3         2         1         0
  1358                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1359                                  ;       ----------------------------------------------------------------
  1360                                  ;       h......hffffmmmma......ab......................bn..............n
  1361                                  ;       00000000                        all areas have base addresses below 2^24
  1362                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1363                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1364                                  ;                   1001                present, ring-0, selector
  1365                                  ;
  1366                                  ;       h...h   hi-order base address (bits 24-31)
  1367                                  ;       ffff    flags
  1368                                  ;       mmmm    hi-order limit (bits 16-19)
  1369                                  ;       a...a   access
  1370                                  ;       b...b   lo-order base address (bits 0-23)
  1371                                  ;       n...n   lo-order limit (bits 0-15)
  1372                                  ;
  1373                                  ;-----------------------------------------------------------------------------------------------------------------------
  1374                                  section                 gdt                                                     ;global descriptor table
  1375                                                          dq      0000000000000000h                               ;00 required null selector
  1376                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1377                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1378                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1379                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1380                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1381                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1382                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1383                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1384                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1385                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1386                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1387                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1388                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1389                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1390                                  ;-----------------------------------------------------------------------------------------------------------------------
  1391                                  ;
  1392                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1393                                  ;
  1394                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1395                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1396                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1397                                  ;
  1398                                  ;       6   5         4         3         2         1         0
  1399                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1400                                  ;       ----------------------------------------------------------------
  1401                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1402                                  ;
  1403                                  ;       h...h   high-order offset (bits 16-31)
  1404                                  ;       P       present (0=unused interrupt)
  1405                                  ;       zz      descriptor privilege level
  1406                                  ;       S       storage segment (must be zero for IDT)
  1407                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1408                                  ;       S...S   handling code selector in GDT
  1409                                  ;       l...l   lo-order offset (bits 0-15)
  1410                                  ;
  1411                                  ;-----------------------------------------------------------------------------------------------------------------------
  1412                                  section                 idt                                                     ;interrupt descriptor table
  1413                                                          mint    dividebyzero                                    ;00 divide by zero
  1414                                                          mint    singlestep                                      ;01 single step
  1415                                                          mint    nmi                                             ;02 non-maskable
  1416                                                          mint    break                                           ;03 break
  1417                                                          mint    into                                            ;04 into
  1418                                                          mint    bounds                                          ;05 bounds
  1419                                                          mint    badopcode                                       ;06 bad op code
  1420                                                          mint    nocoproc                                        ;07 no coprocessor
  1421                                                          mint    doublefault                                     ;08 double-fault
  1422                                                          mint    operand                                         ;09 operand
  1423                                                          mint    badtss                                          ;0a bad TSS
  1424                                                          mint    notpresent                                      ;0b not-present
  1425                                                          mint    stacklimit                                      ;0c stack limit
  1426                                                          mint    protection                                      ;0d general protection fault
  1427                                                          mint    int14                                           ;0e (reserved)
  1428                                                          mint    int15                                           ;0f (reserved)
  1429                                                          mint    coproccalc                                      ;10 (reserved)
  1430                                                          mint    int17                                           ;11 (reserved)
  1431                                                          mint    int18                                           ;12 (reserved)
  1432                                                          mint    int19                                           ;13 (reserved)
  1433                                                          mint    int20                                           ;14 (reserved)
  1434                                                          mint    int21                                           ;15 (reserved)
  1435                                                          mint    int22                                           ;16 (reserved)
  1436                                                          mint    int23                                           ;17 (reserved)
  1437                                                          mint    int24                                           ;18 (reserved)
  1438                                                          mint    int25                                           ;19 (reserved)
  1439                                                          mint    int26                                           ;1a (reserved)
  1440                                                          mint    int27                                           ;1b (reserved)
  1441                                                          mint    int28                                           ;1c (reserved)
  1442                                                          mint    int29                                           ;1d (reserved)
  1443                                                          mint    int30                                           ;1e (reserved)
  1444                                                          mint    int31                                           ;1f (reserved)
  1445                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1446                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1447                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1448                                                          mtrap   com2                                            ;23 IRQ3 com2
  1449                                                          mtrap   com1                                            ;24 IRQ4 com1
  1450                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1451                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1452                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1453                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1454                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1455                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1456                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1457                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1458                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1459                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1460                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1461                                                          mtrap   svc                                             ;30 OS services
  1462                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1463                                  ;=======================================================================================================================
  1464                                  ;
  1465                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1466                                  ;
  1467                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1468                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1469                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1470                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1471                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1472                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1473                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1474                                  ;
  1475                                  ;=======================================================================================================================
  1476                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1477                                                          cpu     386                                             ;allow 80386 instructions
  1478                                                          bits    32                                              ;this is 32-bit code
  1479                                  ;=======================================================================================================================
  1480                                  ;
  1481                                  ;       CPU Interrupt Handlers
  1482                                  ;
  1483                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1484                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1485                                  ;
  1486                                  ;=======================================================================================================================
  1487                                  ;-----------------------------------------------------------------------------------------------------------------------
  1488                                  ;
  1489                                  ;       INT0    Divide By Zero
  1490                                  ;
  1491                                  ;-----------------------------------------------------------------------------------------------------------------------
  1492                                                          menter  dividebyzero                                    ;divide by zero
  1493                                                          push    0                                               ;store interrupt nbr
  1494                                                          push    czIntDivideByZero                               ;store message offset
  1495                                                          jmp     ReportInterrupt                                 ;report interrupt
  1496                                  ;-----------------------------------------------------------------------------------------------------------------------
  1497                                  ;
  1498                                  ;       INT1    Single Step
  1499                                  ;
  1500                                  ;-----------------------------------------------------------------------------------------------------------------------
  1501                                                          menter  singlestep                                      ;single step
  1502                                                          push    1                                               ;store interrupt nbr
  1503                                                          push    czIntSingleStep                                 ;store message offset
  1504                                                          jmp     ReportInterrupt                                 ;report interrupt
  1505                                  ;-----------------------------------------------------------------------------------------------------------------------
  1506                                  ;
  1507                                  ;       INT2    Non-Maskable Interrupt
  1508                                  ;
  1509                                  ;-----------------------------------------------------------------------------------------------------------------------
  1510                                                          menter  nmi                                             ;non-maskable
  1511                                                          push    2                                               ;store interrupt nbr
  1512                                                          push    czIntNonMaskable                                ;store message offset
  1513                                                          jmp     ReportInterrupt                                 ;report interrupt
  1514                                  ;-----------------------------------------------------------------------------------------------------------------------
  1515                                  ;
  1516                                  ;       INT3    Break
  1517                                  ;
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519                                                          menter  break                                           ;break
  1520                                                          push    3                                               ;store interrupt nbr
  1521                                                          push    czIntBreak                                      ;store message offset
  1522                                                          jmp     ReportInterrupt                                 ;report interrupt
  1523                                  ;-----------------------------------------------------------------------------------------------------------------------
  1524                                  ;
  1525                                  ;       INT4    Into
  1526                                  ;
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                                          menter  into                                            ;into
  1529                                                          push    4                                               ;store interrupt nbr
  1530                                                          push    czIntInto                                       ;store message offset
  1531                                                          jmp     ReportInterrupt                                 ;report interrupt
  1532                                  ;-----------------------------------------------------------------------------------------------------------------------
  1533                                  ;
  1534                                  ;       INT5    Bounds
  1535                                  ;
  1536                                  ;-----------------------------------------------------------------------------------------------------------------------
  1537                                                          menter  bounds                                          ;bounds
  1538                                                          push    5                                               ;store interrupt nbr
  1539                                                          push    czIntBounds                                     ;store message offset
  1540                                                          jmp     ReportInterrupt                                 ;report interrupt
  1541                                  ;-----------------------------------------------------------------------------------------------------------------------
  1542                                  ;
  1543                                  ;       INT6    Bad Operation Code
  1544                                  ;
  1545                                  ;-----------------------------------------------------------------------------------------------------------------------
  1546                                                          menter  badopcode                                       ;bad opcode interrupt
  1547                                                          push    6                                               ;store interrupt nbr
  1548                                                          push    czIntBadOpCode                                  ;store message offset
  1549                                                          jmp     ReportInterrupt                                 ;report interrupt
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                  ;
  1552                                  ;       INT7    No Coprocessor
  1553                                  ;
  1554                                  ;-----------------------------------------------------------------------------------------------------------------------
  1555                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1556                                                          push    7                                               ;store interrupt nbr
  1557                                                          push    czIntNoCoprocessor                              ;store message offset
  1558                                                          jmp     ReportInterrupt                                 ;report interrupt
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;       INT8    Double Fault
  1562                                  ;
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                                          menter  doublefault                                     ;doublefault interrupt
  1565                                                          push    8                                               ;store interrupt nbr
  1566                                                          push    czIntDoubleFault                                ;store message offset
  1567                                                          jmp     ReportInterrupt                                 ;report interrupt
  1568                                  ;-----------------------------------------------------------------------------------------------------------------------
  1569                                  ;
  1570                                  ;       INT9    Operand
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                                          menter  operand                                         ;operand interrupt
  1574                                                          push    9                                               ;store interrupt nbr
  1575                                                          push    czIntOperand                                    ;store message offset
  1576                                                          jmp     ReportInterrupt                                 ;report interrupt
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                  ;
  1579                                  ;       INT10   Bad Task State Segment
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                                          menter  badtss                                          ;bad TSS interrupt
  1583                                                          push    10                                              ;store interrupt nbr
  1584                                                          push    czIntBadTSS                                     ;store message offset
  1585                                                          jmp     ReportInterrupt                                 ;report interrupt
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                  ;
  1588                                  ;       INT11   Not Present
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                                          menter  notpresent                                      ;not present interrupt
  1592                                                          push    11                                              ;store interrupt nbr
  1593                                                          push    czIntNotPresent                                 ;store message offset
  1594                                                          jmp     ReportInterrupt                                 ;report interrupt
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                  ;
  1597                                  ;       INT12   Stack Limit
  1598                                  ;
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                                          menter  stacklimit                                      ;stack limit interrupt
  1601                                                          push    12                                              ;store interrupt nbr
  1602                                                          push    czIntStackLimit                                 ;store message offset
  1603                                                          jmp     ReportInterrupt                                 ;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;       INT13   General Protection Fault
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                                          menter  protection                                      ;protection fault interrupt
  1610                                                          push    13                                              ;store interrupt nbr
  1611                                                          push    czIntProtection                                 ;store message offset
  1612                                                          jmp     ReportInterrupt                                 ;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;       INT14   Reserved
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                                          menter  int14                                           ;(reserved)
  1619                                                          push    14                                              ;store interrupt nbr
  1620                                                          push    czIntReserved                                   ;store message offset
  1621                                                          jmp     ReportInterrupt                                 ;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;       INT15   Reserved
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                                          menter  int15                                           ;(reserved)
  1628                                                          push    15                                              ;store interrupt nbr
  1629                                                          push    czIntReserved                                   ;store message offset
  1630                                                          jmp     ReportInterrupt                                 ;report interrupt
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;
  1633                                  ;       INT16   Coprocessor Calculation
  1634                                  ;
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                                          menter  coproccalc                                      ;coprocessor calculation
  1637                                                          push    16                                              ;store interrupt nbr
  1638                                                          push    czIntCoprocessorCalc                            ;store message offset
  1639                                                          jmp     ReportInterrupt                                 ;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;       INT17   Reserved
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                                          menter  int17                                           ;(reserved)
  1646                                                          push    17                                              ;store interrupt nbr
  1647                                                          push    czIntReserved                                   ;store message offset
  1648                                                          jmp     ReportInterrupt                                 ;report interrupt
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;       INT18   Reserved
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                                          menter  int18                                           ;(reserved)
  1655                                                          push    18                                              ;store interrupt nbr
  1656                                                          push    czIntReserved                                   ;store message offset
  1657                                                          jmp     ReportInterrupt                                 ;report interrupt
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  ;
  1660                                  ;       INT19   Reserved
  1661                                  ;
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                                          menter  int19                                           ;(reserved)
  1664                                                          push    19                                              ;store interrupt nbr
  1665                                                          push    czIntReserved                                   ;store message offset
  1666                                                          jmp     ReportInterrupt                                 ;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       INT20   Reserved
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                                          menter  int20                                           ;(reserved)
  1673                                                          push    20                                              ;store interrupt nbr
  1674                                                          push    czIntReserved                                   ;store message offset
  1675                                                          jmp     ReportInterrupt                                 ;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       INT21   Reserved
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                                          menter  int21                                           ;(reserved)
  1682                                                          push    21                                              ;store interrupt nbr
  1683                                                          push    czIntReserved                                   ;store message offset
  1684                                                          jmp     ReportInterrupt                                 ;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       INT22   Reserved
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                                          menter  int22                                           ;(reserved)
  1691                                                          push    22                                              ;store interrupt nbr
  1692                                                          push    czIntReserved                                   ;store message offset
  1693                                                          jmp     ReportInterrupt                                 ;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;       INT23   Reserved
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                                          menter  int23                                           ;(reserved)
  1700                                                          push    23                                              ;store interrupt nbr
  1701                                                          push    czIntReserved                                   ;store message offset
  1702                                                          jmp     ReportInterrupt                                 ;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       INT24   Reserved
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                                          menter  int24                                           ;(reserved)
  1709                                                          push    24                                              ;store interrupt nbr
  1710                                                          push    czIntReserved                                   ;store message offset
  1711                                                          jmp     ReportInterrupt                                 ;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;       INT25   Reserved
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                                          menter  int25                                           ;(reserved)
  1718                                                          push    25                                              ;store interrupt nbr
  1719                                                          push    czIntReserved                                   ;store message offset
  1720                                                          jmp     ReportInterrupt                                 ;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;       INT26   Reserved
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                                          menter  int26                                           ;(reserved)
  1727                                                          push    26                                              ;store interrupt nbr
  1728                                                          push    czIntReserved                                   ;store message offset
  1729                                                          jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       INT27   Reserved
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                                          menter  int27                                           ;(reserved)
  1736                                                          push    27                                              ;store interrupt nbr
  1737                                                          push    czIntReserved                                   ;store message offset
  1738                                                          jmp     ReportInterrupt                                 ;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;       INT28   Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                                          menter  int28                                           ;(reserved)
  1745                                                          push    28                                              ;store interrupt nbr
  1746                                                          push    czIntReserved                                   ;store message offset
  1747                                                          jmp     ReportInterrupt                                 ;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       INT29   Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                                          menter  int29                                           ;(reserved)
  1754                                                          push    29                                              ;store interrupt nbr
  1755                                                          push    czIntReserved                                   ;store message offset
  1756                                                          jmp     ReportInterrupt                                 ;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;       INT30   Reserved
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                                          menter  int30                                           ;(reserved)
  1763                                                          push    30                                              ;store interrupt nbr
  1764                                                          push    czIntReserved                                   ;store message offset
  1765                                                          jmp     ReportInterrupt                                 ;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;       INT31   Reserved
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                                          menter  int31                                           ;(reserved)
  1772                                                          push    31                                              ;store interrupt nbr
  1773                                                          push    czIntReserved                                   ;store message offset
  1774                                                          jmp     ReportInterrupt                                 ;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;       Routine:        ReportInterrupt
  1778                                  ;
  1779                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1780                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1781                                  ;
  1782                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1783                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ReportInterrupt         pop     eax                                             ;error message address
  1787                                                          pop     eax                                             ;interrupt number
  1788                                                          iretd                                                   ;return
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       Processor Interrupt Name Strings
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  czIntDivideByZero       db      "Division by zero",0
  1795                                  czIntSingleStep         db      "Single step",0
  1796                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1797                                  czIntBreak              db      "Break",0
  1798                                  czIntInto               db      "Into",0
  1799                                  czIntBounds             db      "Bounds",0
  1800                                  czIntBadOpCode          db      "Bad Operation Code",0
  1801                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1802                                  czIntDoubleFault        db      "Double Fault",0
  1803                                  czIntOperand            db      "Operand",0
  1804                                  czIntBadTSS             db      "Bad Task State Segment",0
  1805                                  czIntNotPresent         db      "Not Present",0
  1806                                  czIntStackLimit         db      "Stack Limit",0
  1807                                  czIntProtection         db      "General Protection Fault",0
  1808                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1809                                  czIntReserved           db      "Reserved",0
  1810                                  ;=======================================================================================================================
  1811                                  ;
  1812                                  ;       Hardware Device Interupts
  1813                                  ;
  1814                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1815                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1816                                  ;       (BX=2028h).
  1817                                  ;
  1818                                  ;=======================================================================================================================
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       IRQ0    Clock Tick Interrupt
  1822                                  ;
  1823                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1824                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1825                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1826                                  ;
  1827                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1828                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1829                                  ;
  1830                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1831                                  ;       zero, the floppy disk motors are turned off.
  1832                                  ;
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                                          menter  clocktick                                       ;clock tick interrupt
  1835                                                          push    eax                                             ;save modified regs
  1836                                                          push    edx                                             ;
  1837                                                          push    ds                                              ;
  1838                                  ;
  1839                                  ;       Update the clock tick count and the elapsed days as needed.
  1840                                  ;
  1841                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1842                                                          pop     ds                                              ;... into data segment register
  1843                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1844                                                          inc     eax                                             ;increment clock ticks
  1845                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1846                                                          jb      irq0.10                                         ;no, skip ahead
  1847                                                          inc     byte [wbClockDays]                              ;increment clock days
  1848                                                          xor     eax,eax                                         ;reset clock ticks
  1849                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1850                                  ;
  1851                                  ;       Decrement floppy disk motor timeout.
  1852                                  ;
  1853                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1854                                                          je      irq0.20                                         ;yes, skip ahead
  1855                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1856                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1857                                  ;
  1858                                  ;       Turn off the floppy disk motor if appropriate.
  1859                                  ;
  1860                                                          sti                                                     ;enable maskable interrupts
  1861                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1862                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1863                                                          in      al,dx                                           ;FDC main status byte
  1864                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1865                                                          jnz     irq0.15                                         ;wait while busy
  1866                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1867                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1868                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1869                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1870                                                          out     dx,al                                           ;turn motor off
  1871                                  ;
  1872                                  ;       Signal the end of the hardware interrupt.
  1873                                  ;
  1874                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1875                                  ;
  1876                                  ;       Restore and return.
  1877                                  ;
  1878                                                          pop     ds                                              ;restore modified regs
  1879                                                          pop     edx                                             ;
  1880                                                          pop     eax                                             ;
  1881                                                          iretd                                                   ;return
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       IRQ1    Keyboard Interrupt
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  keyboard                                        ;keyboard interrrupt
  1888                                                          push    eax                                             ;
  1889                                                          jmp     hwint                                           ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  iochannel                                       ;secondary 8259A cascade
  1896                                                          push    eax                                             ;save modified regs
  1897                                                          jmp     hwint                                           ;end interrupt and return
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  1901                                  ;
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                                          menter  com2                                            ;serial port 2 interrupt
  1904                                                          push    eax                                             ;save modified regs
  1905                                                          jmp     hwint                                           ;end interrupt and return
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                  ;
  1908                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  1909                                  ;
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                                          menter  com1                                            ;serial port 1 interrupt
  1912                                                          push    eax                                             ;save modified regs
  1913                                                          jmp     hwint                                           ;end interrupt and return
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                  ;
  1916                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  1917                                  ;
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                                          menter  lpt2                                            ;parallel port 2 interrupt
  1920                                                          push    eax                                             ;save modified regs
  1921                                                          jmp     hwint                                           ;end interrupt and return
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                  ;
  1924                                  ;       IRQ6    Diskette Hardware Interrupt
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                                          menter  diskette                                        ;floppy disk interrupt
  1928                                                          push    eax                                             ;save non-volatile regs
  1929                                                          push    ds                                              ;
  1930                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1931                                                          pop     ds                                              ;... into DS register
  1932                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  1933                                                          or      al,10000000b                                    ;set IRQ flag
  1934                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  1935                                                          pop     ds                                              ;restore non-volatile regs
  1936                                                          jmp     hwint                                           ;end primary PIC interrupt
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                                          menter  lpt1                                            ;parallel port 1 interrupt
  1943                                                          push    eax                                             ;save modified regs
  1944                                                          jmp     hwint                                           ;end interrupt and return
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  rtclock                                         ;real-time clock interrupt
  1951                                                          push    eax                                             ;save modified regs
  1952                                                          jmp     hwwint                                          ;end interrupt and return
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                  ;
  1955                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  1956                                  ;
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  1959                                                          push    eax                                             ;save modified regs
  1960                                                          jmp     hwwint                                          ;end interrupt and return
  1961                                  ;-----------------------------------------------------------------------------------------------------------------------
  1962                                  ;
  1963                                  ;       IRQ10   Reserved Hardware Interrupt
  1964                                  ;
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                                          menter  irq10                                           ;reserved
  1967                                                          push    eax                                             ;save modified regs
  1968                                                          jmp     hwwint                                          ;end interrupt and return
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                  ;
  1971                                  ;       IRQ11   Reserved Hardware Interrupt
  1972                                  ;
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                                          menter  irq11                                           ;reserved
  1975                                                          push    eax                                             ;save modified regs
  1976                                                          jmp     hwwint                                          ;end interrupt and return
  1977                                  ;-----------------------------------------------------------------------------------------------------------------------
  1978                                  ;
  1979                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  1980                                  ;
  1981                                  ;-----------------------------------------------------------------------------------------------------------------------
  1982                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  1983                                                          push    eax                                             ;save modified regs
  1984                                                          jmp     hwwint                                          ;end interrupt and return
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                  ;
  1987                                  ;       IRQ13   Coprocessor Hardware Interrupt
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                                          menter  coprocessor                                     ;coprocessor interrupt
  1991                                                          push    eax                                             ;save modified regs
  1992                                                          jmp     hwwint                                          ;end interrupt and return
  1993                                  ;-----------------------------------------------------------------------------------------------------------------------
  1994                                  ;
  1995                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  1996                                  ;
  1997                                  ;-----------------------------------------------------------------------------------------------------------------------
  1998                                                          menter  fixeddisk                                       ;fixed disk interrupt
  1999                                                          push    eax                                             ;save modified regs
  2000                                                          jmp     hwwint                                          ;end interrupt and return
  2001                                  ;-----------------------------------------------------------------------------------------------------------------------
  2002                                  ;
  2003                                  ;       IRQ15   Reserved Hardware Interrupt
  2004                                  ;
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                                          menter  irq15                                           ;reserved
  2007                                                          push    eax                                             ;save modified regs
  2008                                                          jmp     hwwint                                          ;end interrupt and return
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010                                  ;
  2011                                  ;       Exit from hardware interrupt
  2012                                  ;
  2013                                  ;-----------------------------------------------------------------------------------------------------------------------
  2014                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2015                                                          jmp     hwint90                                         ;skip ahead
  2016                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2017                                  hwint90                 pop     eax                                             ;restore modified regs
  2018                                                          iretd                                                   ;return from interrupt
  2019                                  ;-----------------------------------------------------------------------------------------------------------------------
  2020                                  ;
  2021                                  ;       INT 30h Operating System Software Service Interrupt
  2022                                  ;
  2023                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2024                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2025                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2026                                  ;       the entry address of the specific function from a table.
  2027                                  ;
  2028                                  ;-----------------------------------------------------------------------------------------------------------------------
  2029                                                          menter  svc
  2030                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2031                                                          jae     svc90                                           ;yes, skip ahead
  2032                                                          movzx   eax,al                                          ;function
  2033                                                          shl     eax,2                                           ;offset into table
  2034                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2035                                  svc90                   iretd                                                   ;return from interrupt
  2036                                  ;-----------------------------------------------------------------------------------------------------------------------
  2037                                  ;
  2038                                  ;       Service Request Table
  2039                                  ;
  2040                                  ;
  2041                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2042                                  ;
  2043                                  ;-----------------------------------------------------------------------------------------------------------------------
  2044                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2045                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2046                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2047                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2048                                  ;-----------------------------------------------------------------------------------------------------------------------
  2049                                  ;
  2050                                  ;       Service Request Macros
  2051                                  ;
  2052                                  ;       These macros provide positional parameterization of service request calls.
  2053                                  ;
  2054                                  ;-----------------------------------------------------------------------------------------------------------------------
  2055                                  %macro                  clearConsoleScreen 0
  2056                                                          mov     al,eClearConsoleScreen                          ;function code
  2057                                                          int     _svc                                            ;invoke OS service
  2058                                  %endmacro
  2059                                  %macro                  placeCursor 0
  2060                                                          mov     al,ePlaceCursor                                 ;function code
  2061                                                          int     _svc                                            ;invoke OS service
  2062                                  %endmacro
  2063                                  %macro                  putConsoleString 1
  2064                                                          mov     edx,%1                                          ;string address
  2065                                                          mov     al,ePutConsoleString                            ;function code
  2066                                                          int     _svc                                            ;invoke OS service
  2067                                  %endmacro
  2068                                  ;=======================================================================================================================
  2069                                  ;
  2070                                  ;       Kernel Function Library
  2071                                  ;
  2072                                  ;=======================================================================================================================
  2073                                  ;=======================================================================================================================
  2074                                  ;
  2075                                  ;       Console Helper Routines
  2076                                  ;
  2077                                  ;       FirstConsoleColumn
  2078                                  ;       NextConsoleColumn
  2079                                  ;       NextConsoleRow
  2080                                  ;       PutConsoleChar
  2081                                  ;       PutConsoleString
  2082                                  ;
  2083                                  ;=======================================================================================================================
  2084                                  ;-----------------------------------------------------------------------------------------------------------------------
  2085                                  ;
  2086                                  ;       Routine:        FirstConsoleColumn
  2087                                  ;
  2088                                  ;       Description:    This routine resets the console column to start of the row.
  2089                                  ;
  2090                                  ;       In:             DS      OS data selector
  2091                                  ;
  2092                                  ;-----------------------------------------------------------------------------------------------------------------------
  2093                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2094                                                          mov     [wbConsoleColumn],al                            ;save column
  2095                                                          ret                                                     ;return
  2096                                  ;-----------------------------------------------------------------------------------------------------------------------
  2097                                  ;
  2098                                  ;       Routine:        NextConsoleColumn
  2099                                  ;
  2100                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2101                                  ;                       incremented if the end of the current row is reached.
  2102                                  ;
  2103                                  ;       In:             DS      OS data selector
  2104                                  ;
  2105                                  ;-----------------------------------------------------------------------------------------------------------------------
  2106                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2107                                                          inc     al                                              ;increment column
  2108                                                          mov     [wbConsoleColumn],al                            ;save column
  2109                                                          cmp     al,ECONCOLS                                     ;end of row?
  2110                                                          jb      .10                                             ;no, skip ahead
  2111                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2112                                                          call    NextConsoleRow                                  ;line feed to next row
  2113                                  .10                     ret                                                     ;return
  2114                                  ;-----------------------------------------------------------------------------------------------------------------------
  2115                                  ;
  2116                                  ;       Routine:        NextConsoleRow
  2117                                  ;
  2118                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2119                                  ;
  2120                                  ;       In:             DS      OS data selector
  2121                                  ;
  2122                                  ;-----------------------------------------------------------------------------------------------------------------------
  2123                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2124                                                          inc     al                                              ;increment row
  2125                                                          mov     [wbConsoleRow],al                               ;save row
  2126                                                          cmp     al,ECONROWS                                     ;end of screen?
  2127                                                          jb      .10                                             ;no, skip ahead
  2128                                                          call    ScrollConsoleRow                                ;scroll up one row
  2129                                                          mov     al,[wbConsoleRow]                               ;row
  2130                                                          dec     al                                              ;decrement row
  2131                                                          mov     [wbConsoleRow],al                               ;save row
  2132                                  .10                     ret                                                     ;return
  2133                                  ;-----------------------------------------------------------------------------------------------------------------------
  2134                                  ;
  2135                                  ;       Routine:        PutConsoleChar
  2136                                  ;
  2137                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2138                                  ;
  2139                                  ;       In:             AL      ASCII character
  2140                                  ;                       DS      OS data selector
  2141                                  ;
  2142                                  ;-----------------------------------------------------------------------------------------------------------------------
  2143                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2144                                                          push    es                                              ;
  2145                                                          push    EGDTCGA                                         ;load CGA selector ...
  2146                                                          pop     es                                              ;... into extra segment reg
  2147                                                          mov     cl,[wbConsoleColumn]                            ;column
  2148                                                          mov     ch,[wbConsoleRow]                               ;row
  2149                                                          call    SetConsoleChar                                  ;put character at row, column
  2150                                                          pop     es                                              ;restore non-volatile regs
  2151                                                          pop     ecx                                             ;
  2152                                                          ret                                                     ;return
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                  ;
  2155                                  ;       Routine:        PutConsoleString
  2156                                  ;
  2157                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2158                                  ;                       console position as needed.
  2159                                  ;
  2160                                  ;       In:             EDX     source address
  2161                                  ;                       DS      OS data selector
  2162                                  ;
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2165                                                          mov     esi,edx                                         ;source address
  2166                                                          cld                                                     ;forward strings
  2167                                  .10                     lodsb                                                   ;ASCII character
  2168                                                          or      al,al                                           ;end of string?
  2169                                                          jz      .40                                             ;yes, skip ahead
  2170                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2171                                                          jne     .20                                             ;no, skip ahead
  2172                                                          call    FirstConsoleColumn                              ;move to start of row
  2173                                                          jmp     .10                                             ;next character
  2174                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2175                                                          jne     .30                                             ;no, skip ahead
  2176                                                          call    NextConsoleRow                                  ;move to next row
  2177                                                          jmp     .10                                             ;next character
  2178                                  .30                     call    PutConsoleChar                                  ;output character to console
  2179                                                          call    NextConsoleColumn                               ;advance to next column
  2180                                                          jmp     .10                                             ;next character
  2181                                  .40                     pop     esi                                             ;restore non-volatile regs
  2182                                                          ret                                                     ;return
  2183                                  ;=======================================================================================================================
  2184                                  ;
  2185                                  ;       Memory-Mapped Video Routines
  2186                                  ;
  2187                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2188                                  ;
  2189                                  ;       ClearConsoleScreen
  2190                                  ;       ScrollConsoleRow
  2191                                  ;       SetConsoleChar
  2192                                  ;
  2193                                  ;=======================================================================================================================
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       Routine:        ClearConsoleScreen
  2197                                  ;
  2198                                  ;       Description:    This routine clears the console (CGA) screen.
  2199                                  ;
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2202                                                          push    edi                                             ;
  2203                                                          push    ds                                              ;
  2204                                                          push    es                                              ;
  2205                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2206                                                          pop     ds                                              ;... into DS register
  2207                                                          push    EGDTCGA                                         ;load CGA selector ...
  2208                                                          pop     es                                              ;... into ES register
  2209                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2210                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2211                                                          xor     edi,edi                                         ;target offset
  2212                                                          cld                                                     ;forward strings
  2213                                                          rep     stosd                                           ;reset screen body
  2214                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2215                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2216                                                          rep     stosd                                           ;reset OIA line
  2217                                                          xor     al,al                                           ;zero register
  2218                                                          mov     [wbConsoleRow],al                               ;reset console row
  2219                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2220                                                          call    PlaceCursor                                     ;place cursor at current position
  2221                                                          pop     es                                              ;restore non-volatile regs
  2222                                                          pop     ds                                              ;
  2223                                                          pop     edi                                             ;
  2224                                                          pop     ecx                                             ;
  2225                                                          ret                                                     ;return
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                  ;
  2228                                  ;       Routine:        ScrollConsoleRow
  2229                                  ;
  2230                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2231                                  ;
  2232                                  ;-----------------------------------------------------------------------------------------------------------------------
  2233                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2234                                                          push    esi                                             ;
  2235                                                          push    edi                                             ;
  2236                                                          push    ds                                              ;
  2237                                                          push    es                                              ;
  2238                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2239                                                          pop     ds                                              ;... into DS
  2240                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2241                                                          pop     es                                              ;... into ES
  2242                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2243                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2244                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2245                                                          cld                                                     ;forward strings
  2246                                                          rep     movsd                                           ;move 24 lines up
  2247                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2248                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2249                                                          rep     stosd                                           ;clear bottom row
  2250                                                          pop     es                                              ;restore non-volatile regs
  2251                                                          pop     ds                                              ;
  2252                                                          pop     edi                                             ;
  2253                                                          pop     esi                                             ;
  2254                                                          pop     ecx                                             ;
  2255                                                          ret                                                     ;return
  2256                                  ;-----------------------------------------------------------------------------------------------------------------------
  2257                                  ;
  2258                                  ;       Routine:        SetConsoleChar
  2259                                  ;
  2260                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2261                                  ;
  2262                                  ;       In:             AL      ASCII character
  2263                                  ;                       CL      column
  2264                                  ;                       CH      row
  2265                                  ;                       ES      CGA selector
  2266                                  ;
  2267                                  ;       Out:            EAX     last target address written (ES:)
  2268                                  ;                       CL      column + 1
  2269                                  ;
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2272                                                          movzx   eax,ch                                          ;row
  2273                                                          mov     ah,ECONCOLS                                     ;cols/row
  2274                                                          mul     ah                                              ;row * cols/row
  2275                                                          add     al,cl                                           ;add column
  2276                                                          adc     ah,0                                            ;handle carry
  2277                                                          shl     eax,1                                           ;screen offset
  2278                                                          mov     [es:eax],dl                                     ;store character
  2279                                                          inc     cl                                              ;next column
  2280                                                          ret                                                     ;return
  2281                                  ;=======================================================================================================================
  2282                                  ;
  2283                                  ;       Input/Output Routines
  2284                                  ;
  2285                                  ;       These routines read and/or write directly to ports.
  2286                                  ;
  2287                                  ;       PlaceCursor
  2288                                  ;       PutPrimaryEndOfInt
  2289                                  ;       PutSecondaryEndOfInt
  2290                                  ;
  2291                                  ;=======================================================================================================================
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                  ;
  2294                                  ;       Routine:        PlaceCursor
  2295                                  ;
  2296                                  ;       Description:    This routine positions the cursor on the console.
  2297                                  ;
  2298                                  ;       In:             DS      OS data selector
  2299                                  ;
  2300                                  ;-----------------------------------------------------------------------------------------------------------------------
  2301                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2302                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2303                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2304                                                          mul     ah                                              ;row offset
  2305                                                          add     al,[wbConsoleColumn]                            ;add column
  2306                                                          adc     ah,0                                            ;add overflow
  2307                                                          mov     ecx,eax                                         ;screen offset
  2308                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2309                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2310                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2311                                                          out     dx,al                                           ;select register
  2312                                                          inc     edx                                             ;data port
  2313                                                          mov     al,ch                                           ;hi-order cursor loc
  2314                                                          out     dx,al                                           ;store hi-order loc
  2315                                                          dec     edx                                             ;register select port
  2316                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2317                                                          out     dx,al                                           ;select register
  2318                                                          inc     edx                                             ;data port
  2319                                                          mov     al,cl                                           ;lo-order cursor loc
  2320                                                          out     dx,al                                           ;store lo-order loc
  2321                                                          pop     ecx                                             ;restore non-volatile regs
  2322                                                          ret                                                     ;return
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  ;
  2325                                  ;       Routine:        PutPrimaryEndOfInt
  2326                                  ;
  2327                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2328                                  ;
  2329                                  ;-----------------------------------------------------------------------------------------------------------------------
  2330                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2331                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2332                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2333                                                          ret                                                     ;return
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;       Routine:        PutSecondaryEndOfInt
  2337                                  ;
  2338                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2339                                  ;
  2340                                  ;-----------------------------------------------------------------------------------------------------------------------
  2341                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2342                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2343                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2344                                                          ret                                                     ;return
  2345                                  ;-----------------------------------------------------------------------------------------------------------------------
  2346                                  ;
  2347                                  ;       End of the Kernel Function Library
  2348                                  ;
  2349                                  ;-----------------------------------------------------------------------------------------------------------------------
  2350                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2351                                  ;=======================================================================================================================
  2352                                  ;
  2353                                  ;       Console Task
  2354                                  ;
  2355                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2356                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2357                                  ;       screen and responds to user commands.
  2358                                  ;
  2359                                  ;=======================================================================================================================
  2360                                  ;-----------------------------------------------------------------------------------------------------------------------
  2361                                  ;
  2362                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2363                                  ;
  2364                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2365                                  ;
  2366                                  ;-----------------------------------------------------------------------------------------------------------------------
  2367                                  section                 constack                                                ;console task stack
  2368                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2369                                  ;-----------------------------------------------------------------------------------------------------------------------
  2370                                  ;
  2371                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2372                                  ;
  2373                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2374                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2375                                  ;       16 descriptors. Six are initially defined.
  2376                                  ;
  2377                                  ;-----------------------------------------------------------------------------------------------------------------------
  2378                                  section                 conldt                                                  ;console local descriptors
  2379                                                          dq      004093004780007Fh                               ;04 TSS alias
  2380                                                          dq      004093004700007Fh                               ;0c LDT alias
  2381                                                          dq      00409300400006FFh                               ;14 stack
  2382                                                          dq      00CF93000000FFFFh                               ;1c data
  2383                                                          dq      00409B0050000FFFh                               ;24 code
  2384                                                          dq      00409300480007FFh                               ;2c message queue
  2385                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2386                                  ;-----------------------------------------------------------------------------------------------------------------------
  2387                                  ;
  2388                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2389                                  ;
  2390                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2391                                  ;       segment. CS to console code.
  2392                                  ;
  2393                                  ;-----------------------------------------------------------------------------------------------------------------------
  2394                                  section                 contss                                                  ;console task state segment
  2395                                                          dd      0                                               ;00 back-link tss
  2396                                                          dd      0700h                                           ;04 esp ring 0
  2397                                                          dd      0014h                                           ;08 ss ring 0
  2398                                                          dd      0700h                                           ;0c esp ring 1
  2399                                                          dd      0014h                                           ;10 es ring 1
  2400                                                          dd      0700h                                           ;14 esp ring 2
  2401                                                          dd      0014h                                           ;18 ss ring 2
  2402                                                          dd      0                                               ;1c cr ring 3
  2403                                                          dd      0                                               ;20 eip
  2404                                                          dd      0200h                                           ;24 eflags
  2405                                                          dd      0                                               ;28 eax
  2406                                                          dd      0                                               ;2c ecx
  2407                                                          dd      0                                               ;30 edx
  2408                                                          dd      0                                               ;34 ebx
  2409                                                          dd      0700h                                           ;38 esp ring 3
  2410                                                          dd      0                                               ;3c ebp
  2411                                                          dd      0                                               ;40 esi
  2412                                                          dd      0                                               ;44 edi
  2413                                                          dd      001Ch                                           ;48 es
  2414                                                          dd      0024h                                           ;4c cs
  2415                                                          dd      0014h                                           ;50 ss ring 3
  2416                                                          dd      001Ch                                           ;54 ds
  2417                                                          dd      0                                               ;58 fs
  2418                                                          dd      0                                               ;5c gs
  2419                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2420                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2421                                  ;-----------------------------------------------------------------------------------------------------------------------
  2422                                  ;
  2423                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2424                                  ;
  2425                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2426                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2427                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2428                                  ;       event.
  2429                                  ;
  2430                                  ;-----------------------------------------------------------------------------------------------------------------------
  2431                                  section                 conmque                                                 ;console message queue
  2432                                                          dd      8                                               ;head pointer
  2433                                                          dd      8                                               ;tail pointer
  2434                                                          times   510 dd 0                                        ;queue elements
  2435                                  ;-----------------------------------------------------------------------------------------------------------------------
  2436                                  ;
  2437                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2438                                  ;
  2439                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2440                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2441                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2442                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2443                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2444                                  ;       board input, echoing to the console screen and responding to user commands.
  2445                                  ;
  2446                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2447                                  ;
  2448                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2449                                  ;                               |  Real Mode Interrupt Vectors                  |
  2450                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2451                                  ;                               |  Reserved BIOS Memory Area                    |
  2452                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2453                                  ;                               |  Shared Kernel Memory Area                    |
  2454                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2455                                  ;                               |  Global Descriptor Table (GDT)                |
  2456                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2457                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2458                                  ;                       002000  +-----------------------------------------------+
  2459                                  ;                               |  Interrupt Handlers                           |
  2460                                  ;                               |  Kernel Function Library                      |
  2461                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2462                                  ;                               |  Console Task Stack Area                      |
  2463                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2464                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2465                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2466                                  ;                               |  Console Task Task State Segment (TSS)        |
  2467                                  ;                       004800  +-----------------------------------------------+
  2468                                  ;                               |  Console Task Message Queue                   |
  2469                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2470                                  ;                               |  Console Task Code                            |
  2471                                  ;                               |  Console Task Constants                       |
  2472                                  ;                       006000  +===============================================+
  2473                                  ;
  2474                                  ;-----------------------------------------------------------------------------------------------------------------------
  2475                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2476                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  2477                                  
  2478                                                          putConsoleString czTitle                                ;display startup message
  2479                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2480                                                          placeCursor                                             ;set CRT cursor location
  2481                                  
  2482                                  .20                     sti                                                     ;enable interrupts
  2483                                                          hlt                                                     ;halt until interrupt
  2484                                                          jmp     .20                                             ;continue halt loop
  2485                                  ;-----------------------------------------------------------------------------------------------------------------------
  2486                                  ;
  2487                                  ;       Routine:        ConInitializeData
  2488                                  ;
  2489                                  ;       Description:    This routine initializes console task variables.
  2490                                  ;
  2491                                  ;-----------------------------------------------------------------------------------------------------------------------
  2492                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  2493                                                          push    edi                                             ;
  2494                                                          push    es                                              ;
  2495                                  ;
  2496                                  ;       Initialize console work areas.
  2497                                  ;
  2498                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2499                                                          pop     es                                              ;... into extra segment register
  2500                                                          mov     edi,ECONDATA                                    ;OS console data address
  2501                                                          xor     al,al                                           ;initialization value
  2502                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2503                                                          cld                                                     ;forward strings
  2504                                                          rep     stosb                                           ;initialize data
  2505                                                          mov     byte [wbConsoleRow],5                           ;avoid overwriting loader messages
  2506                                  ;
  2507                                  ;       Restore and return.
  2508                                  ;
  2509                                                          pop     es                                              ;restore non-volatile regs
  2510                                                          pop     edi                                             ;
  2511                                                          pop     ecx                                             ;
  2512                                                          ret                                                     ;return
  2513                                  ;-----------------------------------------------------------------------------------------------------------------------
  2514                                  ;
  2515                                  ;       Constants
  2516                                  ;
  2517                                  ;-----------------------------------------------------------------------------------------------------------------------
  2518                                  czNewLine               db      13,10,0                                         ;new line string
  2519                                  czPrompt                db      ":",0                                           ;prompt string
  2520                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  2521                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2522                                  %endif
  2523                                  %ifdef BUILDDISK
  2524                                  ;-----------------------------------------------------------------------------------------------------------------------
  2525                                  ;
  2526                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2527                                  ;
  2528                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2529                                  ;
  2530                                  ;-----------------------------------------------------------------------------------------------------------------------
  2531                                  section                 unused                                                  ;unused disk space
  2532                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2533                                  %endif
  2534                                  ;=======================================================================================================================
  2535                                  ;
  2536                                  ;       End of Program Code
  2537                                  ;
  2538                                  ;=======================================================================================================================
