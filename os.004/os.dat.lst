     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.004
     6                                  ;
     7                                  ;	Description:	In this sample program, the loader is expanded to validate the CPU type and to place the CPU
     8                                  ;			into protected mode.
     9                                  ;
    10                                  ;	Revised:	July 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;			Register names in comments are in upper case.
    51                                  ;			Hexadecimal values in comments are in lower case.
    52                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    53                                  ;			register contents on entry and exit.
    54                                  ;
    55                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    56                                  ;			Assembly operands begin in column 33.
    57                                  ;			Lines should not extend beyond column 120.
    58                                  ;
    59                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    60                                  ;			Routine names begin with a verb (Get, Read, etc.).
    61                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    62                                  ;
    63                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    64                                  ;			Constant stored values are named in camel case, starting with 'c'.
    65                                  ;			The 2nd letter of the constant label indicates the storage type.
    66                                  ;
    67                                  ;			cq......	constant quad-word (dq)
    68                                  ;			cd......	constant double-word (dd)
    69                                  ;			cw......	constant word (dw)
    70                                  ;			cb......	constant byte (db)
    71                                  ;			cz......	constant ASCIIZ (null-terminated) string
    72                                  ;
    73                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    74                                  ;			The 2nd letter of the variable label indicates the storage type.
    75                                  ;
    76                                  ;			wq......	variable quad-word (resq)
    77                                  ;			wd......	variable double-word (resd)
    78                                  ;			ww......	variable word (resw)
    79                                  ;			wb......	variable byte (resb)
    80                                  ;
    81                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    82                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    83                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    84                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    85                                  ;			Octal literal values are avoided.
    86                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    87                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    88                                  ;
    89                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    90                                  ;			Structure names do not begin with a verb.
    91                                  ;
    92                                  ;	Macros:		Macro names are in camel case (getDateString).
    93                                  ;			Macro names do begin with a verb.
    94                                  ;
    95                                  ;	Registers:	Register names in comments are in upper case.
    96                                  ;			Register names in source code are in lower case.
    97                                  ;
    98                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    99                                  ;			Registers EAX and ECX are preferred for returning response/result values.
   100                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   101                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   102                                  ;
   103                                  ;-----------------------------------------------------------------------------------------------------------------------
   104                                  ;=======================================================================================================================
   105                                  ;
   106                                  ;	Equates
   107                                  ;
   108                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   109                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   110                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   111                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   112                                  ;
   113                                  ;=======================================================================================================================
   114                                  ;-----------------------------------------------------------------------------------------------------------------------
   115                                  ;
   116                                  ;	8042 Keyboard Controller						EKEYB...
   117                                  ;
   118                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   119                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   120                                  ;
   121                                  ;-----------------------------------------------------------------------------------------------------------------------
   122                                  EKEYBPORTSTAT		equ	064h						;status port
   123                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   124                                  ;-----------------------------------------------------------------------------------------------------------------------
   125                                  ;
   126                                  ;	8253 Programmable Interrupt Timer					EPIT...
   127                                  ;
   128                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   129                                  ;	approximately 18.2 times per second.
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;
   135                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   136                                  ;
   137                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   138                                  ;	external devices and signals a hardware interrupt to the CPU.
   139                                  ;
   140                                  ;-----------------------------------------------------------------------------------------------------------------------
   141                                  EPICPORTPRI		equ	020h						;primary control port 0
   142                                  EPICPORTPRI1		equ	021h						;primary control port 1
   143                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   144                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   145                                  EPICEOI			equ	020h						;non-specific EOI code
   146                                  ;-----------------------------------------------------------------------------------------------------------------------
   147                                  ;
   148                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   149                                  ;
   150                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   151                                  ;	for CGA, EGA, VGA and compatible video modes.
   152                                  ;
   153                                  ;-----------------------------------------------------------------------------------------------------------------------
   154                                  ECRTPORTHI		equ	003h						;controller port hi
   155                                  ECRTPORTLO		equ	0D4h						;controller port lo
   156                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   157                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   158                                  ;-----------------------------------------------------------------------------------------------------------------------
   159                                  ;
   160                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   161                                  ;
   162                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   163                                  ;
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  EFDCPORTHI		equ	003h						;controller port hi
   166                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   167                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   168                                  EFDCSTATBUSY		equ	010h						;main status is busy
   169                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;	x86 Descriptor Access Codes						EACC...
   173                                  ;
   174                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   175                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   176                                  ;
   177                                  ;	0.......	Segment is not present in memory (triggers int 11)
   178                                  ;	1.......	Segment is present in memory
   179                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   180                                  ;	...0....	Segment is a system segment
   181                                  ;	...00010		Local Descriptor Table
   182                                  ;	...00101		Task Gate
   183                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   184                                  ;	...01100		Call Gate (386)
   185                                  ;	...01110		Interrupt Gate (386)
   186                                  ;	...01111		Trap Gate (386)
   187                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   188                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   189                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   190                                  ;
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  EACCINT			equ	10001110b					;interrupt gate
   193                                  EACCTRAP		equ	10001111b					;trap gate
   194                                  ;-----------------------------------------------------------------------------------------------------------------------
   195                                  ;
   196                                  ;	BIOS Interrupts and Functions						EBIOS...
   197                                  ;
   198                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   199                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   200                                  ;
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   203                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   204                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   205                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   206                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   207                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   208                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   209                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   210                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   211                                  ;-----------------------------------------------------------------------------------------------------------------------
   212                                  ;
   213                                  ;	ASCII									EASCII...
   214                                  ;
   215                                  ;-----------------------------------------------------------------------------------------------------------------------
   216                                  EASCIILINEFEED		equ	00Ah						;line feed
   217                                  EASCIIRETURN		equ	00Dh						;carriage return
   218                                  EASCIIESCAPE		equ	01Bh						;escape
   219                                  ;-----------------------------------------------------------------------------------------------------------------------
   220                                  ;
   221                                  ;	Boot Sector and Loader Constants					EBOOT...
   222                                  ;
   223                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   224                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   225                                  ;
   226                                  ;-----------------------------------------------------------------------------------------------------------------------
   227                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   228                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   229                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   230                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   231                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   232                                  EBOOTMAXTRIES		equ	5						;max read retries
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   235                                  ;-----------------------------------------------------------------------------------------------------------------------
   236                                  ESELDAT			equ	018h						;kernel data selector
   237                                  ESELCGA			equ	020h						;cga video selector
   238                                  ESELOSCODE		equ	048h						;os kernel code selector
   239                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   240                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   241                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   242                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;	Kernel Constants							EKRN...
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  EKRNDESLEN		equ	8						;size of descriptor
   247                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   248                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;	Console Constants							ECON...
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ECONCOLS		equ	80						;columns per row
   253                                  ECONROWS		equ	24						;console rows
   254                                  ECONCOLBYTES		equ	2						;bytes per column
   255                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   256                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   257                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   258                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   259                                  ;=======================================================================================================================
   260                                  ;
   261                                  ;	Structures
   262                                  ;
   263                                  ;=======================================================================================================================
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;
   266                                  ;	OSDATA
   267                                  ;
   268                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   269                                  ;	used by the BIOS.
   270                                  ;
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  struc			OSDATA
   273 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   274 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   275 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   276 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   277 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   278 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   279 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   280 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   281 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   282 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   283 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   284 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   285 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   286 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   287 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   288 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   289 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   290 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   291 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   292 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   293 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   294 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   295 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   296 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   297 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   298 00000449 <res 00000001>          			resb	1						;449 current video mode
   299 0000044A <res 00000002>          			resw	1						;44a screen columns
   300 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   301 0000044E <res 00000002>          			resw	1						;44e current video page offset
   302 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   303 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   304 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   305 00000462 <res 00000001>          			resb	1						;462 active display page number
   306 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   307 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   308 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   309 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   310 00000469 <res 00000003>          			resb	3						;469 vague
   311 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   312 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   313 00000471 <res 00000001>          			resb	1						;471 bios break flag
   314 00000472 <res 00000002>          			resw	1						;472 soft reset
   315 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   316 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   317 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   318 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   319 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   320 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   321 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   322 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   323 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   324 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   325 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   326 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   327 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   328 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   329 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   330 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   331 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   332 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   333 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   334 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   335 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   336 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   337 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   338 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   339 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   340 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   341 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   342 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   343 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   344 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   345 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   346 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   347 000004AC <res 00000008>          			resb	8						;4ac reserved
   348 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   349 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   350 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   351 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   352 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   353 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   354 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   355 000004CD <res 00000001>          			resb	1						;4cd unknown
   356 000004CE <res 00000002>          			resw	1						;4de day counter
   357 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   358 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   359 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   360 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   361 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   362 00000505 <res 0000000A>          			resb	10						;505 POST work area
   363 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   364 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   365 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   366 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   367 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   368 0000051E <res 00000002>          			resw	1						;51e unknown
   369 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   370 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   371 00000530 <res 00000004>          			resb	4						;530 MODE command
   372 00000534 <res 000001CC>          			resb	460						;534 unused
   373 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ;
   376                                  ;	OS Variables								@disk: N/A	@mem: 000800
   377                                  ;
   378                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   379                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   380                                  ;	are organized based on the task that usually accesses them.
   381                                  ;
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;
   385                                  ;	Console Task Variables
   386                                  ;
   387                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   388                                  ;	the console task starts.
   389                                  ;
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  			align	4
   392                                  ECONDATA		equ	($)
   393 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   394 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   395                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ;
   398                                  ;	End of OS Variables
   399                                  ;
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  endstruc
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;
   404                                  ;	Macros
   405                                  ;
   406                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   407                                  ;
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  %macro			mint	1
   410                                  _%1			equ	($-$$) / EKRNDESLEN
   411                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   412                                  %endmacro
   413                                  %macro			mtrap	1
   414                                  _%1			equ	($-$$) / EKRNDESLEN
   415                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   416                                  %endmacro
   417                                  %macro			menter	1
   418                                  ?%1			equ	($-$$)
   419                                  %endmacro
   420                                  %macro			tsvce	1
   421                                  e%1			equ	($-tsvc)/4
   422                                  			dd	%1
   423                                  %endmacro
   424                                  %ifdef BUILDBOOT
   425                                  ;=======================================================================================================================
   426                                  ;
   427                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   428                                  ;
   429                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   430                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   431                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   432                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   433                                  ;
   434                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   435                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   436                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   437                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   438                                  ;	immediately followed by a disk parameter table.
   439                                  ;
   440                                  ;=======================================================================================================================
   441                                  			cpu	8086						;assume minimal CPU
   442                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   443                                  			bits	16						;16-bit code at power-up
   444                                  %ifdef BUILDPREP
   445                                  Boot			jmp	word Prep					;jump to preparation code
   446                                  %else
   447 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   448                                  %endif
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  ;
   451                                  ;	Disk Parameter Table
   452                                  ;
   453                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   454                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   455                                  ;
   456                                  ;-----------------------------------------------------------------------------------------------------------------------
   457 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   458 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   459 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   460 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   461 00000010 02                      cbFatCount		db	2						;file allocation table copies
   462 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   463 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   464 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   465 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   466                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   467 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   468 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   469 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   470                                  ;
   471                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   472                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   473                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   474                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   475                                  ;	given several possible starting values for CS:IP.
   476                                  ;
   477                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   478 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   479                                  .@20			equ	$-$$						;.@20 = 021h
   480 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   481 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   482 00000025 B104                    			mov	cl,4						;shift count
   483 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   484 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   485 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   486                                  ;
   487                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   488                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   489                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   490                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   491                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   492                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   493                                  ;
   494 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   495 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   496 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   497 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   498 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   499                                  ;
   500                                  ;	Our boot addressability is now set up according to the following diagram.
   501                                  ;
   502                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   503                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   504                                  ;				|  256 = 100h bytes				|
   505                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   506                                  ;				|  Boot Sector (vstart=0100h)			|
   507                                  ;				|  1 sector = 512 = 200h bytes			|
   508                                  ;			007e00	+-----------------------------------------------+ DS:0300
   509                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   510                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   511                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   512                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   513                                  ;			009200	+-----------------------------------------------+ DS:1700
   514                                  ;
   515                                  ;	On entry, DL indicates the drive being booted from.
   516                                  ;
   517 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   518                                  ;
   519                                  ;	Compute directory i/o buffer address.
   520                                  ;
   521 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   522 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   523 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   524 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   525                                  ;
   526                                  ;	Compute segment where os.com will be loaded.
   527                                  ;
   528 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   529 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   530 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   531 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   532                                  ;
   533                                  ;	Set the video mode to 80 column, 25 row, text.
   534                                  ;
   535 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   536 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   537                                  ;
   538                                  ;	Write a message to the console so we know we have our addressability established.
   539                                  ;
   540 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   541 0000005C E84B01                  			call	BootPrint					;display loader message
   542                                  ;
   543                                  ;	Initialize the number of directory sectors to search.
   544                                  ;
   545 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   546 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   547                                  ;
   548                                  ;	Compute number of directory sectors and initialize overhead count.
   549                                  ;
   550 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   551 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   552 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   553 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   554                                  ;
   555                                  ;	Compute directory entries per sector.
   556                                  ;
   557 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   558 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   559 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   560                                  ;
   561                                  ;	Compute first logical directory sector and update overhead count.
   562                                  ;
   563 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   564 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   565 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   566 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   567 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   568 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   569                                  ;
   570                                  ;	Read directory sector.
   571                                  ;
   572 0000008E B001                    .30			mov	al,1						;sector count
   573 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   574 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   575 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   576                                  ;
   577                                  ;	Setup variables to search this directory sector.
   578                                  ;
   579 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   580 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   581 000000A1 7603                    			jna	.40						;no, continue
   582 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   583 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   584 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   585 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   586                                  ;
   587                                  ;	Loop through directory sectors searching for kernel program.
   588                                  ;
   589 000000B1 56                      .50			push	si						;save kernel name address
   590 000000B2 57                      			push	di						;save dir i/o buffer address
   591 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   592 000000B6 FC                      			cld							;forward strings
   593 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   594 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   595 000000BA 5E                      			pop	si						;restore kernel name address
   596 000000BB 7418                    			je	.60						;exit loop if found
   597 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   598 000000C1 48                      			dec	ax						;decrement remaining entries
   599 000000C2 75ED                    			jnz	.50						;next entry
   600                                  ;
   601                                  ;	Repeat search if we are not at the end of the directory.
   602                                  ;
   603 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   604 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   605 000000CD 75BF                    			jne	.30						;no, get next sector
   606 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   607 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   608                                  ;
   609                                  ;	If we find the kernel program in the directory, read the FAT.
   610                                  ;
   611 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   612 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   613 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   614 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   615 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   616 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   617                                  ;
   618                                  ;	Get the starting cluster of the kernel program and target address.
   619                                  ;
   620 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   621 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   622                                  ;
   623                                  ;	Read each program cluster into RAM.
   624                                  ;
   625 000000EE 50                      .70			push	ax						;save cluster nbr
   626 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   627 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   628 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   629 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   630 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   631 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   632 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   633 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   634                                  ;
   635                                  ;	Update buffer pointer for next cluster.
   636                                  ;
   637 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   638 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   639 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   640 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   641 00000113 58                      			pop	ax						;AX = restore cluster nbr
   642                                  ;
   643                                  ;	Compute next cluster number.
   644                                  ;
   645 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   646 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   647 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   648 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   649 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   650 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   651 00000120 83E701                  			and	di,1						;get low bit
   652 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   653 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   654 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   655                                  ;
   656                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   657                                  ;
   658 0000012B F6C101                  			test	cl,1						;is cluster odd?
   659 0000012E 7404                    			jz	.80						;no, skip ahead
   660 00000130 B104                    			mov	cl,4						;shift count
   661 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   662 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   663 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   664 0000013A 75B2                    			jne	.70						;no, continue
   665                                  ;
   666                                  ;	Transfer control to the operating system program.
   667                                  ;
   668 0000013C EA                      			db	0EAh						;jmp seg:offset
   669 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   670 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   671                                  ;
   672                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   673                                  ;
   674 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   675 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   676 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   677 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   678 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   679 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   680 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   681 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   682 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   683 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   684                                  ;
   685                                  ;	Try maxtries times to read sector.
   686                                  ;
   687 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   688 00000160 53                      .10			push	bx						;save buffer address
   689 00000161 51                      			push	cx						;save retry count
   690 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   691 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   692 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   693 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   694 0000016F 59                      			pop	cx						;restore retry count
   695 00000170 5B                      			pop	bx						;restore buffer address
   696 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   697 00000173 E2EB                    			loop	.10						;retry
   698                                  ;
   699                                  ;	Handle disk error: convert to ASCII and store in error string.
   700                                  ;
   701 00000175 88E0                    			mov	al,ah						;AL = bios error code
   702 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   703 00000179 B210                    			mov	dl,16						;divisor for base 16
   704 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   705 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   706 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   707 00000183 7203                    			jb	.20						;continue if numeral
   708 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   709 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   710 0000018A 7203                    			jb	.30						;continue if numeral
   711 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   712 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   713 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   714 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   715 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   716 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   717 0000019C 7504                    			jnz	.20						;continue if key pressed
   718 0000019E FB                      			sti							;enable maskable interrupts
   719 0000019F F4                      			hlt							;wait for interrupt
   720 000001A0 EBF6                    			jmp	.10						;repeat
   721 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   722 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   723 000001A6 FB                      .30			sti							;enable maskable interrupts
   724 000001A7 F4                      			hlt							;stop until reset, int, nmi
   725 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   726                                  ;
   727                                  ;	Display text message.
   728                                  ;
   729 000001AA FC                      BootPrint		cld							;forward strings
   730 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   731 000001AC 84C0                    			test	al,al						;end of string?
   732 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   733 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   734 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   735 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   736 000001B6 C3                      BootReturn		ret							;return
   737                                  ;-----------------------------------------------------------------------------------------------------------------------
   738                                  ;
   739                                  ;	Constants
   740                                  ;
   741                                  ;-----------------------------------------------------------------------------------------------------------------------
   742 000001B7 90                      			align	2
   743 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   744 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   744 000001C3 4F4D               
   745 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   745 000001CE 530D0A00           
   746 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   746 000001DB 7220               
   747 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   748 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   748 000001E9 6700               
   749                                  ;-----------------------------------------------------------------------------------------------------------------------
   750                                  ;
   751                                  ;	Work Areas
   752                                  ;
   753                                  ;-----------------------------------------------------------------------------------------------------------------------
   754 000001EB 90                      			align	2
   755 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   756 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   757 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   758 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   759 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   760                                  wwReadCountCommand	equ	$						;read count and command
   761 000001F6 00                      wbReadCount		db	0						;sectors to read
   762 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   763                                  wwDriveHead		equ	$						;drive, head (word)
   764 000001F8 00                      wbDrive			db	0						;drive
   765 000001F9 00                      wbHead			db	0						;head
   766                                  wwSectorTrack		equ	$						;sector, track (word)
   767 000001FA 00                      			db	0						;sector
   768 000001FB 00                      wbTrack			db	0						;track
   769 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   770 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   771                                  %endif
   772                                  %ifdef BUILDPREP
   773                                  ;=======================================================================================================================
   774                                  ;
   775                                  ;	Diskette Preparation Code
   776                                  ;
   777                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   778                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   779                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   780                                  ;
   781                                  ;=======================================================================================================================
   782                                  ;
   783                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   784                                  ;
   785                                  Prep			mov	si,czPrepMsg10					;starting message address
   786                                  			call	BootPrint					;display message
   787                                  ;
   788                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   789                                  ;
   790                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   791                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   792                                  			jnz	.12						;continue if key pressed
   793                                  			sti							;enable interrupts
   794                                  			hlt							;wait for interrupt
   795                                  			jmp	.10						;repeat
   796                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   797                                  			je	.15						;yes, branch
   798                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   799                                  			jne	.10						;no, repeat
   800                                  			jmp	.90						;yes, exit program
   801                                  ;
   802                                  ;	Display writing-sector message and patch the JMP instruction.
   803                                  ;
   804                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   805                                  			call	BootPrint					;display message
   806                                  			mov	bx,Boot+1					;address of JMP instruction operand
   807                                  			mov	ax,01Bh						;address past disk parameter table
   808                                  			mov	[bx],ax						;update the JMP instruction
   809                                  ;
   810                                  ;	Try to read the boot sector.
   811                                  ;
   812                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   813                                  .20			push	cx						;save remaining tries
   814                                  			mov	bx,wcPrepInBuf					;input buffer address
   815                                  			mov	dx,0						;head zero, drive zero
   816                                  			mov	cx,1						;track zero, sector one
   817                                  			mov	ax,0201h					;read one sector
   818                                  			int	EBIOSINTDISKETTE				;attempt the read
   819                                  			pop	cx						;restore remaining retries
   820                                  			jnc	.30						;skip ahead if successful
   821                                  			loop	.20						;try again
   822                                  			mov	si,czPrepMsg20					;read-error message address
   823                                  			jmp	.50						;branch to error routine
   824                                  ;
   825                                  ;	Copy diskette parms from input buffer to output buffer.
   826                                  ;
   827                                  .30			mov	si,wcPrepInBuf					;input buffer address
   828                                  			add	si,11						;skip over JMP and system ID
   829                                  			mov	di,Boot						;output buffer address
   830                                  			add	di,11						;skip over JMP and system ID
   831                                  			mov	cx,19						;length of diskette parameters
   832                                  			cld							;forward string copies
   833                                  			rep	movsb						;copy diskette parameters
   834                                  ;
   835                                  ;	Try to write boot sector to diskette.
   836                                  ;
   837                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   838                                  .40			push	cx						;save remaining tries
   839                                  			mov	bx,Boot						;output buffer address
   840                                  			mov	dx,0						;head zero, drive zero
   841                                  			mov	cx,1						;track zero, sector one
   842                                  			mov	ax,0301h					;write one sector
   843                                  			int	EBIOSINTDISKETTE				;attempt the write
   844                                  			pop	cx						;restore remaining retries
   845                                  			jnc	.80						;skip ahead if successful
   846                                  			loop	.40						;try again
   847                                  			mov	si,czPrepMsg30					;write-error message address
   848                                  ;
   849                                  ;	Convert the error code to ASCII and display the error message.
   850                                  ;
   851                                  .50			push	ax						;save error code
   852                                  			mov	al,ah						;copy error code
   853                                  			mov	ah,0						;AX = error code
   854                                  			mov	dl,10h						;hexadecimal divisor
   855                                  			idiv	dl						;AL = hi-order, AH = lo-order
   856                                  			or	ax,03030h					;add ASCII zone digits
   857                                  			cmp	ah,03Ah						;AH ASCII numeral?
   858                                  			jb	.60						;yes, continue
   859                                  			add	ah,7						;no, make ASCII 'A'-'F'
   860                                  .60			cmp	al,03Ah						;al ASCII numeral?
   861                                  			jb	.70						;yes, continue
   862                                  			add	al,7						;no, make ASCII
   863                                  .70			mov	[si+17],ax					;put ASCII error code in message
   864                                  			call	BootPrint					;write error message
   865                                  			pop	ax						;restore error code
   866                                  ;
   867                                  ;	Display the completion message.
   868                                  ;
   869                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   870                                  			mov	al,ah						;BIOS return code
   871                                  			cmp	al,0						;success?
   872                                  			je	.85						;yes, continue
   873                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   874                                  			cmp	al,1						;disk parameter error?
   875                                  			je	.85						;yes, continue
   876                                  			mov	si,czPrepMsgErr2				;address mark not found message
   877                                  			cmp	al,2						;address mark not found?
   878                                  			je	.85						;yes, continue
   879                                  			mov	si,czPrepMsgErr3				;protected disk message
   880                                  			cmp	al,3						;protected disk?
   881                                  			je	.85						;yes, continue
   882                                  			mov	si,czPrepMsgErr6				;diskette removed message
   883                                  			cmp	al,6						;diskette removed?
   884                                  			je	.85						;yes, continue
   885                                  			mov	si,czPrepMsgErr80				;drive timed out message
   886                                  			cmp	al,80H						;drive timed out?
   887                                  			je	.85						;yes, continue
   888                                  			mov	si,czPrepMsgErrXX				;unknown error message
   889                                  .85			call	BootPrint					;display result message
   890                                  .90			mov	ax,04C00H					;terminate with zero result code
   891                                  			int	021h						;terminate DOS program
   892                                  			ret							;return (should not execute)
   893                                  ;-----------------------------------------------------------------------------------------------------------------------
   894                                  ;
   895                                  ;	Diskette Preparation Messages
   896                                  ;
   897                                  ;-----------------------------------------------------------------------------------------------------------------------
   898                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   899                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   900                                  			db	13,10
   901                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   902                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   903                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   904                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   905                                  			db	13,10,0
   906                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   907                                  			db	13,10,0
   908                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   909                                  			db	13,10,0
   910                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   911                                  			db	13,10,0
   912                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   913                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   914                                  			db	13,10,0
   915                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   916                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   917                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   918                                  			db	13,10,"and retry."
   919                                  			db	13,10,0
   920                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   921                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   922                                  			db	13,10,"using another diskette."
   923                                  			db	13,10,0
   924                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   925                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   926                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   927                                  			db	13,10,0
   928                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   929                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   930                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   931                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   932                                  			db	13,10,"is properly inserted in the diskette drive."
   933                                  			db	13,10,0
   934                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   935                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   936                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   937                                  			db	13,10,0
   938                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   939                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   940                                  			db	13,10,"your computer's technical reference for a description of this error code."
   941                                  			db	13,10,0
   942                                  wcPrepInBuf		equ	$
   943                                  %endif
   944                                  %ifdef BUILDDISK
   945                                  ;=======================================================================================================================
   946                                  ;
   947                                  ;	File Allocation Tables
   948                                  ;
   949                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
   950                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
   951                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
   952                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
   953                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
   954                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
   955                                  ;	the last cluster in the chain.
   956                                  ;
   957                                  ;	Every three bytes encode two FAT entries as follows:
   958                                  ;
   959                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
   960                                  ;
   961                                  ;=======================================================================================================================
   962                                  ;-----------------------------------------------------------------------------------------------------------------------
   963                                  ;
   964                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
   965                                  ;
   966                                  ;-----------------------------------------------------------------------------------------------------------------------
   967                                  section			fat1							;first copy of FAT
   968                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
   969                                  			db	005h,060h,000h,	007h,080h,000h
   970                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
   971                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
   972                                  			db	011h,020h,001h,	013h,040h,001h
   973                                  			db	015h,060h,001h,	017h,080h,001h
   974                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
   975                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
   976                                  			db	021h,020h,002h,	023h,040h,002h
   977                                  			db	025h,060h,002h,	027h,080h,002h
   978                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
   979                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
   980                                  ;-----------------------------------------------------------------------------------------------------------------------
   981                                  ;
   982                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
   983                                  ;
   984                                  ;-----------------------------------------------------------------------------------------------------------------------
   985                                  section			fat2							;second copy of FAT
   986                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
   987                                  			db	005h,060h,000h,	007h,080h,000h
   988                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
   989                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
   990                                  			db	011h,020h,001h,	013h,040h,001h
   991                                  			db	015h,060h,001h,	017h,080h,001h
   992                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
   993                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
   994                                  			db	021h,020h,002h,	023h,040h,002h
   995                                  			db	025h,060h,002h,	027h,080h,002h
   996                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
   997                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
   998                                  ;-----------------------------------------------------------------------------------------------------------------------
   999                                  ;
  1000                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1001                                  ;
  1002                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1003                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1004                                  ;	copy.
  1005                                  ;
  1006                                  ;-----------------------------------------------------------------------------------------------------------------------
  1007                                  section			dir							;diskette directory
  1008                                  			db	"OS      COM"					;file name (must contain spaces)
  1009                                  			db	020h						;attribute (archive bit set)
  1010                                  			times	10 db 0						;unused
  1011                                  			dw	0h						;time
  1012                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1013                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1014                                  			dw	2						;first cluster
  1015                                  			dd	05200h						;file size
  1016                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1017                                  %endif
  1018                                  %ifdef BUILDCOM
  1019                                  ;=======================================================================================================================
  1020                                  ;
  1021                                  ;	OS.COM
  1022                                  ;
  1023                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1024                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1025                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1026                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1027                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1028                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1029                                  ;
  1030                                  ;	Our loader addressability is set up according to the following diagram.
  1031                                  ;
  1032                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1033                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1034                                  ;				|  256 = 100h bytes				|
  1035                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1036                                  ;				|  Boot Sector (vstart=0100h)			|
  1037                                  ;				|  1 sector = 512 = 200h bytes			|
  1038                                  ;			007e00	+-----------------------------------------------+
  1039                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1040                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1041                                  ;				|						|
  1042                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1043                                  ;				|						|
  1044                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1045                                  ;				|  Loader Code					|
  1046                                  ;				|  1 sector = 512 = 200h bytes			|
  1047                                  ;			009200	+-----------------------------------------------+ DS:0300
  1048                                  ;
  1049                                  ;=======================================================================================================================
  1050                                  ;-----------------------------------------------------------------------------------------------------------------------
  1051                                  ;
  1052                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1053                                  ;
  1054                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1055                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1056                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1057                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1058                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1059                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1060                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1061                                  ;	registers.
  1062                                  ;
  1063                                  ;-----------------------------------------------------------------------------------------------------------------------
  1064                                  			cpu	8086						;assume minimal CPU
  1065                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1066                                  			bits	16						;this is 16-bit code
  1067                                  Loader			push	cs						;use the code segment
  1068                                  			pop	ds						;...as our data segment
  1069                                  			push	cs						;use the code segment
  1070                                  			pop	es						;...as our extra segment
  1071                                  ;
  1072                                  ;	Write a message to the console so we know we have our addressability established.
  1073                                  ;
  1074                                  			mov	si,czStartingMsg				;starting message
  1075                                  			call	PutTTYString					;display loader message
  1076                                  ;
  1077                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1078                                  ;
  1079                                  			call	GetCPUType					;AL = cpu type
  1080                                  			mov	si,czCPUErrorMsg				;loader error message
  1081                                  			cmp	al,3						;80386+?
  1082                                  			jb	LoaderExit					;no, exit with error message
  1083                                  			cpu	386						;allow 80386 instructions
  1084                                  			mov	si,czCPUOKMsg					;cpu ok message
  1085                                  			call	PutTTYString					;display message
  1086                                  ;
  1087                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1088                                  ;
  1089                                  			mov	si,0300h					;GDT offset
  1090                                  			mov	ax,cs						;AX:SI = gdt source
  1091                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1092                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1093                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1094                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1095                                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1096                                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1097                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1098                                  			call	PutTTYString					;display message
  1099                                  ;
  1100                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1101                                  ;
  1102                                  			push	EKRNCODESEG					;use kernel code segment ...
  1103                                  			pop	es						;... as target segment
  1104                                  			xor	di,di						;ES:DI = target address
  1105                                  			mov	si,0300h					;DS:SI = source address
  1106                                  			mov	cx,05000h					;CX = kernel size
  1107                                  			cld							;forward strings
  1108                                  			rep	movsb						;copy kernel image
  1109                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1110                                  			call	PutTTYString					;display message
  1111                                  ;
  1112                                  ;	Switch to protected mode.
  1113                                  ;
  1114                                  			xor	si,si						;ES:SI = gdt addr
  1115                                  			mov	ss,si						;protected mode ss
  1116                                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1117                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1118                                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1119                                  			mov	dx,001Fh					;outer delay loop count
  1120                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1121                                  			loop	$						;wait out pending interrupts
  1122                                  			dec	dx						;restore outer loop count
  1123                                  			jnz	.10						;continue outer loop
  1124                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1125                                  ;
  1126                                  ;	Enable hardware and maskable interrupts
  1127                                  ;
  1128                                  			xor	al,al						;enable all registers code
  1129                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1130                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1131                                  			sti							;enable maskable interrupts
  1132                                  ;
  1133                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1134                                  ;
  1135                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1136                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1137                                  			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1138                                  ;-----------------------------------------------------------------------------------------------------------------------
  1139                                  ;
  1140                                  ;	Routine:	LoaderExit
  1141                                  ;
  1142                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1143                                  ;
  1144                                  ;	In:		DS:SI	string address
  1145                                  ;
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                  LoaderExit		call	PutTTYString					;display error message
  1148                                  ;
  1149                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1150                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1151                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1152                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1153                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1154                                  ;
  1155                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1156                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1157                                  			jnz	.40						;exit if key pressed
  1158                                  			sti							;enable maskable interrupts
  1159                                  			hlt							;wait for interrupt
  1160                                  			jmp	.30						;repeat until keypress
  1161                                  ;
  1162                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1163                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1164                                  ;	HLT until the system resets.
  1165                                  ;
  1166                                  .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1167                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1168                                  .50			sti							;enable maskable interrupts
  1169                                  			hlt							;stop until reset, int, nmi
  1170                                  			jmp	.50						;loop until restart kicks in
  1171                                  ;-----------------------------------------------------------------------------------------------------------------------
  1172                                  ;
  1173                                  ;	Routine:	GetCPUType
  1174                                  ;
  1175                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1176                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1177                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1178                                  ;
  1179                                  ;	Out:		AX	0 = 808x, v20, etc.
  1180                                  ;				1 = 80186
  1181                                  ;				2 = 80286
  1182                                  ;				3 = 80386
  1183                                  ;
  1184                                  ;-----------------------------------------------------------------------------------------------------------------------
  1185                                  GetCPUType		mov	al,1						;AL = 1
  1186                                  			mov	cl,32						;shift count
  1187                                  			shr	al,cl						;try a 32-bit shift
  1188                                  			or	al,al						;did the shift happen?
  1189                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1190                                  			cpu	186
  1191                                  			push	sp						;save stack pointer
  1192                                  			pop	cx						;...into cx
  1193                                  			cmp	cx,sp						;did sp decrement before push?
  1194                                  			jne	.10						;yes, cpu is 80186
  1195                                  			cpu	286
  1196                                  			inc	ax						;AX = 2
  1197                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1198                                  			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1199                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1200                                  			jz	.10						;yes, cpu is 80286
  1201                                  			inc	ax						;AX = 3
  1202                                  .10			ret							;return
  1203                                  ;-----------------------------------------------------------------------------------------------------------------------
  1204                                  ;
  1205                                  ;	Routine:	PutTTYString
  1206                                  ;
  1207                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1208                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1209                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1210                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1211                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1212                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1213                                  ;			registers and flags unless used to indicate return status.
  1214                                  ;
  1215                                  ;	In:		DS:SI	address of string
  1216                                  ;
  1217                                  ;-----------------------------------------------------------------------------------------------------------------------
  1218                                  PutTTYString		cld							;forward strings
  1219                                  			lodsb							;load next byte at DS:SI in AL
  1220                                  			test	al,al						;end of string?
  1221                                  			jz	.10						;... yes, exit our loop
  1222                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1223                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1224                                  			jmp	PutTTYString					;repeat until done
  1225                                  .10			ret							;return
  1226                                  ;-----------------------------------------------------------------------------------------------------------------------
  1227                                  ;
  1228                                  ;	Loader Data
  1229                                  ;
  1230                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1231                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1232                                  ;
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  			align	2
  1235                                  cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1236                                  cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1237                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1238                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1239                                  czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1240                                  			db	"Please press any key to restart the computer.",13,10,0
  1241                                  czCPUOKMsg		db	"CPU OK",13,10,0
  1242                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1243                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1244                                  czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1245                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1246                                  			db	055h,0AAh					;end of sector signature
  1247                                  ;=======================================================================================================================
  1248                                  ;
  1249                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1250                                  ;
  1251                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1252                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1253                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1254                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1255                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1256                                  ;
  1257                                  ;=======================================================================================================================
  1258                                  ;=======================================================================================================================
  1259                                  ;
  1260                                  ;	Kernel Tables
  1261                                  ;
  1262                                  ;=======================================================================================================================
  1263                                  ;-----------------------------------------------------------------------------------------------------------------------
  1264                                  ;
  1265                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1266                                  ;
  1267                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1268                                  ;	first descriptor must be all nulls.
  1269                                  ;
  1270                                  ;	6   5         4         3         2         1         0
  1271                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1272                                  ;	----------------------------------------------------------------
  1273                                  ;	h......hffffmmmma......ab......................bn..............n
  1274                                  ;	00000000			all areas have base addresses below 2^24
  1275                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1276                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1277                                  ;	            1001		present, ring-0, selector
  1278                                  ;
  1279                                  ;	h...h	hi-order base address (bits 24-31)
  1280                                  ;	ffff	flags
  1281                                  ;	mmmm	hi-order limit (bits 16-19)
  1282                                  ;	a...a	access
  1283                                  ;	b...b	lo-order base address (bits 0-23)
  1284                                  ;	n...n	lo-order limit (bits 0-15)
  1285                                  ;
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  section			gdt							;global descriptor table
  1288                                  			dq	0000000000000000h				;00 required null selector
  1289                                  			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1290                                  			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1291                                  			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1292                                  			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1293                                  			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1294                                  			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1295                                  			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1296                                  			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1297                                  			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1298                                  			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1299                                  			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1300                                  			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1301                                  			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1302                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1303                                  ;-----------------------------------------------------------------------------------------------------------------------
  1304                                  ;
  1305                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1306                                  ;
  1307                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1308                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1309                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1310                                  ;
  1311                                  ;	6   5         4         3         2         1         0
  1312                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1313                                  ;	----------------------------------------------------------------
  1314                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1315                                  ;
  1316                                  ;	h...h	high-order offset (bits 16-31)
  1317                                  ;	P	present (0=unused interrupt)
  1318                                  ;	zz	descriptor privilege level
  1319                                  ;	S	storage segment (must be zero for IDT)
  1320                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1321                                  ;	S...S	handling code selector in GDT
  1322                                  ;	l...l	lo-order offset (bits 0-15)
  1323                                  ;
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  section			idt							;interrupt descriptor table
  1326                                  			mint	dividebyzero					;00 divide by zero
  1327                                  			mint	singlestep					;01 single step
  1328                                  			mint	nmi						;02 non-maskable
  1329                                  			mint	break						;03 break
  1330                                  			mint	into						;04 into
  1331                                  			mint	bounds						;05 bounds
  1332                                  			mint	badopcode					;06 bad op code
  1333                                  			mint	nocoproc					;07 no coprocessor
  1334                                  			mint	doublefault					;08 double-fault
  1335                                  			mint	operand						;09 operand
  1336                                  			mint	badtss						;0a bad TSS
  1337                                  			mint	notpresent					;0b not-present
  1338                                  			mint	stacklimit					;0c stack limit
  1339                                  			mint	protection					;0d general protection fault
  1340                                  			mint	int14						;0e (reserved)
  1341                                  			mint	int15						;0f (reserved)
  1342                                  			mint	coproccalc					;10 (reserved)
  1343                                  			mint	int17						;11 (reserved)
  1344                                  			mint	int18						;12 (reserved)
  1345                                  			mint	int19						;13 (reserved)
  1346                                  			mint	int20						;14 (reserved)
  1347                                  			mint	int21						;15 (reserved)
  1348                                  			mint	int22						;16 (reserved)
  1349                                  			mint	int23						;17 (reserved)
  1350                                  			mint	int24						;18 (reserved)
  1351                                  			mint	int25						;19 (reserved)
  1352                                  			mint	int26						;1a (reserved)
  1353                                  			mint	int27						;1b (reserved)
  1354                                  			mint	int28						;1c (reserved)
  1355                                  			mint	int29						;1d (reserved)
  1356                                  			mint	int30						;1e (reserved)
  1357                                  			mint	int31						;1f (reserved)
  1358                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1359                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1360                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1361                                  			mtrap	com2						;23 IRQ3 com2
  1362                                  			mtrap	com1						;24 IRQ4 com1
  1363                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1364                                  			mtrap	diskette					;26 IRQ6 diskette
  1365                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1366                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1367                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1368                                  			mtrap	irq10						;2a IRQA (reserved)
  1369                                  			mtrap	irq11						;2b IRQB (reserved)
  1370                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1371                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1372                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1373                                  			mtrap	irq15						;2f IRQF (reserved)
  1374                                  			mtrap	svc						;30 OS services
  1375                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1376                                  ;=======================================================================================================================
  1377                                  ;
  1378                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1379                                  ;
  1380                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1381                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1382                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1383                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1384                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1385                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1386                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1387                                  ;
  1388                                  ;=======================================================================================================================
  1389                                  section			kernel	vstart=0h					;data offsets relative to 0
  1390                                  			cpu	386						;allow 80386 instructions
  1391                                  			bits	32						;this is 32-bit code
  1392                                  ;=======================================================================================================================
  1393                                  ;
  1394                                  ;	CPU Interrupt Handlers
  1395                                  ;
  1396                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1397                                  ;	of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1398                                  ;
  1399                                  ;=======================================================================================================================
  1400                                  ;-----------------------------------------------------------------------------------------------------------------------
  1401                                  ;
  1402                                  ;	INT0	Divide By Zero
  1403                                  ;
  1404                                  ;-----------------------------------------------------------------------------------------------------------------------
  1405                                  			menter	dividebyzero					;divide by zero
  1406                                  			push	0						;store interrupt nbr
  1407                                  			push	czIntDivideByZero				;store message offset
  1408                                  			jmp	ReportInterrupt					;report interrupt
  1409                                  ;-----------------------------------------------------------------------------------------------------------------------
  1410                                  ;
  1411                                  ;	INT1	Single Step
  1412                                  ;
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  			menter	singlestep					;single step
  1415                                  			push	1						;store interrupt nbr
  1416                                  			push	czIntSingleStep					;store message offset
  1417                                  			jmp	ReportInterrupt					;report interrupt
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  ;
  1420                                  ;	INT2	Non-Maskable Interrupt
  1421                                  ;
  1422                                  ;-----------------------------------------------------------------------------------------------------------------------
  1423                                  			menter	nmi						;non-maskable
  1424                                  			push	2						;store interrupt nbr
  1425                                  			push	czIntNonMaskable				;store message offset
  1426                                  			jmp	ReportInterrupt					;report interrupt
  1427                                  ;-----------------------------------------------------------------------------------------------------------------------
  1428                                  ;
  1429                                  ;	INT3	Break
  1430                                  ;
  1431                                  ;-----------------------------------------------------------------------------------------------------------------------
  1432                                  			menter	break						;break
  1433                                  			push	3						;store interrupt nbr
  1434                                  			push	czIntBreak					;store message offset
  1435                                  			jmp	ReportInterrupt					;report interrupt
  1436                                  ;-----------------------------------------------------------------------------------------------------------------------
  1437                                  ;
  1438                                  ;	INT4	Into
  1439                                  ;
  1440                                  ;-----------------------------------------------------------------------------------------------------------------------
  1441                                  			menter	into						;into
  1442                                  			push	4						;store interrupt nbr
  1443                                  			push	czIntInto					;store message offset
  1444                                  			jmp	ReportInterrupt					;report interrupt
  1445                                  ;-----------------------------------------------------------------------------------------------------------------------
  1446                                  ;
  1447                                  ;	INT5	Bounds
  1448                                  ;
  1449                                  ;-----------------------------------------------------------------------------------------------------------------------
  1450                                  			menter	bounds						;bounds
  1451                                  			push	5						;store interrupt nbr
  1452                                  			push	czIntBounds					;store message offset
  1453                                  			jmp	ReportInterrupt					;report interrupt
  1454                                  ;-----------------------------------------------------------------------------------------------------------------------
  1455                                  ;
  1456                                  ;	INT6	Bad Operation Code
  1457                                  ;
  1458                                  ;-----------------------------------------------------------------------------------------------------------------------
  1459                                  			menter	badopcode					;bad opcode interrupt
  1460                                  			push	6						;store interrupt nbr
  1461                                  			push	czIntBadOpCode					;store message offset
  1462                                  			jmp	ReportInterrupt					;report interrupt
  1463                                  ;-----------------------------------------------------------------------------------------------------------------------
  1464                                  ;
  1465                                  ;	INT7	No Coprocessor
  1466                                  ;
  1467                                  ;-----------------------------------------------------------------------------------------------------------------------
  1468                                  			menter	nocoproc					;no coprocessor interrupt
  1469                                  			push	7						;store interrupt nbr
  1470                                  			push	czIntNoCoprocessor				;store message offset
  1471                                  			jmp	ReportInterrupt					;report interrupt
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  ;
  1474                                  ;	INT8	Double Fault
  1475                                  ;
  1476                                  ;-----------------------------------------------------------------------------------------------------------------------
  1477                                  			menter	doublefault					;doublefault interrupt
  1478                                  			push	8						;store interrupt nbr
  1479                                  			push	czIntDoubleFault				;store message offset
  1480                                  			jmp	ReportInterrupt					;report interrupt
  1481                                  ;-----------------------------------------------------------------------------------------------------------------------
  1482                                  ;
  1483                                  ;	INT9	Operand
  1484                                  ;
  1485                                  ;-----------------------------------------------------------------------------------------------------------------------
  1486                                  			menter	operand						;operand interrupt
  1487                                  			push	9						;store interrupt nbr
  1488                                  			push	czIntOperand					;store message offset
  1489                                  			jmp	ReportInterrupt					;report interrupt
  1490                                  ;-----------------------------------------------------------------------------------------------------------------------
  1491                                  ;
  1492                                  ;	INT10	Bad Task State Segment
  1493                                  ;
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  			menter	badtss						;bad tss interrupt
  1496                                  			push	10						;store interrupt nbr
  1497                                  			push	czIntBadTSS					;store message offset
  1498                                  			jmp	ReportInterrupt					;report interrupt
  1499                                  ;-----------------------------------------------------------------------------------------------------------------------
  1500                                  ;
  1501                                  ;	INT11	Not Present
  1502                                  ;
  1503                                  ;-----------------------------------------------------------------------------------------------------------------------
  1504                                  			menter	notpresent					;not present interrupt
  1505                                  			push	11						;store interrupt nbr
  1506                                  			push	czIntNotPresent					;store message offset
  1507                                  			jmp	ReportInterrupt					;report interrupt
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509                                  ;
  1510                                  ;	INT12	Stack Limit
  1511                                  ;
  1512                                  ;-----------------------------------------------------------------------------------------------------------------------
  1513                                  			menter	stacklimit					;stack limit interrupt
  1514                                  			push	12						;store interrupt nbr
  1515                                  			push	czIntStackLimit					;store message offset
  1516                                  			jmp	ReportInterrupt					;report interrupt
  1517                                  ;-----------------------------------------------------------------------------------------------------------------------
  1518                                  ;
  1519                                  ;	INT13	General Protection Fault
  1520                                  ;
  1521                                  ;-----------------------------------------------------------------------------------------------------------------------
  1522                                  			menter	protection					;protection fault interrupt
  1523                                  			push	13						;store interrupt nbr
  1524                                  			push	czIntProtection					;store message offset
  1525                                  			jmp	ReportInterrupt					;report interrupt
  1526                                  ;-----------------------------------------------------------------------------------------------------------------------
  1527                                  ;
  1528                                  ;	INT14	Reserved
  1529                                  ;
  1530                                  ;-----------------------------------------------------------------------------------------------------------------------
  1531                                  			menter	int14						;(reserved)
  1532                                  			push	14						;store interrupt nbr
  1533                                  			push	czIntReserved					;store message offset
  1534                                  			jmp	ReportInterrupt					;report interrupt
  1535                                  ;-----------------------------------------------------------------------------------------------------------------------
  1536                                  ;
  1537                                  ;	INT15	Reserved
  1538                                  ;
  1539                                  ;-----------------------------------------------------------------------------------------------------------------------
  1540                                  			menter	int15						;(reserved)
  1541                                  			push	15						;store interrupt nbr
  1542                                  			push	czIntReserved					;store message offset
  1543                                  			jmp	ReportInterrupt					;report interrupt
  1544                                  ;-----------------------------------------------------------------------------------------------------------------------
  1545                                  ;
  1546                                  ;	INT16	Coprocessor Calculation
  1547                                  ;
  1548                                  ;-----------------------------------------------------------------------------------------------------------------------
  1549                                  			menter	coproccalc					;coprocessor calculation
  1550                                  			push	16						;store interrupt nbr
  1551                                  			push	czIntCoprocessorCalc				;store message offset
  1552                                  			jmp	ReportInterrupt					;report interrupt
  1553                                  ;-----------------------------------------------------------------------------------------------------------------------
  1554                                  ;
  1555                                  ;	INT17	Reserved
  1556                                  ;
  1557                                  ;-----------------------------------------------------------------------------------------------------------------------
  1558                                  			menter	int17						;(reserved)
  1559                                  			push	17						;store interrupt nbr
  1560                                  			push	czIntReserved					;store message offset
  1561                                  			jmp	ReportInterrupt					;report interrupt
  1562                                  ;-----------------------------------------------------------------------------------------------------------------------
  1563                                  ;
  1564                                  ;	INT18	Reserved
  1565                                  ;
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                  			menter	int18						;(reserved)
  1568                                  			push	18						;store interrupt nbr
  1569                                  			push	czIntReserved					;store message offset
  1570                                  			jmp	ReportInterrupt					;report interrupt
  1571                                  ;-----------------------------------------------------------------------------------------------------------------------
  1572                                  ;
  1573                                  ;	INT19	Reserved
  1574                                  ;
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                  			menter	int19						;(reserved)
  1577                                  			push	19						;store interrupt nbr
  1578                                  			push	czIntReserved					;store message offset
  1579                                  			jmp	ReportInterrupt					;report interrupt
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                  ;
  1582                                  ;	INT20	Reserved
  1583                                  ;
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  			menter	int20						;(reserved)
  1586                                  			push	20						;store interrupt nbr
  1587                                  			push	czIntReserved					;store message offset
  1588                                  			jmp	ReportInterrupt					;report interrupt
  1589                                  ;-----------------------------------------------------------------------------------------------------------------------
  1590                                  ;
  1591                                  ;	INT21	Reserved
  1592                                  ;
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                  			menter	int21						;(reserved)
  1595                                  			push	21						;store interrupt nbr
  1596                                  			push	czIntReserved					;store message offset
  1597                                  			jmp	ReportInterrupt					;report interrupt
  1598                                  ;-----------------------------------------------------------------------------------------------------------------------
  1599                                  ;
  1600                                  ;	INT22	Reserved
  1601                                  ;
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                  			menter	int22						;(reserved)
  1604                                  			push	22						;store interrupt nbr
  1605                                  			push	czIntReserved					;store message offset
  1606                                  			jmp	ReportInterrupt					;report interrupt
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                  ;
  1609                                  ;	INT23	Reserved
  1610                                  ;
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  			menter	int23						;(reserved)
  1613                                  			push	23						;store interrupt nbr
  1614                                  			push	czIntReserved					;store message offset
  1615                                  			jmp	ReportInterrupt					;report interrupt
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  ;
  1618                                  ;	INT24	Reserved
  1619                                  ;
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  			menter	int24						;(reserved)
  1622                                  			push	24						;store interrupt nbr
  1623                                  			push	czIntReserved					;store message offset
  1624                                  			jmp	ReportInterrupt					;report interrupt
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;	INT25	Reserved
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  			menter	int25						;(reserved)
  1631                                  			push	25						;store interrupt nbr
  1632                                  			push	czIntReserved					;store message offset
  1633                                  			jmp	ReportInterrupt					;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;	INT26	Reserved
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                  			menter	int26						;(reserved)
  1640                                  			push	26						;store interrupt nbr
  1641                                  			push	czIntReserved					;store message offset
  1642                                  			jmp	ReportInterrupt					;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;	INT27	Reserved
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                  			menter	int27						;(reserved)
  1649                                  			push	27						;store interrupt nbr
  1650                                  			push	czIntReserved					;store message offset
  1651                                  			jmp	ReportInterrupt					;report interrupt
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  ;
  1654                                  ;	INT28	Reserved
  1655                                  ;
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                  			menter	int28						;(reserved)
  1658                                  			push	28						;store interrupt nbr
  1659                                  			push	czIntReserved					;store message offset
  1660                                  			jmp	ReportInterrupt					;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;	INT29	Reserved
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                  			menter	int29						;(reserved)
  1667                                  			push	29						;store interrupt nbr
  1668                                  			push	czIntReserved					;store message offset
  1669                                  			jmp	ReportInterrupt					;report interrupt
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  ;
  1672                                  ;	INT30	Reserved
  1673                                  ;
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  			menter	int30						;(reserved)
  1676                                  			push	30						;store interrupt nbr
  1677                                  			push	czIntReserved					;store message offset
  1678                                  			jmp	ReportInterrupt					;report interrupt
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;	INT31	Reserved
  1682                                  ;
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                  			menter	int31						;(reserved)
  1685                                  			push	31						;store interrupt nbr
  1686                                  			push	czIntReserved					;store message offset
  1687                                  			jmp	ReportInterrupt					;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;	Routine:	ReportInterrupt
  1691                                  ;
  1692                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1693                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1694                                  ;
  1695                                  ;	In:		[esp+4]		interrupt number (0-31)			stored by push instruction
  1696                                  ;			[esp+0]		error message address			stored by push instructions
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                  ReportInterrupt		pop	eax						;error message address
  1700                                  			pop	eax						;interrupt number
  1701                                  			iretd							;return
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;	Processor Interrupt Name Strings
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  czIntDivideByZero	db	"Division by zero",0
  1708                                  czIntSingleStep		db	"Single step",0
  1709                                  czIntNonMaskable	db	"Non-maskable interrupt",0
  1710                                  czIntBreak		db	"Break",0
  1711                                  czIntInto		db	"Into",0
  1712                                  czIntBounds		db	"Bounds",0
  1713                                  czIntBadOpCode		db	"Bad Operation Code",0
  1714                                  czIntNoCoprocessor	db	"No Coprocessor",0
  1715                                  czIntDoubleFault	db	"Double Fault",0
  1716                                  czIntOperand		db	"Operand",0
  1717                                  czIntBadTSS		db	"Bad Task State Segment",0
  1718                                  czIntNotPresent		db	"Not Present",0
  1719                                  czIntStackLimit		db	"Stack Limit",0
  1720                                  czIntProtection		db	"General Protection Fault",0
  1721                                  czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  1722                                  czIntReserved		db	"Reserved",0
  1723                                  ;=======================================================================================================================
  1724                                  ;
  1725                                  ;	Hardware Device Interupts
  1726                                  ;
  1727                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1728                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1729                                  ;	(BX=2028h).
  1730                                  ;
  1731                                  ;=======================================================================================================================
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;	IRQ0	Clock Tick Interrupt
  1735                                  ;
  1736                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1737                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1738                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1739                                  ;
  1740                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1741                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1742                                  ;
  1743                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1744                                  ;	zero, the floppy disk motors are turned off.
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                  			menter	clocktick					;clock tick interrupt
  1748                                  			push	eax						;save modified regs
  1749                                  			push	edx						;
  1750                                  			push	ds						;
  1751                                  ;
  1752                                  ;	Update the clock tick count and the elapsed days as needed
  1753                                  ;
  1754                                  			push	ESELDAT						;load OS data selector ...
  1755                                  			pop	ds						;... into data segment register
  1756                                  			mov	eax,[wdClockTicks]				;eax = clock ticks
  1757                                  			inc	eax						;increment clock ticks
  1758                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1759                                  			jb	irq0.10						;no, skip ahead
  1760                                  			inc	byte [wbClockDays]				;increment clock days
  1761                                  			xor	eax,eax						;reset clock ticks
  1762                                  irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  1763                                  ;
  1764                                  ;	Decrement floppy disk motor timeout
  1765                                  ;
  1766                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1767                                  			je	irq0.20						;yes, skip ahead
  1768                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1769                                  			jnz	irq0.20						;skip ahead if non-zero
  1770                                  ;
  1771                                  ;	Turn off the floppy disk motor if appropriate
  1772                                  ;
  1773                                  			sti							;enable maskable interrupts
  1774                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1775                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1776                                  			in	al,dx						;FDC main status byte
  1777                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1778                                  			jnz	irq0.15						;wait while busy
  1779                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1780                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1781                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1782                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1783                                  			out	dx,al						;turn motor off
  1784                                  ;
  1785                                  ;	Signal the end of the hardware interrupt
  1786                                  ;
  1787                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1788                                  ;
  1789                                  ;	Restore and return
  1790                                  ;
  1791                                  			pop	ds						;restore modified regs
  1792                                  			pop	edx						;
  1793                                  			pop	eax						;
  1794                                  			iretd							;return
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;	IRQ1	Keyboard Interrupt
  1798                                  ;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  			menter	keyboard					;keyboard interrrupt
  1801                                  			push	eax						;
  1802                                  			jmp	hwint						;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  			menter	iochannel					;secondary 8259A cascade
  1809                                  			push	eax						;save modified regs
  1810                                  			jmp	hwint						;end interrupt and return
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  			menter	com2						;serial port 2 interrupt
  1817                                  			push	eax						;save modified regs
  1818                                  			jmp	hwint						;end interrupt and return
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  			menter	com1						;serial port 1 interrupt
  1825                                  			push	eax						;save modified regs
  1826                                  			jmp	hwint						;end interrupt and return
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  			menter	lpt2						;parallel port 2 interrupt
  1833                                  			push	eax						;save modified regs
  1834                                  			jmp	hwint						;end interrupt and return
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;	IRQ6	Diskette Hardware Interrupt
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  			menter	diskette					;floppy disk interrupt
  1841                                  			push	eax						;save non-volatile regs
  1842                                  			push	ds						;
  1843                                  			push	ESELDAT						;load OS data selector ...
  1844                                  			pop	ds						;... into DS register
  1845                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1846                                  			or	al,10000000b					;set IRQ flag
  1847                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  1848                                  			pop	ds						;restore non-volatile regs
  1849                                  			jmp	hwint						;end primary PIC interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  			menter	lpt1						;parallel port 1 interrupt
  1856                                  			push	eax						;save modified regs
  1857                                  			jmp	hwint						;end interrupt and return
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  			menter	rtclock						;real-time clock interrupt
  1864                                  			push	eax						;save modified regs
  1865                                  			jmp	hwwint						;end interrupt and return
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  			menter	retrace						;CGA vertical retrace interrupt
  1872                                  			push	eax						;save modified regs
  1873                                  			jmp	hwwint						;end interrupt and return
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                  ;
  1876                                  ;	IRQ10	Reserved Hardware Interrupt
  1877                                  ;
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                  			menter	irq10						;reserved
  1880                                  			push	eax						;save modified regs
  1881                                  			jmp	hwwint						;end interrupt and return
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;	IRQ11	Reserved Hardware Interrupt
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  			menter	irq11						;reserved
  1888                                  			push	eax						;save modified regs
  1889                                  			jmp	hwwint						;end interrupt and return
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1896                                  			push	eax						;save modified regs
  1897                                  			jmp	hwwint						;end interrupt and return
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1901                                  ;
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  			menter	coprocessor					;coprocessor interrupt
  1904                                  			push	eax						;save modified regs
  1905                                  			jmp	hwwint						;end interrupt and return
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                  ;
  1908                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1909                                  ;
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  			menter	fixeddisk					;fixed disk interrupt
  1912                                  			push	eax						;save modified regs
  1913                                  			jmp	hwwint						;end interrupt and return
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                  ;
  1916                                  ;	IRQ15	Reserved Hardware Interrupt
  1917                                  ;
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  			menter	irq15						;reserved
  1920                                  			push	eax						;save modified regs
  1921                                  			jmp	hwwint						;end interrupt and return
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                  ;
  1924                                  ;	Exit from hardware interrupt
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1928                                  			jmp	hwint90						;skip ahead
  1929                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1930                                  hwint90			pop	eax						;restore modified regs
  1931                                  			iretd							;return from interrupt
  1932                                  ;-----------------------------------------------------------------------------------------------------------------------
  1933                                  ;
  1934                                  ;	INT 30h Operating System Software Service Interrupt
  1935                                  ;
  1936                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1937                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1938                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1939                                  ;	the entry address of the specific function from a table.
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                  			menter	svc
  1943                                  			cmp	al,maxtsvc					;is our function out of range?
  1944                                  			jae	svc90						;yes, skip ahead
  1945                                  			movzx	eax,al						;function
  1946                                  			shl	eax,2						;offset into table
  1947                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  1948                                  svc90			iretd							;return from interrupt
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                  ;
  1951                                  ;	Service Request Table
  1952                                  ;
  1953                                  ;
  1954                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1955                                  ;
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  1958                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1959                                  			tsvce	PutConsoleString				;tty output asciiz string
  1960                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1961                                  ;-----------------------------------------------------------------------------------------------------------------------
  1962                                  ;
  1963                                  ;	Service Request Macros
  1964                                  ;
  1965                                  ;	These macros provide positional parameterization of service request calls.
  1966                                  ;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  %macro			clearConsoleScreen 0
  1969                                  			mov	al,eClearConsoleScreen				;function code
  1970                                  			int	_svc						;invoke OS service
  1971                                  %endmacro
  1972                                  %macro			placeCursor 0
  1973                                  			mov	al,ePlaceCursor					;function code
  1974                                  			int	_svc						;invoke OS service
  1975                                  %endmacro
  1976                                  %macro			putConsoleString 1
  1977                                  			mov	edx,%1						;string address
  1978                                  			mov	al,ePutConsoleString				;function code
  1979                                  			int	_svc						;invoke OS service
  1980                                  %endmacro
  1981                                  ;=======================================================================================================================
  1982                                  ;
  1983                                  ;	Kernel Function Library
  1984                                  ;
  1985                                  ;=======================================================================================================================
  1986                                  ;=======================================================================================================================
  1987                                  ;
  1988                                  ;	Console Helper Routines
  1989                                  ;
  1990                                  ;	PutConsoleString
  1991                                  ;	NextConsoleColumn
  1992                                  ;	FirstConsoleColumn
  1993                                  ;	NextConsoleRow
  1994                                  ;	PutConsoleChar
  1995                                  ;
  1996                                  ;=======================================================================================================================
  1997                                  ;-----------------------------------------------------------------------------------------------------------------------
  1998                                  ;
  1999                                  ;	Routine:	PutConsoleString
  2000                                  ;
  2001                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2002                                  ;			console position as needed.
  2003                                  ;
  2004                                  ;	In:		EDX	source address
  2005                                  ;			DS	OS data selector
  2006                                  ;
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  PutConsoleString	push	esi						;save non-volatile regs
  2009                                  			mov	esi,edx						;source address
  2010                                  			cld							;forward strings
  2011                                  .10			lodsb							;ASCII character
  2012                                  			or	al,al						;end of string?
  2013                                  			jz	.40						;yes, skip ahead
  2014                                  			cmp	al,EASCIIRETURN					;carriage return?
  2015                                  			jne	.20						;no, skip ahead
  2016                                  			call	FirstConsoleColumn				;move to start of row
  2017                                  			jmp	.10						;next character
  2018                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2019                                  			jne	.30						;no, skip ahead
  2020                                  			call	NextConsoleRow					;move to next row
  2021                                  			jmp	.10						;next character
  2022                                  .30			call	PutConsoleChar					;output character to console
  2023                                  			call	NextConsoleColumn				;advance to next column
  2024                                  			jmp	.10						;next character
  2025                                  .40			pop	esi						;restore non-volatile regs
  2026                                  			ret							;return
  2027                                  ;-----------------------------------------------------------------------------------------------------------------------
  2028                                  ;
  2029                                  ;	Routine:	NextConsoleColumn
  2030                                  ;
  2031                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2032                                  ;			incremented if the end of the current row is reached.
  2033                                  ;
  2034                                  ;	In:		DS	OS data selector
  2035                                  ;
  2036                                  ;-----------------------------------------------------------------------------------------------------------------------
  2037                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2038                                  			inc	al						;increment column
  2039                                  			mov	[wbConsoleColumn],al				;save column
  2040                                  			cmp	al,ECONCOLS					;end of row?
  2041                                  			jb	.10						;no, skip ahead
  2042                                  			call	FirstConsoleColumn				;reset column to start of row
  2043                                  			call	NextConsoleRow					;line feed to next row
  2044                                  .10			ret							;return
  2045                                  ;-----------------------------------------------------------------------------------------------------------------------
  2046                                  ;
  2047                                  ;	Routine:	FirstConsoleColumn
  2048                                  ;
  2049                                  ;	Description:	This routine resets the console column to start of the row.
  2050                                  ;
  2051                                  ;	In:		DS	OS data selector
  2052                                  ;
  2053                                  ;-----------------------------------------------------------------------------------------------------------------------
  2054                                  FirstConsoleColumn	xor	al,al						;zero column
  2055                                  			mov	[wbConsoleColumn],al				;save column
  2056                                  			ret							;return
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058                                  ;
  2059                                  ;	Routine:	NextConsoleRow
  2060                                  ;
  2061                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2062                                  ;
  2063                                  ;	In:		DS	OS data selector
  2064                                  ;
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2067                                  			inc	al						;increment row
  2068                                  			mov	[wbConsoleRow],al				;save row
  2069                                  			cmp	al,ECONROWS					;end of screen?
  2070                                  			jb	.10						;no, skip ahead
  2071                                  			call	ScrollConsoleRow				;scroll up one row
  2072                                  			mov	al,[wbConsoleRow]				;row
  2073                                  			dec	al						;decrement row
  2074                                  			mov	[wbConsoleRow],al				;save row
  2075                                  .10			ret							;return
  2076                                  ;-----------------------------------------------------------------------------------------------------------------------
  2077                                  ;
  2078                                  ;	Routine:	PutConsoleChar
  2079                                  ;
  2080                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2081                                  ;
  2082                                  ;	In:		AL	ASCII character
  2083                                  ;			DS	OS data selector
  2084                                  ;
  2085                                  ;-----------------------------------------------------------------------------------------------------------------------
  2086                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2087                                  			push	es						;
  2088                                  			push	ESELCGA						;load CGA selector ...
  2089                                  			pop	es						;... into extra segment reg
  2090                                  			mov	cl,[wbConsoleColumn]				;column
  2091                                  			mov	ch,[wbConsoleRow]				;row
  2092                                  			call	SetConsoleChar					;put character at row, column
  2093                                  			pop	es						;restore non-volatile regs
  2094                                  			pop	ecx						;
  2095                                  			ret							;return
  2096                                  ;=======================================================================================================================
  2097                                  ;
  2098                                  ;	Memory-Mapped Video Routines
  2099                                  ;
  2100                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2101                                  ;
  2102                                  ;	ClearConsoleScreen
  2103                                  ;	ScrollConsoleRow
  2104                                  ;	SetConsoleChar
  2105                                  ;
  2106                                  ;=======================================================================================================================
  2107                                  ;-----------------------------------------------------------------------------------------------------------------------
  2108                                  ;
  2109                                  ;	Routine:	ClearConsoleScreen
  2110                                  ;
  2111                                  ;	Description:	This routine clears the console (CGA) screen.
  2112                                  ;
  2113                                  ;-----------------------------------------------------------------------------------------------------------------------
  2114                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  2115                                  			push	edi						;
  2116                                  			push	ds						;
  2117                                  			push	es						;
  2118                                  			push	ESELDAT						;load OS Data selector ...
  2119                                  			pop	ds						;... into DS register
  2120                                  			push	ESELCGA						;load CGA selector ...
  2121                                  			pop	es						;... into ES register
  2122                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2123                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2124                                  			xor	edi,edi						;target offset
  2125                                  			cld							;forward strings
  2126                                  			rep	stosd						;reset screen body
  2127                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2128                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2129                                  			rep	stosd						;reset OIA line
  2130                                  			xor	al,al						;zero register
  2131                                  			mov	[wbConsoleRow],al				;reset console row
  2132                                  			mov	[wbConsoleColumn],al				;reset console column
  2133                                  			call	PlaceCursor					;place cursor at current position
  2134                                  			pop	es						;restore non-volatile regs
  2135                                  			pop	ds						;
  2136                                  			pop	edi						;
  2137                                  			pop	ecx						;
  2138                                  			ret							;return
  2139                                  ;-----------------------------------------------------------------------------------------------------------------------
  2140                                  ;
  2141                                  ;	Routine:	ScrollConsoleRow
  2142                                  ;
  2143                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2144                                  ;
  2145                                  ;-----------------------------------------------------------------------------------------------------------------------
  2146                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  2147                                  			push	esi						;
  2148                                  			push	edi						;
  2149                                  			push	ds						;
  2150                                  			push	es						;
  2151                                  			push	ESELCGA						;load CGA video selector ...
  2152                                  			pop	ds						;... into DS
  2153                                  			push	ESELCGA						;load CGA video selector ...
  2154                                  			pop	es						;... into ES
  2155                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2156                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2157                                  			xor	edi,edi						;edi = target (line 1)
  2158                                  			cld							;forward strings
  2159                                  			rep	movsd						;move 24 lines up
  2160                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2161                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2162                                  			rep	stosd						;clear bottom row
  2163                                  			pop	es						;restore non-volatile regs
  2164                                  			pop	ds						;
  2165                                  			pop	edi						;
  2166                                  			pop	esi						;
  2167                                  			pop	ecx						;
  2168                                  			ret							;return
  2169                                  ;-----------------------------------------------------------------------------------------------------------------------
  2170                                  ;
  2171                                  ;	Routine:	SetConsoleChar
  2172                                  ;
  2173                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2174                                  ;
  2175                                  ;	In:		AL	ASCII character
  2176                                  ;			CL	column
  2177                                  ;			CH	row
  2178                                  ;			ES	CGA selector
  2179                                  ;
  2180                                  ;	Out:		EAX	last target address written (ES:)
  2181                                  ;			CL	column + 1
  2182                                  ;
  2183                                  ;-----------------------------------------------------------------------------------------------------------------------
  2184                                  SetConsoleChar		mov	dl,al						;ASCII character
  2185                                  			movzx	eax,ch						;row
  2186                                  			mov	ah,ECONCOLS					;cols/row
  2187                                  			mul	ah						;row * cols/row
  2188                                  			add	al,cl						;add column
  2189                                  			adc	ah,0						;handle carry
  2190                                  			shl	eax,1						;screen offset
  2191                                  			mov	[es:eax],dl					;store character
  2192                                  			inc	cl						;next column
  2193                                  			ret							;return
  2194                                  ;=======================================================================================================================
  2195                                  ;
  2196                                  ;	Input/Output Routines
  2197                                  ;
  2198                                  ;	These routines read and/or write directly to ports.
  2199                                  ;
  2200                                  ;	PlaceCursor
  2201                                  ;	PutPrimaryEndOfInt
  2202                                  ;	PutSecondaryEndOfInt
  2203                                  ;
  2204                                  ;=======================================================================================================================
  2205                                  ;-----------------------------------------------------------------------------------------------------------------------
  2206                                  ;
  2207                                  ;	Routine:	PlaceCursor
  2208                                  ;
  2209                                  ;	Description:	This routine positions the cursor on the console.
  2210                                  ;
  2211                                  ;	In:		DS	OS data selector
  2212                                  ;
  2213                                  ;-----------------------------------------------------------------------------------------------------------------------
  2214                                  PlaceCursor		push	ecx						;save non-volatile regs
  2215                                  			mov	al,[wbConsoleRow]				;al = row
  2216                                  			mov	ah,ECONCOLS					;ah = cols/row
  2217                                  			mul	ah						;row offset
  2218                                  			add	al,[wbConsoleColumn]				;add column
  2219                                  			adc	ah,0						;add overflow
  2220                                  			mov	ecx,eax						;screen offset
  2221                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2222                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2223                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2224                                  			out	dx,al						;select register
  2225                                  			inc	edx						;data port
  2226                                  			mov	al,ch						;hi-order cursor loc
  2227                                  			out	dx,al						;store hi-order loc
  2228                                  			dec	edx						;register select port
  2229                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2230                                  			out	dx,al						;select register
  2231                                  			inc	edx						;data port
  2232                                  			mov	al,cl						;lo-order cursor loc
  2233                                  			out	dx,al						;store lo-order loc
  2234                                  			pop	ecx						;restore non-volatile regs
  2235                                  			ret							;return
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                  ;
  2238                                  ;	Routine:	PutPrimaryEndOfInt
  2239                                  ;
  2240                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2241                                  ;
  2242                                  ;-----------------------------------------------------------------------------------------------------------------------
  2243                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2244                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2245                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  2246                                  			ret							;return
  2247                                  ;-----------------------------------------------------------------------------------------------------------------------
  2248                                  ;
  2249                                  ;	Routine:	PutSecondaryEndOfInt
  2250                                  ;
  2251                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2255                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2256                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2257                                  			ret							;return
  2258                                  ;-----------------------------------------------------------------------------------------------------------------------
  2259                                  ;
  2260                                  ;	End of the Kernel Function Library
  2261                                  ;
  2262                                  ;-----------------------------------------------------------------------------------------------------------------------
  2263                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  2264                                  			db	055h,0AAh					;end of segment
  2265                                  ;=======================================================================================================================
  2266                                  ;
  2267                                  ;	Console Task
  2268                                  ;
  2269                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2270                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2271                                  ;	screen and responds to user commands.
  2272                                  ;
  2273                                  ;=======================================================================================================================
  2274                                  ;-----------------------------------------------------------------------------------------------------------------------
  2275                                  ;
  2276                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2277                                  ;
  2278                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2279                                  ;
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281                                  section			constack						;console task stack
  2282                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  2283                                  ;-----------------------------------------------------------------------------------------------------------------------
  2284                                  ;
  2285                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2286                                  ;
  2287                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2288                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2289                                  ;	16 descriptors. Six are initially defined.
  2290                                  ;
  2291                                  ;-----------------------------------------------------------------------------------------------------------------------
  2292                                  section			conldt							;console local descriptors
  2293                                  			dq	004093004780007Fh				;04 TSS alias
  2294                                  			dq	004093004700007Fh				;0C LDT alias
  2295                                  			dq	00409300400006FFh				;14 stack
  2296                                  			dq	00CF93000000FFFFh				;1C data
  2297                                  			dq	00409B0050000FFFh				;24 code
  2298                                  			dq	00409300480007FFh				;2C message queue
  2299                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2300                                  ;-----------------------------------------------------------------------------------------------------------------------
  2301                                  ;
  2302                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2303                                  ;
  2304                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2305                                  ;	segment. CS to console code.
  2306                                  ;
  2307                                  ;-----------------------------------------------------------------------------------------------------------------------
  2308                                  section			contss							;console task state segment
  2309                                  			dd	0						;00 back-link tss
  2310                                  			dd	0700h						;04 esp ring 0
  2311                                  			dd	0014h						;08 ss ring 0
  2312                                  			dd	0700h						;0C esp ring 1
  2313                                  			dd	0014h						;10 es ring 1
  2314                                  			dd	0700h						;14 esp ring 2
  2315                                  			dd	0014h						;18 ss ring 2
  2316                                  			dd	0						;1C cr ring 3
  2317                                  			dd	0						;20 eip
  2318                                  			dd	0200h						;24 eflags
  2319                                  			dd	0						;28 eax
  2320                                  			dd	0						;2C ecx
  2321                                  			dd	0						;30 edx
  2322                                  			dd	0						;34 ebx
  2323                                  			dd	0700h						;38 esp ring 3
  2324                                  			dd	0						;3C ebp
  2325                                  			dd	0						;40 esi
  2326                                  			dd	0						;44 edi
  2327                                  			dd	001Ch						;48 es
  2328                                  			dd	0024h						;4C cs
  2329                                  			dd	0014h						;50 ss ring 3
  2330                                  			dd	001Ch						;54 ds
  2331                                  			dd	0						;58 fs
  2332                                  			dd	0						;5c gs
  2333                                  			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  2334                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2335                                  ;-----------------------------------------------------------------------------------------------------------------------
  2336                                  ;
  2337                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2338                                  ;
  2339                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2340                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2341                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2342                                  ;	event.
  2343                                  ;
  2344                                  ;-----------------------------------------------------------------------------------------------------------------------
  2345                                  section			conmque							;console message queue
  2346                                  			dd	8						;head pointer
  2347                                  			dd	8						;tail pointer
  2348                                  			times	510 dd 0					;queue elements
  2349                                  ;-----------------------------------------------------------------------------------------------------------------------
  2350                                  ;
  2351                                  ;	Console Code								@disk: 008400	@mem: 005000
  2352                                  ;
  2353                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2354                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2355                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2356                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2357                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2358                                  ;	board input, echoing to the console screen and responding to user commands.
  2359                                  ;
  2360                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2361                                  ;
  2362                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2363                                  ;				|  Real Mode Interrupt Vectors			|
  2364                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2365                                  ;				|  Reserved BIOS Memory Area			|
  2366                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2367                                  ;				|  Shared Kernel Memory Area			|
  2368                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2369                                  ;				|  Global Descriptor Table (GDT)		|
  2370                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2371                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2372                                  ;			002000	+-----------------------------------------------+
  2373                                  ;				|  Interrupt Handlers				|
  2374                                  ;				|  Kernel Function Library			|
  2375                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2376                                  ;				|  Console Task Stack Area			|
  2377                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2378                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2379                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2380                                  ;				|  Console Task Task State Segment (TSS)	|
  2381                                  ;			004800	+-----------------------------------------------+
  2382                                  ;				|  Console Task Message Queue			|
  2383                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2384                                  ;				|  Console Task Code				|
  2385                                  ;				|  Console Task Constants			|
  2386                                  ;			006000	+===============================================+
  2387                                  ;
  2388                                  ;-----------------------------------------------------------------------------------------------------------------------
  2389                                  section			concode	vstart=05000h					;labels relative to 5000h
  2390                                  ConCode			call	ConInitializeData				;initialize console variables
  2391                                  
  2392                                  			putConsoleString czTitle				;display startup message
  2393                                  .10			putConsoleString czPrompt				;display input prompt
  2394                                  			placeCursor						;set CRT cursor location
  2395                                  
  2396                                  .20			sti							;enable interrupts
  2397                                  			hlt							;halt until interrupt
  2398                                  			jmp	.20						;continue halt loop
  2399                                  ;-----------------------------------------------------------------------------------------------------------------------
  2400                                  ;
  2401                                  ;	Routine:	ConInitializeData
  2402                                  ;
  2403                                  ;	Description:	This routine initializes console task variables.
  2404                                  ;
  2405                                  ;-----------------------------------------------------------------------------------------------------------------------
  2406                                  ConInitializeData	push	ecx						;save non-volatile regs
  2407                                  			push	edi						;
  2408                                  			push	es						;
  2409                                  ;
  2410                                  ;	Initialize console work areas
  2411                                  ;
  2412                                  			push	ESELDAT						;load OS data selector ...
  2413                                  			pop	es						;... into extra segment register
  2414                                  			mov	edi,ECONDATA					;OS console data address
  2415                                  			xor	al,al						;initialization value
  2416                                  			mov	ecx,ECONDATALEN					;size of OS console data
  2417                                  			cld							;forward strings
  2418                                  			rep	stosb						;initialize data
  2419                                  			mov	byte [wbConsoleRow],5				;avoid overwriting loader messages
  2420                                  ;
  2421                                  ;	Restore and return
  2422                                  ;
  2423                                  			pop	es						;restore non-volatile regs
  2424                                  			pop	edi						;
  2425                                  			pop	ecx						;
  2426                                  			ret							;return
  2427                                  ;-----------------------------------------------------------------------------------------------------------------------
  2428                                  ;
  2429                                  ;	Constants
  2430                                  ;
  2431                                  ;-----------------------------------------------------------------------------------------------------------------------
  2432                                  czNewLine		db	13,10,0						;new line string
  2433                                  czPrompt		db	":",0						;prompt string
  2434                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  2435                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  2436                                  			db	055h,0AAh					;end of section
  2437                                  %endif
  2438                                  %ifdef BUILDDISK
  2439                                  ;-----------------------------------------------------------------------------------------------------------------------
  2440                                  ;
  2441                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  2442                                  ;
  2443                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2444                                  ;
  2445                                  ;-----------------------------------------------------------------------------------------------------------------------
  2446                                  section			unused							;unused disk space
  2447                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  2448                                  %endif
  2449                                  ;=======================================================================================================================
  2450                                  ;
  2451                                  ;	End of Program Code
  2452                                  ;
  2453                                  ;=======================================================================================================================
