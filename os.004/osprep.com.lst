     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.004
     6                                  ;
     7                                  ;       Description:    In this sample program, the loader is expanded to validate the CPU type and place the CPU into
     8                                  ;                       protected mode.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;
   165                                  ;=======================================================================================================================
   166                                  ;-----------------------------------------------------------------------------------------------------------------------
   167                                  ;
   168                                  ;       Hardware-Defined Values
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;
   173                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   174                                  ;
   175                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   176                                  ;       for CGA, EGA, VGA and compatible video modes.
   177                                  ;
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   180                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   181                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   182                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   183                                  ;-----------------------------------------------------------------------------------------------------------------------
   184                                  ;
   185                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   186                                  ;
   187                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   188                                  ;
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   191                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   192                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   193                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   194                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  ;
   197                                  ;       8042 Keyboard Controller                                                EKEYB...
   198                                  ;
   199                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   200                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   201                                  ;
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   204                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   208                                  ;
   209                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   210                                  ;       external devices and signals a hardware interrupt to the CPU.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   214                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   215                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   216                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   217                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   218                                  ;-----------------------------------------------------------------------------------------------------------------------
   219                                  ;
   220                                  ;       8253 Programmable Interval Timer                                        EPIT...
   221                                  ;
   222                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   223                                  ;       approximately 18.2 times per second.
   224                                  ;
   225                                  ;-----------------------------------------------------------------------------------------------------------------------
   226                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  ;
   229                                  ;       x86 CPU Architecture                                                    ;EX86...
   230                                  ;
   231                                  ;-----------------------------------------------------------------------------------------------------------------------
   232                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;
   235                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   236                                  ;
   237                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   238                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   239                                  ;
   240                                  ;       0.......        Segment is not present in memory (triggers int 11)
   241                                  ;       1.......        Segment is present in memory
   242                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   243                                  ;       ...0....        Segment is a system segment
   244                                  ;       ...00010                Local Descriptor Table
   245                                  ;       ...00101                Task Gate
   246                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   247                                  ;       ...01100                Call Gate (386)
   248                                  ;       ...01110                Interrupt Gate (386)
   249                                  ;       ...01111                Trap Gate (386)
   250                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   251                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   252                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   256                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   257                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   258                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   259                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   260                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   261                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   262                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       Firmware-Defined Values
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   271                                  ;
   272                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   273                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   277                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   278                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   279                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   280                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   281                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   282                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   283                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   284                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   285                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   286                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  ;
   289                                  ;       Standards-Based Values
   290                                  ;
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       ASCII                                                                   EASCII...
   295                                  ;
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   298                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   299                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;       Operating System Values
   303                                  ;
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;
   307                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   308                                  ;
   309                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   310                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   314                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   315                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   316                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   317                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   318                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   319                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;       Console Constants                                                       ECON...
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ECONCOLS                equ     80                                              ;columns per row
   324                                  ECONROWS                equ     24                                              ;console rows
   325                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   326                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   327                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   328                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   329                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   334                                  EGDTCGA                 equ     020h                                            ;cga video selector
   335                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   336                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   337                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   338                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   339                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   340                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;       Kernel Constants                                                        EKRN...
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   345                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   346                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   347                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   348                                  ;=======================================================================================================================
   349                                  ;
   350                                  ;       Structures
   351                                  ;
   352                                  ;=======================================================================================================================
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       OSDATA
   356                                  ;
   357                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   358                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  struc                   OSDATA
   362 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   363 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   364 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   365 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   366 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   367 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   368 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   369 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   370 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   371 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   372 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   373 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   374 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   375 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   376 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   377 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   378 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   379 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   380 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   381 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   382 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   383 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   384 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   385 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   386 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   387 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   388 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   389 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   390 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   391 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   392 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   393 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   394 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   395 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   396 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   397 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   398 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   399 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   400 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   401 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   402 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   403 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   404 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   405 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   406 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   407 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   408 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   409 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   410 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   411 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   412 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   413 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   414 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   415 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   416 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   417 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   418 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   419 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   420 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   421 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   422 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   423 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   424 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   425 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   426 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   427 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   428 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   429 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   430 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   431 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   432 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   433 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   434 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   435 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   436 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   437 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   438 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   439 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   440 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   441 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   442 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   443 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   444 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   445 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   446 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   447 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   448 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   449 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   450 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   451 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   452 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   453 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   454 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   455 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   456 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   457 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   458 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   459 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   460 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   461 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   462 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  ;
   465                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   466                                  ;
   467                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   468                                  ;
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  ECONDATA                equ     ($)
   471 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   472 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   473                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ;
   476                                  ;       End of OS Variables
   477                                  ;
   478                                  ;-----------------------------------------------------------------------------------------------------------------------
   479                                  endstruc
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  ;
   482                                  ;       Macros
   483                                  ;
   484                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   485                                  ;
   486                                  ;-----------------------------------------------------------------------------------------------------------------------
   487                                  %macro                  mint    1
   488                                  _%1                     equ     ($-$$) / EX86DESCLEN
   489                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   490                                  %endmacro
   491                                  %macro                  mtrap   1
   492                                  _%1                     equ     ($-$$) / EX86DESCLEN
   493                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   494                                  %endmacro
   495                                  %macro                  menter  1
   496                                  ?%1                     equ     ($-$$)
   497                                  %endmacro
   498                                  %macro                  tsvce   1
   499                                  e%1                     equ     ($-tsvc)/4
   500                                                          dd      %1
   501                                  %endmacro
   502                                  %ifdef BUILDBOOT
   503                                  ;=======================================================================================================================
   504                                  ;
   505                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   506                                  ;
   507                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   508                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   509                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   510                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   511                                  ;
   512                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   513                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   514                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   515                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   516                                  ;       immediately followed by a disk parameter table.
   517                                  ;
   518                                  ;=======================================================================================================================
   519                                                          cpu     8086                                            ;assume minimal CPU
   520                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   521                                                          bits    16                                              ;16-bit code at power-up
   522                                  %ifdef BUILDPREP
   523 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   524                                  %else
   525                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   526                                  %endif
   527                                  ;-----------------------------------------------------------------------------------------------------------------------
   528                                  ;
   529                                  ;       Disk Parameter Table
   530                                  ;
   531                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   532                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   533                                  ;
   534                                  ;-----------------------------------------------------------------------------------------------------------------------
   535 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   536 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   537 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   538 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   539 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   540 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   541 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   542 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   543 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   544                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   545 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   546 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   547 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   548                                  ;
   549                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   550                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   551                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   552                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   553                                  ;       given several possible starting values for CS:IP.
   554                                  ;
   555                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   556 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   557                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   558 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   559 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   560 00000025 B104                                            mov     cl,4                                            ;shift count
   561 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   562 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   563 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   564                                  ;
   565                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   566                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   567                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   568                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   569                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   570                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   571                                  ;
   572 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   573 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   574 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   575 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   576 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   577                                  ;
   578                                  ;       Our boot addressability is now set up according to the following diagram.
   579                                  ;
   580                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   581                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   582                                  ;                               |  256 = 100h bytes                             |
   583                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   584                                  ;                               |  Boot Sector (vstart=0100h)                   |
   585                                  ;                               |  1 sector = 512 = 200h bytes                  |
   586                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   587                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   588                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   589                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   590                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   591                                  ;                               |  2 sectors = 1024 = 400h bytes
   592                                  ;                       009400  +-----------------------------------------------+ DS:1900
   593                                  ;
   594                                  ;       On entry, DL indicates the drive being booted from.
   595                                  ;
   596 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   597                                  ;
   598                                  ;       Compute directory i/o buffer address.
   599                                  ;
   600 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   601 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   602 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   603 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   604                                  ;
   605                                  ;       Compute segment where os.com will be loaded.
   606                                  ;
   607 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   608 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   609 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   610 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   611                                  ;
   612                                  ;       Set the video mode to 80 column, 25 row, text.
   613                                  ;
   614 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   615 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   616                                  ;
   617                                  ;       Write a message to the console so we know we have our addressability established.
   618                                  ;
   619 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   620 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   621                                  ;
   622                                  ;       Initialize the number of directory sectors to search.
   623                                  ;
   624 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   625 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   626                                  ;
   627                                  ;       Compute number of directory sectors and initialize overhead count.
   628                                  ;
   629 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   630 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   631 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   632 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   633                                  ;
   634                                  ;       Compute directory entries per sector.
   635                                  ;
   636 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   637 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   638 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   639                                  ;
   640                                  ;       Compute first logical directory sector and update overhead count.
   641                                  ;
   642 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   643 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   644 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   645 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   646 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   647 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   648                                  ;
   649                                  ;       Read directory sector.
   650                                  ;
   651 0000008E B001                    .30                     mov     al,1                                            ;sector count
   652 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   653 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   654 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   655                                  ;
   656                                  ;       Setup variables to search this directory sector.
   657                                  ;
   658 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   659 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   660 000000A1 7603                                            jna     .40                                             ;no, continue
   661 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   662 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   663 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   664 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   665                                  ;
   666                                  ;       Loop through directory sectors searching for kernel program.
   667                                  ;
   668 000000B1 56                      .50                     push    si                                              ;save kernel name address
   669 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   670 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   671 000000B6 FC                                              cld                                                     ;forward strings
   672 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   673 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   674 000000BA 5E                                              pop     si                                              ;restore kernel name address
   675 000000BB 7418                                            je      .60                                             ;exit loop if found
   676 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   677 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   678 000000C2 75ED                                            jnz     .50                                             ;next entry
   679                                  ;
   680                                  ;       Repeat search if we are not at the end of the directory.
   681                                  ;
   682 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   683 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   684 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   685 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   686 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   687                                  ;
   688                                  ;       If we find the kernel program in the directory, read the FAT.
   689                                  ;
   690 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   691 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   692 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   693 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   694 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   695 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   696                                  ;
   697                                  ;       Get the starting cluster of the kernel program and target address.
   698                                  ;
   699 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   700 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   701                                  ;
   702                                  ;       Read each program cluster into RAM.
   703                                  ;
   704 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   705 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   706 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   707 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   708 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   709 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   710 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   711 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   712 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   713                                  ;
   714                                  ;       Update buffer pointer for next cluster.
   715                                  ;
   716 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   717 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   718 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   719 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   720 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   721                                  ;
   722                                  ;       Compute next cluster number.
   723                                  ;
   724 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   725 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   726 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   727 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   728 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   729 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   730 00000120 83E701                                          and     di,1                                            ;get low bit
   731 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   732 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   733 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   734                                  ;
   735                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   736                                  ;
   737 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   738 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   739 00000130 B104                                            mov     cl,4                                            ;shift count
   740 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   741 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   742 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   743 0000013A 75B2                                            jne     .70                                             ;no, continue
   744                                  ;
   745                                  ;       Transfer control to the operating system program.
   746                                  ;
   747 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   748 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   749 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   750                                  ;
   751                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   752                                  ;
   753 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   754 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   755 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   756 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   757 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   758 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   759 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   760 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   761 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   762 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   763                                  ;
   764                                  ;       Try maxtries times to read sector.
   765                                  ;
   766 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   767 00000160 53                      .10                     push    bx                                              ;save buffer address
   768 00000161 51                                              push    cx                                              ;save retry count
   769 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   770 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   771 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   772 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   773 0000016F 59                                              pop     cx                                              ;restore retry count
   774 00000170 5B                                              pop     bx                                              ;restore buffer address
   775 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   776 00000173 E2EB                                            loop    .10                                             ;retry
   777                                  ;
   778                                  ;       Handle disk error: convert to ASCII and store in error string.
   779                                  ;
   780 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   781 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   782 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   783 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   784 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   785 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   786 00000183 7203                                            jb      .20                                             ;continue if numeral
   787 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   788 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   789 0000018A 7203                                            jb      .30                                             ;continue if numeral
   790 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   791 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   792 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   793 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   794                                  ;
   795                                  ;       Wait for a key press.
   796                                  ;
   797 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   798 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   799 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   800 0000019E FB                                              sti                                                     ;enable maskable interrupts
   801 0000019F F4                                              hlt                                                     ;wait for interrupt
   802 000001A0 EBF6                                            jmp     .10                                             ;repeat
   803                                  ;
   804                                  ;       Reset the system.
   805                                  ;
   806 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   807 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   808 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   809 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   810 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   811                                  ;
   812                                  ;       Display text message.
   813                                  ;
   814 000001AA FC                      BootPrint               cld                                                     ;forward strings
   815 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   816 000001AC 84C0                                            test    al,al                                           ;end of string?
   817 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   818 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   819 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   820 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   821 000001B6 C3                      BootReturn              ret                                                     ;return
   822                                  ;-----------------------------------------------------------------------------------------------------------------------
   823                                  ;
   824                                  ;       Constants
   825                                  ;
   826                                  ;-----------------------------------------------------------------------------------------------------------------------
   827 000001B7 90                                              align   2
   828 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   829 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   829 000001C3 4F4D               
   830 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   830 000001CE 530D0A00           
   831 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   831 000001DB 7220               
   832 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   833 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   833 000001E9 6700               
   834                                  ;-----------------------------------------------------------------------------------------------------------------------
   835                                  ;
   836                                  ;       Work Areas
   837                                  ;
   838                                  ;-----------------------------------------------------------------------------------------------------------------------
   839 000001EB 90                                              align   2
   840 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   841 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   842 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   843 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   844 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   845                                  wwReadCountCommand      equ     $                                               ;read count and command
   846 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   847 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   848                                  wwDriveHead             equ     $                                               ;drive, head (word)
   849 000001F8 00                      wbDrive                 db      0                                               ;drive
   850 000001F9 00                      wbHead                  db      0                                               ;head
   851                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   852 000001FA 00                                              db      0                                               ;sector
   853 000001FB 00                      wbTrack                 db      0                                               ;track
   854 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   855 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   856                                  %endif
   857                                  %ifdef BUILDPREP
   858                                  ;=======================================================================================================================
   859                                  ;
   860                                  ;       Diskette Preparation Code
   861                                  ;
   862                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   863                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   864                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   865                                  ;
   866                                  ;=======================================================================================================================
   867                                  ;
   868                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   869                                  ;
   870 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   871 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   872                                  ;
   873                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   874                                  ;
   875 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   876 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   877 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   878 0000020C FB                                              sti                                                     ;enable interrupts
   879 0000020D F4                                              hlt                                                     ;wait for interrupt
   880 0000020E EBF6                                            jmp     .10                                             ;repeat
   881 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   882 00000212 7407                                            je      .30                                             ;yes, branch
   883 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   884 00000216 75EE                                            jne     .10                                             ;no, repeat
   885 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
   886                                  ;
   887                                  ;       Display writing-sector message and patch the JMP instruction.
   888                                  ;
   889 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   890 0000021E E889FF                                          call    BootPrint                                       ;display message
   891 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   892 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   893 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   894                                  ;
   895                                  ;       Try to read the boot sector.
   896                                  ;
   897 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   898 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   899 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   900 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   901 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
   902 00000236 B001                                            mov     al,1                                            ;one sector
   903 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
   904 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
   905 0000023C 59                                              pop     cx                                              ;restore remaining retries
   906 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
   907 0000023F E2EB                                            loop    .40                                             ;try again
   908 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
   909 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
   910                                  ;
   911                                  ;       Copy diskette parms from input buffer to output buffer.
   912                                  ;
   913 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   914 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
   915 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
   916 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
   917 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
   918 00000255 FC                                              cld                                                     ;forward string copies
   919 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
   920                                  ;
   921                                  ;       Try to write boot sector to diskette.
   922                                  ;
   923 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   924 0000025B 51                      .60                     push    cx                                              ;save remaining tries
   925 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
   926 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
   927 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
   928 00000265 B001                                            mov     al,1                                            ;one sector
   929 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
   930 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
   931 0000026B 59                                              pop     cx                                              ;restore remaining retries
   932 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
   933 0000026E E2EB                                            loop    .60                                             ;try again
   934 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
   935                                  ;
   936                                  ;       Convert the error code to ASCII and display the error message.
   937                                  ;
   938 00000273 50                      .70                     push    ax                                              ;save error code
   939 00000274 88E0                                            mov     al,ah                                           ;copy error code
   940 00000276 B400                                            mov     ah,0                                            ;AX = error code
   941 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
   942 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
   943 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
   944 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
   945 00000282 7203                                            jb      .80                                             ;yes, continue
   946 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
   947 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
   948 00000289 7202                                            jb      .90                                             ;yes, continue
   949 0000028B 0407                                            add     al,7                                            ;no, make ASCII
   950 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
   951 00000290 E817FF                                          call    BootPrint                                       ;write error message
   952 00000293 58                                              pop     ax                                              ;restore error code
   953                                  ;
   954                                  ;       Display the completion message.
   955                                  ;
   956 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
   957 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
   958 00000299 3C00                                            cmp     al,0                                            ;success?
   959 0000029B 7426                                            je      .110                                            ;yes, continue
   960 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
   961 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
   962 000002A2 741F                                            je      .110                                            ;yes, continue
   963 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
   964 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
   965 000002A9 7418                                            je      .110                                            ;yes, continue
   966 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
   967 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
   968 000002B0 7411                                            je      .110                                            ;yes, continue
   969 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
   970 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
   971 000002B7 740A                                            je      .110                                            ;yes, continue
   972 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
   973 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
   974 000002BE 7403                                            je      .110                                            ;yes, continue
   975 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
   976 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
   977 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
   978 000002C9 CD21                                            int     021h                                            ;terminate DOS program
   979 000002CB C3                                              ret                                                     ;return (should not execute)
   980                                  ;-----------------------------------------------------------------------------------------------------------------------
   981                                  ;
   982                                  ;       Diskette Preparation Messages
   983                                  ;
   984                                  ;-----------------------------------------------------------------------------------------------------------------------
   985 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
   985 000002D5 5320426F6F742D4469-
   985 000002DE 736B65747465205072-
   985 000002E7 657061726174696F6E-
   985 000002F0 2050726F6772616D   
   986 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
   986 00000301 687420284329203230-
   986 0000030A 31302D323031382044-
   986 00000313 61766964204A2E2057-
   986 0000031C 616C6C696E672E2041-
   986 00000325 6C6C20726967687473-
   986 0000032E 207265736572766564-
   986 00000337 2E                 
   987 00000338 0D0A                                            db      13,10
   988 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
   988 00000343 6F6772616D206F7665-
   988 0000034C 727772697465732074-
   988 00000355 686520626F6F742073-
   988 0000035E 6563746F72206F6620-
   988 00000367 61206469736B657474-
   988 00000370 652077697468207374-
   988 00000379 617274757020636F64-
   988 00000382 652074686174       
   989 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
   989 00000391 616420746865206F70-
   989 0000039A 65726174696E672073-
   989 000003A3 797374656D20696E74-
   989 000003AC 6F206D656D6F727920-
   989 000003B5 7768656E2074686520-
   989 000003BE 636F6D707574657220-
   989 000003C7 697320726573746172-
   989 000003D0 7465642E           
   990 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   990 000003DD 6565642C20706C6163-
   990 000003E6 65206120666F726D61-
   990 000003EF 74746564206469736B-
   990 000003F8 6574746520696E746F-
   990 00000401 20647269766520413A-
   990 0000040A 20616E642070726573-
   990 00000413 732074686520456E74-
   990 0000041C 6572206B65792E     
   991 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
   991 0000042C 20746869732070726F-
   991 00000435 6772616D2077697468-
   991 0000043E 6F7574207072657061-
   991 00000447 72696E672061206469-
   991 00000450 736B657474652C2070-
   991 00000459 726573732074686520-
   991 00000462 457363617065206B65-
   991 0000046B 792E               
   992 0000046D 0D0A00                                          db      13,10,0
   993 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
   993 00000479 2074686520626F6F74-
   993 00000482 20736563746F722074-
   993 0000048B 6F2074686520646973-
   993 00000494 6B65747465202E2E2E 
   994 0000049D 0D0A00                                          db      13,10,0
   995 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   995 000004A9 6F722D636F6465202E-
   995 000004B2 2E2077617320726574-
   995 000004BB 75726E65642066726F-
   995 000004C4 6D207468652042494F-
   995 000004CD 53207768696C652072-
   995 000004D6 656164696E67206672-
   995 000004DF 6F6D20746865206469-
   995 000004E8 736B2E             
   996 000004EB 0D0A00                                          db      13,10,0
   997 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   997 000004F7 6F722D636F6465202E-
   997 00000500 2E2077617320726574-
   997 00000509 75726E65642066726F-
   997 00000512 6D207468652042494F-
   997 0000051B 53207768696C652077-
   997 00000524 726974696E6720746F-
   997 0000052D 20746865206469736B-
   997 00000536 2E                 
   998 00000537 0D0A00                                          db      13,10,0
   999 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   999 00000543 742D736563746F7220-
   999 0000054C 776173207772697474-
   999 00000555 656E20746F20746865-
   999 0000055E 206469736B65747465-
   999 00000567 2E204265666F726520-
   999 00000570 626F6F74696E672079-
   999 00000579 6F757220636F6D7075-
   999 00000582 7465722077697468   
  1000 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1000 00000593 736B657474652C206D-
  1000 0000059C 616B65207375726520-
  1000 000005A5 746861742074686520-
  1000 000005AE 66696C65204F532E43-
  1000 000005B7 4F4D20697320636F70-
  1000 000005C0 696564206F6E746F20-
  1000 000005C9 746865206469736B65-
  1000 000005D2 7474652E           
  1001 000005D6 0D0A00                                          db      13,10,0
  1002 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1002 000005E2 76616C696420446973-
  1002 000005EB 6B20506172616D6574-
  1002 000005F4 6572               
  1003 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1003 000005FF 20616E20696E746572-
  1003 00000608 6E616C206572726F72-
  1003 00000611 206361757365642062-
  1003 0000061A 7920616E20696E7661-
  1003 00000623 6C69642076616C7565-
  1003 0000062C 206265696E67207061-
  1003 00000635 7373656420746F2061-
  1003 0000063E 2073797374656D     
  1004 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1004 0000064E 6E2E20546865204F53-
  1004 00000657 424F4F542E434F4D20-
  1004 00000660 66696C65206D617920-
  1004 00000669 626520636F72727570-
  1004 00000672 742E20436F7079206F-
  1004 0000067B 7220646F776E6C6F61-
  1004 00000684 64207468652066696C-
  1004 0000068D 6520616761696E     
  1005 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1005 0000069D 72792E             
  1006 000006A0 0D0A00                                          db      13,10,0
  1007 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1007 000006AC 6472657373204D6172-
  1007 000006B5 6B204E6F7420466F75-
  1007 000006BE 6E64               
  1008 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1008 000006C9 726F7220696E646963-
  1008 000006D2 617465732061207068-
  1008 000006DB 79736963616C207072-
  1008 000006E4 6F626C656D20776974-
  1008 000006ED 682074686520666C6F-
  1008 000006F6 707079206469736B65-
  1008 000006FF 7474652E20506C6561-
  1008 00000708 7365207265747279   
  1009 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1009 00000719 6E6F74686572206469-
  1009 00000722 736B657474652E     
  1010 00000729 0D0A00                                          db      13,10,0
  1011 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1011 00000735 6F7465637465642044-
  1011 0000073E 69736B             
  1012 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1012 0000074A 726F72206973207573-
  1012 00000753 75616C6C7920636175-
  1012 0000075C 736564206279206174-
  1012 00000765 74656D7074696E6720-
  1012 0000076E 746F20777269746520-
  1012 00000777 746F20612077726974-
  1012 00000780 652D70726F74656374-
  1012 00000789 6564206469736B2E   
  1013 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1013 0000079A 686520277772697465-
  1013 000007A3 2D70726F7465637427-
  1013 000007AC 2073657474696E6720-
  1013 000007B5 6F6E20746865206469-
  1013 000007BE 736B206F7220726574-
  1013 000007C7 7279207573696E6720-
  1013 000007D0 7573696E6720616E6F-
  1013 000007D9 74686572206469736B-
  1013 000007E2 2E                 
  1014 000007E3 0D0A00                                          db      13,10,0
  1015 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1015 000007EF 736B65747465205265-
  1015 000007F8 6D6F766564         
  1016 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1016 00000806 726F72206D61792069-
  1016 0000080F 6E6469636174652074-
  1016 00000818 686174207468652066-
  1016 00000821 6C6F70707920646973-
  1016 0000082A 6B6574746520686173-
  1016 00000833 206265656E2072656D-
  1016 0000083C 6F7665642066726F6D-
  1016 00000845 20746865           
  1017 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1017 00000852 652064726976652E20-
  1017 0000085B 4F6E20736F6D652073-
  1017 00000864 797374656D732C2074-
  1017 0000086D 68697320636F646520-
  1017 00000876 6D617920616C736F20-
  1017 0000087F 6F6363757220696620-
  1017 00000888 746865206469736B65-
  1017 00000891 747465206973       
  1018 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1018 000008A0 70726F746563746564-
  1018 000008A9 2E2720506C65617365-
  1018 000008B2 207665726966792074-
  1018 000008BB 686174207468652064-
  1018 000008C4 69736B657474652069-
  1018 000008CD 73206E6F7420777269-
  1018 000008D6 74652D70726F746563-
  1018 000008DF 74656420616E64     
  1019 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1019 000008EF 65726C7920696E7365-
  1019 000008F8 7274656420696E2074-
  1019 00000901 6865206469736B6574-
  1019 0000090A 74652064726976652E 
  1020 00000913 0D0A00                                          db      13,10,0
  1021 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1021 0000091F 6976652054696D6564-
  1021 00000928 204F7574           
  1022 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1022 00000935 726F7220757375616C-
  1022 0000093E 6C7920696E64696361-
  1022 00000947 746573207468617420-
  1022 00000950 6E6F206469736B6574-
  1022 00000959 746520697320696E20-
  1022 00000962 746865206469736B65-
  1022 0000096B 747465206472697665-
  1022 00000974 2E20506C65617365   
  1023 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1023 00000985 726520746861742074-
  1023 0000098E 6865206469736B6574-
  1023 00000997 74652069732070726F-
  1023 000009A0 7065726C7920736561-
  1023 000009A9 74656420696E207468-
  1023 000009B2 652064726976652061-
  1023 000009BB 6E642072657472792E 
  1024 000009C4 0D0A00                                          db      13,10,0
  1025 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1025 000009D0 6B6E6F776E20457272-
  1025 000009D9 6F72               
  1026 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1026 000009E4 6F722D636F64652072-
  1026 000009ED 657475726E65642062-
  1026 000009F6 79207468652042494F-
  1026 000009FF 53206973206E6F7420-
  1026 00000A08 61207265636F676E69-
  1026 00000A11 7A6564206572726F72-
  1026 00000A1A 2E20506C6561736520-
  1026 00000A23 636F6E73756C74     
  1027 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1027 00000A33 6D7075746572277320-
  1027 00000A3C 746563686E6963616C-
  1027 00000A45 207265666572656E63-
  1027 00000A4E 6520666F7220612064-
  1027 00000A57 65736372697074696F-
  1027 00000A60 6E206F662074686973-
  1027 00000A69 206572726F7220636F-
  1027 00000A72 64652E             
  1028 00000A75 0D0A00                                          db      13,10,0
  1029                                  wcPrepInBuf             equ     $
  1030                                  %endif
  1031                                  %ifdef BUILDDISK
  1032                                  ;=======================================================================================================================
  1033                                  ;
  1034                                  ;       File Allocation Tables
  1035                                  ;
  1036                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1037                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1038                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1039                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1040                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1041                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1042                                  ;       the last cluster in the chain.
  1043                                  ;
  1044                                  ;       Every three bytes encode two FAT entries as follows:
  1045                                  ;
  1046                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1047                                  ;
  1048                                  ;=======================================================================================================================
  1049                                  ;-----------------------------------------------------------------------------------------------------------------------
  1050                                  ;
  1051                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1052                                  ;
  1053                                  ;-----------------------------------------------------------------------------------------------------------------------
  1054                                  section                 fat1                                                    ;first copy of FAT
  1055                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1056                                                          db      005h,060h,000h, 007h,080h,000h
  1057                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1058                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1059                                                          db      011h,020h,001h, 013h,040h,001h
  1060                                                          db      015h,060h,001h, 017h,080h,001h
  1061                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1062                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1063                                                          db      021h,020h,002h, 023h,040h,002h
  1064                                                          db      025h,060h,002h, 027h,080h,002h
  1065                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1066                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1067                                  ;-----------------------------------------------------------------------------------------------------------------------
  1068                                  ;
  1069                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1070                                  ;
  1071                                  ;-----------------------------------------------------------------------------------------------------------------------
  1072                                  section                 fat2                                                    ;second copy of FAT
  1073                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1074                                                          db      005h,060h,000h, 007h,080h,000h
  1075                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1076                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1077                                                          db      011h,020h,001h, 013h,040h,001h
  1078                                                          db      015h,060h,001h, 017h,080h,001h
  1079                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1080                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1081                                                          db      021h,020h,002h, 023h,040h,002h
  1082                                                          db      025h,060h,002h, 027h,080h,002h
  1083                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1084                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1085                                  ;-----------------------------------------------------------------------------------------------------------------------
  1086                                  ;
  1087                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1088                                  ;
  1089                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1090                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1091                                  ;       copy.
  1092                                  ;
  1093                                  ;-----------------------------------------------------------------------------------------------------------------------
  1094                                  section                 dir                                                     ;diskette directory
  1095                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1096                                                          db      020h                                            ;attribute (archive bit set)
  1097                                                          times   10 db 0                                         ;unused
  1098                                                          dw      0h                                              ;time
  1099                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1100                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1101                                                          dw      2                                               ;first cluster
  1102                                                          dd      05400h                                          ;file size
  1103                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1104                                  %endif
  1105                                  %ifdef BUILDCOM
  1106                                  ;=======================================================================================================================
  1107                                  ;
  1108                                  ;       OS.COM
  1109                                  ;
  1110                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1111                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1112                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1113                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1114                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1115                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1116                                  ;
  1117                                  ;       Our loader addressability is set up according to the following diagram.
  1118                                  ;
  1119                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1120                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1121                                  ;                               |  256 = 100h bytes                             |
  1122                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1123                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1124                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1125                                  ;                       007e00  +-----------------------------------------------+
  1126                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1127                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1128                                  ;                               |                                               |
  1129                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1130                                  ;                               |                                               |
  1131                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1132                                  ;                               |  Loader Code                                  |
  1133                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1134                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1135                                  ;
  1136                                  ;=======================================================================================================================
  1137                                  ;-----------------------------------------------------------------------------------------------------------------------
  1138                                  ;
  1139                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1140                                  ;
  1141                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1142                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1143                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1144                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1145                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1146                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1147                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1148                                  ;       registers.
  1149                                  ;
  1150                                  ;-----------------------------------------------------------------------------------------------------------------------
  1151                                                          cpu     8086                                            ;assume minimal CPU
  1152                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1153                                                          bits    16                                              ;this is 16-bit code
  1154                                  Loader                  push    cs                                              ;use the code segment
  1155                                                          pop     ds                                              ;...as our data segment
  1156                                                          push    cs                                              ;use the code segment
  1157                                                          pop     es                                              ;...as our extra segment
  1158                                  ;
  1159                                  ;       Write a message to the console so we know we have our addressability established.
  1160                                  ;
  1161                                                          mov     si,czStartingMsg                                ;starting message
  1162                                                          call    PutTTYString                                    ;display loader message
  1163                                  ;
  1164                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1165                                  ;
  1166                                                          call    GetCPUType                                      ;AL = cpu type
  1167                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1168                                                          cmp     al,3                                            ;80386+?
  1169                                                          jb      LoaderExit                                      ;no, exit with error message
  1170                                                          cpu     386                                             ;allow 80386 instructions
  1171                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1172                                                          call    PutTTYString                                    ;display message
  1173                                  ;
  1174                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1175                                  ;
  1176                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1177                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1178                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1179                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1180                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1181                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1182                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1183                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1184                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1185                                                          call    PutTTYString                                    ;display message
  1186                                  ;
  1187                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1188                                  ;
  1189                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1190                                                          pop     es                                              ;... as target segment
  1191                                                          xor     di,di                                           ;ES:DI = target address
  1192                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1193                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1194                                                          cld                                                     ;forward strings
  1195                                                          rep     movsb                                           ;copy kernel image
  1196                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1197                                                          call    PutTTYString                                    ;display message
  1198                                  ;
  1199                                  ;       Switch to protected mode.
  1200                                  ;
  1201                                                          xor     si,si                                           ;ES:SI = gdt addr
  1202                                                          mov     ss,si                                           ;protected mode ss
  1203                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1204                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1205                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1206                                                          mov     dx,001Fh                                        ;outer delay loop count
  1207                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1208                                                          loop    $                                               ;wait out pending interrupts
  1209                                                          dec     dx                                              ;restore outer loop count
  1210                                                          jnz     .10                                             ;continue outer loop
  1211                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1212                                  ;
  1213                                  ;       Enable hardware and maskable interrupts.
  1214                                  ;
  1215                                                          xor     al,al                                           ;enable all registers code
  1216                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1217                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1218                                                          sti                                                     ;enable maskable interrupts
  1219                                  ;
  1220                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1221                                  ;
  1222                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1223                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1224                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1225                                  ;-----------------------------------------------------------------------------------------------------------------------
  1226                                  ;
  1227                                  ;       Routine:        LoaderExit
  1228                                  ;
  1229                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1230                                  ;
  1231                                  ;       In:             DS:SI   string address
  1232                                  ;
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  LoaderExit              call    PutTTYString                                    ;display error message
  1235                                  ;
  1236                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1237                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1238                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1239                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1240                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1241                                  ;
  1242                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1243                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1244                                                          jnz     .40                                             ;exit if key pressed
  1245                                                          sti                                                     ;enable maskable interrupts
  1246                                                          hlt                                                     ;wait for interrupt
  1247                                                          jmp     .30                                             ;repeat until keypress
  1248                                  ;
  1249                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1250                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1251                                  ;       HLT until the system resets.
  1252                                  ;
  1253                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1254                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1255                                  .50                     sti                                                     ;enable maskable interrupts
  1256                                                          hlt                                                     ;stop until reset, int, nmi
  1257                                                          jmp     .50                                             ;loop until restart kicks in
  1258                                  ;-----------------------------------------------------------------------------------------------------------------------
  1259                                  ;
  1260                                  ;       Routine:        GetCPUType
  1261                                  ;
  1262                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1263                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1264                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1265                                  ;
  1266                                  ;       Out:            AX      0 = 808x, v20, etc.
  1267                                  ;                               1 = 80186
  1268                                  ;                               2 = 80286
  1269                                  ;                               3 = 80386
  1270                                  ;
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272                                  GetCPUType              mov     al,1                                            ;AL = 1
  1273                                                          mov     cl,32                                           ;shift count
  1274                                                          shr     al,cl                                           ;try a 32-bit shift
  1275                                                          or      al,al                                           ;did the shift happen?
  1276                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1277                                                          cpu     186
  1278                                                          push    sp                                              ;save stack pointer
  1279                                                          pop     cx                                              ;...into cx
  1280                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1281                                                          jne     .10                                             ;yes, cpu is 80186
  1282                                                          cpu     286
  1283                                                          inc     ax                                              ;AX = 2
  1284                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1285                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1286                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1287                                                          jz      .10                                             ;yes, cpu is 80286
  1288                                                          inc     ax                                              ;AX = 3
  1289                                  .10                     ret                                                     ;return
  1290                                  ;-----------------------------------------------------------------------------------------------------------------------
  1291                                  ;
  1292                                  ;       Routine:        PutTTYString
  1293                                  ;
  1294                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1295                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1296                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1297                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1298                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1299                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1300                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1301                                  ;                       to LODSB is not needed.
  1302                                  ;
  1303                                  ;       In:             DS:SI   address of string
  1304                                  ;
  1305                                  ;       Out:            DF      0
  1306                                  ;                       ZF      1
  1307                                  ;                       AL      0
  1308                                  ;
  1309                                  ;-----------------------------------------------------------------------------------------------------------------------
  1310                                  PutTTYString            cld                                                     ;forward strings
  1311                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1312                                                          test    al,al                                           ;end of string?
  1313                                                          jz      .20                                             ;... yes, exit our loop
  1314                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1315                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1316                                                          jmp     .10                                             ;repeat until done
  1317                                  .20                     ret                                                     ;return
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;       Loader Data
  1321                                  ;
  1322                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1323                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1324                                  ;
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326                                                          align   2
  1327                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1328                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1329                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1330                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1331                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1332                                                          db      "Please press any key to restart the computer.",13,10,0
  1333                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1334                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1335                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1336                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1337                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1338                                  ;=======================================================================================================================
  1339                                  ;
  1340                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1341                                  ;
  1342                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1343                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1344                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1345                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1346                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1347                                  ;
  1348                                  ;=======================================================================================================================
  1349                                  ;=======================================================================================================================
  1350                                  ;
  1351                                  ;       Kernel Tables
  1352                                  ;
  1353                                  ;=======================================================================================================================
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1357                                  ;
  1358                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1359                                  ;       first descriptor must be all nulls.
  1360                                  ;
  1361                                  ;       6   5         4         3         2         1         0
  1362                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1363                                  ;       ----------------------------------------------------------------
  1364                                  ;       h......hffffmmmma......ab......................bn..............n
  1365                                  ;       00000000                        all areas have base addresses below 2^24
  1366                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1367                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1368                                  ;                   1001                present, ring-0, selector
  1369                                  ;
  1370                                  ;       h...h   hi-order base address (bits 24-31)
  1371                                  ;       ffff    flags
  1372                                  ;       mmmm    hi-order limit (bits 16-19)
  1373                                  ;       a...a   access
  1374                                  ;       b...b   lo-order base address (bits 0-23)
  1375                                  ;       n...n   lo-order limit (bits 0-15)
  1376                                  ;
  1377                                  ;-----------------------------------------------------------------------------------------------------------------------
  1378                                  section                 gdt                                                     ;global descriptor table
  1379                                                          dq      0000000000000000h                               ;00 required null selector
  1380                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1381                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1382                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1383                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1384                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1385                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1386                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1387                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1388                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1389                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1390                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1391                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1392                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1393                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1394                                  ;-----------------------------------------------------------------------------------------------------------------------
  1395                                  ;
  1396                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1397                                  ;
  1398                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1399                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1400                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1401                                  ;
  1402                                  ;       6   5         4         3         2         1         0
  1403                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1404                                  ;       ----------------------------------------------------------------
  1405                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1406                                  ;
  1407                                  ;       h...h   high-order offset (bits 16-31)
  1408                                  ;       P       present (0=unused interrupt)
  1409                                  ;       zz      descriptor privilege level
  1410                                  ;       S       storage segment (must be zero for IDT)
  1411                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1412                                  ;       S...S   handling code selector in GDT
  1413                                  ;       l...l   lo-order offset (bits 0-15)
  1414                                  ;
  1415                                  ;-----------------------------------------------------------------------------------------------------------------------
  1416                                  section                 idt                                                     ;interrupt descriptor table
  1417                                                          mint    dividebyzero                                    ;00 divide by zero
  1418                                                          mint    singlestep                                      ;01 single step
  1419                                                          mint    nmi                                             ;02 non-maskable
  1420                                                          mint    break                                           ;03 break
  1421                                                          mint    into                                            ;04 into
  1422                                                          mint    bounds                                          ;05 bounds
  1423                                                          mint    badopcode                                       ;06 bad op code
  1424                                                          mint    nocoproc                                        ;07 no coprocessor
  1425                                                          mint    doublefault                                     ;08 double-fault
  1426                                                          mint    operand                                         ;09 operand
  1427                                                          mint    badtss                                          ;0a bad TSS
  1428                                                          mint    notpresent                                      ;0b not-present
  1429                                                          mint    stacklimit                                      ;0c stack limit
  1430                                                          mint    protection                                      ;0d general protection fault
  1431                                                          mint    int14                                           ;0e (reserved)
  1432                                                          mint    int15                                           ;0f (reserved)
  1433                                                          mint    coproccalc                                      ;10 (reserved)
  1434                                                          mint    int17                                           ;11 (reserved)
  1435                                                          mint    int18                                           ;12 (reserved)
  1436                                                          mint    int19                                           ;13 (reserved)
  1437                                                          mint    int20                                           ;14 (reserved)
  1438                                                          mint    int21                                           ;15 (reserved)
  1439                                                          mint    int22                                           ;16 (reserved)
  1440                                                          mint    int23                                           ;17 (reserved)
  1441                                                          mint    int24                                           ;18 (reserved)
  1442                                                          mint    int25                                           ;19 (reserved)
  1443                                                          mint    int26                                           ;1a (reserved)
  1444                                                          mint    int27                                           ;1b (reserved)
  1445                                                          mint    int28                                           ;1c (reserved)
  1446                                                          mint    int29                                           ;1d (reserved)
  1447                                                          mint    int30                                           ;1e (reserved)
  1448                                                          mint    int31                                           ;1f (reserved)
  1449                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1450                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1451                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1452                                                          mtrap   com2                                            ;23 IRQ3 com2
  1453                                                          mtrap   com1                                            ;24 IRQ4 com1
  1454                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1455                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1456                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1457                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1458                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1459                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1460                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1461                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1462                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1463                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1464                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1465                                                          mtrap   svc                                             ;30 OS services
  1466                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1467                                  ;=======================================================================================================================
  1468                                  ;
  1469                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1470                                  ;
  1471                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1472                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1473                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1474                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1475                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1476                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1477                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1478                                  ;
  1479                                  ;=======================================================================================================================
  1480                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1481                                                          cpu     386                                             ;allow 80386 instructions
  1482                                                          bits    32                                              ;this is 32-bit code
  1483                                  ;=======================================================================================================================
  1484                                  ;
  1485                                  ;       CPU Interrupt Handlers
  1486                                  ;
  1487                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1488                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1489                                  ;
  1490                                  ;=======================================================================================================================
  1491                                  ;-----------------------------------------------------------------------------------------------------------------------
  1492                                  ;
  1493                                  ;       INT0    Divide By Zero
  1494                                  ;
  1495                                  ;-----------------------------------------------------------------------------------------------------------------------
  1496                                                          menter  dividebyzero                                    ;divide by zero
  1497                                                          push    0                                               ;store interrupt nbr
  1498                                                          push    czIntDivideByZero                               ;store message offset
  1499                                                          jmp     ReportInterrupt                                 ;report interrupt
  1500                                  ;-----------------------------------------------------------------------------------------------------------------------
  1501                                  ;
  1502                                  ;       INT1    Single Step
  1503                                  ;
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                                          menter  singlestep                                      ;single step
  1506                                                          push    1                                               ;store interrupt nbr
  1507                                                          push    czIntSingleStep                                 ;store message offset
  1508                                                          jmp     ReportInterrupt                                 ;report interrupt
  1509                                  ;-----------------------------------------------------------------------------------------------------------------------
  1510                                  ;
  1511                                  ;       INT2    Non-Maskable Interrupt
  1512                                  ;
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                                          menter  nmi                                             ;non-maskable
  1515                                                          push    2                                               ;store interrupt nbr
  1516                                                          push    czIntNonMaskable                                ;store message offset
  1517                                                          jmp     ReportInterrupt                                 ;report interrupt
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519                                  ;
  1520                                  ;       INT3    Break
  1521                                  ;
  1522                                  ;-----------------------------------------------------------------------------------------------------------------------
  1523                                                          menter  break                                           ;break
  1524                                                          push    3                                               ;store interrupt nbr
  1525                                                          push    czIntBreak                                      ;store message offset
  1526                                                          jmp     ReportInterrupt                                 ;report interrupt
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  ;
  1529                                  ;       INT4    Into
  1530                                  ;
  1531                                  ;-----------------------------------------------------------------------------------------------------------------------
  1532                                                          menter  into                                            ;into
  1533                                                          push    4                                               ;store interrupt nbr
  1534                                                          push    czIntInto                                       ;store message offset
  1535                                                          jmp     ReportInterrupt                                 ;report interrupt
  1536                                  ;-----------------------------------------------------------------------------------------------------------------------
  1537                                  ;
  1538                                  ;       INT5    Bounds
  1539                                  ;
  1540                                  ;-----------------------------------------------------------------------------------------------------------------------
  1541                                                          menter  bounds                                          ;bounds
  1542                                                          push    5                                               ;store interrupt nbr
  1543                                                          push    czIntBounds                                     ;store message offset
  1544                                                          jmp     ReportInterrupt                                 ;report interrupt
  1545                                  ;-----------------------------------------------------------------------------------------------------------------------
  1546                                  ;
  1547                                  ;       INT6    Bad Operation Code
  1548                                  ;
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                                          menter  badopcode                                       ;bad opcode interrupt
  1551                                                          push    6                                               ;store interrupt nbr
  1552                                                          push    czIntBadOpCode                                  ;store message offset
  1553                                                          jmp     ReportInterrupt                                 ;report interrupt
  1554                                  ;-----------------------------------------------------------------------------------------------------------------------
  1555                                  ;
  1556                                  ;       INT7    No Coprocessor
  1557                                  ;
  1558                                  ;-----------------------------------------------------------------------------------------------------------------------
  1559                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1560                                                          push    7                                               ;store interrupt nbr
  1561                                                          push    czIntNoCoprocessor                              ;store message offset
  1562                                                          jmp     ReportInterrupt                                 ;report interrupt
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  ;
  1565                                  ;       INT8    Double Fault
  1566                                  ;
  1567                                  ;-----------------------------------------------------------------------------------------------------------------------
  1568                                                          menter  doublefault                                     ;doublefault interrupt
  1569                                                          push    8                                               ;store interrupt nbr
  1570                                                          push    czIntDoubleFault                                ;store message offset
  1571                                                          jmp     ReportInterrupt                                 ;report interrupt
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                  ;
  1574                                  ;       INT9    Operand
  1575                                  ;
  1576                                  ;-----------------------------------------------------------------------------------------------------------------------
  1577                                                          menter  operand                                         ;operand interrupt
  1578                                                          push    9                                               ;store interrupt nbr
  1579                                                          push    czIntOperand                                    ;store message offset
  1580                                                          jmp     ReportInterrupt                                 ;report interrupt
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  ;
  1583                                  ;       INT10   Bad Task State Segment
  1584                                  ;
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586                                                          menter  badtss                                          ;bad TSS interrupt
  1587                                                          push    10                                              ;store interrupt nbr
  1588                                                          push    czIntBadTSS                                     ;store message offset
  1589                                                          jmp     ReportInterrupt                                 ;report interrupt
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;
  1592                                  ;       INT11   Not Present
  1593                                  ;
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                                          menter  notpresent                                      ;not present interrupt
  1596                                                          push    11                                              ;store interrupt nbr
  1597                                                          push    czIntNotPresent                                 ;store message offset
  1598                                                          jmp     ReportInterrupt                                 ;report interrupt
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  ;
  1601                                  ;       INT12   Stack Limit
  1602                                  ;
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                                          menter  stacklimit                                      ;stack limit interrupt
  1605                                                          push    12                                              ;store interrupt nbr
  1606                                                          push    czIntStackLimit                                 ;store message offset
  1607                                                          jmp     ReportInterrupt                                 ;report interrupt
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  ;
  1610                                  ;       INT13   General Protection Fault
  1611                                  ;
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                                          menter  protection                                      ;protection fault interrupt
  1614                                                          push    13                                              ;store interrupt nbr
  1615                                                          push    czIntProtection                                 ;store message offset
  1616                                                          jmp     ReportInterrupt                                 ;report interrupt
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                  ;
  1619                                  ;       INT14   Reserved
  1620                                  ;
  1621                                  ;-----------------------------------------------------------------------------------------------------------------------
  1622                                                          menter  int14                                           ;(reserved)
  1623                                                          push    14                                              ;store interrupt nbr
  1624                                                          push    czIntReserved                                   ;store message offset
  1625                                                          jmp     ReportInterrupt                                 ;report interrupt
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  ;
  1628                                  ;       INT15   Reserved
  1629                                  ;
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                                          menter  int15                                           ;(reserved)
  1632                                                          push    15                                              ;store interrupt nbr
  1633                                                          push    czIntReserved                                   ;store message offset
  1634                                                          jmp     ReportInterrupt                                 ;report interrupt
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                  ;
  1637                                  ;       INT16   Coprocessor Calculation
  1638                                  ;
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                                          menter  coproccalc                                      ;coprocessor calculation
  1641                                                          push    16                                              ;store interrupt nbr
  1642                                                          push    czIntCoprocessorCalc                            ;store message offset
  1643                                                          jmp     ReportInterrupt                                 ;report interrupt
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  ;
  1646                                  ;       INT17   Reserved
  1647                                  ;
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                                          menter  int17                                           ;(reserved)
  1650                                                          push    17                                              ;store interrupt nbr
  1651                                                          push    czIntReserved                                   ;store message offset
  1652                                                          jmp     ReportInterrupt                                 ;report interrupt
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  ;
  1655                                  ;       INT18   Reserved
  1656                                  ;
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                                          menter  int18                                           ;(reserved)
  1659                                                          push    18                                              ;store interrupt nbr
  1660                                                          push    czIntReserved                                   ;store message offset
  1661                                                          jmp     ReportInterrupt                                 ;report interrupt
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  ;
  1664                                  ;       INT19   Reserved
  1665                                  ;
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                                          menter  int19                                           ;(reserved)
  1668                                                          push    19                                              ;store interrupt nbr
  1669                                                          push    czIntReserved                                   ;store message offset
  1670                                                          jmp     ReportInterrupt                                 ;report interrupt
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  ;
  1673                                  ;       INT20   Reserved
  1674                                  ;
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                                          menter  int20                                           ;(reserved)
  1677                                                          push    20                                              ;store interrupt nbr
  1678                                                          push    czIntReserved                                   ;store message offset
  1679                                                          jmp     ReportInterrupt                                 ;report interrupt
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                  ;
  1682                                  ;       INT21   Reserved
  1683                                  ;
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                                          menter  int21                                           ;(reserved)
  1686                                                          push    21                                              ;store interrupt nbr
  1687                                                          push    czIntReserved                                   ;store message offset
  1688                                                          jmp     ReportInterrupt                                 ;report interrupt
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  ;
  1691                                  ;       INT22   Reserved
  1692                                  ;
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                                          menter  int22                                           ;(reserved)
  1695                                                          push    22                                              ;store interrupt nbr
  1696                                                          push    czIntReserved                                   ;store message offset
  1697                                                          jmp     ReportInterrupt                                 ;report interrupt
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                  ;
  1700                                  ;       INT23   Reserved
  1701                                  ;
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                                          menter  int23                                           ;(reserved)
  1704                                                          push    23                                              ;store interrupt nbr
  1705                                                          push    czIntReserved                                   ;store message offset
  1706                                                          jmp     ReportInterrupt                                 ;report interrupt
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  ;
  1709                                  ;       INT24   Reserved
  1710                                  ;
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                                          menter  int24                                           ;(reserved)
  1713                                                          push    24                                              ;store interrupt nbr
  1714                                                          push    czIntReserved                                   ;store message offset
  1715                                                          jmp     ReportInterrupt                                 ;report interrupt
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  ;
  1718                                  ;       INT25   Reserved
  1719                                  ;
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                                          menter  int25                                           ;(reserved)
  1722                                                          push    25                                              ;store interrupt nbr
  1723                                                          push    czIntReserved                                   ;store message offset
  1724                                                          jmp     ReportInterrupt                                 ;report interrupt
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  ;
  1727                                  ;       INT26   Reserved
  1728                                  ;
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                                          menter  int26                                           ;(reserved)
  1731                                                          push    26                                              ;store interrupt nbr
  1732                                                          push    czIntReserved                                   ;store message offset
  1733                                                          jmp     ReportInterrupt                                 ;report interrupt
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  ;
  1736                                  ;       INT27   Reserved
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                                          menter  int27                                           ;(reserved)
  1740                                                          push    27                                              ;store interrupt nbr
  1741                                                          push    czIntReserved                                   ;store message offset
  1742                                                          jmp     ReportInterrupt                                 ;report interrupt
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                  ;
  1745                                  ;       INT28   Reserved
  1746                                  ;
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                                          menter  int28                                           ;(reserved)
  1749                                                          push    28                                              ;store interrupt nbr
  1750                                                          push    czIntReserved                                   ;store message offset
  1751                                                          jmp     ReportInterrupt                                 ;report interrupt
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                  ;
  1754                                  ;       INT29   Reserved
  1755                                  ;
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                                          menter  int29                                           ;(reserved)
  1758                                                          push    29                                              ;store interrupt nbr
  1759                                                          push    czIntReserved                                   ;store message offset
  1760                                                          jmp     ReportInterrupt                                 ;report interrupt
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                  ;
  1763                                  ;       INT30   Reserved
  1764                                  ;
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                                          menter  int30                                           ;(reserved)
  1767                                                          push    30                                              ;store interrupt nbr
  1768                                                          push    czIntReserved                                   ;store message offset
  1769                                                          jmp     ReportInterrupt                                 ;report interrupt
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                  ;
  1772                                  ;       INT31   Reserved
  1773                                  ;
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                                          menter  int31                                           ;(reserved)
  1776                                                          push    31                                              ;store interrupt nbr
  1777                                                          push    czIntReserved                                   ;store message offset
  1778                                                          jmp     ReportInterrupt                                 ;report interrupt
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  ;
  1781                                  ;       Routine:        ReportInterrupt
  1782                                  ;
  1783                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1784                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1785                                  ;
  1786                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1787                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ReportInterrupt         pop     eax                                             ;error message address
  1791                                                          pop     eax                                             ;interrupt number
  1792                                                          iretd                                                   ;return
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;       Processor Interrupt Name Strings
  1796                                  ;
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                  czIntDivideByZero       db      "Division by zero",0
  1799                                  czIntSingleStep         db      "Single step",0
  1800                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1801                                  czIntBreak              db      "Break",0
  1802                                  czIntInto               db      "Into",0
  1803                                  czIntBounds             db      "Bounds",0
  1804                                  czIntBadOpCode          db      "Bad Operation Code",0
  1805                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1806                                  czIntDoubleFault        db      "Double Fault",0
  1807                                  czIntOperand            db      "Operand",0
  1808                                  czIntBadTSS             db      "Bad Task State Segment",0
  1809                                  czIntNotPresent         db      "Not Present",0
  1810                                  czIntStackLimit         db      "Stack Limit",0
  1811                                  czIntProtection         db      "General Protection Fault",0
  1812                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1813                                  czIntReserved           db      "Reserved",0
  1814                                  ;=======================================================================================================================
  1815                                  ;
  1816                                  ;       Hardware Device Interupts
  1817                                  ;
  1818                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1819                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1820                                  ;       (BX=2028h).
  1821                                  ;
  1822                                  ;=======================================================================================================================
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       IRQ0    Clock Tick Interrupt
  1826                                  ;
  1827                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1828                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1829                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1830                                  ;
  1831                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1832                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1833                                  ;
  1834                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1835                                  ;       zero, the floppy disk motors are turned off.
  1836                                  ;
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                                          menter  clocktick                                       ;clock tick interrupt
  1839                                                          push    eax                                             ;save non-volatile regs
  1840                                                          push    edx                                             ;
  1841                                                          push    ds                                              ;
  1842                                  ;
  1843                                  ;       Update the clock tick count and the elapsed days as needed.
  1844                                  ;
  1845                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1846                                                          pop     ds                                              ;... into data segment register
  1847                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1848                                                          inc     eax                                             ;increment clock ticks
  1849                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1850                                                          jb      irq0.10                                         ;no, skip ahead
  1851                                                          inc     byte [wbClockDays]                              ;increment clock days
  1852                                                          xor     eax,eax                                         ;reset clock ticks
  1853                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1854                                  ;
  1855                                  ;       Decrement floppy disk motor timeout.
  1856                                  ;
  1857                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1858                                                          je      irq0.20                                         ;yes, skip ahead
  1859                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1860                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1861                                  ;
  1862                                  ;       Turn off the floppy disk motor if appropriate.
  1863                                  ;
  1864                                                          sti                                                     ;enable maskable interrupts
  1865                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1866                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1867                                                          in      al,dx                                           ;FDC main status byte
  1868                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1869                                                          jnz     irq0.15                                         ;wait while busy
  1870                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1871                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1872                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1873                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1874                                                          out     dx,al                                           ;turn motor off
  1875                                  ;
  1876                                  ;       Signal the end of the hardware interrupt.
  1877                                  ;
  1878                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1879                                  ;
  1880                                  ;       Restore and return.
  1881                                  ;
  1882                                                          pop     ds                                              ;restore modified regs
  1883                                                          pop     edx                                             ;
  1884                                                          pop     eax                                             ;
  1885                                                          iretd                                                   ;return
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       IRQ1    Keyboard Interrupt
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  keyboard                                        ;keyboard interrrupt
  1892                                                          push    eax                                             ;
  1893                                                          jmp     hwint                                           ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                                          menter  iochannel                                       ;secondary 8259A cascade
  1900                                                          push    eax                                             ;save modified regs
  1901                                                          jmp     hwint                                           ;end interrupt and return
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  1905                                  ;
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                                          menter  com2                                            ;serial port 2 interrupt
  1908                                                          push    eax                                             ;save modified regs
  1909                                                          jmp     hwint                                           ;end interrupt and return
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  ;
  1912                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  1913                                  ;
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                                          menter  com1                                            ;serial port 1 interrupt
  1916                                                          push    eax                                             ;save modified regs
  1917                                                          jmp     hwint                                           ;end interrupt and return
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  ;
  1920                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  1921                                  ;
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                                          menter  lpt2                                            ;parallel port 2 interrupt
  1924                                                          push    eax                                             ;save modified regs
  1925                                                          jmp     hwint                                           ;end interrupt and return
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  ;
  1928                                  ;       IRQ6    Diskette Hardware Interrupt
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  diskette                                        ;floppy disk interrupt
  1932                                                          push    eax                                             ;save non-volatile regs
  1933                                                          push    ds                                              ;
  1934                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1935                                                          pop     ds                                              ;... into DS register
  1936                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  1937                                                          or      al,10000000b                                    ;set IRQ flag
  1938                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  1939                                                          pop     ds                                              ;restore non-volatile regs
  1940                                                          jmp     hwint                                           ;end primary PIC interrupt
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                  ;
  1943                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  1944                                  ;
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                                          menter  lpt1                                            ;parallel port 1 interrupt
  1947                                                          push    eax                                             ;save modified regs
  1948                                                          jmp     hwint                                           ;end interrupt and return
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                  ;
  1951                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  1952                                  ;
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                                          menter  rtclock                                         ;real-time clock interrupt
  1955                                                          push    eax                                             ;save modified regs
  1956                                                          jmp     hwwint                                          ;end interrupt and return
  1957                                  ;-----------------------------------------------------------------------------------------------------------------------
  1958                                  ;
  1959                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  1960                                  ;
  1961                                  ;-----------------------------------------------------------------------------------------------------------------------
  1962                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  1963                                                          push    eax                                             ;save modified regs
  1964                                                          jmp     hwwint                                          ;end interrupt and return
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;       IRQ10   Reserved Hardware Interrupt
  1968                                  ;
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                                          menter  irq10                                           ;reserved
  1971                                                          push    eax                                             ;save modified regs
  1972                                                          jmp     hwwint                                          ;end interrupt and return
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                  ;
  1975                                  ;       IRQ11   Reserved Hardware Interrupt
  1976                                  ;
  1977                                  ;-----------------------------------------------------------------------------------------------------------------------
  1978                                                          menter  irq11                                           ;reserved
  1979                                                          push    eax                                             ;save modified regs
  1980                                                          jmp     hwwint                                          ;end interrupt and return
  1981                                  ;-----------------------------------------------------------------------------------------------------------------------
  1982                                  ;
  1983                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  1984                                  ;
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  1987                                                          push    eax                                             ;save modified regs
  1988                                                          jmp     hwwint                                          ;end interrupt and return
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;       IRQ13   Coprocessor Hardware Interrupt
  1992                                  ;
  1993                                  ;-----------------------------------------------------------------------------------------------------------------------
  1994                                                          menter  coprocessor                                     ;coprocessor interrupt
  1995                                                          push    eax                                             ;save modified regs
  1996                                                          jmp     hwwint                                          ;end interrupt and return
  1997                                  ;-----------------------------------------------------------------------------------------------------------------------
  1998                                  ;
  1999                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2000                                  ;
  2001                                  ;-----------------------------------------------------------------------------------------------------------------------
  2002                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2003                                                          push    eax                                             ;save modified regs
  2004                                                          jmp     hwwint                                          ;end interrupt and return
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                  ;
  2007                                  ;       IRQ15   Reserved Hardware Interrupt
  2008                                  ;
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010                                                          menter  irq15                                           ;reserved
  2011                                                          push    eax                                             ;save modified regs
  2012                                                          jmp     hwwint                                          ;end interrupt and return
  2013                                  ;-----------------------------------------------------------------------------------------------------------------------
  2014                                  ;
  2015                                  ;       Exit from hardware interrupt
  2016                                  ;
  2017                                  ;-----------------------------------------------------------------------------------------------------------------------
  2018                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2019                                                          jmp     hwint90                                         ;skip ahead
  2020                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2021                                  hwint90                 pop     eax                                             ;restore modified regs
  2022                                                          iretd                                                   ;return from interrupt
  2023                                  ;-----------------------------------------------------------------------------------------------------------------------
  2024                                  ;
  2025                                  ;       INT 30h Operating System Software Service Interrupt
  2026                                  ;
  2027                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2028                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2029                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2030                                  ;       the entry address of the specific function from a table.
  2031                                  ;
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                                          menter  svc
  2034                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2035                                                          jae     svc90                                           ;yes, skip ahead
  2036                                                          movzx   eax,al                                          ;function
  2037                                                          shl     eax,2                                           ;offset into table
  2038                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2039                                  svc90                   iretd                                                   ;return from interrupt
  2040                                  ;-----------------------------------------------------------------------------------------------------------------------
  2041                                  ;
  2042                                  ;       Service Request Table
  2043                                  ;
  2044                                  ;
  2045                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2049                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2050                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2051                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  ;
  2054                                  ;       Service Request Macros
  2055                                  ;
  2056                                  ;       These macros provide positional parameterization of service request calls.
  2057                                  ;
  2058                                  ;-----------------------------------------------------------------------------------------------------------------------
  2059                                  %macro                  clearConsoleScreen 0
  2060                                                          mov     al,eClearConsoleScreen                          ;function code
  2061                                                          int     _svc                                            ;invoke OS service
  2062                                  %endmacro
  2063                                  %macro                  placeCursor 0
  2064                                                          mov     al,ePlaceCursor                                 ;function code
  2065                                                          int     _svc                                            ;invoke OS service
  2066                                  %endmacro
  2067                                  %macro                  putConsoleString 1
  2068                                                          mov     edx,%1                                          ;string address
  2069                                                          mov     al,ePutConsoleString                            ;function code
  2070                                                          int     _svc                                            ;invoke OS service
  2071                                  %endmacro
  2072                                  ;=======================================================================================================================
  2073                                  ;
  2074                                  ;       Kernel Function Library
  2075                                  ;
  2076                                  ;=======================================================================================================================
  2077                                  ;=======================================================================================================================
  2078                                  ;
  2079                                  ;       Console Helper Routines
  2080                                  ;
  2081                                  ;       FirstConsoleColumn
  2082                                  ;       NextConsoleColumn
  2083                                  ;       NextConsoleRow
  2084                                  ;       PutConsoleChar
  2085                                  ;       PutConsoleString
  2086                                  ;
  2087                                  ;=======================================================================================================================
  2088                                  ;-----------------------------------------------------------------------------------------------------------------------
  2089                                  ;
  2090                                  ;       Routine:        FirstConsoleColumn
  2091                                  ;
  2092                                  ;       Description:    This routine resets the console column to start of the row.
  2093                                  ;
  2094                                  ;       In:             DS      OS data selector
  2095                                  ;
  2096                                  ;-----------------------------------------------------------------------------------------------------------------------
  2097                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2098                                                          mov     [wbConsoleColumn],al                            ;save column
  2099                                                          ret                                                     ;return
  2100                                  ;-----------------------------------------------------------------------------------------------------------------------
  2101                                  ;
  2102                                  ;       Routine:        NextConsoleColumn
  2103                                  ;
  2104                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2105                                  ;                       incremented if the end of the current row is reached.
  2106                                  ;
  2107                                  ;       In:             DS      OS data selector
  2108                                  ;
  2109                                  ;-----------------------------------------------------------------------------------------------------------------------
  2110                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2111                                                          inc     al                                              ;increment column
  2112                                                          mov     [wbConsoleColumn],al                            ;save column
  2113                                                          cmp     al,ECONCOLS                                     ;end of row?
  2114                                                          jb      .10                                             ;no, skip ahead
  2115                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2116                                                          call    NextConsoleRow                                  ;line feed to next row
  2117                                  .10                     ret                                                     ;return
  2118                                  ;-----------------------------------------------------------------------------------------------------------------------
  2119                                  ;
  2120                                  ;       Routine:        NextConsoleRow
  2121                                  ;
  2122                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2123                                  ;
  2124                                  ;       In:             DS      OS data selector
  2125                                  ;
  2126                                  ;-----------------------------------------------------------------------------------------------------------------------
  2127                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2128                                                          inc     al                                              ;increment row
  2129                                                          mov     [wbConsoleRow],al                               ;save row
  2130                                                          cmp     al,ECONROWS                                     ;end of screen?
  2131                                                          jb      .10                                             ;no, skip ahead
  2132                                                          call    ScrollConsoleRow                                ;scroll up one row
  2133                                                          mov     al,[wbConsoleRow]                               ;row
  2134                                                          dec     al                                              ;decrement row
  2135                                                          mov     [wbConsoleRow],al                               ;save row
  2136                                  .10                     ret                                                     ;return
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138                                  ;
  2139                                  ;       Routine:        PutConsoleChar
  2140                                  ;
  2141                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2142                                  ;
  2143                                  ;       In:             AL      ASCII character
  2144                                  ;                       DS      OS data selector
  2145                                  ;
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2148                                                          push    es                                              ;
  2149                                                          push    EGDTCGA                                         ;load CGA selector ...
  2150                                                          pop     es                                              ;... into extra segment reg
  2151                                                          mov     cl,[wbConsoleColumn]                            ;column
  2152                                                          mov     ch,[wbConsoleRow]                               ;row
  2153                                                          call    SetConsoleChar                                  ;put character at row, column
  2154                                                          pop     es                                              ;restore non-volatile regs
  2155                                                          pop     ecx                                             ;
  2156                                                          ret                                                     ;return
  2157                                  ;-----------------------------------------------------------------------------------------------------------------------
  2158                                  ;
  2159                                  ;       Routine:        PutConsoleString
  2160                                  ;
  2161                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2162                                  ;                       console position as needed.
  2163                                  ;
  2164                                  ;       In:             EDX     source address
  2165                                  ;                       DS      OS data selector
  2166                                  ;
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2169                                                          mov     esi,edx                                         ;source address
  2170                                                          cld                                                     ;forward strings
  2171                                  .10                     lodsb                                                   ;ASCII character
  2172                                                          or      al,al                                           ;end of string?
  2173                                                          jz      .40                                             ;yes, skip ahead
  2174                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2175                                                          jne     .20                                             ;no, skip ahead
  2176                                                          call    FirstConsoleColumn                              ;move to start of row
  2177                                                          jmp     .10                                             ;next character
  2178                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2179                                                          jne     .30                                             ;no, skip ahead
  2180                                                          call    NextConsoleRow                                  ;move to next row
  2181                                                          jmp     .10                                             ;next character
  2182                                  .30                     call    PutConsoleChar                                  ;output character to console
  2183                                                          call    NextConsoleColumn                               ;advance to next column
  2184                                                          jmp     .10                                             ;next character
  2185                                  .40                     pop     esi                                             ;restore non-volatile regs
  2186                                                          ret                                                     ;return
  2187                                  ;=======================================================================================================================
  2188                                  ;
  2189                                  ;       Memory-Mapped Video Routines
  2190                                  ;
  2191                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2192                                  ;
  2193                                  ;       ClearConsoleScreen
  2194                                  ;       ScrollConsoleRow
  2195                                  ;       SetConsoleChar
  2196                                  ;
  2197                                  ;=======================================================================================================================
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                  ;
  2200                                  ;       Routine:        ClearConsoleScreen
  2201                                  ;
  2202                                  ;       Description:    This routine clears the console (CGA) screen.
  2203                                  ;
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2206                                                          push    edi                                             ;
  2207                                                          push    ds                                              ;
  2208                                                          push    es                                              ;
  2209                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2210                                                          pop     ds                                              ;... into DS register
  2211                                                          push    EGDTCGA                                         ;load CGA selector ...
  2212                                                          pop     es                                              ;... into ES register
  2213                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2214                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2215                                                          xor     edi,edi                                         ;target offset
  2216                                                          cld                                                     ;forward strings
  2217                                                          rep     stosd                                           ;reset screen body
  2218                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2219                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2220                                                          rep     stosd                                           ;reset OIA line
  2221                                                          xor     al,al                                           ;zero register
  2222                                                          mov     [wbConsoleRow],al                               ;reset console row
  2223                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2224                                                          call    PlaceCursor                                     ;place cursor at current position
  2225                                                          pop     es                                              ;restore non-volatile regs
  2226                                                          pop     ds                                              ;
  2227                                                          pop     edi                                             ;
  2228                                                          pop     ecx                                             ;
  2229                                                          ret                                                     ;return
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;
  2232                                  ;       Routine:        ScrollConsoleRow
  2233                                  ;
  2234                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2235                                  ;
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2238                                                          push    esi                                             ;
  2239                                                          push    edi                                             ;
  2240                                                          push    ds                                              ;
  2241                                                          push    es                                              ;
  2242                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2243                                                          pop     ds                                              ;... into DS
  2244                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2245                                                          pop     es                                              ;... into ES
  2246                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2247                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2248                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2249                                                          cld                                                     ;forward strings
  2250                                                          rep     movsd                                           ;move 24 lines up
  2251                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2252                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2253                                                          rep     stosd                                           ;clear bottom row
  2254                                                          pop     es                                              ;restore non-volatile regs
  2255                                                          pop     ds                                              ;
  2256                                                          pop     edi                                             ;
  2257                                                          pop     esi                                             ;
  2258                                                          pop     ecx                                             ;
  2259                                                          ret                                                     ;return
  2260                                  ;-----------------------------------------------------------------------------------------------------------------------
  2261                                  ;
  2262                                  ;       Routine:        SetConsoleChar
  2263                                  ;
  2264                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2265                                  ;
  2266                                  ;       In:             AL      ASCII character
  2267                                  ;                       CL      column
  2268                                  ;                       CH      row
  2269                                  ;                       ES      CGA selector
  2270                                  ;
  2271                                  ;       Out:            EAX     last target address written (ES:)
  2272                                  ;                       CL      column + 1
  2273                                  ;
  2274                                  ;-----------------------------------------------------------------------------------------------------------------------
  2275                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2276                                                          movzx   eax,ch                                          ;row
  2277                                                          mov     ah,ECONCOLS                                     ;cols/row
  2278                                                          mul     ah                                              ;row * cols/row
  2279                                                          add     al,cl                                           ;add column
  2280                                                          adc     ah,0                                            ;handle carry
  2281                                                          shl     eax,1                                           ;screen offset
  2282                                                          mov     [es:eax],dl                                     ;store character
  2283                                                          inc     cl                                              ;next column
  2284                                                          ret                                                     ;return
  2285                                  ;=======================================================================================================================
  2286                                  ;
  2287                                  ;       Input/Output Routines
  2288                                  ;
  2289                                  ;       These routines read and/or write directly to ports.
  2290                                  ;
  2291                                  ;       PlaceCursor
  2292                                  ;       PutPrimaryEndOfInt
  2293                                  ;       PutSecondaryEndOfInt
  2294                                  ;
  2295                                  ;=======================================================================================================================
  2296                                  ;-----------------------------------------------------------------------------------------------------------------------
  2297                                  ;
  2298                                  ;       Routine:        PlaceCursor
  2299                                  ;
  2300                                  ;       Description:    This routine positions the cursor on the console.
  2301                                  ;
  2302                                  ;       In:             DS      OS data selector
  2303                                  ;
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2306                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2307                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2308                                                          mul     ah                                              ;row offset
  2309                                                          add     al,[wbConsoleColumn]                            ;add column
  2310                                                          adc     ah,0                                            ;add overflow
  2311                                                          mov     ecx,eax                                         ;screen offset
  2312                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2313                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2314                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2315                                                          out     dx,al                                           ;select register
  2316                                                          inc     edx                                             ;data port
  2317                                                          mov     al,ch                                           ;hi-order cursor loc
  2318                                                          out     dx,al                                           ;store hi-order loc
  2319                                                          dec     edx                                             ;register select port
  2320                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2321                                                          out     dx,al                                           ;select register
  2322                                                          inc     edx                                             ;data port
  2323                                                          mov     al,cl                                           ;lo-order cursor loc
  2324                                                          out     dx,al                                           ;store lo-order loc
  2325                                                          pop     ecx                                             ;restore non-volatile regs
  2326                                                          ret                                                     ;return
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                  ;
  2329                                  ;       Routine:        PutPrimaryEndOfInt
  2330                                  ;
  2331                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2332                                  ;
  2333                                  ;-----------------------------------------------------------------------------------------------------------------------
  2334                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2335                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2336                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2337                                                          ret                                                     ;return
  2338                                  ;-----------------------------------------------------------------------------------------------------------------------
  2339                                  ;
  2340                                  ;       Routine:        PutSecondaryEndOfInt
  2341                                  ;
  2342                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2343                                  ;
  2344                                  ;-----------------------------------------------------------------------------------------------------------------------
  2345                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2346                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2347                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2348                                                          ret                                                     ;return
  2349                                  ;-----------------------------------------------------------------------------------------------------------------------
  2350                                  ;
  2351                                  ;       End of the Kernel Function Library
  2352                                  ;
  2353                                  ;-----------------------------------------------------------------------------------------------------------------------
  2354                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2355                                  ;=======================================================================================================================
  2356                                  ;
  2357                                  ;       Console Task
  2358                                  ;
  2359                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2360                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2361                                  ;       screen and responds to user commands.
  2362                                  ;
  2363                                  ;=======================================================================================================================
  2364                                  ;-----------------------------------------------------------------------------------------------------------------------
  2365                                  ;
  2366                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2367                                  ;
  2368                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2369                                  ;
  2370                                  ;-----------------------------------------------------------------------------------------------------------------------
  2371                                  section                 constack                                                ;console task stack
  2372                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2373                                  ;-----------------------------------------------------------------------------------------------------------------------
  2374                                  ;
  2375                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2376                                  ;
  2377                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2378                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2379                                  ;       16 descriptors. Six are initially defined.
  2380                                  ;
  2381                                  ;-----------------------------------------------------------------------------------------------------------------------
  2382                                  section                 conldt                                                  ;console local descriptors
  2383                                                          dq      004093004780007Fh                               ;04 TSS alias
  2384                                                          dq      004093004700007Fh                               ;0c LDT alias
  2385                                                          dq      00409300400006FFh                               ;14 stack
  2386                                                          dq      00CF93000000FFFFh                               ;1c data
  2387                                                          dq      00409B0050000FFFh                               ;24 code
  2388                                                          dq      00409300480007FFh                               ;2c message queue
  2389                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2390                                  ;-----------------------------------------------------------------------------------------------------------------------
  2391                                  ;
  2392                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2393                                  ;
  2394                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2395                                  ;       segment. CS to console code.
  2396                                  ;
  2397                                  ;-----------------------------------------------------------------------------------------------------------------------
  2398                                  section                 contss                                                  ;console task state segment
  2399                                                          dd      0                                               ;00 back-link tss
  2400                                                          dd      0700h                                           ;04 esp ring 0
  2401                                                          dd      0014h                                           ;08 ss ring 0
  2402                                                          dd      0700h                                           ;0c esp ring 1
  2403                                                          dd      0014h                                           ;10 es ring 1
  2404                                                          dd      0700h                                           ;14 esp ring 2
  2405                                                          dd      0014h                                           ;18 ss ring 2
  2406                                                          dd      0                                               ;1c cr ring 3
  2407                                                          dd      0                                               ;20 eip
  2408                                                          dd      0200h                                           ;24 eflags
  2409                                                          dd      0                                               ;28 eax
  2410                                                          dd      0                                               ;2c ecx
  2411                                                          dd      0                                               ;30 edx
  2412                                                          dd      0                                               ;34 ebx
  2413                                                          dd      0700h                                           ;38 esp ring 3
  2414                                                          dd      0                                               ;3c ebp
  2415                                                          dd      0                                               ;40 esi
  2416                                                          dd      0                                               ;44 edi
  2417                                                          dd      001Ch                                           ;48 es
  2418                                                          dd      0024h                                           ;4c cs
  2419                                                          dd      0014h                                           ;50 ss ring 3
  2420                                                          dd      001Ch                                           ;54 ds
  2421                                                          dd      0                                               ;58 fs
  2422                                                          dd      0                                               ;5c gs
  2423                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2424                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  ;
  2427                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2428                                  ;
  2429                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2430                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2431                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2432                                  ;       event.
  2433                                  ;
  2434                                  ;-----------------------------------------------------------------------------------------------------------------------
  2435                                  section                 conmque                                                 ;console message queue
  2436                                                          dd      8                                               ;head pointer
  2437                                                          dd      8                                               ;tail pointer
  2438                                                          times   510 dd 0                                        ;queue elements
  2439                                  ;-----------------------------------------------------------------------------------------------------------------------
  2440                                  ;
  2441                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2442                                  ;
  2443                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2444                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2445                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2446                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2447                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2448                                  ;       board input, echoing to the console screen and responding to user commands.
  2449                                  ;
  2450                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2451                                  ;
  2452                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2453                                  ;                               |  Real Mode Interrupt Vectors                  |
  2454                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2455                                  ;                               |  Reserved BIOS Memory Area                    |
  2456                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2457                                  ;                               |  Shared Kernel Memory Area                    |
  2458                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2459                                  ;                               |  Global Descriptor Table (GDT)                |
  2460                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2461                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2462                                  ;                       002000  +-----------------------------------------------+
  2463                                  ;                               |  Interrupt Handlers                           |
  2464                                  ;                               |  Kernel Function Library                      |
  2465                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2466                                  ;                               |  Console Task Stack Area                      |
  2467                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2468                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2469                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2470                                  ;                               |  Console Task Task State Segment (TSS)        |
  2471                                  ;                       004800  +-----------------------------------------------+
  2472                                  ;                               |  Console Task Message Queue                   |
  2473                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2474                                  ;                               |  Console Task Code                            |
  2475                                  ;                               |  Console Task Constants                       |
  2476                                  ;                       006000  +===============================================+
  2477                                  ;
  2478                                  ;-----------------------------------------------------------------------------------------------------------------------
  2479                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2480                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  2481                                  
  2482                                                          putConsoleString czTitle                                ;display startup message
  2483                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2484                                                          placeCursor                                             ;set CRT cursor location
  2485                                  
  2486                                  .20                     sti                                                     ;enable interrupts
  2487                                                          hlt                                                     ;halt until interrupt
  2488                                                          jmp     .20                                             ;continue halt loop
  2489                                  ;-----------------------------------------------------------------------------------------------------------------------
  2490                                  ;
  2491                                  ;       Routine:        ConInitializeData
  2492                                  ;
  2493                                  ;       Description:    This routine initializes console task variables.
  2494                                  ;
  2495                                  ;-----------------------------------------------------------------------------------------------------------------------
  2496                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  2497                                                          push    edi                                             ;
  2498                                                          push    es                                              ;
  2499                                  ;
  2500                                  ;       Initialize console work areas.
  2501                                  ;
  2502                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2503                                                          pop     es                                              ;... into extra segment register
  2504                                                          mov     edi,ECONDATA                                    ;OS console data address
  2505                                                          xor     al,al                                           ;initialization value
  2506                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2507                                                          cld                                                     ;forward strings
  2508                                                          rep     stosb                                           ;initialize data
  2509                                                          mov     byte [wbConsoleRow],5                           ;avoid overwriting loader messages
  2510                                  ;
  2511                                  ;       Restore and return.
  2512                                  ;
  2513                                                          pop     es                                              ;restore non-volatile regs
  2514                                                          pop     edi                                             ;
  2515                                                          pop     ecx                                             ;
  2516                                                          ret                                                     ;return
  2517                                  ;-----------------------------------------------------------------------------------------------------------------------
  2518                                  ;
  2519                                  ;       Constants
  2520                                  ;
  2521                                  ;-----------------------------------------------------------------------------------------------------------------------
  2522                                  czNewLine               db      13,10,0                                         ;new line string
  2523                                  czPrompt                db      ":",0                                           ;prompt string
  2524                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  2525                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2526                                  %endif
  2527                                  %ifdef BUILDDISK
  2528                                  ;-----------------------------------------------------------------------------------------------------------------------
  2529                                  ;
  2530                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2531                                  ;
  2532                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2533                                  ;
  2534                                  ;-----------------------------------------------------------------------------------------------------------------------
  2535                                  section                 unused                                                  ;unused disk space
  2536                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2537                                  %endif
  2538                                  ;=======================================================================================================================
  2539                                  ;
  2540                                  ;       End of Program Code
  2541                                  ;
  2542                                  ;=======================================================================================================================
