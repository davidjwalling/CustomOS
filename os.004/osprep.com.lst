     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.004
     6                                  ;
     7                                  ;	Description:	In this sample program, the loader is expanded to validate the CPU type and to place the CPU
     8                                  ;			into protected mode.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Register EAX is preferred for returning a response/result value.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX and ECX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTSTAT		equ	064h						;8042 status port
   108                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   109                                  ;-----------------------------------------------------------------------------------------------------------------------
   110                                  ;
   111                                  ;	8253 Programmable Interrupt Timer					EPIT...
   112                                  ;
   113                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   114                                  ;	approximately 18.2 times per second.
   115                                  ;
   116                                  ;-----------------------------------------------------------------------------------------------------------------------
   117                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   118                                  ;-----------------------------------------------------------------------------------------------------------------------
   119                                  ;
   120                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   121                                  ;
   122                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   123                                  ;	external devices and signals a hardware interrupt to the CPU.
   124                                  ;
   125                                  ;-----------------------------------------------------------------------------------------------------------------------
   126                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   127                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   128                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   129                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   130                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;
   133                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   134                                  ;
   135                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   136                                  ;	for CGA, EGA, VGA and compatible video modes.
   137                                  ;
   138                                  ;-----------------------------------------------------------------------------------------------------------------------
   139                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   140                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   141                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   142                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   143                                  ;-----------------------------------------------------------------------------------------------------------------------
   144                                  ;
   145                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   146                                  ;
   147                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   148                                  ;
   149                                  ;-----------------------------------------------------------------------------------------------------------------------
   150                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   151                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   152                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   153                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   154                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   155                                  ;-----------------------------------------------------------------------------------------------------------------------
   156                                  ;
   157                                  ;	x86 Descriptor Access Codes						EACC...
   158                                  ;
   159                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   160                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   161                                  ;
   162                                  ;	0.......	Segment is not present in memory (triggers int 11)
   163                                  ;	1.......	Segment is present in memory
   164                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   165                                  ;	...0....	Segment is a system segment
   166                                  ;	...00010		Local Descriptor Table
   167                                  ;	...00101		Task Gate
   168                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   169                                  ;	...01100		Call Gate (386)
   170                                  ;	...01110		Interrupt Gate (386)
   171                                  ;	...01111		Trap Gate (386)
   172                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   173                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   174                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  EACCINT			equ	10001110b					;interrupt gate
   178                                  EACCTRAP		equ	10001111b					;trap gate
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;
   181                                  ;	BIOS Interrupts and Functions						EBIOS...
   182                                  ;
   183                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   184                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   185                                  ;
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   188                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   189                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   190                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   191                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   192                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   193                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   194                                  ;-----------------------------------------------------------------------------------------------------------------------
   195                                  ;
   196                                  ;	ASCII									EASC...
   197                                  ;
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  EASCIILINEFEED		equ	10						;ASCII line feed
   200                                  EASCIIRETURN		equ	13						;ASCII carriage return
   201                                  EASCIIESCAPE		equ	27						;ASCII escape
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  ;
   204                                  ;	Boot Sector and Loader Constants
   205                                  ;
   206                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   207                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   208                                  ;
   209                                  ;-----------------------------------------------------------------------------------------------------------------------
   210                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   211                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   212                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   213                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   214                                  EMAXTRIES		equ	5						;max read retries
   215                                  ;-----------------------------------------------------------------------------------------------------------------------
   216                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   217                                  ;-----------------------------------------------------------------------------------------------------------------------
   218                                  ESELDAT			equ	18h						;kernel data selector
   219                                  ESELCGA			equ	20h						;cga video selector
   220                                  ESELOSCODE		equ	48h						;os kernel selector
   221                                  ;-----------------------------------------------------------------------------------------------------------------------
   222                                  ;	Kernel Constants							EKRN...
   223                                  ;-----------------------------------------------------------------------------------------------------------------------
   224                                  EKRNDESLEN		equ	8						;size of descriptor
   225                                  EKRNADR			equ	1000h						;kernel base address
   226                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  ;	Console Constants							ECON...
   229                                  ;-----------------------------------------------------------------------------------------------------------------------
   230                                  ECONCOLS		equ	80						;columns per row
   231                                  ECONROWS		equ	24						;console rows
   232                                  ECONCOLBYTES		equ	2						;bytes per column
   233                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   234                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   235                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   236                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   237                                  ;-----------------------------------------------------------------------------------------------------------------------
   238                                  ;
   239                                  ;	Structures
   240                                  ;
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  ;
   244                                  ;	OSDATA
   245                                  ;
   246                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   247                                  ;	used by the BIOS.
   248                                  ;
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  struc			OSDATA
   251 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   252 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   253 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   254 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   255 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   256 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   257 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   258 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   259 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   260 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   261 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   262 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   263 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   264 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   265 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   266 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   267 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   268 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   269 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   270 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   271 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   272 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   273 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   274 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   275 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   276 00000449 <res 00000001>          			resb	1						;449 current video mode
   277 0000044A <res 00000002>          			resw	1						;44A screen columns
   278 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   279 0000044E <res 00000002>          			resw	1						;44E current video page offset
   280 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   281 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   282 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   283 00000462 <res 00000001>          			resb	1						;462 active display page number
   284 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   285 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   286 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   287 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   288 00000469 <res 00000003>          			resb	3						;469 vague
   289 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   290 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   291 00000471 <res 00000001>          			resb	1						;471 bios break flag
   292 00000472 <res 00000002>          			resw	1						;472 soft reset
   293 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   294 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   295 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   296 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   297 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   298 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   299 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   300 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   301 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   302 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   303 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   304 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   305 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   306 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   307 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   308 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   309 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   310 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   311 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   312 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   313 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   314 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   315 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   316 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   317 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   318 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   319 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   320 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   321 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   322 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   323 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   324 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   325 000004AC <res 00000008>          			resb	8						;4AC reserved
   326 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   327 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   328 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   329 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   330 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   331 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   332 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   333 000004CD <res 00000001>          			resb	1						;4CD unknown
   334 000004CE <res 00000002>          			resw	1						;4CE day counter
   335 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   336 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   337 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   338 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   339 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   340 00000505 <res 0000000A>          			resb	10						;505 POST work area
   341 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   342 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   343 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   344 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   345 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   346 0000051E <res 00000002>          			resw	1						;51E unknown
   347 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   348 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   349 00000530 <res 00000004>          			resb	4						;530 MODE command
   350 00000534 <res 000001CC>          			resb	460						;534 unused
   351 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;	OS Variables								@disk: N/A	@mem: 000800
   355                                  ;
   356                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   357                                  ;	accessible by any kernel task or interrupt.
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  ECONDATA		equ	($)
   361 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   362 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   363                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   364                                  endstruc
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  ;
   367                                  ;	Macros
   368                                  ;
   369                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   370                                  ;
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  %macro			mint	1
   373                                  _%1			equ	($-$$) / EKRNDESLEN
   374                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   375                                  %endmacro
   376                                  %macro			mtrap	1
   377                                  _%1			equ	($-$$) / EKRNDESLEN
   378                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   379                                  %endmacro
   380                                  %macro			menter	1
   381                                  ?%1			equ	($-$$)
   382                                  %endmacro
   383                                  %macro			tsvce	1
   384                                  e%1			equ	($-tsvc)/4
   385                                  			dd	%1
   386                                  %endmacro
   387                                  %ifdef BUILDBOOT
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ;
   390                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   391                                  ;
   392                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   393                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   394                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   395                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   396                                  ;
   397                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   398                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   399                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   400                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   401                                  ;	immediately followed by a disk parameter table.
   402                                  ;
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  			cpu	8086						;assume minimal CPU
   405                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   406                                  			bits	16						;16-bit code at power-up
   407                                  %ifdef BUILDPREP
   408 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   409                                  %else
   410                                  Boot			jmp	word Boot.10					;jump over parameter table
   411                                  %endif
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ;
   414                                  ;	Disk Parameter Table
   415                                  ;
   416                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   417                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   418                                  ;
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   421 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   422 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   423 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   424 00000010 02                      cbFatCount		db	2						;file allocation table copies
   425 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   426 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   427 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   428 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   429                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   430 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   431 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   432 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   433                                  ;
   434                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   435                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   436                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   437                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   438                                  ;	given several possible starting values for CS:IP.
   439                                  ;
   440                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   441 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   442                                  .@20			equ	$-$$						;.@20 = 021h
   443 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   444 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   445 00000025 B104                    			mov	cl,4						;shift count
   446 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   447 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   448 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   449                                  ;
   450                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   451                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   452                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   453                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   454                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   455                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   456                                  ;
   457 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   458 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   459 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   460 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   461 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   462                                  ;
   463                                  ;	Our boot addressability is now set up according to the following diagram.
   464                                  ;
   465                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   466                                  ;				|  Unused (DOS Program Segment Prefix)		|
   467                                  ;			007c00	+-----------------------------------------------+ DS:0100
   468                                  ;				|  Boot Sector Code (vstart=100h)		|
   469                                  ;				|						|
   470                                  ;			007e00	+-----------------------------------------------+ DS:0300
   471                                  ;				|  Boot Stack					|
   472                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   473                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   474                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   475                                  ;				|						|
   476                                  ;			009100	+-----------------------------------------------+ DS:1600
   477                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   478                                  ;				|						|
   479                                  ;			009300	+-----------------------------------------------+ DS:1800
   480                                  ;
   481                                  ;	On entry, DL indicates the drive being booted from.
   482                                  ;
   483 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   484                                  ;
   485                                  ;	Compute directory i/o buffer address.
   486                                  ;
   487 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   488 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   489 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   490 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   491                                  ;
   492                                  ;	Compute segment where os.com will be loaded.
   493                                  ;
   494 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   495 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   496 0000004E 83E810                  			sub	ax,16						;AX = 0900
   497 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   498                                  ;
   499                                  ;	Write a message to the console so we know we have our addressability established.
   500                                  ;
   501 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   502 00000057 E84B01                  			call	BootPrint					;display loader message
   503                                  ;
   504                                  ;	Initialize the number of directory sectors to search.
   505                                  ;
   506 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   507 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   508                                  ;
   509                                  ;	Compute number of directory sectors and initialize overhead count.
   510                                  ;
   511 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   512 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   513 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   514 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   515                                  ;
   516                                  ;	Compute directory entries per sector.
   517                                  ;
   518 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   519 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   520 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   521                                  ;
   522                                  ;	Compute first logical directory sector and update overhead count.
   523                                  ;
   524 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   525 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   526 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   527 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   528 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   529 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   530                                  ;
   531                                  ;	Read directory sector.
   532                                  ;
   533 00000089 B001                    .30			mov	al,1						;sector count
   534 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   535 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   536 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   537                                  ;
   538                                  ;	Setup variables to search this directory sector.
   539                                  ;
   540 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   541 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   542 0000009C 7603                    			jna	.40						;no, continue
   543 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   544 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   545 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   546 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   547                                  ;
   548                                  ;	Loop through directory sectors searching for kernel program.
   549                                  ;
   550 000000AC 56                      .50			push	si						;save kernel name address
   551 000000AD 57                      			push	di						;save dir i/o buffer address
   552 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   553 000000B1 FC                      			cld							;forward strings
   554 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   555 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   556 000000B5 5E                      			pop	si						;restore kernel name address
   557 000000B6 7418                    			je	.60						;exit loop if found
   558 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   559 000000BC 48                      			dec	ax						;decrement remaining entries
   560 000000BD 75ED                    			jnz	.50						;next entry
   561                                  ;
   562                                  ;	Repeat search if we are not at the end of the directory.
   563                                  ;
   564 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   565 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   566 000000C8 75BF                    			jne	.30						;no, get next sector
   567 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   568 000000CD E9C000                  			jmp	BootExit					;display message and exit
   569                                  ;
   570                                  ;	If we find the kernel program in the directory, read the FAT.
   571                                  ;
   572 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   573 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   574 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   575 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   576 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0500
   577 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   578                                  ;
   579                                  ;	Get the starting cluster of the kernel program and target address.
   580                                  ;
   581 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   582 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   583                                  ;
   584                                  ;	Read each program cluster into RAM.
   585                                  ;
   586 000000E9 50                      .70			push	ax						;save cluster nbr
   587 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   588 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   589 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   590 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   591 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   592 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   593 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   594 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   595                                  ;
   596                                  ;	Update buffer pointer for next cluster.
   597                                  ;
   598 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   599 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   600 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   601 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   602 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   603                                  ;
   604                                  ;	Compute next cluster number.
   605                                  ;
   606 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   607 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   608 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   609 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   610 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   611 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   612 0000011B 83E701                  			and	di,1						;get low bit
   613 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   614 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   615 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   616                                  ;
   617                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   618                                  ;
   619 00000126 F6C101                  			test	cl,1						;is cluster odd?
   620 00000129 7404                    			jz	.80						;no, skip ahead
   621 0000012B B104                    			mov	cl,4						;shift count
   622 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   623 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   624 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   625 00000135 75B2                    			jne	.70						;no, continue
   626                                  ;
   627                                  ;	Transfer control to the operating system program.
   628                                  ;
   629 00000137 EA                      			db	0EAh						;jmp seg:offset
   630 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   631 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   632                                  ;
   633                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   634                                  ;
   635 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   636 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   637 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   638 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   639 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   640 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   641 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   642 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   643 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   644 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   645                                  ;
   646                                  ;	Try maxtries times to read sector.
   647                                  ;
   648 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   649 0000015B 53                      .10			push	bx						;save buffer address
   650 0000015C 51                      			push	cx						;save retry count
   651 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   652 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   653 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   654 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   655 0000016A 59                      			pop	cx						;restore retry count
   656 0000016B 5B                      			pop	bx						;restore buffer address
   657 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   658 0000016E E2EB                    			loop	.10						;retry
   659                                  ;
   660                                  ;	Handle disk error: convert to ASCII and store in error string.
   661                                  ;
   662 00000170 88E0                    			mov	al,ah						;AL = bios error code
   663 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   664 00000174 B210                    			mov	dl,16						;divisor for base 16
   665 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   666 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   667 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   668 0000017E 7203                    			jb	.20						;continue if numeral
   669 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   670 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   671 00000185 7203                    			jb	.30						;continue if numeral
   672 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   673 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   674 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   675 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   676 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   677 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   678 00000197 7504                    			jnz	.20						;continue if key pressed
   679 00000199 FB                      			sti							;enable interrupts
   680 0000019A F4                      			hlt							;wait for interrupt
   681 0000019B EBF6                    			jmp	.10						;repeat
   682 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   683 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   684 000001A1 FB                      .30			sti							;enable interrupts
   685 000001A2 F4                      			hlt							;stop until reset, int, nmi
   686 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   687                                  ;
   688                                  ;	Display text message.
   689                                  ;
   690 000001A5 FC                      BootPrint		cld							;forward strings
   691 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   692 000001A7 84C0                    			test	al,al						;end of string?
   693 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   694 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   695 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   696 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   697 000001B1 C3                      BootReturn		ret							;return to caller
   698                                  ;-----------------------------------------------------------------------------------------------------------------------
   699                                  ;
   700                                  ;	Constants
   701                                  ;
   702                                  ;-----------------------------------------------------------------------------------------------------------------------
   703                                  			align	2
   704 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   705 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   705 000001BD 4F4D               
   706 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   706 000001C8 2E2E0D0A00         
   707 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   707 000001D6 7220               
   708 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   709 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   709 000001E4 7373696E6700       
   710                                  ;-----------------------------------------------------------------------------------------------------------------------
   711                                  ;
   712                                  ;	Work Areas
   713                                  ;
   714                                  ;-----------------------------------------------------------------------------------------------------------------------
   715                                  			align	2
   716 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   717 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   718 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   719 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   720 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   721                                  wwReadCountCommand	equ	$						;read count and command
   722 000001F4 00                      wbReadCount		db	0						;sectors to read
   723 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   724                                  wwDriveHead		equ	$						;drive, head (word)
   725 000001F6 00                      wbDrive			db	0						;drive
   726 000001F7 00                      wbHead			db	0						;head
   727                                  wwSectorTrack		equ	$						;sector, track (word)
   728 000001F8 00                      			db	0						;sector
   729 000001F9 00                      wbTrack			db	0						;track
   730 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   731 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   732                                  %endif
   733                                  %ifdef BUILDPREP
   734                                  ;-----------------------------------------------------------------------------------------------------------------------
   735                                  ;
   736                                  ;	Diskette Preparation Code
   737                                  ;
   738                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   739                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   740                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   741                                  ;
   742                                  ;-----------------------------------------------------------------------------------------------------------------------
   743                                  ;
   744                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   745                                  ;
   746 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   747 00000203 E89FFF                  			call	BootPrint					;display message
   748                                  ;
   749                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   750                                  ;
   751 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   752 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   753 0000020A 7504                    			jnz	.12						;continue if key pressed
   754 0000020C FB                      			sti							;enable interrupts
   755 0000020D F4                      			hlt							;wait for interrupt
   756 0000020E EBF6                    			jmp	short .10					;repeat
   757 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   758 00000212 7407                    			je	.15						;yes, branch
   759 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   760 00000216 75EE                    			jne	.10						;no, repeat
   761 00000218 E9A900                  			jmp	.90						;yes, exit program
   762                                  ;
   763                                  ;	Display writing-sector message and patch the JMP instruction.
   764                                  ;
   765 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   766 0000021E E884FF                  			call	BootPrint					;display message
   767 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   768 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   769 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   770                                  ;
   771                                  ;	Try to read the boot sector.
   772                                  ;
   773 00000229 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   774 0000022C 51                      .20			push	cx						;save remaining tries
   775 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   776 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   777 00000233 B90100                  			mov	cx,1						;track zero, sector one
   778 00000236 B80102                  			mov	ax,0201h					;read one sector
   779 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   780 0000023B 59                      			pop	cx						;restore remaining retries
   781 0000023C 7307                    			jnc	.30						;skip ahead if successful
   782 0000023E E2EC                    			loop	.20						;try again
   783 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   784 00000243 EB2C                    			jmp	.50						;branch to error routine
   785                                  ;
   786                                  ;	Copy diskette parms from input buffer to output buffer.
   787                                  ;
   788 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   789 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   790 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   791 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   792 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   793 00000254 FC                      			cld							;forward string copies
   794 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   795                                  ;
   796                                  ;	Try to write boot sector to diskette.
   797                                  ;
   798 00000257 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   799 0000025A 51                      .40			push	cx						;save remaining tries
   800 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   801 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   802 00000261 B90100                  			mov	cx,1						;track zero, sector one
   803 00000264 B80103                  			mov	ax,0301h					;write one sector
   804 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   805 00000269 59                      			pop	cx						;restore remaining retries
   806 0000026A 7326                    			jnc	.80						;skip ahead if successful
   807 0000026C E2EC                    			loop	.40						;try again
   808 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   809                                  ;
   810                                  ;	Convert the error code to ASCII and display the error message.
   811                                  ;
   812 00000271 50                      .50			push	ax						;save error code
   813 00000272 88E0                    			mov	al,ah						;copy error code
   814 00000274 B400                    			mov	ah,0						;AX = error code
   815 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   816 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   817 0000027A 0D3030                  			or	ax,3030h					;add ASCII zone digits
   818 0000027D 80FC3A                  			cmp	ah,3Ah						;AH ASCII numeral?
   819 00000280 7203                    			jb	.60						;yes, continue
   820 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   821 00000285 3C3A                    .60			cmp	al,3Ah						;al ASCII numeral?
   822 00000287 7202                    			jb	.70						;yes, continue
   823 00000289 0407                    			add	al,7						;no, make ASCII
   824 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   825 0000028E E814FF                  			call	BootPrint					;write error message
   826 00000291 58                      			pop	ax						;restore error code
   827                                  ;
   828                                  ;	Display the completion message.
   829                                  ;
   830 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   831 00000295 88E0                    			mov	al,ah						;BIOS return code
   832 00000297 3C00                    			cmp	al,0						;success?
   833 00000299 7426                    			je	.85						;yes, continue
   834 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   835 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   836 000002A0 741F                    			je	.85						;yes, continue
   837 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   838 000002A5 3C02                    			cmp	al,2						;address mark not found?
   839 000002A7 7418                    			je	.85						;yes, continue
   840 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   841 000002AC 3C03                    			cmp	al,3						;protected disk?
   842 000002AE 7411                    			je	.85						;yes, continue
   843 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   844 000002B3 3C06                    			cmp	al,6						;diskette removed?
   845 000002B5 740A                    			je	.85						;yes, continue
   846 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   847 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   848 000002BC 7403                    			je	.85						;yes, continue
   849 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   850 000002C1 E8E1FE                  .85			call	BootPrint					;display result message
   851 000002C4 B8004C                  .90			mov	ax,4C00H					;terminate with zero result code
   852 000002C7 CD21                    			int	21h						;terminate DOS program
   853 000002C9 C3                      			ret							;return (should not execute)
   854                                  ;-----------------------------------------------------------------------------------------------------------------------
   855                                  ;
   856                                  ;	Diskette Preparation Messages
   857                                  ;
   858                                  ;-----------------------------------------------------------------------------------------------------------------------
   859 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   859 000002D3 5320426F6F742D4469-
   859 000002DC 736B65747465205072-
   859 000002E5 657061726174696F6E-
   859 000002EE 2050726F6772616D   
   860 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   860 000002FF 687420284329203230-
   860 00000308 31302D323031372044-
   860 00000311 61766964204A2E2057-
   860 0000031A 616C6C696E672E2041-
   860 00000323 6C6C20726967687473-
   860 0000032C 207265736572766564-
   860 00000335 2E                 
   861 00000336 0D0A                    			db	13,10
   862 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   862 00000341 6F6772616D206F7665-
   862 0000034A 727772697465732074-
   862 00000353 686520626F6F742073-
   862 0000035C 6563746F72206F6620-
   862 00000365 61206469736B657474-
   862 0000036E 652077697468207374-
   862 00000377 617274757020636F64-
   862 00000380 652074686174       
   863 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   863 0000038F 616420746865206F70-
   863 00000398 65726174696E672073-
   863 000003A1 797374656D20696E74-
   863 000003AA 6F206D656D6F727920-
   863 000003B3 7768656E2074686520-
   863 000003BC 636F6D707574657220-
   863 000003C5 697320726573746172-
   863 000003CE 7465642E           
   864 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   864 000003DB 6565642C20706C6163-
   864 000003E4 65206120666F726D61-
   864 000003ED 74746564206469736B-
   864 000003F6 6574746520696E746F-
   864 000003FF 20647269766520413A-
   864 00000408 20616E642070726573-
   864 00000411 732074686520456E74-
   864 0000041A 6572206B65792E     
   865 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   865 0000042A 20746869732070726F-
   865 00000433 6772616D2077697468-
   865 0000043C 6F7574207072657061-
   865 00000445 72696E672061206469-
   865 0000044E 736B657474652C2070-
   865 00000457 726573732074686520-
   865 00000460 457363617065206B65-
   865 00000469 792E               
   866 0000046B 0D0A00                  			db	13,10,0
   867 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   867 00000477 2074686520626F6F74-
   867 00000480 20736563746F722074-
   867 00000489 6F2074686520646973-
   867 00000492 6B65747465202E2E2E 
   868 0000049B 0D0A00                  			db	13,10,0
   869 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   869 000004A7 6F722D636F6465202E-
   869 000004B0 2E2077617320726574-
   869 000004B9 75726E65642066726F-
   869 000004C2 6D207468652042494F-
   869 000004CB 53207768696C652072-
   869 000004D4 656164696E67206672-
   869 000004DD 6F6D20746865206469-
   869 000004E6 736B2E             
   870 000004E9 0D0A00                  			db	13,10,0
   871 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   871 000004F5 6F722D636F6465202E-
   871 000004FE 2E2077617320726574-
   871 00000507 75726E65642066726F-
   871 00000510 6D207468652042494F-
   871 00000519 53207768696C652077-
   871 00000522 726974696E6720746F-
   871 0000052B 20746865206469736B-
   871 00000534 2E                 
   872 00000535 0D0A00                  			db	13,10,0
   873 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   873 00000541 742D736563746F7220-
   873 0000054A 776173207772697474-
   873 00000553 656E20746F20746865-
   873 0000055C 206469736B65747465-
   873 00000565 2E204265666F726520-
   873 0000056E 626F6F74696E672079-
   873 00000577 6F757220636F6D7075-
   873 00000580 7465722077697468   
   874 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   874 00000591 736B657474652C206D-
   874 0000059A 616B65207375726520-
   874 000005A3 746861742074686520-
   874 000005AC 66696C65204F532E43-
   874 000005B5 4F4D20697320636F70-
   874 000005BE 696564206F6E746F20-
   874 000005C7 746865206469736B65-
   874 000005D0 7474652E           
   875 000005D4 0D0A00                  			db	13,10,0
   876 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   876 000005E0 76616C696420446973-
   876 000005E9 6B20506172616D6574-
   876 000005F2 6572               
   877 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   877 000005FD 20616E20696E746572-
   877 00000606 6E616C206572726F72-
   877 0000060F 206361757365642062-
   877 00000618 7920616E20696E7661-
   877 00000621 6C69642076616C7565-
   877 0000062A 206265696E67207061-
   877 00000633 7373656420746F2061-
   877 0000063C 2073797374656D     
   878 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   878 0000064C 6E2E20546865204F53-
   878 00000655 424F4F542E434F4D20-
   878 0000065E 66696C65206D617920-
   878 00000667 626520636F72727570-
   878 00000670 742E20436F7079206F-
   878 00000679 7220646F776E6C6F61-
   878 00000682 64207468652066696C-
   878 0000068B 6520616761696E     
   879 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
   879 0000069B 72792E             
   880 0000069E 0D0A00                  			db	13,10,0
   881 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   881 000006AA 6472657373204D6172-
   881 000006B3 6B204E6F7420466F75-
   881 000006BC 6E64               
   882 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   882 000006C7 726F7220696E646963-
   882 000006D0 617465732061207068-
   882 000006D9 79736963616C207072-
   882 000006E2 6F626C656D20776974-
   882 000006EB 682074686520666C6F-
   882 000006F4 707079206469736B65-
   882 000006FD 7474652E20506C6561-
   882 00000706 7365207265747279   
   883 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
   883 00000717 6E6F74686572206469-
   883 00000720 736B657474652E     
   884 00000727 0D0A00                  			db	13,10,0
   885 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   885 00000733 6F7465637465642044-
   885 0000073C 69736B             
   886 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   886 00000748 726F72206973207573-
   886 00000751 75616C6C7920636175-
   886 0000075A 736564206279206174-
   886 00000763 74656D7074696E6720-
   886 0000076C 746F20777269746520-
   886 00000775 746F20612077726974-
   886 0000077E 652D70726F74656374-
   886 00000787 6564206469736B2E   
   887 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   887 00000798 686520277772697465-
   887 000007A1 2D70726F7465637427-
   887 000007AA 2073657474696E6720-
   887 000007B3 6F6E20746865206469-
   887 000007BC 736B206F7220726574-
   887 000007C5 7279207573696E6720-
   887 000007CE 7573696E6720616E6F-
   887 000007D7 74686572206469736B-
   887 000007E0 2E                 
   888 000007E1 0D0A00                  			db	13,10,0
   889 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   889 000007ED 736B65747465205265-
   889 000007F6 6D6F766564         
   890 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   890 00000804 726F72206D61792069-
   890 0000080D 6E6469636174652074-
   890 00000816 686174207468652066-
   890 0000081F 6C6F70707920646973-
   890 00000828 6B6574746520686173-
   890 00000831 206265656E2072656D-
   890 0000083A 6F7665642066726F6D-
   890 00000843 20746865           
   891 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   891 00000850 652064726976652E20-
   891 00000859 4F6E20736F6D652073-
   891 00000862 797374656D732C2074-
   891 0000086B 68697320636F646520-
   891 00000874 6D617920616C736F20-
   891 0000087D 6F6363757220696620-
   891 00000886 746865206469736B65-
   891 0000088F 747465206973       
   892 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   892 0000089E 70726F746563746564-
   892 000008A7 2E2720506C65617365-
   892 000008B0 207665726966792074-
   892 000008B9 686174207468652064-
   892 000008C2 69736B657474652069-
   892 000008CB 73206E6F7420777269-
   892 000008D4 74652D70726F746563-
   892 000008DD 74656420616E64     
   893 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
   893 000008ED 65726C7920696E7365-
   893 000008F6 7274656420696E2074-
   893 000008FF 6865206469736B6574-
   893 00000908 74652064726976652E 
   894 00000911 0D0A00                  			db	13,10,0
   895 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   895 0000091D 6976652054696D6564-
   895 00000926 204F7574           
   896 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   896 00000933 726F7220757375616C-
   896 0000093C 6C7920696E64696361-
   896 00000945 746573207468617420-
   896 0000094E 6E6F206469736B6574-
   896 00000957 746520697320696E20-
   896 00000960 746865206469736B65-
   896 00000969 747465206472697665-
   896 00000972 2E20506C65617365   
   897 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   897 00000983 726520746861742074-
   897 0000098C 6865206469736B6574-
   897 00000995 74652069732070726F-
   897 0000099E 7065726C7920736561-
   897 000009A7 74656420696E207468-
   897 000009B0 652064726976652061-
   897 000009B9 6E642072657472792E 
   898 000009C2 0D0A00                  			db	13,10,0
   899 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   899 000009CE 6B6E6F776E20457272-
   899 000009D7 6F72               
   900 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   900 000009E2 6F722D636F64652072-
   900 000009EB 657475726E65642062-
   900 000009F4 79207468652042494F-
   900 000009FD 53206973206E6F7420-
   900 00000A06 61207265636F676E69-
   900 00000A0F 7A6564206572726F72-
   900 00000A18 2E20506C6561736520-
   900 00000A21 636F6E73756C74     
   901 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
   901 00000A31 6D7075746572277320-
   901 00000A3A 746563686E6963616C-
   901 00000A43 207265666572656E63-
   901 00000A4C 6520666F7220612064-
   901 00000A55 65736372697074696F-
   901 00000A5E 6E206F662074686973-
   901 00000A67 206572726F7220636F-
   901 00000A70 64652E             
   902 00000A73 0D0A00                  			db	13,10,0
   903                                  wcPrepInBuf		equ	$
   904                                  %endif
   905                                  %ifdef BUILDDISK
   906                                  ;-----------------------------------------------------------------------------------------------------------------------
   907                                  ;
   908                                  ;	File Allocation Tables
   909                                  ;
   910                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
   911                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
   912                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
   913                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
   914                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
   915                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
   916                                  ;	the last cluster in the chain.
   917                                  ;
   918                                  ;	Every three bytes encode two FAT entries as follows:
   919                                  ;
   920                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
   921                                  ;
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923                                  ;-----------------------------------------------------------------------------------------------------------------------
   924                                  ;
   925                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
   926                                  ;
   927                                  ;-----------------------------------------------------------------------------------------------------------------------
   928                                  section			fat1							;first copy of FAT
   929                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
   930                                  			db	005h,060h,000h,	007h,080h,000h
   931                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
   932                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
   933                                  			db	011h,020h,001h,	013h,040h,001h
   934                                  			db	015h,060h,001h,	017h,080h,001h
   935                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
   936                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
   937                                  			db	021h,020h,002h,	023h,040h,002h
   938                                  			db	025h,060h,002h,	027h,080h,002h
   939                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
   940                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
   941                                  ;-----------------------------------------------------------------------------------------------------------------------
   942                                  ;
   943                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
   944                                  ;
   945                                  ;-----------------------------------------------------------------------------------------------------------------------
   946                                  section			fat2							;second copy of FAT
   947                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
   948                                  			db	005h,060h,000h,	007h,080h,000h
   949                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
   950                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
   951                                  			db	011h,020h,001h,	013h,040h,001h
   952                                  			db	015h,060h,001h,	017h,080h,001h
   953                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
   954                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
   955                                  			db	021h,020h,002h,	023h,040h,002h
   956                                  			db	025h,060h,002h,	027h,080h,002h
   957                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
   958                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
   959                                  ;-----------------------------------------------------------------------------------------------------------------------
   960                                  ;
   961                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
   962                                  ;
   963                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
   964                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
   965                                  ;	copy.
   966                                  ;
   967                                  ;-----------------------------------------------------------------------------------------------------------------------
   968                                  section			dir							;diskette directory
   969                                  			db	"OS      COM"					;file name (must contain spaces)
   970                                  			db	20h						;attribute (archive bit set)
   971                                  			times	10 db 0;					;unused
   972                                  			dw	0h						;time
   973                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
   974                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
   975                                  			dw	2						;first cluster
   976                                  			dd	5200h						;file size
   977                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
   978                                  %endif
   979                                  %ifdef BUILDCOM
   980                                  ;-----------------------------------------------------------------------------------------------------------------------
   981                                  ;
   982                                  ;	OS.COM
   983                                  ;
   984                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
   985                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
   986                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
   987                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
   988                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
   989                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
   990                                  ;
   991                                  ;	Our loader addressability is set up according to the following diagram.
   992                                  ;
   993                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
   994                                  ;				|  Boot Sector & Loader Stack Area		|
   995                                  ;				|						|
   996                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
   997                                  ;
   998                                  ;
   999                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1000                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1001                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1002                                  ;				|  Loader Code					|
  1003                                  ;				|						|
  1004                                  ;			009300	+-----------------------------------------------+ CS:0200
  1005                                  ;
  1006                                  ;-----------------------------------------------------------------------------------------------------------------------
  1007                                  ;-----------------------------------------------------------------------------------------------------------------------
  1008                                  ;
  1009                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1010                                  ;
  1011                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1012                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1013                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1014                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1015                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1016                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1017                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1018                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1019                                  ;	registers.
  1020                                  ;
  1021                                  ;-----------------------------------------------------------------------------------------------------------------------
  1022                                  			cpu	8086						;assume minimal CPU
  1023                                  section			loader	vstart=100h					;use .COM compatible addressing
  1024                                  			bits	16						;this is 16-bit code
  1025                                  Loader			push	cs						;use the code segment
  1026                                  			pop	ds						;...as our data segment
  1027                                  			push	cs						;use the code segment
  1028                                  			pop	es						;...as our extra segment
  1029                                  ;
  1030                                  ;	Write a message to the console so we know we have our addressability established.
  1031                                  ;
  1032                                  			mov	si,czStartingMsg				;starting message
  1033                                  			call	PutTTYString					;display loader message
  1034                                  ;
  1035                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1036                                  ;
  1037                                  			call	GetCPUType					;AL = cpu type
  1038                                  			mov	si,czCPUErrorMsg				;loader error message
  1039                                  			cmp	al,3						;80386+?
  1040                                  			jb	LoaderExit					;no, exit with error message
  1041                                  			cpu	386						;allow 80386 instructions
  1042                                  			mov	si,czCPUOKMsg					;cpu ok message
  1043                                  			call	PutTTYString					;display message
  1044                                  ;
  1045                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1046                                  ;
  1047                                  			mov	si,300h						;GDT offset
  1048                                  			mov	ax,cs						;AX:SI = gdt source
  1049                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1050                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1051                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1052                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1053                                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1054                                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1055                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1056                                  			call	PutTTYString					;display message
  1057                                  ;
  1058                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1059                                  ;
  1060                                  			push	EKRNSEG						;use kernel segment ...
  1061                                  			pop	es						;... as target segment
  1062                                  			xor	di,di						;ES:DI = target address
  1063                                  			mov	si,300h						;DS:SI = source address
  1064                                  			mov	cx,5000h					;CX = kernel size
  1065                                  			cld							;forward strings
  1066                                  			rep	movsb						;copy kernel image
  1067                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1068                                  			call	PutTTYString					;display message
  1069                                  ;
  1070                                  ;	Switch to protected mode.
  1071                                  ;
  1072                                  			xor	si,si						;ES:SI = gdt addr
  1073                                  			mov	ss,si						;protected mode ss
  1074                                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1075                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1076                                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1077                                  			mov	dx,001Fh					;outer delay loop count
  1078                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1079                                  			loop	$						;wait out pending interrupts
  1080                                  			dec	dx						;restore outer loop count
  1081                                  			jnz	.10						;continue outer loop
  1082                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1083                                  ;
  1084                                  ;	Enable hardware and maskable interrupts
  1085                                  ;
  1086                                  			xor	al,al						;enable all registers code
  1087                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1088                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1089                                  			sti							;enable maskable interrupts
  1090                                  ;
  1091                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1092                                  ;
  1093                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1094                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1095                                  			jmp	0058h:0						;jump to task state segment selector
  1096                                  ;-----------------------------------------------------------------------------------------------------------------------
  1097                                  ;
  1098                                  ;	Routine:	LoaderExit
  1099                                  ;
  1100                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1101                                  ;
  1102                                  ;	In:		DS:SI	string address
  1103                                  ;
  1104                                  ;-----------------------------------------------------------------------------------------------------------------------
  1105                                  LoaderExit		call	PutTTYString					;display error message
  1106                                  ;
  1107                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1108                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1109                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1110                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1111                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1112                                  ;
  1113                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1114                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1115                                  			jnz	.40						;exit if key pressed
  1116                                  			sti							;enable maskable interrupts
  1117                                  			hlt							;wait for interrupt
  1118                                  			jmp	.30						;repeat until keypress
  1119                                  ;
  1120                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1121                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1122                                  ;	HLT until the system resets.
  1123                                  ;
  1124                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1125                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1126                                  .50			sti							;enable maskable interrupts
  1127                                  			hlt							;stop until reset, int, nmi
  1128                                  			jmp	.50						;loop until restart kicks in
  1129                                  ;-----------------------------------------------------------------------------------------------------------------------
  1130                                  ;
  1131                                  ;	Routine:	GetCPUType
  1132                                  ;
  1133                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1134                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1135                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1136                                  ;
  1137                                  ;	Output:		AX	0 = 808x, v20, etc.
  1138                                  ;				1 = 80186
  1139                                  ;				2 = 80286
  1140                                  ;				3 = 80386
  1141                                  ;
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  GetCPUType		mov	al,1						;AL = 1
  1144                                  			mov	cl,32						;shift count
  1145                                  			shr	al,cl						;try a 32-bit shift
  1146                                  			or	al,al						;did the shift happen?
  1147                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1148                                  			cpu	186
  1149                                  			push	sp						;save stack pointer
  1150                                  			pop	cx						;...into cx
  1151                                  			cmp	cx,sp						;did sp decrement before push?
  1152                                  			jne	.10						;yes, cpu is 80186
  1153                                  			cpu	286
  1154                                  			inc	ax						;AX = 2
  1155                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1156                                  			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1157                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1158                                  			jz	.10						;yes, cpu is 80286
  1159                                  			inc	ax						;AX = 3
  1160                                  .10			ret							;return to caller
  1161                                  ;-----------------------------------------------------------------------------------------------------------------------
  1162                                  ;
  1163                                  ;	Routine:	PutTTYString
  1164                                  ;
  1165                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1166                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1167                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1168                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1169                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1170                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1171                                  ;			registers and flags unless used to indicate return status.
  1172                                  ;
  1173                                  ;	In:		DS:SI	address of string
  1174                                  ;
  1175                                  ;-----------------------------------------------------------------------------------------------------------------------
  1176                                  PutTTYString		cld							;forward strings
  1177                                  			lodsb							;load next byte at DS:SI in AL
  1178                                  			test	al,al						;end of string?
  1179                                  			jz	.10						;... yes, exit our loop
  1180                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1181                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1182                                  			jmp	PutTTYString					;repeat until done
  1183                                  .10			ret							;return to caller
  1184                                  ;-----------------------------------------------------------------------------------------------------------------------
  1185                                  ;
  1186                                  ;	Loader Data
  1187                                  ;
  1188                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1189                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1190                                  ;
  1191                                  ;-----------------------------------------------------------------------------------------------------------------------
  1192                                  			align	2
  1193                                  cwLoaderTSS		dw	0068h						;TSS selector
  1194                                  cwLoaderLDT		dw	0060h						;LDT selector
  1195                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1196                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1197                                  czCPUErrorMsg		db	"The operating system requires an i386 "
  1198                                  			db	"or later processor.",13,10,
  1199                                  			db	"Please press any key to restart the "
  1200                                  			db	"computer.",13,10,0
  1201                                  czCPUOKMsg		db	"CPU ok",13,10,0
  1202                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1203                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1204                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1205                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1206                                  			db	055h,0AAh					;end of sector signature
  1207                                  ;-----------------------------------------------------------------------------------------------------------------------
  1208                                  ;
  1209                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1210                                  ;
  1211                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1212                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1213                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1214                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1215                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1216                                  ;
  1217                                  ;-----------------------------------------------------------------------------------------------------------------------
  1218                                  ;-----------------------------------------------------------------------------------------------------------------------
  1219                                  ;
  1220                                  ;	Tables
  1221                                  ;
  1222                                  ;-----------------------------------------------------------------------------------------------------------------------
  1223                                  ;-----------------------------------------------------------------------------------------------------------------------
  1224                                  ;
  1225                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1226                                  ;
  1227                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1228                                  ;	first descriptor must be all nulls.
  1229                                  ;
  1230                                  ;	6   5         4         3         2         1         0
  1231                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1232                                  ;	----------------------------------------------------------------
  1233                                  ;	h......hffffmmmma......ab......................bn..............n
  1234                                  ;	00000000			all areas have base addresses below 2^24
  1235                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1236                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1237                                  ;	            1001		present, ring-0, selector
  1238                                  ;
  1239                                  ;	h...h	hi-order base address (bits 24-31)
  1240                                  ;	ffff	flags
  1241                                  ;	mmmm	hi-order limit (bits 16-19)
  1242                                  ;	a...a	access
  1243                                  ;	b...b	lo-order base address (bits 0-23)
  1244                                  ;	n...n	lo-order limit (bits 0-15)
  1245                                  ;
  1246                                  ;-----------------------------------------------------------------------------------------------------------------------
  1247                                  section			gdt							;global descriptor table
  1248                                  			dq	0000000000000000h				;00 required null selector
  1249                                  			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1250                                  			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1251                                  			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1252                                  			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1253                                  			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1254                                  			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1255                                  			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1256                                  			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1257                                  			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1258                                  			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1259                                  			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1260                                  			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1261                                  			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1262                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1263                                  ;-----------------------------------------------------------------------------------------------------------------------
  1264                                  ;
  1265                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1266                                  ;
  1267                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1268                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1269                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1270                                  ;
  1271                                  ;	6   5         4         3         2         1         0
  1272                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1273                                  ;	----------------------------------------------------------------
  1274                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1275                                  ;
  1276                                  ;	h...h	high-order offset (bits 16-31)
  1277                                  ;	P	present (0=unused interrupt)
  1278                                  ;	zz	descriptor privilege level
  1279                                  ;	S	storage segment (must be zero for IDT)
  1280                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1281                                  ;	S...S	handling code selector in GDT
  1282                                  ;	l...l	lo-order offset (bits 0-15)
  1283                                  ;
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                  section			idt							;interrupt descriptor table
  1286                                  			mint	dividebyzero					;00 divide by zero
  1287                                  			mint	singlestep					;01 single step
  1288                                  			mint	nmi						;02 non-maskable
  1289                                  			mint	break						;03 break
  1290                                  			mint	into						;04 into
  1291                                  			mint	bounds						;05 bounds
  1292                                  			mint	badopcode					;06 bad op code
  1293                                  			mint	nocoproc					;07 no coprocessor
  1294                                  			mint	doublefault					;08 double-fault
  1295                                  			mint	operand						;09 operand
  1296                                  			mint	badtss						;0A bad TSS
  1297                                  			mint	notpresent					;0B not-present
  1298                                  			mint	stacklimit					;0C stack limit
  1299                                  			mint	protection					;0D general protection fault
  1300                                  			mint	int14						;0E (reserved)
  1301                                  			mint	int15						;0F (reserved)
  1302                                  			mint	coproccalc					;10 (reserved)
  1303                                  			mint	int17						;11 (reserved)
  1304                                  			mint	int18						;12 (reserved)
  1305                                  			mint	int19						;13 (reserved)
  1306                                  			mint	int20						;14 (reserved)
  1307                                  			mint	int21						;15 (reserved)
  1308                                  			mint	int22						;16 (reserved)
  1309                                  			mint	int23						;17 (reserved)
  1310                                  			mint	int24						;18 (reserved)
  1311                                  			mint	int25						;19 (reserved)
  1312                                  			mint	int26						;1A (reserved)
  1313                                  			mint	int27						;1B (reserved)
  1314                                  			mint	int28						;1C (reserved)
  1315                                  			mint	int29						;1D (reserved)
  1316                                  			mint	int30						;1E (reserved)
  1317                                  			mint	int31						;1F (reserved)
  1318                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1319                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1320                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1321                                  			mtrap	com2						;23 IRQ3 com2
  1322                                  			mtrap	com1						;24 IRQ4 com1
  1323                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1324                                  			mtrap	diskette					;26 IRQ6 diskette
  1325                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1326                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1327                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1328                                  			mtrap	irq10						;2A IRQA (reserved)
  1329                                  			mtrap	irq11						;2B IRQB (reserved)
  1330                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1331                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1332                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1333                                  			mtrap	irq15						;2F IRQF (reserved)
  1334                                  			mtrap	svc						;30 OS services
  1335                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1336                                  ;-----------------------------------------------------------------------------------------------------------------------
  1337                                  ;
  1338                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1339                                  ;
  1340                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1341                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1342                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1343                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1344                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1345                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1346                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1347                                  ;
  1348                                  ;-----------------------------------------------------------------------------------------------------------------------
  1349                                  section			kernel	vstart=0h					;data offsets relative to 0
  1350                                  			cpu	386						;allow 80386 instructions
  1351                                  			bits	32						;this is 32-bit code
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  ;
  1354                                  ;	CPU Interrupt Handlers
  1355                                  ;
  1356                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1357                                  ;
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  			menter	dividebyzero					;divide by zero
  1360                                  			push	0						;
  1361                                  			jmp	intcpu						;
  1362                                  			menter	singlestep					;single step
  1363                                  			push	1						;
  1364                                  			jmp	intcpu						;
  1365                                  			menter	nmi						;non-maskable
  1366                                  			push	2						;
  1367                                  			jmp	intcpu						;
  1368                                  			menter	break						;break
  1369                                  			push	3						;
  1370                                  			jmp	intcpu						;
  1371                                  			menter	into						;into
  1372                                  			push	4						;
  1373                                  			jmp	intcpu						;
  1374                                  			menter	bounds						;bounds
  1375                                  			push	5						;
  1376                                  			jmp	intcpu						;
  1377                                  			menter	badopcode					;bad opcode interrupt
  1378                                  			push	6						;
  1379                                  			jmp	intcpu						;
  1380                                  			menter	nocoproc					;no coprocessor interrupt
  1381                                  			push	7						;
  1382                                  			jmp	intcpu						;
  1383                                  			menter	doublefault					;doublefault interrupt
  1384                                  			push	8						;
  1385                                  			jmp	intcpu						;
  1386                                  			menter	operand						;operand interrupt
  1387                                  			push	9						;
  1388                                  			jmp	intcpu						;
  1389                                  			menter	badtss						;bad tss interrupt
  1390                                  			push	10						;
  1391                                  			jmp	intcpu						;
  1392                                  			menter	notpresent					;not present interrupt
  1393                                  			push	11						;
  1394                                  			jmp	intcpu						;
  1395                                  			menter	stacklimit					;stack limit interrupt
  1396                                  			push	12						;
  1397                                  			jmp	intcpu						;
  1398                                  			menter	protection					;protection fault interrupt
  1399                                  			push	13						;
  1400                                  			jmp	intcpu						;
  1401                                  			menter	int14						;(reserved)
  1402                                  			push	14						;
  1403                                  			jmp	intcpu						;
  1404                                  			menter	int15						;(reserved)
  1405                                  			push	15						;
  1406                                  			jmp	intcpu						;
  1407                                  			menter	coproccalc					;coprocessor calculation
  1408                                  			push	16						;
  1409                                  			jmp	intcpu						;
  1410                                  			menter	int17						;(reserved)
  1411                                  			push	17						;
  1412                                  			jmp	intcpu						;
  1413                                  			menter	int18						;(reserved)
  1414                                  			push	18						;
  1415                                  			jmp	intcpu						;
  1416                                  			menter	int19						;(reserved)
  1417                                  			push	19						;
  1418                                  			jmp	intcpu						;
  1419                                  			menter	int20						;(reserved)
  1420                                  			push	20						;
  1421                                  			jmp	intcpu						;
  1422                                  			menter	int21						;(reserved)
  1423                                  			push	21						;
  1424                                  			jmp	intcpu						;
  1425                                  			menter	int22						;(reserved)
  1426                                  			push	22						;
  1427                                  			jmp	intcpu						;
  1428                                  			menter	int23						;(reserved)
  1429                                  			push	23						;
  1430                                  			jmp	intcpu						;
  1431                                  			menter	int24						;(reserved)
  1432                                  			push	24						;
  1433                                  			jmp	intcpu						;
  1434                                  			menter	int25						;(reserved)
  1435                                  			push	25						;
  1436                                  			jmp	intcpu						;
  1437                                  			menter	int26						;(reserved)
  1438                                  			push	26						;
  1439                                  			jmp	intcpu						;
  1440                                  			menter	int27						;(reserved)
  1441                                  			push	27						;
  1442                                  			jmp	intcpu						;
  1443                                  			menter	int28						;(reserved)
  1444                                  			push	28						;
  1445                                  			jmp	intcpu						;
  1446                                  			menter	int29						;(reserved)
  1447                                  			push	29						;
  1448                                  			jmp	intcpu						;
  1449                                  			menter	int30						;(reserved)
  1450                                  			push	30						;
  1451                                  			jmp	intcpu						;
  1452                                  			menter	int31						;(reserved)
  1453                                  			push	31						;
  1454                                  intcpu			pop	eax						;
  1455                                  			iretd
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  ;
  1458                                  ;	Hardware Device Interupts
  1459                                  ;
  1460                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1461                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1462                                  ;	(BX=2028h).
  1463                                  ;
  1464                                  ;-----------------------------------------------------------------------------------------------------------------------
  1465                                  ;-----------------------------------------------------------------------------------------------------------------------
  1466                                  ;
  1467                                  ;	IRQ0	Clock Tick Interrupt
  1468                                  ;
  1469                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1470                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1471                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1472                                  ;
  1473                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1474                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1475                                  ;
  1476                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1477                                  ;	zero, the floppy disk motors are turned off.
  1478                                  ;
  1479                                  ;-----------------------------------------------------------------------------------------------------------------------
  1480                                  			menter	clocktick					;clock tick interrupt
  1481                                  			push	eax						;save volatile regs
  1482                                  			push	edx						;
  1483                                  			push	ds						;
  1484                                  			push	ESELDAT						;load OS data selector ...
  1485                                  			pop	ds						;... into data segment register
  1486                                  			mov	eax,[wfClockTicks]				;eax = clock ticks
  1487                                  			inc	eax						;increment clock ticks
  1488                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1489                                  			jb	irq0.10						;no, skip ahead
  1490                                  			inc	byte [wbClockDays]				;increment clock days
  1491                                  			xor	eax,eax						;reset clock ticks
  1492                                  irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1493                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1494                                  			je	irq0.20						;yes, skip ahead
  1495                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1496                                  			jnz	irq0.20						;skip ahead if non-zero
  1497                                  			sti							;enable maskable interrupts
  1498                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1499                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1500                                  			in	al,dx						;FDC main status byte
  1501                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1502                                  			jnz	irq0.15						;wait while busy
  1503                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1504                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1505                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1506                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1507                                  			out	dx,al						;turn motor off
  1508                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1509                                  			pop	ds						;restore volatile regs
  1510                                  			pop	edx						;
  1511                                  			pop	eax						;
  1512                                  			iretd							;return to caller
  1513                                  			menter	keyboard					;keyboard interrrupt
  1514                                  			push	eax						;
  1515                                  			jmp	hwint						;
  1516                                  			menter	iochannel					;secondary 8259A cascade
  1517                                  			push	eax						;
  1518                                  			jmp	hwint						;
  1519                                  			menter	com2						;serial port 2 interrupt
  1520                                  			push	eax						;
  1521                                  			jmp	hwint						;
  1522                                  			menter	com1						;serial port 1 interrupt
  1523                                  			push	eax						;
  1524                                  			jmp	hwint						;
  1525                                  			menter	lpt2						;parallel port 2 interrupt
  1526                                  			push	eax						;
  1527                                  			jmp	hwint						;
  1528                                  			menter	diskette					;floppy disk interrupt
  1529                                  			push	eax						;
  1530                                  			jmp	hwint						;
  1531                                  			menter	lpt1						;parallel port 1 interrupt
  1532                                  			push	eax						;
  1533                                  			jmp	hwint						;
  1534                                  			menter	rtclock						;real-time clock interrupt
  1535                                  			push	eax						;
  1536                                  			jmp	hwwint						;
  1537                                  			menter	retrace						;CGA vertical retrace interrupt
  1538                                  			push	eax						;
  1539                                  			jmp	hwwint						;
  1540                                  			menter	irq10						;reserved
  1541                                  			push	eax						;
  1542                                  			jmp	hwwint						;
  1543                                  			menter	irq11						;reserved
  1544                                  			push	eax						;
  1545                                  			jmp	hwwint						;
  1546                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1547                                  			push	eax						;
  1548                                  			jmp	hwwint						;
  1549                                  			menter	coprocessor					;coprocessor interrupt
  1550                                  			push	eax						;
  1551                                  			jmp	hwwint						;
  1552                                  			menter	fixeddisk					;fixed disk interrupt
  1553                                  			push	eax						;
  1554                                  			jmp	hwwint						;
  1555                                  			menter	irq15						;reserved
  1556                                  			push	eax						;save volatile reg
  1557                                  ;-----------------------------------------------------------------------------------------------------------------------
  1558                                  ;
  1559                                  ;	Exit from hardware interrupt
  1560                                  ;
  1561                                  ;-----------------------------------------------------------------------------------------------------------------------
  1562                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1563                                  			jmp	hwint90						;skip ahead
  1564                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1565                                  hwint90			pop	eax						;restore volatile reg
  1566                                  			iretd							;return from interrupt
  1567                                  ;-----------------------------------------------------------------------------------------------------------------------
  1568                                  ;
  1569                                  ;	INT 30h Operating System Software Service Interrupt
  1570                                  ;
  1571                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1572                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1573                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1574                                  ;	the entry address of the specific function from a table.
  1575                                  ;
  1576                                  ;-----------------------------------------------------------------------------------------------------------------------
  1577                                  			menter	svc
  1578                                  			cmp	al,maxtsvc					;is our function out of range?
  1579                                  			jae	svc90						;yes, skip ahead
  1580                                  			movzx	eax,al						;function
  1581                                  			shl	eax,2						;offset into table
  1582                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  1583                                  svc90			iretd							;return from interrupt
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;	Service Request Table
  1587                                  ;
  1588                                  ;
  1589                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1590                                  ;
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1593                                  			tsvce	ClearConsoleScreen				;clear console screen
  1594                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1595                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1596                                  ;-----------------------------------------------------------------------------------------------------------------------
  1597                                  ;
  1598                                  ;	Service Request Macros
  1599                                  ;
  1600                                  ;	These macros provide positional parameterization of service request calls.
  1601                                  ;
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                  %macro			putConsoleString 1
  1604                                  			mov	edx,%1						;EDX = string address
  1605                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1606                                  			int	_svc						;invoke OS service
  1607                                  %endmacro
  1608                                  %macro			clearConsoleScreen 0
  1609                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  1610                                  			int	_svc						;invoke OS service
  1611                                  %endmacro
  1612                                  %macro			placeCursor 0
  1613                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  1614                                  			int	_svc						;invoke OS service
  1615                                  %endmacro
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  ;
  1618                                  ;	Kernel Function Library
  1619                                  ;
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;-----------------------------------------------------------------------------------------------------------------------
  1622                                  ;
  1623                                  ;	Console Helper Routines
  1624                                  ;
  1625                                  ;	PutConsoleString
  1626                                  ;	NextConsoleColumn
  1627                                  ;	FirstConsoleColumn
  1628                                  ;	NextConsoleRow
  1629                                  ;	PutConsoleChar
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;	Routine:	PutConsoleString
  1635                                  ;
  1636                                  ;	Description:	Write a sequence of ASCII characters to the console until null and update the console position
  1637                                  ;			as needed.
  1638                                  ;
  1639                                  ;	In:		EDX	source address
  1640                                  ;			DS	OS data selector
  1641                                  ;
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  PutConsoleString	push	esi						;save volatile regs
  1644                                  			mov	esi,edx						;source address
  1645                                  			cld							;forward strings
  1646                                  .10			lodsb							;ASCII character
  1647                                  			or	al,al						;end of string?
  1648                                  			jz	.40						;yes, skip ahead
  1649                                  			cmp	al,EASCIIRETURN					;carriage return?
  1650                                  			jne	.20						;no, skip ahead
  1651                                  			call	FirstConsoleColumn				;move to start of row
  1652                                  			jmp	.10						;next character
  1653                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  1654                                  			jne	.30						;no, skip ahead
  1655                                  			call	NextConsoleRow					;move to next row
  1656                                  			jmp	.10						;next character
  1657                                  .30			call	PutConsoleChar					;output character to console
  1658                                  			call	NextConsoleColumn				;advance to next column
  1659                                  			jmp	.10						;next character
  1660                                  .40			pop	esi						;restore volatile regs
  1661                                  			ret							;return to caller
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  ;
  1664                                  ;	Routine:	NextConsoleColumn
  1665                                  ;
  1666                                  ;	Description:	Advance the console position one column. Wrap the column and advance one row if needed.
  1667                                  ;
  1668                                  ;	In:		DS	OS data selector
  1669                                  ;
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  1672                                  			inc	al						;increment column
  1673                                  			mov	[wbConsoleColumn],al				;save column
  1674                                  			cmp	al,ECONCOLS					;end of row?
  1675                                  			jb	.10						;no, skip ahead
  1676                                  			call	FirstConsoleColumn				;reset column to start of row
  1677                                  			call	NextConsoleRow					;line feed to next row
  1678                                  .10			ret							;return to caller
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;	Routine:	FirstConsoleColumn
  1682                                  ;
  1683                                  ;	Description:	Reset the console column to start of the row.
  1684                                  ;
  1685                                  ;	In:		DS	OS data selector
  1686                                  ;
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  FirstConsoleColumn	xor	al,al						;zero column
  1689                                  			mov	[wbConsoleColumn],al				;save column
  1690                                  			ret							;return to caller
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                  ;
  1693                                  ;	Routine:	NextConsoleRow
  1694                                  ;
  1695                                  ;	Description:	Advance the console position one line. Scroll the screen one row if needed.
  1696                                  ;
  1697                                  ;	In:		DS	OS data selector
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  1701                                  			inc	al						;increment row
  1702                                  			mov	[wbConsoleRow],al				;save row
  1703                                  			cmp	al,ECONROWS					;end of screen?
  1704                                  			jb	.10						;no, skip ahead
  1705                                  			call	ScrollConsoleRow				;scroll up one row
  1706                                  			mov	al,[wbConsoleRow]				;row
  1707                                  			dec	al						;decrement row
  1708                                  			mov	[wbConsoleRow],al				;save row
  1709                                  .10			ret							;return to caller
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;	Routine:	PutConsoleChar
  1713                                  ;
  1714                                  ;	Description:	Write one ASCII character to the console screen.
  1715                                  ;
  1716                                  ;	In:		AL	ASCII character
  1717                                  ;			DS	OS data selector
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                  PutConsoleChar		push	ecx						;save volatile regs
  1721                                  			push	es						;
  1722                                  			push	ESELCGA						;load CGA selector ...
  1723                                  			pop	es						;... into extra segment reg
  1724                                  			mov	cl,[wbConsoleColumn]				;column
  1725                                  			mov	ch,[wbConsoleRow]				;row
  1726                                  			call	SetConsoleChar					;put character at row, column
  1727                                  			pop	es						;restore volatile regs
  1728                                  			pop	ecx						;
  1729                                  			ret							;return to caller
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;	Memory-Mapped Video Routines
  1733                                  ;
  1734                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  1735                                  ;
  1736                                  ;	ClearConsoleScreen
  1737                                  ;	ScrollConsoleRow
  1738                                  ;	SetConsoleChar
  1739                                  ;
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;	Routine:	ClearConsoleScreen
  1744                                  ;
  1745                                  ;	Description:	Clear the console (CGA) screen.
  1746                                  ;
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                  ClearConsoleScreen	push	ecx						;save volatile regs
  1749                                  			push	edi						;
  1750                                  			push	ds						;
  1751                                  			push	es						;
  1752                                  			push	ESELDAT						;load OS Data selector ...
  1753                                  			pop	ds						;... into DS register
  1754                                  			push	ESELCGA						;load CGA selector ...
  1755                                  			pop	es						;... into ES register
  1756                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  1757                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  1758                                  			xor	edi,edi						;target offset
  1759                                  			cld							;forward strings
  1760                                  			rep	stosd						;reset screen body
  1761                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  1762                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  1763                                  			rep	stosd						;reset OIA line
  1764                                  			xor	al,al						;zero register
  1765                                  			mov	[wbConsoleRow],al				;reset console row
  1766                                  			mov	[wbConsoleColumn],al				;reset console column
  1767                                  			call	PlaceCursor					;place cursor at current position
  1768                                  			pop	es						;restore volatile regs
  1769                                  			pop	ds						;
  1770                                  			pop	edi						;
  1771                                  			pop	ecx						;
  1772                                  			ret							;return to caller
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;	Routine:	ScrollConsoleRow
  1776                                  ;
  1777                                  ;	Description:	Scroll console (text) screen up one row.
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  ScrollConsoleRow	push	ecx						;save volatile regs
  1781                                  			push	esi						;
  1782                                  			push	edi						;
  1783                                  			push	ds						;
  1784                                  			push	es						;
  1785                                  			push	ESELCGA						;load CGA video selector ...
  1786                                  			pop	ds						;... into DS
  1787                                  			push	ESELCGA						;load CGA video selector ...
  1788                                  			pop	es						;... into ES
  1789                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  1790                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  1791                                  			xor	edi,edi						;edi = target (line 1)
  1792                                  			cld							;forward strings
  1793                                  			rep	movsd						;move 24 lines up
  1794                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  1795                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  1796                                  			rep	stosd						;clear bottom row
  1797                                  			pop	es						;restore volatile regs
  1798                                  			pop	ds						;
  1799                                  			pop	edi						;
  1800                                  			pop	esi						;
  1801                                  			pop	ecx						;
  1802                                  			ret							;return to caller
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;	Routine:	SetConsoleChar
  1806                                  ;
  1807                                  ;	Description:	Output an ASCII character at the given row and column.
  1808                                  ;
  1809                                  ;	In:		AL	ASCII character
  1810                                  ;			CL	column
  1811                                  ;			CH	row
  1812                                  ;			ES	CGA selector
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  SetConsoleChar		mov	dl,al						;ASCII character
  1816                                  			movzx	eax,ch						;row
  1817                                  			mov	ah,ECONCOLS					;cols/row
  1818                                  			mul	ah						;row * cols/row
  1819                                  			add	al,cl						;add column
  1820                                  			adc	ah,0						;handle carry
  1821                                  			shl	eax,1						;screen offset
  1822                                  			mov	[es:eax],dl					;store character
  1823                                  			ret							;return to caller
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                  ;
  1826                                  ;	Input/Output Routines
  1827                                  ;
  1828                                  ;	These routines read and/or write directly to ports.
  1829                                  ;
  1830                                  ;	PlaceCursor
  1831                                  ;	PutPrimaryEndOfInt
  1832                                  ;	PutSecondaryEndOfInt
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;	Routine:	PlaceCursor
  1838                                  ;
  1839                                  ;	Description:	Position the cursor on the console.
  1840                                  ;
  1841                                  ;	In:		DS	OS data selector
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  PlaceCursor		push	ecx						;save volatile regs
  1845                                  			mov	al,[wbConsoleRow]				;al = row
  1846                                  			mov	ah,ECONCOLS					;ah = cols/row
  1847                                  			mul	ah						;row offset
  1848                                  			add	al,[wbConsoleColumn]				;add column
  1849                                  			adc	ah,0						;add overflow
  1850                                  			mov	ecx,eax						;screen offset
  1851                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  1852                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  1853                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  1854                                  			out	dx,al						;select register
  1855                                  			inc	edx						;data port
  1856                                  			mov	al,ch						;hi-order cursor loc
  1857                                  			out	dx,al						;store hi-order loc
  1858                                  			dec	edx						;register select port
  1859                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  1860                                  			out	dx,al						;select register
  1861                                  			inc	edx						;data port
  1862                                  			mov	al,cl						;lo-order cursor loc
  1863                                  			out	dx,al						;store lo-order loc
  1864                                  			pop	ecx						;restore volatile regs
  1865                                  			ret							;return to caller
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;	Routine:	PutPrimaryEndOfInt
  1869                                  ;
  1870                                  ;	Description:	Send non-specific end-of-interrupt signal to the primary PIC.
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  1874                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  1875                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  1876                                  			ret							;return to caller
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;	Routine:	PutSecondaryEndOfInt
  1880                                  ;
  1881                                  ;	Description:	Send non-specific end-of-interrupt signal to the secondary PIC.
  1882                                  ;
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  1885                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  1886                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  1887                                  			ret							;return to caller
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  ;
  1890                                  ;	End of the Kernel Function Library
  1891                                  ;
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  1894                                  			db	055h,0AAh					;end of segment
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;	Console Task
  1898                                  ;
  1899                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  1900                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  1901                                  ;	screen and responds to user commands.
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;	Console Stack								@disk: 007400	@mem:  004000
  1907                                  ;
  1908                                  ;	This is the stack for the console task. It supports 448 nested calls.
  1909                                  ;
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  section			constack						;console task stack
  1912                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  1916                                  ;
  1917                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  1918                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  1919                                  ;	16 descriptors. Six are initially defined.
  1920                                  ;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  section			conldt							;console local descriptors
  1923                                  			dq	004093004780007Fh				;04 TSS alias
  1924                                  			dq	004093004700007Fh				;0C LDT alias
  1925                                  			dq	00409300400006FFh				;14 stack
  1926                                  			dq	00C093000000FFFFh				;1C data
  1927                                  			dq	00409B0050000FFFh				;24 code
  1928                                  			dq	00409300480007FFh				;2C message queue
  1929                                  			times	128-($-$$) db 0h				;zero fill to end of section
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                  ;
  1932                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  1933                                  ;
  1934                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  1935                                  ;	segment. CS to console code.
  1936                                  ;
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  section			contss							;console task state segment
  1939                                  			dd	0						;00 back-link tss
  1940                                  			dd	0700h						;04 esp ring 0
  1941                                  			dd	0014h						;08 ss ring 0
  1942                                  			dd	0700h						;0C esp ring 1
  1943                                  			dd	0014h						;10 es ring 1
  1944                                  			dd	0700h						;14 esp ring 2
  1945                                  			dd	0014h						;18 ss ring 2
  1946                                  			dd	0						;1C cr ring 3
  1947                                  			dd	0						;20 eip
  1948                                  			dd	0200h						;24 eflags
  1949                                  			dd	0						;28 eax
  1950                                  			dd	0						;2C ecx
  1951                                  			dd	0						;30 edx
  1952                                  			dd	0						;34 ebx
  1953                                  			dd	0700h						;38 esp ring 3
  1954                                  			dd	0						;3C ebp
  1955                                  			dd	0						;40 esi
  1956                                  			dd	0						;44 edi
  1957                                  			dd	001Ch						;48 es
  1958                                  			dd	0024h						;4C cs
  1959                                  			dd	0014h						;50 ss ring 3
  1960                                  			dd	001Ch						;54 ds
  1961                                  			dd	0						;58 fs
  1962                                  			dd	0						;5c gs
  1963                                  			dd	0050h						;60 ldt selector in gdt
  1964                                  			times	128-($-$$) db 0h				;zero fill to end of section
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  1968                                  ;
  1969                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  1970                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  1971                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  1972                                  ;	event.
  1973                                  ;
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  section			conmque							;console message queue
  1976                                  			dd	8						;head pointer
  1977                                  			dd	8						;tail pointer
  1978                                  			times	510 dd 0					;queue elements
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ;
  1981                                  ;	Console Code								@disk: 008400	@mem: 005000
  1982                                  ;
  1983                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  1984                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  1985                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  1986                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  1987                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  1988                                  ;	board input, echoing to the console screen and responding to user commands.
  1989                                  ;
  1990                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  1991                                  ;
  1992                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  1993                                  ;				|  Real Mode Interrupt Vectors			|
  1994                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  1995                                  ;				|  Reserved BIOS Memory Area			|
  1996                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  1997                                  ;				|  Shared Kernel Memory Area			|
  1998                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  1999                                  ;				|  Global Descriptor Table (GDT)		|
  2000                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2001                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2002                                  ;			002000	+-----------------------------------------------+
  2003                                  ;				|  Interrupt Handlers				|
  2004                                  ;				|  Kernel Function Library			|
  2005                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2006                                  ;				|  Console Task Stack Area			|
  2007                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2008                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2009                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2010                                  ;				|  Console Task Task State Segment (TSS)	|
  2011                                  ;			004800	+-----------------------------------------------+
  2012                                  ;				|  Console Task Message Queue			|
  2013                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2014                                  ;				|  Console Task Code				|
  2015                                  ;				|  Console Task Constants			|
  2016                                  ;			006000	+===============================================+
  2017                                  ;
  2018                                  ;-----------------------------------------------------------------------------------------------------------------------
  2019                                  section			concode	vstart=5000h					;labels relative to 5000h
  2020                                  ConCode			call	ConInitializeData				;initialize console variables
  2021                                  			clearConsoleScreen					;clear the console screen
  2022                                  			putConsoleString czTitle				;display startup message
  2023                                  .10			putConsoleString czPrompt				;display input prompt
  2024                                  			placeCursor						;set CRT cursor location
  2025                                  .20			sti							;enable interrupts
  2026                                  			hlt							;halt until interrupt
  2027                                  			jmp	.20						;continue halt loop
  2028                                  ;-----------------------------------------------------------------------------------------------------------------------
  2029                                  ;
  2030                                  ;	Routine:	ConInitializeData
  2031                                  ;
  2032                                  ;	Description:	Initialize console variables used by the console task.
  2033                                  ;
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ConInitializeData	push	ecx						;save volatile regs
  2036                                  			push	edi						;
  2037                                  			push	es						;
  2038                                  			push	ESELDAT						;load OS data selector ...
  2039                                  			pop	es						;... into extra segment register
  2040                                  			mov	edi,ECONDATA					;OS console data address
  2041                                  			xor	al,al						;initialization value
  2042                                  			mov	ecx,ECONDATALEN					;size of OS console data
  2043                                  			cld							;forward strings
  2044                                  			rep	stosb						;initialize data
  2045                                  			pop	es						;restore volatile regs
  2046                                  			pop	edi						;
  2047                                  			pop	ecx						;
  2048                                  			ret							;return to caller
  2049                                  ;-----------------------------------------------------------------------------------------------------------------------
  2050                                  ;
  2051                                  ;	Constants
  2052                                  ;
  2053                                  ;-----------------------------------------------------------------------------------------------------------------------
  2054                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  2055                                  czPrompt		db	":",0						;prompt string
  2056                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  2057                                  			db	055h,0AAh					;end of section
  2058                                  %endif
  2059                                  %ifdef BUILDDISK
  2060                                  ;-----------------------------------------------------------------------------------------------------------------------
  2061                                  ;
  2062                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  2063                                  ;
  2064                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2065                                  ;
  2066                                  ;-----------------------------------------------------------------------------------------------------------------------
  2067                                  section			unused							;unused disk space
  2068                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  2069                                  %endif
