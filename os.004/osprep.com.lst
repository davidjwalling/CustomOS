     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.004
     6                                  ;
     7                                  ;       Description:    In this sample program, the loader is expanded to validate the CPU type and place the CPU into
     8                                  ;                       protected mode.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  ;
   210                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   211                                  ;
   212                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   213                                  ;       external devices and signals a hardware interrupt to the CPU.
   214                                  ;
   215                                  ;-----------------------------------------------------------------------------------------------------------------------
   216                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   217                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   218                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   219                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   220                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   221                                  ;-----------------------------------------------------------------------------------------------------------------------
   222                                  ;
   223                                  ;       8253 Programmable Interval Timer                                        EPIT...
   224                                  ;
   225                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   226                                  ;       approximately 18.2 times per second.
   227                                  ;
   228                                  ;-----------------------------------------------------------------------------------------------------------------------
   229                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   230                                  ;-----------------------------------------------------------------------------------------------------------------------
   231                                  ;
   232                                  ;       x86 CPU Architecture                                                    ;EX86...
   233                                  ;
   234                                  ;-----------------------------------------------------------------------------------------------------------------------
   235                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   239                                  ;
   240                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   241                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   242                                  ;
   243                                  ;       0.......        Segment is not present in memory (triggers int 11)
   244                                  ;       1.......        Segment is present in memory
   245                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   246                                  ;       ...0....        Segment is a system segment
   247                                  ;       ...00010                Local Descriptor Table
   248                                  ;       ...00101                Task Gate
   249                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   250                                  ;       ...01100                Call Gate (386)
   251                                  ;       ...01110                Interrupt Gate (386)
   252                                  ;       ...01111                Trap Gate (386)
   253                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   254                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   255                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   256                                  ;
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   259                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       Firmware-Defined Values
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   268                                  ;
   269                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   270                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   271                                  ;
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   274                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   275                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   276                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   277                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   278                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   279                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   280                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   281                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   282                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   283                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  ;
   286                                  ;       Standards-Based Values
   287                                  ;
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ;
   291                                  ;       ASCII                                                                   EASCII...
   292                                  ;
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   295                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       Operating System Values
   299                                  ;
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   304                                  ;
   305                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   306                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   310                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   311                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   312                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   313                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   314                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   315                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;       Console Constants                                                       ECON...
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ECONCOLS                equ     80                                              ;columns per row
   320                                  ECONROWS                equ     24                                              ;console rows
   321                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   322                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   323                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   324                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   325                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   330                                  EGDTCGA                 equ     020h                                            ;cga video selector
   331                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   332                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   333                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   334                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   335                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   336                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   337                                  ;-----------------------------------------------------------------------------------------------------------------------
   338                                  ;       Kernel Constants                                                        EKRN...
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   341                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   342                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   343                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   344                                  ;=======================================================================================================================
   345                                  ;
   346                                  ;       Structures
   347                                  ;
   348                                  ;=======================================================================================================================
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;
   351                                  ;       OSDATA
   352                                  ;
   353                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   354                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  struc                   OSDATA
   358 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   359 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   360 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   361 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   362 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   363 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   364 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   365 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   366 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   367 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   368 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   369 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   370 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   371 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   372 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   373 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   374 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   375 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   376 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   377 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   378 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   379 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   380 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   381 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   382 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   383 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   384 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   385 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   386 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   387 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   388 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   389 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   390 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   391 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   392 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   393 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   394 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   395 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   396 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   397 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   398 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   399 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   400 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   401 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   402 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   403 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   404 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   405 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   406 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   407 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   408 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   409 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   410 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   411 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   412 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   413 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   414 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   415 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   416 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   417 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   418 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   419 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   420 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   421 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   422 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   423 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   424 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   425 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   426 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   427 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   428 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   429 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   430 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   431 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   432 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   433 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   434 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   435 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   436 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   437 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   438 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   439 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   440 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   441 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   442 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   443 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   444 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   445 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   446 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   447 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   448 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   449 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   450 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   451 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   452 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   453 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   454 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   455 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   456 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   457 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   458 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ;
   461                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   462                                  ;
   463                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   464                                  ;
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ECONDATA                equ     ($)
   467 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   468 00000804 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   469 00000854 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   470 00000855 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   471                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;
   474                                  ;       End of OS Variables
   475                                  ;
   476                                  ;-----------------------------------------------------------------------------------------------------------------------
   477                                  endstruc
   478                                  ;-----------------------------------------------------------------------------------------------------------------------
   479                                  ;
   480                                  ;       Macros
   481                                  ;
   482                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   483                                  ;
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  %macro                  mint    1
   486                                  _%1                     equ     ($-$$) / EX86DESCLEN
   487                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   488                                  %endmacro
   489                                  %macro                  mtrap   1
   490                                  _%1                     equ     ($-$$) / EX86DESCLEN
   491                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   492                                  %endmacro
   493                                  %macro                  menter  1
   494                                  ?%1                     equ     ($-$$)
   495                                  %endmacro
   496                                  %macro                  tsvce   1
   497                                  e%1                     equ     ($-tsvc)/4
   498                                                          dd      %1
   499                                  %endmacro
   500                                  %ifdef BUILDBOOT
   501                                  ;=======================================================================================================================
   502                                  ;
   503                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   504                                  ;
   505                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   506                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   507                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   508                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   509                                  ;
   510                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   511                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   512                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   513                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   514                                  ;       immediately followed by a disk parameter table.
   515                                  ;
   516                                  ;=======================================================================================================================
   517                                                          cpu     8086                                            ;assume minimal CPU
   518                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   519                                                          bits    16                                              ;16-bit code at power-up
   520                                  %ifdef BUILDPREP
   521 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   522                                  %else
   523                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   524                                  %endif
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  ;
   527                                  ;       Disk Parameter Table
   528                                  ;
   529                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   530                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   531                                  ;
   532                                  ;-----------------------------------------------------------------------------------------------------------------------
   533 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   534 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   535 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   536 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   537 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   538 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   539 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   540 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   541 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   542                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   543 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   544 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   545 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   546                                  ;
   547                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   548                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   549                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   550                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   551                                  ;       given several possible starting values for CS:IP.
   552                                  ;
   553                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   554 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   555                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   556 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   557 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   558 00000025 B104                                            mov     cl,4                                            ;shift count
   559 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   560 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   561 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   562                                  ;
   563                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   564                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   565                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   566                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   567                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   568                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   569                                  ;
   570 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   571 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   572 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   573 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   574 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   575                                  ;
   576                                  ;       Our boot addressability is now set up according to the following diagram.
   577                                  ;
   578                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   579                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   580                                  ;                               |  256 = 100h bytes                             |
   581                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   582                                  ;                               |  Boot Sector (vstart=0100h)                   |
   583                                  ;                               |  1 sector = 512 = 200h bytes                  |
   584                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   585                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   586                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   587                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   588                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   589                                  ;                               |  2 sectors = 1024 = 400h bytes
   590                                  ;                       009400  +-----------------------------------------------+ DS:1900
   591                                  ;
   592                                  ;       On entry, DL indicates the drive being booted from.
   593                                  ;
   594 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   595                                  ;
   596                                  ;       Compute directory i/o buffer address.
   597                                  ;
   598 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   599 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   600 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   601 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   602                                  ;
   603                                  ;       Compute segment where os.com will be loaded.
   604                                  ;
   605 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   606 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   607 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   608 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   609                                  ;
   610                                  ;       Set the video mode to 80 column, 25 row, text.
   611                                  ;
   612 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   613 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   614                                  ;
   615                                  ;       Write a message to the console so we know we have our addressability established.
   616                                  ;
   617 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   618 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   619                                  ;
   620                                  ;       Initialize the number of directory sectors to search.
   621                                  ;
   622 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   623 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   624                                  ;
   625                                  ;       Compute number of directory sectors and initialize overhead count.
   626                                  ;
   627 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   628 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   629 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   630 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   631                                  ;
   632                                  ;       Compute directory entries per sector.
   633                                  ;
   634 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   635 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   636 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   637                                  ;
   638                                  ;       Compute first logical directory sector and update overhead count.
   639                                  ;
   640 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   641 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   642 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   643 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   644 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   645 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   646                                  ;
   647                                  ;       Read directory sector.
   648                                  ;
   649 0000008E B001                    .30                     mov     al,1                                            ;sector count
   650 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   651 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   652 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   653                                  ;
   654                                  ;       Setup variables to search this directory sector.
   655                                  ;
   656 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   657 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   658 000000A1 7603                                            jna     .40                                             ;no, continue
   659 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   660 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   661 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   662 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   663                                  ;
   664                                  ;       Loop through directory sectors searching for kernel program.
   665                                  ;
   666 000000B1 56                      .50                     push    si                                              ;save kernel name address
   667 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   668 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   669 000000B6 FC                                              cld                                                     ;forward strings
   670 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   671 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   672 000000BA 5E                                              pop     si                                              ;restore kernel name address
   673 000000BB 7418                                            je      .60                                             ;exit loop if found
   674 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   675 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   676 000000C2 75ED                                            jnz     .50                                             ;next entry
   677                                  ;
   678                                  ;       Repeat search if we are not at the end of the directory.
   679                                  ;
   680 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   681 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   682 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   683 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   684 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   685                                  ;
   686                                  ;       If we find the kernel program in the directory, read the FAT.
   687                                  ;
   688 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   689 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   690 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   691 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   692 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   693 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   694                                  ;
   695                                  ;       Get the starting cluster of the kernel program and target address.
   696                                  ;
   697 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   698 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   699                                  ;
   700                                  ;       Read each program cluster into RAM.
   701                                  ;
   702 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   703 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   704 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   705 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   706 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   707 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   708 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   709 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   710 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   711                                  ;
   712                                  ;       Update buffer pointer for next cluster.
   713                                  ;
   714 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   715 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   716 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   717 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   718 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   719                                  ;
   720                                  ;       Compute next cluster number.
   721                                  ;
   722 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   723 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   724 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   725 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   726 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   727 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   728 00000120 83E701                                          and     di,1                                            ;get low bit
   729 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   730 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   731 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   732                                  ;
   733                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   734                                  ;
   735 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   736 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   737 00000130 B104                                            mov     cl,4                                            ;shift count
   738 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   739 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   740 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   741 0000013A 75B2                                            jne     .70                                             ;no, continue
   742                                  ;
   743                                  ;       Transfer control to the operating system program.
   744                                  ;
   745 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   746 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   747 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   748                                  ;
   749                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   750                                  ;
   751 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   752 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   753 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   754 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   755 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   756 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   757 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   758 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   759 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   760 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   761                                  ;
   762                                  ;       Try maxtries times to read sector.
   763                                  ;
   764 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   765 00000160 53                      .10                     push    bx                                              ;save buffer address
   766 00000161 51                                              push    cx                                              ;save retry count
   767 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   768 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   769 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   770 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   771 0000016F 59                                              pop     cx                                              ;restore retry count
   772 00000170 5B                                              pop     bx                                              ;restore buffer address
   773 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   774 00000173 E2EB                                            loop    .10                                             ;retry
   775                                  ;
   776                                  ;       Handle disk error: convert to ASCII and store in error string.
   777                                  ;
   778 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   779 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   780 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   781 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   782 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   783 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   784 00000183 7203                                            jb      .20                                             ;continue if numeral
   785 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   786 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   787 0000018A 7203                                            jb      .30                                             ;continue if numeral
   788 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   789 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   790 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   791 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   792                                  ;
   793                                  ;       Wait for a key press.
   794                                  ;
   795 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   796 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   797 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   798 0000019E FB                                              sti                                                     ;enable maskable interrupts
   799 0000019F F4                                              hlt                                                     ;wait for interrupt
   800 000001A0 EBF6                                            jmp     .10                                             ;repeat
   801                                  ;
   802                                  ;       Reset the system.
   803                                  ;
   804 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   805 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   806 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   807 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   808 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   809                                  ;
   810                                  ;       Display text message.
   811                                  ;
   812 000001AA FC                      BootPrint               cld                                                     ;forward strings
   813 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   814 000001AC 84C0                                            test    al,al                                           ;end of string?
   815 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   816 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   817 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   818 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   819 000001B6 C3                      BootReturn              ret                                                     ;return
   820                                  ;-----------------------------------------------------------------------------------------------------------------------
   821                                  ;
   822                                  ;       Constants
   823                                  ;
   824                                  ;-----------------------------------------------------------------------------------------------------------------------
   825 000001B7 90                                              align   2
   826 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   827 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   827 000001C3 4F4D               
   828 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   828 000001CE 530D0A00           
   829 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   829 000001DB 7220               
   830 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   831 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   831 000001E9 6700               
   832                                  ;-----------------------------------------------------------------------------------------------------------------------
   833                                  ;
   834                                  ;       Work Areas
   835                                  ;
   836                                  ;-----------------------------------------------------------------------------------------------------------------------
   837 000001EB 90                                              align   2
   838 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   839 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   840 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   841 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   842 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   843                                  wwReadCountCommand      equ     $                                               ;read count and command
   844 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   845 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   846                                  wwDriveHead             equ     $                                               ;drive, head (word)
   847 000001F8 00                      wbDrive                 db      0                                               ;drive
   848 000001F9 00                      wbHead                  db      0                                               ;head
   849                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   850 000001FA 00                                              db      0                                               ;sector
   851 000001FB 00                      wbTrack                 db      0                                               ;track
   852 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   853 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   854                                  %endif
   855                                  %ifdef BUILDPREP
   856                                  ;=======================================================================================================================
   857                                  ;
   858                                  ;       Diskette Preparation Code
   859                                  ;
   860                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   861                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   862                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   863                                  ;
   864                                  ;=======================================================================================================================
   865                                  ;
   866                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   867                                  ;
   868 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   869 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   870                                  ;
   871                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   872                                  ;
   873 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   874 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   875 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   876 0000020C FB                                              sti                                                     ;enable interrupts
   877 0000020D F4                                              hlt                                                     ;wait for interrupt
   878 0000020E EBF6                                            jmp     .10                                             ;repeat
   879 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   880 00000212 7407                                            je      .30                                             ;yes, branch
   881 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   882 00000216 75EE                                            jne     .10                                             ;no, repeat
   883 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
   884                                  ;
   885                                  ;       Display writing-sector message and patch the JMP instruction.
   886                                  ;
   887 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   888 0000021E E889FF                                          call    BootPrint                                       ;display message
   889 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   890 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   891 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   892                                  ;
   893                                  ;       Try to read the boot sector.
   894                                  ;
   895 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   896 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   897 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   898 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   899 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
   900 00000236 B001                                            mov     al,1                                            ;one sector
   901 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
   902 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
   903 0000023C 59                                              pop     cx                                              ;restore remaining retries
   904 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
   905 0000023F E2EB                                            loop    .40                                             ;try again
   906 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
   907 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
   908                                  ;
   909                                  ;       Copy diskette parms from input buffer to output buffer.
   910                                  ;
   911 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   912 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
   913 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
   914 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
   915 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
   916 00000255 FC                                              cld                                                     ;forward string copies
   917 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
   918                                  ;
   919                                  ;       Try to write boot sector to diskette.
   920                                  ;
   921 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   922 0000025B 51                      .60                     push    cx                                              ;save remaining tries
   923 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
   924 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
   925 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
   926 00000265 B001                                            mov     al,1                                            ;one sector
   927 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
   928 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
   929 0000026B 59                                              pop     cx                                              ;restore remaining retries
   930 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
   931 0000026E E2EB                                            loop    .60                                             ;try again
   932 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
   933                                  ;
   934                                  ;       Convert the error code to ASCII and display the error message.
   935                                  ;
   936 00000273 50                      .70                     push    ax                                              ;save error code
   937 00000274 88E0                                            mov     al,ah                                           ;copy error code
   938 00000276 B400                                            mov     ah,0                                            ;AX = error code
   939 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
   940 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
   941 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
   942 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
   943 00000282 7203                                            jb      .80                                             ;yes, continue
   944 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
   945 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
   946 00000289 7202                                            jb      .90                                             ;yes, continue
   947 0000028B 0407                                            add     al,7                                            ;no, make ASCII
   948 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
   949 00000290 E817FF                                          call    BootPrint                                       ;write error message
   950 00000293 58                                              pop     ax                                              ;restore error code
   951                                  ;
   952                                  ;       Display the completion message.
   953                                  ;
   954 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
   955 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
   956 00000299 3C00                                            cmp     al,0                                            ;success?
   957 0000029B 7426                                            je      .110                                            ;yes, continue
   958 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
   959 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
   960 000002A2 741F                                            je      .110                                            ;yes, continue
   961 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
   962 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
   963 000002A9 7418                                            je      .110                                            ;yes, continue
   964 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
   965 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
   966 000002B0 7411                                            je      .110                                            ;yes, continue
   967 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
   968 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
   969 000002B7 740A                                            je      .110                                            ;yes, continue
   970 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
   971 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
   972 000002BE 7403                                            je      .110                                            ;yes, continue
   973 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
   974 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
   975 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
   976 000002C9 CD21                                            int     021h                                            ;terminate DOS program
   977 000002CB C3                                              ret                                                     ;return (should not execute)
   978                                  ;-----------------------------------------------------------------------------------------------------------------------
   979                                  ;
   980                                  ;       Diskette Preparation Messages
   981                                  ;
   982                                  ;-----------------------------------------------------------------------------------------------------------------------
   983 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
   983 000002D5 5320426F6F742D4469-
   983 000002DE 736B65747465205072-
   983 000002E7 657061726174696F6E-
   983 000002F0 2050726F6772616D   
   984 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
   984 00000301 687420284329203230-
   984 0000030A 31302D323031392044-
   984 00000313 61766964204A2E2057-
   984 0000031C 616C6C696E672E2041-
   984 00000325 6C6C20726967687473-
   984 0000032E 207265736572766564-
   984 00000337 2E                 
   985 00000338 0D0A                                            db      13,10
   986 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
   986 00000343 6F6772616D206F7665-
   986 0000034C 727772697465732074-
   986 00000355 686520626F6F742073-
   986 0000035E 6563746F72206F6620-
   986 00000367 61206469736B657474-
   986 00000370 652077697468207374-
   986 00000379 617274757020636F64-
   986 00000382 652074686174       
   987 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
   987 00000391 616420746865206F70-
   987 0000039A 65726174696E672073-
   987 000003A3 797374656D20696E74-
   987 000003AC 6F206D656D6F727920-
   987 000003B5 7768656E2074686520-
   987 000003BE 636F6D707574657220-
   987 000003C7 697320726573746172-
   987 000003D0 7465642E           
   988 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   988 000003DD 6565642C20706C6163-
   988 000003E6 65206120666F726D61-
   988 000003EF 74746564206469736B-
   988 000003F8 6574746520696E746F-
   988 00000401 20647269766520413A-
   988 0000040A 20616E642070726573-
   988 00000413 732074686520456E74-
   988 0000041C 6572206B65792E     
   989 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
   989 0000042C 20746869732070726F-
   989 00000435 6772616D2077697468-
   989 0000043E 6F7574207072657061-
   989 00000447 72696E672061206469-
   989 00000450 736B657474652C2070-
   989 00000459 726573732074686520-
   989 00000462 457363617065206B65-
   989 0000046B 792E               
   990 0000046D 0D0A00                                          db      13,10,0
   991 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
   991 00000479 2074686520626F6F74-
   991 00000482 20736563746F722074-
   991 0000048B 6F2074686520646973-
   991 00000494 6B65747465202E2E2E 
   992 0000049D 0D0A00                                          db      13,10,0
   993 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   993 000004A9 6F722D636F6465202E-
   993 000004B2 2E2077617320726574-
   993 000004BB 75726E65642066726F-
   993 000004C4 6D207468652042494F-
   993 000004CD 53207768696C652072-
   993 000004D6 656164696E67206672-
   993 000004DF 6F6D20746865206469-
   993 000004E8 736B2E             
   994 000004EB 0D0A00                                          db      13,10,0
   995 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   995 000004F7 6F722D636F6465202E-
   995 00000500 2E2077617320726574-
   995 00000509 75726E65642066726F-
   995 00000512 6D207468652042494F-
   995 0000051B 53207768696C652077-
   995 00000524 726974696E6720746F-
   995 0000052D 20746865206469736B-
   995 00000536 2E                 
   996 00000537 0D0A00                                          db      13,10,0
   997 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   997 00000543 742D736563746F7220-
   997 0000054C 776173207772697474-
   997 00000555 656E20746F20746865-
   997 0000055E 206469736B65747465-
   997 00000567 2E204265666F726520-
   997 00000570 626F6F74696E672079-
   997 00000579 6F757220636F6D7075-
   997 00000582 7465722077697468   
   998 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   998 00000593 736B657474652C206D-
   998 0000059C 616B65207375726520-
   998 000005A5 746861742074686520-
   998 000005AE 66696C65204F532E43-
   998 000005B7 4F4D20697320636F70-
   998 000005C0 696564206F6E746F20-
   998 000005C9 746865206469736B65-
   998 000005D2 7474652E           
   999 000005D6 0D0A00                                          db      13,10,0
  1000 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1000 000005E2 76616C696420446973-
  1000 000005EB 6B20506172616D6574-
  1000 000005F4 6572               
  1001 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1001 000005FF 20616E20696E746572-
  1001 00000608 6E616C206572726F72-
  1001 00000611 206361757365642062-
  1001 0000061A 7920616E20696E7661-
  1001 00000623 6C69642076616C7565-
  1001 0000062C 206265696E67207061-
  1001 00000635 7373656420746F2061-
  1001 0000063E 2073797374656D     
  1002 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1002 0000064E 6E2E20546865204F53-
  1002 00000657 424F4F542E434F4D20-
  1002 00000660 66696C65206D617920-
  1002 00000669 626520636F72727570-
  1002 00000672 742E20436F7079206F-
  1002 0000067B 7220646F776E6C6F61-
  1002 00000684 64207468652066696C-
  1002 0000068D 6520616761696E     
  1003 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1003 0000069D 72792E             
  1004 000006A0 0D0A00                                          db      13,10,0
  1005 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1005 000006AC 6472657373204D6172-
  1005 000006B5 6B204E6F7420466F75-
  1005 000006BE 6E64               
  1006 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1006 000006C9 726F7220696E646963-
  1006 000006D2 617465732061207068-
  1006 000006DB 79736963616C207072-
  1006 000006E4 6F626C656D20776974-
  1006 000006ED 682074686520666C6F-
  1006 000006F6 707079206469736B65-
  1006 000006FF 7474652E20506C6561-
  1006 00000708 7365207265747279   
  1007 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1007 00000719 6E6F74686572206469-
  1007 00000722 736B657474652E     
  1008 00000729 0D0A00                                          db      13,10,0
  1009 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1009 00000735 6F7465637465642044-
  1009 0000073E 69736B             
  1010 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1010 0000074A 726F72206973207573-
  1010 00000753 75616C6C7920636175-
  1010 0000075C 736564206279206174-
  1010 00000765 74656D7074696E6720-
  1010 0000076E 746F20777269746520-
  1010 00000777 746F20612077726974-
  1010 00000780 652D70726F74656374-
  1010 00000789 6564206469736B2E   
  1011 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1011 0000079A 686520277772697465-
  1011 000007A3 2D70726F7465637427-
  1011 000007AC 2073657474696E6720-
  1011 000007B5 6F6E20746865206469-
  1011 000007BE 736B206F7220726574-
  1011 000007C7 7279207573696E6720-
  1011 000007D0 7573696E6720616E6F-
  1011 000007D9 74686572206469736B-
  1011 000007E2 2E                 
  1012 000007E3 0D0A00                                          db      13,10,0
  1013 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1013 000007EF 736B65747465205265-
  1013 000007F8 6D6F766564         
  1014 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1014 00000806 726F72206D61792069-
  1014 0000080F 6E6469636174652074-
  1014 00000818 686174207468652066-
  1014 00000821 6C6F70707920646973-
  1014 0000082A 6B6574746520686173-
  1014 00000833 206265656E2072656D-
  1014 0000083C 6F7665642066726F6D-
  1014 00000845 20746865           
  1015 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1015 00000852 652064726976652E20-
  1015 0000085B 4F6E20736F6D652073-
  1015 00000864 797374656D732C2074-
  1015 0000086D 68697320636F646520-
  1015 00000876 6D617920616C736F20-
  1015 0000087F 6F6363757220696620-
  1015 00000888 746865206469736B65-
  1015 00000891 747465206973       
  1016 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1016 000008A0 70726F746563746564-
  1016 000008A9 2E2720506C65617365-
  1016 000008B2 207665726966792074-
  1016 000008BB 686174207468652064-
  1016 000008C4 69736B657474652069-
  1016 000008CD 73206E6F7420777269-
  1016 000008D6 74652D70726F746563-
  1016 000008DF 74656420616E64     
  1017 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1017 000008EF 65726C7920696E7365-
  1017 000008F8 7274656420696E2074-
  1017 00000901 6865206469736B6574-
  1017 0000090A 74652064726976652E 
  1018 00000913 0D0A00                                          db      13,10,0
  1019 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1019 0000091F 6976652054696D6564-
  1019 00000928 204F7574           
  1020 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1020 00000935 726F7220757375616C-
  1020 0000093E 6C7920696E64696361-
  1020 00000947 746573207468617420-
  1020 00000950 6E6F206469736B6574-
  1020 00000959 746520697320696E20-
  1020 00000962 746865206469736B65-
  1020 0000096B 747465206472697665-
  1020 00000974 2E20506C65617365   
  1021 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1021 00000985 726520746861742074-
  1021 0000098E 6865206469736B6574-
  1021 00000997 74652069732070726F-
  1021 000009A0 7065726C7920736561-
  1021 000009A9 74656420696E207468-
  1021 000009B2 652064726976652061-
  1021 000009BB 6E642072657472792E 
  1022 000009C4 0D0A00                                          db      13,10,0
  1023 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1023 000009D0 6B6E6F776E20457272-
  1023 000009D9 6F72               
  1024 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1024 000009E4 6F722D636F64652072-
  1024 000009ED 657475726E65642062-
  1024 000009F6 79207468652042494F-
  1024 000009FF 53206973206E6F7420-
  1024 00000A08 61207265636F676E69-
  1024 00000A11 7A6564206572726F72-
  1024 00000A1A 2E20506C6561736520-
  1024 00000A23 636F6E73756C74     
  1025 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1025 00000A33 6D7075746572277320-
  1025 00000A3C 746563686E6963616C-
  1025 00000A45 207265666572656E63-
  1025 00000A4E 6520666F7220612064-
  1025 00000A57 65736372697074696F-
  1025 00000A60 6E206F662074686973-
  1025 00000A69 206572726F7220636F-
  1025 00000A72 64652E             
  1026 00000A75 0D0A00                                          db      13,10,0
  1027                                  wcPrepInBuf             equ     $
  1028                                  %endif
  1029                                  %ifdef BUILDDISK
  1030                                  ;=======================================================================================================================
  1031                                  ;
  1032                                  ;       File Allocation Tables
  1033                                  ;
  1034                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1035                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1036                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1037                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1038                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1039                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1040                                  ;       the last cluster in the chain.
  1041                                  ;
  1042                                  ;       Every three bytes encode two FAT entries as follows:
  1043                                  ;
  1044                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1045                                  ;
  1046                                  ;=======================================================================================================================
  1047                                  ;-----------------------------------------------------------------------------------------------------------------------
  1048                                  ;
  1049                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1050                                  ;
  1051                                  ;-----------------------------------------------------------------------------------------------------------------------
  1052                                  section                 fat1                                                    ;first copy of FAT
  1053                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1054                                                          db      005h,060h,000h, 007h,080h,000h
  1055                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1056                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1057                                                          db      011h,020h,001h, 013h,040h,001h
  1058                                                          db      015h,060h,001h, 017h,080h,001h
  1059                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1060                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1061                                                          db      021h,020h,002h, 023h,040h,002h
  1062                                                          db      025h,060h,002h, 027h,080h,002h
  1063                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1064                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1065                                  ;-----------------------------------------------------------------------------------------------------------------------
  1066                                  ;
  1067                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1068                                  ;
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070                                  section                 fat2                                                    ;second copy of FAT
  1071                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1072                                                          db      005h,060h,000h, 007h,080h,000h
  1073                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1074                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1075                                                          db      011h,020h,001h, 013h,040h,001h
  1076                                                          db      015h,060h,001h, 017h,080h,001h
  1077                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1078                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1079                                                          db      021h,020h,002h, 023h,040h,002h
  1080                                                          db      025h,060h,002h, 027h,080h,002h
  1081                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1082                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084                                  ;
  1085                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1086                                  ;
  1087                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1088                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1089                                  ;       copy.
  1090                                  ;
  1091                                  ;-----------------------------------------------------------------------------------------------------------------------
  1092                                  section                 dir                                                     ;diskette directory
  1093                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1094                                                          db      020h                                            ;attribute (archive bit set)
  1095                                                          times   10 db 0                                         ;unused
  1096                                                          dw      0h                                              ;time
  1097                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1098                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1099                                                          dw      2                                               ;first cluster
  1100                                                          dd      05400h                                          ;file size
  1101                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1102                                  %endif
  1103                                  %ifdef BUILDCOM
  1104                                  ;=======================================================================================================================
  1105                                  ;
  1106                                  ;       OS.COM
  1107                                  ;
  1108                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1109                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1110                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1111                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1112                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1113                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1114                                  ;
  1115                                  ;       Our loader addressability is set up according to the following diagram.
  1116                                  ;
  1117                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1118                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1119                                  ;                               |  256 = 100h bytes                             |
  1120                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1121                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1122                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1123                                  ;                       007e00  +-----------------------------------------------+
  1124                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1125                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1126                                  ;                               |                                               |
  1127                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1128                                  ;                               |                                               |
  1129                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1130                                  ;                               |  Loader Code                                  |
  1131                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1132                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1133                                  ;
  1134                                  ;=======================================================================================================================
  1135                                  ;-----------------------------------------------------------------------------------------------------------------------
  1136                                  ;
  1137                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1138                                  ;
  1139                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1140                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1141                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1142                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1143                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1144                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1145                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1146                                  ;       registers.
  1147                                  ;
  1148                                  ;-----------------------------------------------------------------------------------------------------------------------
  1149                                                          cpu     8086                                            ;assume minimal CPU
  1150                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1151                                                          bits    16                                              ;this is 16-bit code
  1152                                  Loader                  push    cs                                              ;use the code segment
  1153                                                          pop     ds                                              ;...as our data segment
  1154                                                          push    cs                                              ;use the code segment
  1155                                                          pop     es                                              ;...as our extra segment
  1156                                  ;
  1157                                  ;       Write a message to the console so we know we have our addressability established.
  1158                                  ;
  1159                                                          mov     si,czStartingMsg                                ;starting message
  1160                                                          call    PutTTYString                                    ;display loader message
  1161                                  ;
  1162                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1163                                  ;
  1164                                                          call    GetCPUType                                      ;AL = cpu type
  1165                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1166                                                          cmp     al,3                                            ;80386+?
  1167                                                          jb      LoaderExit                                      ;no, exit with error message
  1168                                                          cpu     386                                             ;allow 80386 instructions
  1169                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1170                                                          call    PutTTYString                                    ;display message
  1171                                  ;
  1172                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1173                                  ;
  1174                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1175                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1176                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1177                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1178                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1179                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1180                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1181                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1182                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1183                                                          call    PutTTYString                                    ;display message
  1184                                  ;
  1185                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1186                                  ;
  1187                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1188                                                          pop     es                                              ;... as target segment
  1189                                                          xor     di,di                                           ;ES:DI = target address
  1190                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1191                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1192                                                          cld                                                     ;forward strings
  1193                                                          rep     movsb                                           ;copy kernel image
  1194                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1195                                                          call    PutTTYString                                    ;display message
  1196                                  ;
  1197                                  ;       Switch to protected mode.
  1198                                  ;
  1199                                                          xor     si,si                                           ;ES:SI = gdt addr
  1200                                                          mov     ss,si                                           ;protected mode ss
  1201                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1202                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1203                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1204                                                          mov     dx,001Fh                                        ;outer delay loop count
  1205                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1206                                                          loop    $                                               ;wait out pending interrupts
  1207                                                          dec     dx                                              ;restore outer loop count
  1208                                                          jnz     .10                                             ;continue outer loop
  1209                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1210                                  ;
  1211                                  ;       Enable hardware and maskable interrupts.
  1212                                  ;
  1213                                                          xor     al,al                                           ;enable all registers code
  1214                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1215                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1216                                                          sti                                                     ;enable maskable interrupts
  1217                                  ;
  1218                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1219                                  ;
  1220                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1221                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1222                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1223                                  ;-----------------------------------------------------------------------------------------------------------------------
  1224                                  ;
  1225                                  ;       Routine:        LoaderExit
  1226                                  ;
  1227                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1228                                  ;
  1229                                  ;       In:             DS:SI   string address
  1230                                  ;
  1231                                  ;-----------------------------------------------------------------------------------------------------------------------
  1232                                  LoaderExit              call    PutTTYString                                    ;display error message
  1233                                  ;
  1234                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1235                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1236                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1237                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1238                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1239                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1240                                  ;
  1241                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1242                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1243                                                          jnz     .40                                             ;exit if key pressed
  1244                                                          sti                                                     ;enable maskable interrupts
  1245                                                          hlt                                                     ;wait for interrupt
  1246                                                          jmp     .30                                             ;repeat until keypress
  1247                                  ;
  1248                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1249                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1250                                  ;       HLT until the system resets.
  1251                                  ;
  1252                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1253                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1254                                  .50                     sti                                                     ;enable maskable interrupts
  1255                                                          hlt                                                     ;stop until reset, int, nmi
  1256                                                          jmp     .50                                             ;loop until restart kicks in
  1257                                  ;-----------------------------------------------------------------------------------------------------------------------
  1258                                  ;
  1259                                  ;       Routine:        GetCPUType
  1260                                  ;
  1261                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1262                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1263                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1264                                  ;
  1265                                  ;       Out:            AX      0 = 808x, v20, etc.
  1266                                  ;                               1 = 80186
  1267                                  ;                               2 = 80286
  1268                                  ;                               3 = 80386
  1269                                  ;
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271                                  GetCPUType              mov     al,1                                            ;AL = 1
  1272                                                          mov     cl,32                                           ;shift count
  1273                                                          shr     al,cl                                           ;try a 32-bit shift
  1274                                                          or      al,al                                           ;did the shift happen?
  1275                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1276                                                          cpu     186
  1277                                                          push    sp                                              ;save stack pointer
  1278                                                          pop     cx                                              ;...into cx
  1279                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1280                                                          jne     .10                                             ;yes, cpu is 80186
  1281                                                          cpu     286
  1282                                                          inc     ax                                              ;AX = 2
  1283                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1284                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1285                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1286                                                          jz      .10                                             ;yes, cpu is 80286
  1287                                                          inc     ax                                              ;AX = 3
  1288                                  .10                     ret                                                     ;return
  1289                                  ;-----------------------------------------------------------------------------------------------------------------------
  1290                                  ;
  1291                                  ;       Routine:        PutTTYString
  1292                                  ;
  1293                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1294                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1295                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1296                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1297                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1298                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1299                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1300                                  ;                       to LODSB is not needed.
  1301                                  ;
  1302                                  ;       In:             DS:SI   address of string
  1303                                  ;
  1304                                  ;       Out:            DF      0
  1305                                  ;                       ZF      1
  1306                                  ;                       AL      0
  1307                                  ;
  1308                                  ;-----------------------------------------------------------------------------------------------------------------------
  1309                                  PutTTYString            cld                                                     ;forward strings
  1310                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1311                                                          test    al,al                                           ;end of string?
  1312                                                          jz      .20                                             ;... yes, exit our loop
  1313                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1314                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1315                                                          jmp     .10                                             ;repeat until done
  1316                                  .20                     ret                                                     ;return
  1317                                  ;-----------------------------------------------------------------------------------------------------------------------
  1318                                  ;
  1319                                  ;       Loader Data
  1320                                  ;
  1321                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1322                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1323                                  ;
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                                          align   2
  1326                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1327                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1328                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1329                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1330                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1331                                                          db      "Please press any key to restart the computer.",13,10,0
  1332                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1333                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1334                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1335                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1336                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1337                                  ;=======================================================================================================================
  1338                                  ;
  1339                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1340                                  ;
  1341                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1342                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1343                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1344                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1345                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1346                                  ;
  1347                                  ;=======================================================================================================================
  1348                                  ;=======================================================================================================================
  1349                                  ;
  1350                                  ;       Kernel Tables
  1351                                  ;
  1352                                  ;=======================================================================================================================
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1356                                  ;
  1357                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1358                                  ;       first descriptor must be all nulls.
  1359                                  ;
  1360                                  ;       6   5         4         3         2         1         0
  1361                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1362                                  ;       ----------------------------------------------------------------
  1363                                  ;       h......hffffmmmma......ab......................bn..............n
  1364                                  ;
  1365                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1366                                  ;               ffff                                                            flags
  1367                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1368                                  ;                       a......a                                                access
  1369                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1370                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1371                                  ;
  1372                                  ;       00000000                                                                all areas have base addresses below 2^24
  1373                                  ;               0...                                                            single-byte size granularity
  1374                                  ;               1...                                                            4-kilobyte size granularity
  1375                                  ;               .0..                                                            16-bit default for code segments
  1376                                  ;               .1..                                                            32-bit default for code segments
  1377                                  ;               ..0.                                                            intel-reserved; should be zero
  1378                                  ;               ...0                                                            available for operating system use
  1379                                  ;                   0000                                                        segment is less than 2^16 in size
  1380                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1381                                  ;                       1.......                                                segment is present in memory
  1382                                  ;                       .00.....                                                segment is of privilege level 0
  1383                                  ;                       ...0....                                                segment is of system or gate type
  1384                                  ;                       ...00010                                                local decriptor table (LDT)
  1385                                  ;                       ...01001                                                task state segment (TSS) available
  1386                                  ;                       ...01011                                                task state segment (TSS) busy
  1387                                  ;                       ...10...                                                data segment
  1388                                  ;                       ...10011                                                writable data (accessed)
  1389                                  ;                       ...11...                                                code segment
  1390                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1391                                  ;
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  section                 gdt                                                     ;global descriptor table
  1394                                                          dq      0000000000000000h                               ;00 required null selector
  1395                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1396                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1397                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1398                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1399                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1400                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1401                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1402                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1403                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1404                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1405                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1406                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1407                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1408                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1409                                  ;-----------------------------------------------------------------------------------------------------------------------
  1410                                  ;
  1411                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1412                                  ;
  1413                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1414                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1415                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1416                                  ;
  1417                                  ;       6   5         4         3         2         1         0
  1418                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1419                                  ;       ----------------------------------------------------------------
  1420                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1421                                  ;
  1422                                  ;       h...h   high-order offset (bits 16-31)
  1423                                  ;       P       present (0=unused interrupt)
  1424                                  ;       zz      descriptor privilege level
  1425                                  ;       S       storage segment (must be zero for IDT)
  1426                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1427                                  ;       S...S   handling code selector in GDT
  1428                                  ;       l...l   lo-order offset (bits 0-15)
  1429                                  ;
  1430                                  ;-----------------------------------------------------------------------------------------------------------------------
  1431                                  section                 idt                                                     ;interrupt descriptor table
  1432                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1433                                                          mtrap   singlestep                                      ;01 single step
  1434                                                          mtrap   nmi                                             ;02 non-maskable
  1435                                                          mtrap   break                                           ;03 break
  1436                                                          mtrap   into                                            ;04 into
  1437                                                          mtrap   bounds                                          ;05 bounds
  1438                                                          mtrap   badopcode                                       ;06 bad op code
  1439                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1440                                                          mtrap   doublefault                                     ;08 double-fault
  1441                                                          mtrap   operand                                         ;09 operand
  1442                                                          mtrap   badtss                                          ;0a bad TSS
  1443                                                          mtrap   notpresent                                      ;0b not-present
  1444                                                          mtrap   stacklimit                                      ;0c stack limit
  1445                                                          mtrap   protection                                      ;0d general protection fault
  1446                                                          mtrap   int14                                           ;0e (reserved)
  1447                                                          mtrap   int15                                           ;0f (reserved)
  1448                                                          mtrap   coproccalc                                      ;10 (reserved)
  1449                                                          mtrap   int17                                           ;11 (reserved)
  1450                                                          mtrap   int18                                           ;12 (reserved)
  1451                                                          mtrap   int19                                           ;13 (reserved)
  1452                                                          mtrap   int20                                           ;14 (reserved)
  1453                                                          mtrap   int21                                           ;15 (reserved)
  1454                                                          mtrap   int22                                           ;16 (reserved)
  1455                                                          mtrap   int23                                           ;17 (reserved)
  1456                                                          mtrap   int24                                           ;18 (reserved)
  1457                                                          mtrap   int25                                           ;19 (reserved)
  1458                                                          mtrap   int26                                           ;1a (reserved)
  1459                                                          mtrap   int27                                           ;1b (reserved)
  1460                                                          mtrap   int28                                           ;1c (reserved)
  1461                                                          mtrap   int29                                           ;1d (reserved)
  1462                                                          mtrap   int30                                           ;1e (reserved)
  1463                                                          mtrap   int31                                           ;1f (reserved)
  1464                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1465                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1466                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1467                                                          mint    com2                                            ;23 IRQ3 com2
  1468                                                          mint    com1                                            ;24 IRQ4 com1
  1469                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1470                                                          mint    diskette                                        ;26 IRQ6 diskette
  1471                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1472                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1473                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1474                                                          mint    irq10                                           ;2a IRQA (reserved)
  1475                                                          mint    irq11                                           ;2b IRQB (reserved)
  1476                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1477                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1478                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1479                                                          mint    irq15                                           ;2f IRQF (reserved)
  1480                                                          mtrap   svc                                             ;30 OS services
  1481                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1482                                  ;=======================================================================================================================
  1483                                  ;
  1484                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1485                                  ;
  1486                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1487                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1488                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1489                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1490                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1491                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1492                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1493                                  ;
  1494                                  ;=======================================================================================================================
  1495                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1496                                                          cpu     386                                             ;allow 80386 instructions
  1497                                                          bits    32                                              ;this is 32-bit code
  1498                                  ;=======================================================================================================================
  1499                                  ;
  1500                                  ;       CPU Interrupt Handlers
  1501                                  ;
  1502                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1503                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1504                                  ;
  1505                                  ;=======================================================================================================================
  1506                                  ;-----------------------------------------------------------------------------------------------------------------------
  1507                                  ;
  1508                                  ;       INT0    Divide By Zero
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                                          menter  dividebyzero                                    ;divide by zero
  1512                                                          jmp     ReportInterrupt                                 ;report interrupt
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                  ;
  1515                                  ;       INT1    Single Step
  1516                                  ;
  1517                                  ;-----------------------------------------------------------------------------------------------------------------------
  1518                                                          menter  singlestep                                      ;single step
  1519                                                          jmp     ReportInterrupt                                 ;report interrupt
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  ;
  1522                                  ;       INT2    Non-Maskable Interrupt
  1523                                  ;
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                                          menter  nmi                                             ;non-maskable
  1526                                                          jmp     ReportInterrupt                                 ;report interrupt
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  ;
  1529                                  ;       INT3    Break
  1530                                  ;
  1531                                  ;-----------------------------------------------------------------------------------------------------------------------
  1532                                                          menter  break                                           ;break
  1533                                                          jmp     ReportInterrupt                                 ;report interrupt
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  ;
  1536                                  ;       INT4    Into
  1537                                  ;
  1538                                  ;-----------------------------------------------------------------------------------------------------------------------
  1539                                                          menter  into                                            ;into
  1540                                                          jmp     ReportInterrupt                                 ;report interrupt
  1541                                  ;-----------------------------------------------------------------------------------------------------------------------
  1542                                  ;
  1543                                  ;       INT5    Bounds
  1544                                  ;
  1545                                  ;-----------------------------------------------------------------------------------------------------------------------
  1546                                                          menter  bounds                                          ;bounds
  1547                                                          jmp     ReportInterrupt                                 ;report interrupt
  1548                                  ;-----------------------------------------------------------------------------------------------------------------------
  1549                                  ;
  1550                                  ;       INT6    Bad Operation Code
  1551                                  ;
  1552                                  ;-----------------------------------------------------------------------------------------------------------------------
  1553                                                          menter  badopcode                                       ;bad opcode interrupt
  1554                                                          jmp     ReportInterrupt                                 ;report interrupt
  1555                                  ;-----------------------------------------------------------------------------------------------------------------------
  1556                                  ;
  1557                                  ;       INT7    No Coprocessor
  1558                                  ;
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1561                                                          jmp     ReportInterrupt                                 ;report interrupt
  1562                                  ;-----------------------------------------------------------------------------------------------------------------------
  1563                                  ;
  1564                                  ;       INT8    Double Fault
  1565                                  ;
  1566                                  ;-----------------------------------------------------------------------------------------------------------------------
  1567                                                          menter  doublefault                                     ;doublefault interrupt
  1568                                                          jmp     ReportInterrupt                                 ;report interrupt
  1569                                  ;-----------------------------------------------------------------------------------------------------------------------
  1570                                  ;
  1571                                  ;       INT9    Operand
  1572                                  ;
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                                          menter  operand                                         ;operand interrupt
  1575                                                          jmp     ReportInterrupt                                 ;report interrupt
  1576                                  ;-----------------------------------------------------------------------------------------------------------------------
  1577                                  ;
  1578                                  ;       INT10   Bad Task State Segment
  1579                                  ;
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                                          menter  badtss                                          ;bad TSS interrupt
  1582                                                          jmp     ReportInterrupt                                 ;report interrupt
  1583                                  ;-----------------------------------------------------------------------------------------------------------------------
  1584                                  ;
  1585                                  ;       INT11   Not Present
  1586                                  ;
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                                          menter  notpresent                                      ;not present interrupt
  1589                                                          jmp     ReportInterrupt                                 ;report interrupt
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;
  1592                                  ;       INT12   Stack Limit
  1593                                  ;
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                                          menter  stacklimit                                      ;stack limit interrupt
  1596                                                          jmp     ReportInterrupt                                 ;report interrupt
  1597                                  ;-----------------------------------------------------------------------------------------------------------------------
  1598                                  ;
  1599                                  ;       INT13   General Protection Fault
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                                          menter  protection                                      ;protection fault interrupt
  1603                                                          jmp     ReportInterrupt                                 ;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;       INT14   Reserved
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                                          menter  int14                                           ;(reserved)
  1610                                                          jmp     ReportInterrupt                                 ;report interrupt
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  ;
  1613                                  ;       INT15   Reserved
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                                          menter  int15                                           ;(reserved)
  1617                                                          jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT16   Coprocessor Calculation
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  coproccalc                                      ;coprocessor calculation
  1624                                                          jmp     ReportInterrupt                                 ;report interrupt
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT17   Reserved
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  int17                                           ;(reserved)
  1631                                                          jmp     ReportInterrupt                                 ;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;       INT18   Reserved
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                                          menter  int18                                           ;(reserved)
  1638                                                          jmp     ReportInterrupt                                 ;report interrupt
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                  ;
  1641                                  ;       INT19   Reserved
  1642                                  ;
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                                          menter  int19                                           ;(reserved)
  1645                                                          jmp     ReportInterrupt                                 ;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;       INT20   Reserved
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                                          menter  int20                                           ;(reserved)
  1652                                                          jmp     ReportInterrupt                                 ;report interrupt
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  ;
  1655                                  ;       INT21   Reserved
  1656                                  ;
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                                          menter  int21                                           ;(reserved)
  1659                                                          jmp     ReportInterrupt                                 ;report interrupt
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;       INT22   Reserved
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                                          menter  int22                                           ;(reserved)
  1666                                                          jmp     ReportInterrupt                                 ;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       INT23   Reserved
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                                          menter  int23                                           ;(reserved)
  1673                                                          jmp     ReportInterrupt                                 ;report interrupt
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  ;
  1676                                  ;       INT24   Reserved
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                                          menter  int24                                           ;(reserved)
  1680                                                          jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT25   Reserved
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  int25                                           ;(reserved)
  1687                                                          jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT26   Reserved
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  int26                                           ;(reserved)
  1694                                                          jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT27   Reserved
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  int27                                           ;(reserved)
  1701                                                          jmp     ReportInterrupt                                 ;report interrupt
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;       INT28   Reserved
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                                          menter  int28                                           ;(reserved)
  1708                                                          jmp     ReportInterrupt                                 ;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;       INT29   Reserved
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                                          menter  int29                                           ;(reserved)
  1715                                                          jmp     ReportInterrupt                                 ;report interrupt
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  ;
  1718                                  ;       INT30   Reserved
  1719                                  ;
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                                          menter  int30                                           ;(reserved)
  1722                                                          jmp     ReportInterrupt                                 ;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;       INT31   Reserved
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                                          menter  int31                                           ;(reserved)
  1729                                                          jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       Routine:        ReportInterrupt
  1733                                  ;
  1734                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1735                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                  ReportInterrupt         iretd                                                   ;return
  1739                                  ;=======================================================================================================================
  1740                                  ;
  1741                                  ;       Hardware Device Interupts
  1742                                  ;
  1743                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1744                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1745                                  ;       (BX=2028h).
  1746                                  ;
  1747                                  ;=======================================================================================================================
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       IRQ0    Clock Tick Interrupt
  1751                                  ;
  1752                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1753                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1754                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1755                                  ;
  1756                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1757                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1758                                  ;
  1759                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1760                                  ;       zero, the floppy disk motors are turned off.
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  clocktick                                       ;clock tick interrupt
  1764                                                          push    eax                                             ;save non-volatile regs
  1765                                                          push    edx                                             ;
  1766                                                          push    ds                                              ;
  1767                                  ;
  1768                                  ;       End the interrupt.
  1769                                  ;
  1770                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1771                                  ;
  1772                                  ;       Update the clock tick count and the elapsed days as needed.
  1773                                  ;
  1774                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1775                                                          pop     ds                                              ;... into data segment register
  1776                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1777                                                          inc     eax                                             ;increment clock ticks
  1778                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1779                                                          jb      irq0.10                                         ;no, skip ahead
  1780                                                          inc     byte [wbClockDays]                              ;increment clock days
  1781                                                          xor     eax,eax                                         ;reset clock ticks
  1782                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1783                                  ;
  1784                                  ;       Decrement floppy disk motor timeout.
  1785                                  ;
  1786                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1787                                                          je      irq0.20                                         ;yes, skip ahead
  1788                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1789                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1790                                  ;
  1791                                  ;       Turn off the floppy disk motor if appropriate.
  1792                                  ;
  1793                                                          sti                                                     ;enable maskable interrupts
  1794                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1795                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1796                                                          in      al,dx                                           ;FDC main status byte
  1797                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1798                                                          jnz     irq0.15                                         ;wait while busy
  1799                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1800                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1801                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1802                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1803                                                          out     dx,al                                           ;turn motor off
  1804                                  ;
  1805                                  ;       Enable maskable interrupts.
  1806                                  ;
  1807                                  irq0.20                 sti                                                     ;enable maskable interrupts
  1808                                  ;
  1809                                  ;       Restore and return.
  1810                                  ;
  1811                                                          pop     ds                                              ;restore modified regs
  1812                                                          pop     edx                                             ;
  1813                                                          pop     eax                                             ;
  1814                                                          iretd                                                   ;return
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  ;
  1817                                  ;       IRQ1    Keyboard Interrupt
  1818                                  ;
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                                          menter  keyboard                                        ;keyboard interrrupt
  1821                                                          push    eax                                             ;
  1822                                                          jmp     hwint                                           ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  iochannel                                       ;secondary 8259A cascade
  1829                                                          push    eax                                             ;save modified regs
  1830                                                          jmp     hwint                                           ;end interrupt and return
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  ;
  1833                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  1834                                  ;
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                                          menter  com2                                            ;serial port 2 interrupt
  1837                                                          push    eax                                             ;save modified regs
  1838                                                          jmp     hwint                                           ;end interrupt and return
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  com1                                            ;serial port 1 interrupt
  1845                                                          push    eax                                             ;save modified regs
  1846                                                          jmp     hwint                                           ;end interrupt and return
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                  ;
  1849                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  1850                                  ;
  1851                                  ;-----------------------------------------------------------------------------------------------------------------------
  1852                                                          menter  lpt2                                            ;parallel port 2 interrupt
  1853                                                          push    eax                                             ;save modified regs
  1854                                                          jmp     hwint                                           ;end interrupt and return
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       IRQ6    Diskette Hardware Interrupt
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  diskette                                        ;floppy disk interrupt
  1861                                                          push    eax                                             ;save non-volatile regs
  1862                                                          push    ds                                              ;
  1863                                                          call    PutPrimaryEndOfInt                              ;end the interrupt
  1864                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1865                                                          pop     ds                                              ;... into DS register
  1866                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  1867                                                          or      al,10000000b                                    ;set IRQ flag
  1868                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  1869                                                          sti                                                     ;enable maskable interrupts
  1870                                                          pop     ds                                              ;restore non-volatile regs
  1871                                                          pop     eax                                             ;
  1872                                                          iretd                                                   ;return from interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  lpt1                                            ;parallel port 1 interrupt
  1879                                                          push    eax                                             ;save modified regs
  1880                                                          jmp     hwint                                           ;end interrupt and return
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  rtclock                                         ;real-time clock interrupt
  1887                                                          push    eax                                             ;save modified regs
  1888                                                          jmp     hwwint                                          ;end interrupt and return
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  1895                                                          push    eax                                             ;save modified regs
  1896                                                          jmp     hwwint                                          ;end interrupt and return
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  ;
  1899                                  ;       IRQ10   Reserved Hardware Interrupt
  1900                                  ;
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                                          menter  irq10                                           ;reserved
  1903                                                          push    eax                                             ;save modified regs
  1904                                                          jmp     hwwint                                          ;end interrupt and return
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;       IRQ11   Reserved Hardware Interrupt
  1908                                  ;
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                                          menter  irq11                                           ;reserved
  1911                                                          push    eax                                             ;save modified regs
  1912                                                          jmp     hwwint                                          ;end interrupt and return
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  1919                                                          push    eax                                             ;save modified regs
  1920                                                          jmp     hwwint                                          ;end interrupt and return
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;       IRQ13   Coprocessor Hardware Interrupt
  1924                                  ;
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                                          menter  coprocessor                                     ;coprocessor interrupt
  1927                                                          push    eax                                             ;save modified regs
  1928                                                          jmp     hwwint                                          ;end interrupt and return
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  fixeddisk                                       ;fixed disk interrupt
  1935                                                          push    eax                                             ;save modified regs
  1936                                                          jmp     hwwint                                          ;end interrupt and return
  1937                                  ;-----------------------------------------------------------------------------------------------------------------------
  1938                                  ;
  1939                                  ;       IRQ15   Reserved Hardware Interrupt
  1940                                  ;
  1941                                  ;-----------------------------------------------------------------------------------------------------------------------
  1942                                                          menter  irq15                                           ;reserved
  1943                                                          push    eax                                             ;save modified regs
  1944                                                          jmp     hwwint                                          ;end interrupt and return
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       Exit from hardware interrupt
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  1951                                                          jmp     hwint90                                         ;skip ahead
  1952                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1953                                  hwint90                 sti                                                     ;enable maskable interrupts
  1954                                                          pop     eax                                             ;restore modified regs
  1955                                                          iretd                                                   ;return from interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT 30h Operating System Software Service Interrupt
  1959                                  ;
  1960                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1961                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  1962                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1963                                  ;       the entry address of the specific function from a table.
  1964                                  ;
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                                          menter  svc
  1967                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  1968                                                          jae     svc90                                           ;yes, skip ahead
  1969                                                          movzx   eax,al                                          ;function
  1970                                                          shl     eax,2                                           ;offset into table
  1971                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  1972                                  svc90                   iretd                                                   ;return from interrupt
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                  ;
  1975                                  ;       Service Request Table
  1976                                  ;
  1977                                  ;
  1978                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  tsvc                    tsvce   PlaceCursor                                     ;place the cursor at the current loc
  1982                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  ;
  1985                                  ;       Service Request Macros
  1986                                  ;
  1987                                  ;       These macros provide positional parameterization of service request calls.
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  %macro                  placeCursor 0
  1991                                                          mov     al,ePlaceCursor                                 ;function code
  1992                                                          int     _svc                                            ;invoke OS service
  1993                                  %endmacro
  1994                                  ;=======================================================================================================================
  1995                                  ;
  1996                                  ;       Kernel Function Library
  1997                                  ;
  1998                                  ;=======================================================================================================================
  1999                                  ;=======================================================================================================================
  2000                                  ;
  2001                                  ;       Input/Output Routines
  2002                                  ;
  2003                                  ;       These routines read and/or write directly to ports.
  2004                                  ;
  2005                                  ;       PlaceCursor
  2006                                  ;       PutPrimaryEndOfInt
  2007                                  ;       PutSecondaryEndOfInt
  2008                                  ;
  2009                                  ;=======================================================================================================================
  2010                                  ;-----------------------------------------------------------------------------------------------------------------------
  2011                                  ;
  2012                                  ;       Routine:        PlaceCursor
  2013                                  ;
  2014                                  ;       Description:    This routine positions the cursor on the console.
  2015                                  ;
  2016                                  ;       In:             DS      OS data selector
  2017                                  ;
  2018                                  ;-----------------------------------------------------------------------------------------------------------------------
  2019                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2020                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2021                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2022                                                          mul     ah                                              ;row offset
  2023                                                          add     al,[wbConsoleColumn]                            ;add column
  2024                                                          adc     ah,0                                            ;add overflow
  2025                                                          mov     ecx,eax                                         ;screen offset
  2026                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2027                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2028                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2029                                                          out     dx,al                                           ;select register
  2030                                                          inc     edx                                             ;data port
  2031                                                          mov     al,ch                                           ;hi-order cursor loc
  2032                                                          out     dx,al                                           ;store hi-order loc
  2033                                                          dec     edx                                             ;register select port
  2034                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2035                                                          out     dx,al                                           ;select register
  2036                                                          inc     edx                                             ;data port
  2037                                                          mov     al,cl                                           ;lo-order cursor loc
  2038                                                          out     dx,al                                           ;store lo-order loc
  2039                                                          pop     ecx                                             ;restore non-volatile regs
  2040                                                          ret                                                     ;return
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;
  2043                                  ;       Routine:        PutPrimaryEndOfInt
  2044                                  ;
  2045                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048                                  PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2049                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2050                                                          ret                                                     ;return
  2051                                  ;-----------------------------------------------------------------------------------------------------------------------
  2052                                  ;
  2053                                  ;       Routine:        PutSecondaryEndOfInt
  2054                                  ;
  2055                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2056                                  ;
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058                                  PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2059                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2060                                                          ret                                                     ;return
  2061                                  ;-----------------------------------------------------------------------------------------------------------------------
  2062                                  ;
  2063                                  ;       End of the Kernel Function Library
  2064                                  ;
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2067                                  ;=======================================================================================================================
  2068                                  ;
  2069                                  ;       Console Task
  2070                                  ;
  2071                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2072                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2073                                  ;       screen and responds to user commands.
  2074                                  ;
  2075                                  ;=======================================================================================================================
  2076                                  ;-----------------------------------------------------------------------------------------------------------------------
  2077                                  ;
  2078                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2079                                  ;
  2080                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2081                                  ;
  2082                                  ;-----------------------------------------------------------------------------------------------------------------------
  2083                                  section                 constack                                                ;console task stack
  2084                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2085                                  ;-----------------------------------------------------------------------------------------------------------------------
  2086                                  ;
  2087                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2088                                  ;
  2089                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2090                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2091                                  ;       16 descriptors. Six are initially defined.
  2092                                  ;
  2093                                  ;-----------------------------------------------------------------------------------------------------------------------
  2094                                  section                 conldt                                                  ;console local descriptors
  2095                                                          dq      004093004780007Fh                               ;04 TSS alias
  2096                                                          dq      004093004700007Fh                               ;0c LDT alias
  2097                                                          dq      00409300400006FFh                               ;14 stack
  2098                                                          dq      00CF93000000FFFFh                               ;1c data
  2099                                                          dq      00409B0050000FFFh                               ;24 code
  2100                                                          dq      00409300480007FFh                               ;2c message queue
  2101                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2102                                  ;-----------------------------------------------------------------------------------------------------------------------
  2103                                  ;
  2104                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2105                                  ;
  2106                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2107                                  ;       segment. CS to console code.
  2108                                  ;
  2109                                  ;-----------------------------------------------------------------------------------------------------------------------
  2110                                  section                 contss                                                  ;console task state segment
  2111                                                          dd      0                                               ;00 back-link tss
  2112                                                          dd      0700h                                           ;04 esp ring 0
  2113                                                          dd      0014h                                           ;08 ss ring 0
  2114                                                          dd      0700h                                           ;0c esp ring 1
  2115                                                          dd      0014h                                           ;10 es ring 1
  2116                                                          dd      0700h                                           ;14 esp ring 2
  2117                                                          dd      0014h                                           ;18 ss ring 2
  2118                                                          dd      0                                               ;1c cr ring 3
  2119                                                          dd      0                                               ;20 eip
  2120                                                          dd      0200h                                           ;24 eflags
  2121                                                          dd      0                                               ;28 eax
  2122                                                          dd      0                                               ;2c ecx
  2123                                                          dd      0                                               ;30 edx
  2124                                                          dd      0                                               ;34 ebx
  2125                                                          dd      0700h                                           ;38 esp ring 3
  2126                                                          dd      0                                               ;3c ebp
  2127                                                          dd      0                                               ;40 esi
  2128                                                          dd      0                                               ;44 edi
  2129                                                          dd      001Ch                                           ;48 es
  2130                                                          dd      0024h                                           ;4c cs
  2131                                                          dd      0014h                                           ;50 ss ring 3
  2132                                                          dd      001Ch                                           ;54 ds
  2133                                                          dd      0                                               ;58 fs
  2134                                                          dd      0                                               ;5c gs
  2135                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2136                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138                                  ;
  2139                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2140                                  ;
  2141                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2142                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2143                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2144                                  ;       event.
  2145                                  ;
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                  section                 conmque                                                 ;console message queue
  2148                                                          dd      8                                               ;head pointer
  2149                                                          dd      8                                               ;tail pointer
  2150                                                          times   510 dd 0                                        ;queue elements
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  ;
  2153                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2154                                  ;
  2155                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2156                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2157                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2158                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2159                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2160                                  ;       board input, echoing to the console screen and responding to user commands.
  2161                                  ;
  2162                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2163                                  ;
  2164                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2165                                  ;                               |  Real Mode Interrupt Vectors                  |
  2166                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2167                                  ;                               |  Reserved BIOS Memory Area                    |
  2168                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2169                                  ;                               |  Shared Kernel Memory Area                    |
  2170                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2171                                  ;                               |  Global Descriptor Table (GDT)                |
  2172                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2173                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2174                                  ;                       002000  +-----------------------------------------------+
  2175                                  ;                               |  Interrupt Handlers                           |
  2176                                  ;                               |  Kernel Function Library                      |
  2177                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2178                                  ;                               |  Console Task Stack Area                      |
  2179                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2180                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2181                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2182                                  ;                               |  Console Task Task State Segment (TSS)        |
  2183                                  ;                       004800  +-----------------------------------------------+
  2184                                  ;                               |  Console Task Message Queue                   |
  2185                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2186                                  ;                               |  Console Task Code                            |
  2187                                  ;                               |  Console Task Constants                       |
  2188                                  ;                       006000  +===============================================+
  2189                                  ;
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2192                                  ;
  2193                                  ;       Initialize console work areas to low values.
  2194                                  ;
  2195                                  ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  2196                                                          xor     al,al                                           ;initialization value
  2197                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2198                                                          cld                                                     ;forward strings
  2199                                                          rep     stosb                                           ;initialize data
  2200                                  ;
  2201                                  ;       Initialize the active panel variables.
  2202                                  ;
  2203                                                          mov     eax,czPnlCon001                                 ;initial console panel
  2204                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  2205                                  ;
  2206                                  ;       Address the console screen memory.
  2207                                  ;
  2208                                                          push    EGDTCGA                                         ;load CGA video selector...
  2209                                                          pop     es                                              ;...into extra segment reg
  2210                                  ;
  2211                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  2212                                  ;
  2213                                                          mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  2214                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2215                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2216                                                          rep     stosd                                           ;reset OIA
  2217                                  ;
  2218                                  ;       Clear the console rows. (This is done after every attention key).
  2219                                  ;
  2220                                  .20                     xor     edi,edi                                         ;target offset
  2221                                                          mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  2222                                                          mov     eax,ECONCLEARDWORD                              ;initialization value
  2223                                                          rep     stosd                                           ;reset screen body
  2224                                  ;
  2225                                  ;       Reset the input field input address, row and column.
  2226                                  ;
  2227                                                          xor     eax,eax                                         ;zero register
  2228                                                          mov     [wbConsoleRow],al                               ;zero console row
  2229                                                          mov     [wbConsoleColumn],al                            ;zero console column
  2230                                  ;
  2231                                  ;       Load the field address from the panel. Exit loop if address is null.
  2232                                  ;
  2233                                                          mov     ebx,[wdConsolePanel]                            ;first field template addr
  2234                                  .30                     mov     esi,[ebx]                                       ;field value addr
  2235                                                          test    esi,esi                                         ;end of panel?
  2236                                                          jz      .70                                             ;yes, exit loop
  2237                                  ;
  2238                                  ;       Load the field row, column, color and length.
  2239                                  ;
  2240                                                          mov     ch,[ebx+4]                                      ;row
  2241                                                          mov     cl,[ebx+5]                                      ;column
  2242                                                          mov     dh,[ebx+6]                                      ;color
  2243                                                          mov     dl,[ebx+7]                                      ;length
  2244                                  ;
  2245                                  ;       Test the row high-bit for input field indication.
  2246                                  ;
  2247                                                          test    ch,080h                                         ;input field?
  2248                                                          jz      .40                                             ;no, branch
  2249                                                          and     ch,07Fh                                         ;clear input field indicator
  2250                                  ;
  2251                                  ;       Save the row and column if this is the first input field.
  2252                                  ;
  2253                                                          mov     al,[wbConsoleRow]                               ;console row
  2254                                                          or      al,[wbConsoleColumn]                            ;already have an input field?
  2255                                                          jnz     .40                                             ;yes, branch
  2256                                                          mov     [wbConsoleRow],ch                               ;update console row
  2257                                                          mov     [wbConsoleColumn],cl                            ;update console column
  2258                                  ;
  2259                                  ;       Compute the target offset.
  2260                                  ;
  2261                                  .40                     movzx   eax,ch                                          ;row
  2262                                                          mov     ah,ECONCOLS                                     ;columns per row
  2263                                                          mul     ah                                              ;row offset
  2264                                                          add     al,cl                                           ;add column
  2265                                                          adc     ah,0                                            ;handle overflow
  2266                                                          shl     eax,1                                           ;two-bytes per column
  2267                                                          mov     edi,eax                                         ;target offset
  2268                                  ;
  2269                                  ;       Display the field contents.
  2270                                  ;
  2271                                                          movzx   ecx,dl                                          ;length
  2272                                                          mov     ah,dh                                           ;color
  2273                                  .50                     lodsb                                                   ;field character
  2274                                                          test    al,al                                           ;end of value?
  2275                                                          jz      .60                                             ;yes, branch
  2276                                                          stosw                                                   ;store character and color
  2277                                                          loop    .50                                             ;next character
  2278                                  .60                     add     ebx,8                                           ;next field addr
  2279                                                          jmp     short .30                                       ;next field
  2280                                  ;
  2281                                  ;       Place the cursor at the input field.
  2282                                  ;
  2283                                  .70                     mov     ah,[wbConsoleRow]                               ;field row
  2284                                                          mov     al,[wbConsoleColumn]                            ;field column
  2285                                                          placeCursor                                             ;position the cursor
  2286                                  ;
  2287                                  ;       Enter halt loop
  2288                                  ;
  2289                                  .80                     sti                                                     ;enable interrupts
  2290                                                          hlt                                                     ;halt until interrupt
  2291                                                          jmp     .80                                             ;continue halt loop
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                  ;
  2294                                  ;       Constants
  2295                                  ;
  2296                                  ;-----------------------------------------------------------------------------------------------------------------------
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                  ;
  2299                                  ;       Panels
  2300                                  ;
  2301                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  2302                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  2303                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  2304                                  ;
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  2307                                                          db      00,00,02h,06                                    ;flags+row, col, attr, length
  2308                                                          dd      czFldTitleCon001
  2309                                                          db      00,30,07h,20
  2310                                                          dd      czFldDatTmCon001
  2311                                                          db      00,63,02h,17
  2312                                                          dd      czFldPrmptCon001
  2313                                                          db      23,00,07h,01
  2314                                                          dd      wzConsoleInBuffer
  2315                                                          db      128+23,01,07h,79
  2316                                                          dd      0                                               ;end of panel
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  ;
  2319                                  ;       Strings
  2320                                  ;
  2321                                  ;-----------------------------------------------------------------------------------------------------------------------
  2322                                  czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  2323                                  czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  2324                                  czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  2325                                  czFldPrmptCon001        db      ":"                                             ;command prompt
  2326                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2327                                  %endif
  2328                                  %ifdef BUILDDISK
  2329                                  ;-----------------------------------------------------------------------------------------------------------------------
  2330                                  ;
  2331                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2332                                  ;
  2333                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2334                                  ;
  2335                                  ;-----------------------------------------------------------------------------------------------------------------------
  2336                                  section                 unused                                                  ;unused disk space
  2337                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2338                                  %endif
  2339                                  ;=======================================================================================================================
  2340                                  ;
  2341                                  ;       End of Program Code
  2342                                  ;
  2343                                  ;=======================================================================================================================
