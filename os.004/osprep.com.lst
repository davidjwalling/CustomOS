     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.004
     6                                  ;
     7                                  ;       Description:    In this sample program, the loader is expanded to validate the CPU type and place the CPU into
     8                                  ;                       protected mode.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;
   165                                  ;=======================================================================================================================
   166                                  ;-----------------------------------------------------------------------------------------------------------------------
   167                                  ;
   168                                  ;       Hardware-Defined Values
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;
   173                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   174                                  ;
   175                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   176                                  ;       for CGA, EGA, VGA and compatible video modes.
   177                                  ;
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   180                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   181                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   182                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   183                                  ;-----------------------------------------------------------------------------------------------------------------------
   184                                  ;
   185                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   186                                  ;
   187                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   188                                  ;
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   191                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   192                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   193                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   194                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  ;
   197                                  ;       8042 Keyboard Controller                                                EKEYB...
   198                                  ;
   199                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   200                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   201                                  ;
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   204                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  ;
   207                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   208                                  ;
   209                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   210                                  ;       external devices and signals a hardware interrupt to the CPU.
   211                                  ;
   212                                  ;-----------------------------------------------------------------------------------------------------------------------
   213                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   214                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   215                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   216                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   217                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   218                                  ;-----------------------------------------------------------------------------------------------------------------------
   219                                  ;
   220                                  ;       8253 Programmable Interval Timer                                        EPIT...
   221                                  ;
   222                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   223                                  ;       approximately 18.2 times per second.
   224                                  ;
   225                                  ;-----------------------------------------------------------------------------------------------------------------------
   226                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  ;
   229                                  ;       x86 CPU Architecture                                                    ;EX86...
   230                                  ;
   231                                  ;-----------------------------------------------------------------------------------------------------------------------
   232                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   233                                  ;-----------------------------------------------------------------------------------------------------------------------
   234                                  ;
   235                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   236                                  ;
   237                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   238                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   239                                  ;
   240                                  ;       0.......        Segment is not present in memory (triggers int 11)
   241                                  ;       1.......        Segment is present in memory
   242                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   243                                  ;       ...0....        Segment is a system segment
   244                                  ;       ...00010                Local Descriptor Table
   245                                  ;       ...00101                Task Gate
   246                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   247                                  ;       ...01100                Call Gate (386)
   248                                  ;       ...01110                Interrupt Gate (386)
   249                                  ;       ...01111                Trap Gate (386)
   250                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   251                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   252                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   253                                  ;
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   256                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   257                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   258                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   259                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   260                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   261                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   262                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       Firmware-Defined Values
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   271                                  ;
   272                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   273                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   277                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   278                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   279                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   280                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   281                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   282                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   283                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   284                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   285                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;
   288                                  ;       Standards-Based Values
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;
   293                                  ;       ASCII                                                                   EASCII...
   294                                  ;
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   297                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   298                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;
   301                                  ;       Operating System Values
   302                                  ;
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;
   306                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   307                                  ;
   308                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   309                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   310                                  ;
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   313                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   314                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   315                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   316                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   317                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   318                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  ;       Console Constants                                                       ECON...
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ECONCOLS                equ     80                                              ;columns per row
   323                                  ECONROWS                equ     24                                              ;console rows
   324                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   325                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   326                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   327                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   328                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   333                                  EGDTCGA                 equ     020h                                            ;cga video selector
   334                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   335                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   336                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   337                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   338                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   339                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;       Kernel Constants                                                        EKRN...
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   344                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   345                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   346                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   347                                  ;=======================================================================================================================
   348                                  ;
   349                                  ;       Structures
   350                                  ;
   351                                  ;=======================================================================================================================
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       OSDATA
   355                                  ;
   356                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   357                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  struc                   OSDATA
   361 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   362 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   363 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   364 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   365 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   366 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   367 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   368 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   369 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   370 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   371 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   372 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   373 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   374 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   375 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   376 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   377 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   378 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   379 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   380 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   381 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   382 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   383 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   384 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   385 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   386 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   387 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   388 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   389 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   390 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   391 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   392 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   393 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   394 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   395 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   396 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   397 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   398 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   399 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   400 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   401 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   402 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   403 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   404 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   405 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   406 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   407 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   408 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   409 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   410 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   411 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   412 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   413 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   414 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   415 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   416 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   417 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   418 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   419 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   420 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   421 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   422 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   423 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   424 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   425 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   426 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   427 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   428 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   429 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   430 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   431 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   432 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   433 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   434 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   435 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   436 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   437 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   438 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   439 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   440 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   441 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   442 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   443 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   444 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   445 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   446 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   447 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   448 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   449 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   450 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   451 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   452 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   453 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   454 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   455 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   456 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   457 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   458 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   459 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   460 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   461 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ;
   464                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   465                                  ;
   466                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   467                                  ;
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  ECONDATA                equ     ($)
   470 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   471 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   472                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;       End of OS Variables
   476                                  ;
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  endstruc
   479                                  ;-----------------------------------------------------------------------------------------------------------------------
   480                                  ;
   481                                  ;       Macros
   482                                  ;
   483                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   484                                  ;
   485                                  ;-----------------------------------------------------------------------------------------------------------------------
   486                                  %macro                  mint    1
   487                                  _%1                     equ     ($-$$) / EX86DESCLEN
   488                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   489                                  %endmacro
   490                                  %macro                  mtrap   1
   491                                  _%1                     equ     ($-$$) / EX86DESCLEN
   492                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   493                                  %endmacro
   494                                  %macro                  menter  1
   495                                  ?%1                     equ     ($-$$)
   496                                  %endmacro
   497                                  %macro                  tsvce   1
   498                                  e%1                     equ     ($-tsvc)/4
   499                                                          dd      %1
   500                                  %endmacro
   501                                  %ifdef BUILDBOOT
   502                                  ;=======================================================================================================================
   503                                  ;
   504                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   505                                  ;
   506                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   507                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   508                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   509                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   510                                  ;
   511                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   512                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   513                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   514                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   515                                  ;       immediately followed by a disk parameter table.
   516                                  ;
   517                                  ;=======================================================================================================================
   518                                                          cpu     8086                                            ;assume minimal CPU
   519                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   520                                                          bits    16                                              ;16-bit code at power-up
   521                                  %ifdef BUILDPREP
   522 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   523                                  %else
   524                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   525                                  %endif
   526                                  ;-----------------------------------------------------------------------------------------------------------------------
   527                                  ;
   528                                  ;       Disk Parameter Table
   529                                  ;
   530                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   531                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   532                                  ;
   533                                  ;-----------------------------------------------------------------------------------------------------------------------
   534 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   535 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   536 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   537 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   538 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   539 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   540 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   541 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   542 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   543                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   544 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   545 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   546 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   547                                  ;
   548                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   549                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   550                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   551                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   552                                  ;       given several possible starting values for CS:IP.
   553                                  ;
   554                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   555 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   556                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   557 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   558 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   559 00000025 B104                                            mov     cl,4                                            ;shift count
   560 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   561 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   562 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   563                                  ;
   564                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   565                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   566                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   567                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   568                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   569                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   570                                  ;
   571 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   572 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   573 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   574 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   575 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   576                                  ;
   577                                  ;       Our boot addressability is now set up according to the following diagram.
   578                                  ;
   579                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   580                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   581                                  ;                               |  256 = 100h bytes                             |
   582                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   583                                  ;                               |  Boot Sector (vstart=0100h)                   |
   584                                  ;                               |  1 sector = 512 = 200h bytes                  |
   585                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   586                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   587                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   588                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   589                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   590                                  ;                               |  2 sectors = 1024 = 400h bytes
   591                                  ;                       009400  +-----------------------------------------------+ DS:1900
   592                                  ;
   593                                  ;       On entry, DL indicates the drive being booted from.
   594                                  ;
   595 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   596                                  ;
   597                                  ;       Compute directory i/o buffer address.
   598                                  ;
   599 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   600 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   601 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   602 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   603                                  ;
   604                                  ;       Compute segment where os.com will be loaded.
   605                                  ;
   606 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   607 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   608 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   609 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   610                                  ;
   611                                  ;       Set the video mode to 80 column, 25 row, text.
   612                                  ;
   613 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   614 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   615                                  ;
   616                                  ;       Write a message to the console so we know we have our addressability established.
   617                                  ;
   618 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   619 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   620                                  ;
   621                                  ;       Initialize the number of directory sectors to search.
   622                                  ;
   623 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   624 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   625                                  ;
   626                                  ;       Compute number of directory sectors and initialize overhead count.
   627                                  ;
   628 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   629 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   630 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   631 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   632                                  ;
   633                                  ;       Compute directory entries per sector.
   634                                  ;
   635 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   636 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   637 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   638                                  ;
   639                                  ;       Compute first logical directory sector and update overhead count.
   640                                  ;
   641 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   642 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   643 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   644 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   645 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   646 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   647                                  ;
   648                                  ;       Read directory sector.
   649                                  ;
   650 0000008E B001                    .30                     mov     al,1                                            ;sector count
   651 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   652 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   653 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   654                                  ;
   655                                  ;       Setup variables to search this directory sector.
   656                                  ;
   657 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   658 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   659 000000A1 7603                                            jna     .40                                             ;no, continue
   660 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   661 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   662 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   663 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   664                                  ;
   665                                  ;       Loop through directory sectors searching for kernel program.
   666                                  ;
   667 000000B1 56                      .50                     push    si                                              ;save kernel name address
   668 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   669 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   670 000000B6 FC                                              cld                                                     ;forward strings
   671 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   672 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   673 000000BA 5E                                              pop     si                                              ;restore kernel name address
   674 000000BB 7418                                            je      .60                                             ;exit loop if found
   675 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   676 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   677 000000C2 75ED                                            jnz     .50                                             ;next entry
   678                                  ;
   679                                  ;       Repeat search if we are not at the end of the directory.
   680                                  ;
   681 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   682 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   683 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   684 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   685 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   686                                  ;
   687                                  ;       If we find the kernel program in the directory, read the FAT.
   688                                  ;
   689 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   690 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   691 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   692 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   693 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   694 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   695                                  ;
   696                                  ;       Get the starting cluster of the kernel program and target address.
   697                                  ;
   698 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   699 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   700                                  ;
   701                                  ;       Read each program cluster into RAM.
   702                                  ;
   703 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   704 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   705 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   706 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   707 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   708 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   709 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   710 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   711 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   712                                  ;
   713                                  ;       Update buffer pointer for next cluster.
   714                                  ;
   715 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   716 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   717 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   718 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   719 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   720                                  ;
   721                                  ;       Compute next cluster number.
   722                                  ;
   723 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   724 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   725 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   726 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   727 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   728 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   729 00000120 83E701                                          and     di,1                                            ;get low bit
   730 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   731 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   732 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   733                                  ;
   734                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   735                                  ;
   736 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   737 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   738 00000130 B104                                            mov     cl,4                                            ;shift count
   739 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   740 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   741 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   742 0000013A 75B2                                            jne     .70                                             ;no, continue
   743                                  ;
   744                                  ;       Transfer control to the operating system program.
   745                                  ;
   746 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   747 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   748 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   749                                  ;
   750                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   751                                  ;
   752 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   753 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   754 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   755 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   756 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   757 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   758 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   759 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   760 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   761 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   762                                  ;
   763                                  ;       Try maxtries times to read sector.
   764                                  ;
   765 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   766 00000160 53                      .10                     push    bx                                              ;save buffer address
   767 00000161 51                                              push    cx                                              ;save retry count
   768 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   769 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   770 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   771 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   772 0000016F 59                                              pop     cx                                              ;restore retry count
   773 00000170 5B                                              pop     bx                                              ;restore buffer address
   774 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   775 00000173 E2EB                                            loop    .10                                             ;retry
   776                                  ;
   777                                  ;       Handle disk error: convert to ASCII and store in error string.
   778                                  ;
   779 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   780 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   781 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   782 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   783 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   784 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   785 00000183 7203                                            jb      .20                                             ;continue if numeral
   786 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   787 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   788 0000018A 7203                                            jb      .30                                             ;continue if numeral
   789 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   790 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   791 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   792 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   793                                  ;
   794                                  ;       Wait for a key press.
   795                                  ;
   796 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   797 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   798 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   799 0000019E FB                                              sti                                                     ;enable maskable interrupts
   800 0000019F F4                                              hlt                                                     ;wait for interrupt
   801 000001A0 EBF6                                            jmp     .10                                             ;repeat
   802                                  ;
   803                                  ;       Reset the system.
   804                                  ;
   805 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   806 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   807 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   808 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   809 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   810                                  ;
   811                                  ;       Display text message.
   812                                  ;
   813 000001AA FC                      BootPrint               cld                                                     ;forward strings
   814 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   815 000001AC 84C0                                            test    al,al                                           ;end of string?
   816 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   817 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   818 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   819 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   820 000001B6 C3                      BootReturn              ret                                                     ;return
   821                                  ;-----------------------------------------------------------------------------------------------------------------------
   822                                  ;
   823                                  ;       Constants
   824                                  ;
   825                                  ;-----------------------------------------------------------------------------------------------------------------------
   826 000001B7 90                                              align   2
   827 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   828 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   828 000001C3 4F4D               
   829 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   829 000001CE 530D0A00           
   830 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   830 000001DB 7220               
   831 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   832 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   832 000001E9 6700               
   833                                  ;-----------------------------------------------------------------------------------------------------------------------
   834                                  ;
   835                                  ;       Work Areas
   836                                  ;
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838 000001EB 90                                              align   2
   839 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   840 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   841 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   842 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   843 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   844                                  wwReadCountCommand      equ     $                                               ;read count and command
   845 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   846 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   847                                  wwDriveHead             equ     $                                               ;drive, head (word)
   848 000001F8 00                      wbDrive                 db      0                                               ;drive
   849 000001F9 00                      wbHead                  db      0                                               ;head
   850                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   851 000001FA 00                                              db      0                                               ;sector
   852 000001FB 00                      wbTrack                 db      0                                               ;track
   853 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   854 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   855                                  %endif
   856                                  %ifdef BUILDPREP
   857                                  ;=======================================================================================================================
   858                                  ;
   859                                  ;       Diskette Preparation Code
   860                                  ;
   861                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   862                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   863                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   864                                  ;
   865                                  ;=======================================================================================================================
   866                                  ;
   867                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   868                                  ;
   869 00000200 BE[CA02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   870 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   871                                  ;
   872                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   873                                  ;
   874 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   875 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   876 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   877 0000020C FB                                              sti                                                     ;enable interrupts
   878 0000020D F4                                              hlt                                                     ;wait for interrupt
   879 0000020E EBF6                                            jmp     .10                                             ;repeat
   880 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   881 00000212 7407                                            je      .30                                             ;yes, branch
   882 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   883 00000216 75EE                                            jne     .10                                             ;no, repeat
   884 00000218 E9A900                                          jmp     .120                                            ;yes, exit program
   885                                  ;
   886                                  ;       Display writing-sector message and patch the JMP instruction.
   887                                  ;
   888 0000021B BE[6E04]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   889 0000021E E889FF                                          call    BootPrint                                       ;display message
   890 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   891 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   892 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   893                                  ;
   894                                  ;       Try to read the boot sector.
   895                                  ;
   896 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   897 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   898 0000022D BB[760A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   899 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   900 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
   901 00000236 B80102                                          mov     ax,0201h                                        ;read one sector
   902 00000239 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
   903 0000023B 59                                              pop     cx                                              ;restore remaining retries
   904 0000023C 7307                                            jnc     .50                                             ;skip ahead if successful
   905 0000023E E2EC                                            loop    .40                                             ;try again
   906 00000240 BE[9E04]                                        mov     si,czPrepMsg20                                  ;read-error message address
   907 00000243 EB2C                                            jmp     .70                                             ;branch to error routine
   908                                  ;
   909                                  ;       Copy diskette parms from input buffer to output buffer.
   910                                  ;
   911 00000245 BE[760A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   912 00000248 83C60B                                          add     si,11                                           ;skip over JMP and system ID
   913 0000024B BF[0000]                                        mov     di,Boot                                         ;output buffer address
   914 0000024E 83C70B                                          add     di,11                                           ;skip over JMP and system ID
   915 00000251 B91300                                          mov     cx,19                                           ;length of diskette parameters
   916 00000254 FC                                              cld                                                     ;forward string copies
   917 00000255 F3A4                                            rep     movsb                                           ;copy diskette parameters
   918                                  ;
   919                                  ;       Try to write boot sector to diskette.
   920                                  ;
   921 00000257 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   922 0000025A 51                      .60                     push    cx                                              ;save remaining tries
   923 0000025B BB[0000]                                        mov     bx,Boot                                         ;output buffer address
   924 0000025E BA0000                                          mov     dx,0                                            ;head zero, drive zero
   925 00000261 B90100                                          mov     cx,1                                            ;track zero, sector one
   926 00000264 B80103                                          mov     ax,0301h                                        ;write one sector
   927 00000267 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
   928 00000269 59                                              pop     cx                                              ;restore remaining retries
   929 0000026A 7326                                            jnc     .100                                            ;skip ahead if successful
   930 0000026C E2EC                                            loop    .60                                             ;try again
   931 0000026E BE[EC04]                                        mov     si,czPrepMsg30                                  ;write-error message address
   932                                  ;
   933                                  ;       Convert the error code to ASCII and display the error message.
   934                                  ;
   935 00000271 50                      .70                     push    ax                                              ;save error code
   936 00000272 88E0                                            mov     al,ah                                           ;copy error code
   937 00000274 B400                                            mov     ah,0                                            ;AX = error code
   938 00000276 B210                                            mov     dl,10h                                          ;hexadecimal divisor
   939 00000278 F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
   940 0000027A 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
   941 0000027D 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
   942 00000280 7203                                            jb      .80                                             ;yes, continue
   943 00000282 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
   944 00000285 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
   945 00000287 7202                                            jb      .90                                             ;yes, continue
   946 00000289 0407                                            add     al,7                                            ;no, make ASCII
   947 0000028B 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
   948 0000028E E819FF                                          call    BootPrint                                       ;write error message
   949 00000291 58                                              pop     ax                                              ;restore error code
   950                                  ;
   951                                  ;       Display the completion message.
   952                                  ;
   953 00000292 BE[3805]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
   954 00000295 88E0                                            mov     al,ah                                           ;BIOS return code
   955 00000297 3C00                                            cmp     al,0                                            ;success?
   956 00000299 7426                                            je      .110                                            ;yes, continue
   957 0000029B BE[D705]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
   958 0000029E 3C01                                            cmp     al,1                                            ;disk parameter error?
   959 000002A0 741F                                            je      .110                                            ;yes, continue
   960 000002A2 BE[A106]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
   961 000002A5 3C02                                            cmp     al,2                                            ;address mark not found?
   962 000002A7 7418                                            je      .110                                            ;yes, continue
   963 000002A9 BE[2A07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
   964 000002AC 3C03                                            cmp     al,3                                            ;protected disk?
   965 000002AE 7411                                            je      .110                                            ;yes, continue
   966 000002B0 BE[E407]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
   967 000002B3 3C06                                            cmp     al,6                                            ;diskette removed?
   968 000002B5 740A                                            je      .110                                            ;yes, continue
   969 000002B7 BE[1409]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
   970 000002BA 3C80                                            cmp     al,80H                                          ;drive timed out?
   971 000002BC 7403                                            je      .110                                            ;yes, continue
   972 000002BE BE[C509]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
   973 000002C1 E8E6FE                  .110                    call    BootPrint                                       ;display result message
   974 000002C4 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
   975 000002C7 CD21                                            int     021h                                            ;terminate DOS program
   976 000002C9 C3                                              ret                                                     ;return (should not execute)
   977                                  ;-----------------------------------------------------------------------------------------------------------------------
   978                                  ;
   979                                  ;       Diskette Preparation Messages
   980                                  ;
   981                                  ;-----------------------------------------------------------------------------------------------------------------------
   982 000002CA 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
   982 000002D3 5320426F6F742D4469-
   982 000002DC 736B65747465205072-
   982 000002E5 657061726174696F6E-
   982 000002EE 2050726F6772616D   
   983 000002F6 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   983 000002FF 687420284329203230-
   983 00000308 31302D323031372044-
   983 00000311 61766964204A2E2057-
   983 0000031A 616C6C696E672E2041-
   983 00000323 6C6C20726967687473-
   983 0000032C 207265736572766564-
   983 00000335 2E                 
   984 00000336 0D0A                                            db      13,10
   985 00000338 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
   985 00000341 6F6772616D206F7665-
   985 0000034A 727772697465732074-
   985 00000353 686520626F6F742073-
   985 0000035C 6563746F72206F6620-
   985 00000365 61206469736B657474-
   985 0000036E 652077697468207374-
   985 00000377 617274757020636F64-
   985 00000380 652074686174       
   986 00000386 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
   986 0000038F 616420746865206F70-
   986 00000398 65726174696E672073-
   986 000003A1 797374656D20696E74-
   986 000003AA 6F206D656D6F727920-
   986 000003B3 7768656E2074686520-
   986 000003BC 636F6D707574657220-
   986 000003C5 697320726573746172-
   986 000003CE 7465642E           
   987 000003D2 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   987 000003DB 6565642C20706C6163-
   987 000003E4 65206120666F726D61-
   987 000003ED 74746564206469736B-
   987 000003F6 6574746520696E746F-
   987 000003FF 20647269766520413A-
   987 00000408 20616E642070726573-
   987 00000411 732074686520456E74-
   987 0000041A 6572206B65792E     
   988 00000421 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
   988 0000042A 20746869732070726F-
   988 00000433 6772616D2077697468-
   988 0000043C 6F7574207072657061-
   988 00000445 72696E672061206469-
   988 0000044E 736B657474652C2070-
   988 00000457 726573732074686520-
   988 00000460 457363617065206B65-
   988 00000469 792E               
   989 0000046B 0D0A00                                          db      13,10,0
   990 0000046E 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
   990 00000477 2074686520626F6F74-
   990 00000480 20736563746F722074-
   990 00000489 6F2074686520646973-
   990 00000492 6B65747465202E2E2E 
   991 0000049B 0D0A00                                          db      13,10,0
   992 0000049E 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   992 000004A7 6F722D636F6465202E-
   992 000004B0 2E2077617320726574-
   992 000004B9 75726E65642066726F-
   992 000004C2 6D207468652042494F-
   992 000004CB 53207768696C652072-
   992 000004D4 656164696E67206672-
   992 000004DD 6F6D20746865206469-
   992 000004E6 736B2E             
   993 000004E9 0D0A00                                          db      13,10,0
   994 000004EC 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   994 000004F5 6F722D636F6465202E-
   994 000004FE 2E2077617320726574-
   994 00000507 75726E65642066726F-
   994 00000510 6D207468652042494F-
   994 00000519 53207768696C652077-
   994 00000522 726974696E6720746F-
   994 0000052B 20746865206469736B-
   994 00000534 2E                 
   995 00000535 0D0A00                                          db      13,10,0
   996 00000538 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   996 00000541 742D736563746F7220-
   996 0000054A 776173207772697474-
   996 00000553 656E20746F20746865-
   996 0000055C 206469736B65747465-
   996 00000565 2E204265666F726520-
   996 0000056E 626F6F74696E672079-
   996 00000577 6F757220636F6D7075-
   996 00000580 7465722077697468   
   997 00000588 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   997 00000591 736B657474652C206D-
   997 0000059A 616B65207375726520-
   997 000005A3 746861742074686520-
   997 000005AC 66696C65204F532E43-
   997 000005B5 4F4D20697320636F70-
   997 000005BE 696564206F6E746F20-
   997 000005C7 746865206469736B65-
   997 000005D0 7474652E           
   998 000005D4 0D0A00                                          db      13,10,0
   999 000005D7 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
   999 000005E0 76616C696420446973-
   999 000005E9 6B20506172616D6574-
   999 000005F2 6572               
  1000 000005F4 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1000 000005FD 20616E20696E746572-
  1000 00000606 6E616C206572726F72-
  1000 0000060F 206361757365642062-
  1000 00000618 7920616E20696E7661-
  1000 00000621 6C69642076616C7565-
  1000 0000062A 206265696E67207061-
  1000 00000633 7373656420746F2061-
  1000 0000063C 2073797374656D     
  1001 00000643 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1001 0000064C 6E2E20546865204F53-
  1001 00000655 424F4F542E434F4D20-
  1001 0000065E 66696C65206D617920-
  1001 00000667 626520636F72727570-
  1001 00000670 742E20436F7079206F-
  1001 00000679 7220646F776E6C6F61-
  1001 00000682 64207468652066696C-
  1001 0000068B 6520616761696E     
  1002 00000692 0D0A616E6420726574-                             db      13,10,"and retry."
  1002 0000069B 72792E             
  1003 0000069E 0D0A00                                          db      13,10,0
  1004 000006A1 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1004 000006AA 6472657373204D6172-
  1004 000006B3 6B204E6F7420466F75-
  1004 000006BC 6E64               
  1005 000006BE 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1005 000006C7 726F7220696E646963-
  1005 000006D0 617465732061207068-
  1005 000006D9 79736963616C207072-
  1005 000006E2 6F626C656D20776974-
  1005 000006EB 682074686520666C6F-
  1005 000006F4 707079206469736B65-
  1005 000006FD 7474652E20506C6561-
  1005 00000706 7365207265747279   
  1006 0000070E 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1006 00000717 6E6F74686572206469-
  1006 00000720 736B657474652E     
  1007 00000727 0D0A00                                          db      13,10,0
  1008 0000072A 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1008 00000733 6F7465637465642044-
  1008 0000073C 69736B             
  1009 0000073F 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1009 00000748 726F72206973207573-
  1009 00000751 75616C6C7920636175-
  1009 0000075A 736564206279206174-
  1009 00000763 74656D7074696E6720-
  1009 0000076C 746F20777269746520-
  1009 00000775 746F20612077726974-
  1009 0000077E 652D70726F74656374-
  1009 00000787 6564206469736B2E   
  1010 0000078F 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1010 00000798 686520277772697465-
  1010 000007A1 2D70726F7465637427-
  1010 000007AA 2073657474696E6720-
  1010 000007B3 6F6E20746865206469-
  1010 000007BC 736B206F7220726574-
  1010 000007C5 7279207573696E6720-
  1010 000007CE 7573696E6720616E6F-
  1010 000007D7 74686572206469736B-
  1010 000007E0 2E                 
  1011 000007E1 0D0A00                                          db      13,10,0
  1012 000007E4 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1012 000007ED 736B65747465205265-
  1012 000007F6 6D6F766564         
  1013 000007FB 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1013 00000804 726F72206D61792069-
  1013 0000080D 6E6469636174652074-
  1013 00000816 686174207468652066-
  1013 0000081F 6C6F70707920646973-
  1013 00000828 6B6574746520686173-
  1013 00000831 206265656E2072656D-
  1013 0000083A 6F7665642066726F6D-
  1013 00000843 20746865           
  1014 00000847 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1014 00000850 652064726976652E20-
  1014 00000859 4F6E20736F6D652073-
  1014 00000862 797374656D732C2074-
  1014 0000086B 68697320636F646520-
  1014 00000874 6D617920616C736F20-
  1014 0000087D 6F6363757220696620-
  1014 00000886 746865206469736B65-
  1014 0000088F 747465206973       
  1015 00000895 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1015 0000089E 70726F746563746564-
  1015 000008A7 2E2720506C65617365-
  1015 000008B0 207665726966792074-
  1015 000008B9 686174207468652064-
  1015 000008C2 69736B657474652069-
  1015 000008CB 73206E6F7420777269-
  1015 000008D4 74652D70726F746563-
  1015 000008DD 74656420616E64     
  1016 000008E4 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1016 000008ED 65726C7920696E7365-
  1016 000008F6 7274656420696E2074-
  1016 000008FF 6865206469736B6574-
  1016 00000908 74652064726976652E 
  1017 00000911 0D0A00                                          db      13,10,0
  1018 00000914 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1018 0000091D 6976652054696D6564-
  1018 00000926 204F7574           
  1019 0000092A 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1019 00000933 726F7220757375616C-
  1019 0000093C 6C7920696E64696361-
  1019 00000945 746573207468617420-
  1019 0000094E 6E6F206469736B6574-
  1019 00000957 746520697320696E20-
  1019 00000960 746865206469736B65-
  1019 00000969 747465206472697665-
  1019 00000972 2E20506C65617365   
  1020 0000097A 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1020 00000983 726520746861742074-
  1020 0000098C 6865206469736B6574-
  1020 00000995 74652069732070726F-
  1020 0000099E 7065726C7920736561-
  1020 000009A7 74656420696E207468-
  1020 000009B0 652064726976652061-
  1020 000009B9 6E642072657472792E 
  1021 000009C2 0D0A00                                          db      13,10,0
  1022 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1022 000009CE 6B6E6F776E20457272-
  1022 000009D7 6F72               
  1023 000009D9 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1023 000009E2 6F722D636F64652072-
  1023 000009EB 657475726E65642062-
  1023 000009F4 79207468652042494F-
  1023 000009FD 53206973206E6F7420-
  1023 00000A06 61207265636F676E69-
  1023 00000A0F 7A6564206572726F72-
  1023 00000A18 2E20506C6561736520-
  1023 00000A21 636F6E73756C74     
  1024 00000A28 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1024 00000A31 6D7075746572277320-
  1024 00000A3A 746563686E6963616C-
  1024 00000A43 207265666572656E63-
  1024 00000A4C 6520666F7220612064-
  1024 00000A55 65736372697074696F-
  1024 00000A5E 6E206F662074686973-
  1024 00000A67 206572726F7220636F-
  1024 00000A70 64652E             
  1025 00000A73 0D0A00                                          db      13,10,0
  1026                                  wcPrepInBuf             equ     $
  1027                                  %endif
  1028                                  %ifdef BUILDDISK
  1029                                  ;=======================================================================================================================
  1030                                  ;
  1031                                  ;       File Allocation Tables
  1032                                  ;
  1033                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1034                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1035                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1036                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1037                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1038                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1039                                  ;       the last cluster in the chain.
  1040                                  ;
  1041                                  ;       Every three bytes encode two FAT entries as follows:
  1042                                  ;
  1043                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1044                                  ;
  1045                                  ;=======================================================================================================================
  1046                                  ;-----------------------------------------------------------------------------------------------------------------------
  1047                                  ;
  1048                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1049                                  ;
  1050                                  ;-----------------------------------------------------------------------------------------------------------------------
  1051                                  section                 fat1                                                    ;first copy of FAT
  1052                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1053                                                          db      005h,060h,000h, 007h,080h,000h
  1054                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1055                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1056                                                          db      011h,020h,001h, 013h,040h,001h
  1057                                                          db      015h,060h,001h, 017h,080h,001h
  1058                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1059                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1060                                                          db      021h,020h,002h, 023h,040h,002h
  1061                                                          db      025h,060h,002h, 027h,080h,002h
  1062                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1063                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1064                                  ;-----------------------------------------------------------------------------------------------------------------------
  1065                                  ;
  1066                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1067                                  ;
  1068                                  ;-----------------------------------------------------------------------------------------------------------------------
  1069                                  section                 fat2                                                    ;second copy of FAT
  1070                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1071                                                          db      005h,060h,000h, 007h,080h,000h
  1072                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1073                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1074                                                          db      011h,020h,001h, 013h,040h,001h
  1075                                                          db      015h,060h,001h, 017h,080h,001h
  1076                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1077                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1078                                                          db      021h,020h,002h, 023h,040h,002h
  1079                                                          db      025h,060h,002h, 027h,080h,002h
  1080                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1081                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1082                                  ;-----------------------------------------------------------------------------------------------------------------------
  1083                                  ;
  1084                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1085                                  ;
  1086                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1087                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1088                                  ;       copy.
  1089                                  ;
  1090                                  ;-----------------------------------------------------------------------------------------------------------------------
  1091                                  section                 dir                                                     ;diskette directory
  1092                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1093                                                          db      020h                                            ;attribute (archive bit set)
  1094                                                          times   10 db 0                                         ;unused
  1095                                                          dw      0h                                              ;time
  1096                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1097                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1098                                                          dw      2                                               ;first cluster
  1099                                                          dd      05400h                                          ;file size
  1100                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1101                                  %endif
  1102                                  %ifdef BUILDCOM
  1103                                  ;=======================================================================================================================
  1104                                  ;
  1105                                  ;       OS.COM
  1106                                  ;
  1107                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1108                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1109                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1110                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1111                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1112                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1113                                  ;
  1114                                  ;       Our loader addressability is set up according to the following diagram.
  1115                                  ;
  1116                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1117                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1118                                  ;                               |  256 = 100h bytes                             |
  1119                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1120                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1121                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1122                                  ;                       007e00  +-----------------------------------------------+
  1123                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1124                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1125                                  ;                               |                                               |
  1126                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1127                                  ;                               |                                               |
  1128                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1129                                  ;                               |  Loader Code                                  |
  1130                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1131                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1132                                  ;
  1133                                  ;=======================================================================================================================
  1134                                  ;-----------------------------------------------------------------------------------------------------------------------
  1135                                  ;
  1136                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1137                                  ;
  1138                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1139                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1140                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1141                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1142                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1143                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1144                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1145                                  ;       registers.
  1146                                  ;
  1147                                  ;-----------------------------------------------------------------------------------------------------------------------
  1148                                                          cpu     8086                                            ;assume minimal CPU
  1149                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1150                                                          bits    16                                              ;this is 16-bit code
  1151                                  Loader                  push    cs                                              ;use the code segment
  1152                                                          pop     ds                                              ;...as our data segment
  1153                                                          push    cs                                              ;use the code segment
  1154                                                          pop     es                                              ;...as our extra segment
  1155                                  ;
  1156                                  ;       Write a message to the console so we know we have our addressability established.
  1157                                  ;
  1158                                                          mov     si,czStartingMsg                                ;starting message
  1159                                                          call    PutTTYString                                    ;display loader message
  1160                                  ;
  1161                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1162                                  ;
  1163                                                          call    GetCPUType                                      ;AL = cpu type
  1164                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1165                                                          cmp     al,3                                            ;80386+?
  1166                                                          jb      LoaderExit                                      ;no, exit with error message
  1167                                                          cpu     386                                             ;allow 80386 instructions
  1168                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1169                                                          call    PutTTYString                                    ;display message
  1170                                  ;
  1171                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1172                                  ;
  1173                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1174                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1175                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1176                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1177                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1178                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1179                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1180                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1181                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1182                                                          call    PutTTYString                                    ;display message
  1183                                  ;
  1184                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1185                                  ;
  1186                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1187                                                          pop     es                                              ;... as target segment
  1188                                                          xor     di,di                                           ;ES:DI = target address
  1189                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1190                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1191                                                          cld                                                     ;forward strings
  1192                                                          rep     movsb                                           ;copy kernel image
  1193                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1194                                                          call    PutTTYString                                    ;display message
  1195                                  ;
  1196                                  ;       Switch to protected mode.
  1197                                  ;
  1198                                                          xor     si,si                                           ;ES:SI = gdt addr
  1199                                                          mov     ss,si                                           ;protected mode ss
  1200                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1201                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1202                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1203                                                          mov     dx,001Fh                                        ;outer delay loop count
  1204                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1205                                                          loop    $                                               ;wait out pending interrupts
  1206                                                          dec     dx                                              ;restore outer loop count
  1207                                                          jnz     .10                                             ;continue outer loop
  1208                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1209                                  ;
  1210                                  ;       Enable hardware and maskable interrupts.
  1211                                  ;
  1212                                                          xor     al,al                                           ;enable all registers code
  1213                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1214                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1215                                                          sti                                                     ;enable maskable interrupts
  1216                                  ;
  1217                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1218                                  ;
  1219                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1220                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1221                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1222                                  ;-----------------------------------------------------------------------------------------------------------------------
  1223                                  ;
  1224                                  ;       Routine:        LoaderExit
  1225                                  ;
  1226                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1227                                  ;
  1228                                  ;       In:             DS:SI   string address
  1229                                  ;
  1230                                  ;-----------------------------------------------------------------------------------------------------------------------
  1231                                  LoaderExit              call    PutTTYString                                    ;display error message
  1232                                  ;
  1233                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1234                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1235                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1236                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1237                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1238                                  ;
  1239                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1240                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1241                                                          jnz     .40                                             ;exit if key pressed
  1242                                                          sti                                                     ;enable maskable interrupts
  1243                                                          hlt                                                     ;wait for interrupt
  1244                                                          jmp     .30                                             ;repeat until keypress
  1245                                  ;
  1246                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1247                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1248                                  ;       HLT until the system resets.
  1249                                  ;
  1250                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1251                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1252                                  .50                     sti                                                     ;enable maskable interrupts
  1253                                                          hlt                                                     ;stop until reset, int, nmi
  1254                                                          jmp     .50                                             ;loop until restart kicks in
  1255                                  ;-----------------------------------------------------------------------------------------------------------------------
  1256                                  ;
  1257                                  ;       Routine:        GetCPUType
  1258                                  ;
  1259                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1260                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1261                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1262                                  ;
  1263                                  ;       Out:            AX      0 = 808x, v20, etc.
  1264                                  ;                               1 = 80186
  1265                                  ;                               2 = 80286
  1266                                  ;                               3 = 80386
  1267                                  ;
  1268                                  ;-----------------------------------------------------------------------------------------------------------------------
  1269                                  GetCPUType              mov     al,1                                            ;AL = 1
  1270                                                          mov     cl,32                                           ;shift count
  1271                                                          shr     al,cl                                           ;try a 32-bit shift
  1272                                                          or      al,al                                           ;did the shift happen?
  1273                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1274                                                          cpu     186
  1275                                                          push    sp                                              ;save stack pointer
  1276                                                          pop     cx                                              ;...into cx
  1277                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1278                                                          jne     .10                                             ;yes, cpu is 80186
  1279                                                          cpu     286
  1280                                                          inc     ax                                              ;AX = 2
  1281                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1282                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1283                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1284                                                          jz      .10                                             ;yes, cpu is 80286
  1285                                                          inc     ax                                              ;AX = 3
  1286                                  .10                     ret                                                     ;return
  1287                                  ;-----------------------------------------------------------------------------------------------------------------------
  1288                                  ;
  1289                                  ;       Routine:        PutTTYString
  1290                                  ;
  1291                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1292                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1293                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1294                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1295                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1296                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1297                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1298                                  ;                       to LODSB is not needed.
  1299                                  ;
  1300                                  ;       In:             DS:SI   address of string
  1301                                  ;
  1302                                  ;       Out:            DF      0
  1303                                  ;                       ZF      1
  1304                                  ;                       AL      0
  1305                                  ;
  1306                                  ;-----------------------------------------------------------------------------------------------------------------------
  1307                                  PutTTYString            cld                                                     ;forward strings
  1308                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1309                                                          test    al,al                                           ;end of string?
  1310                                                          jz      .20                                             ;... yes, exit our loop
  1311                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1312                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1313                                                          jmp     .10                                             ;repeat until done
  1314                                  .20                     ret                                                     ;return
  1315                                  ;-----------------------------------------------------------------------------------------------------------------------
  1316                                  ;
  1317                                  ;       Loader Data
  1318                                  ;
  1319                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1320                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1321                                  ;
  1322                                  ;-----------------------------------------------------------------------------------------------------------------------
  1323                                                          align   2
  1324                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1325                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1326                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1327                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1328                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1329                                                          db      "Please press any key to restart the computer.",13,10,0
  1330                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1331                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1332                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1333                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1334                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1335                                  ;=======================================================================================================================
  1336                                  ;
  1337                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1338                                  ;
  1339                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1340                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1341                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1342                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1343                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1344                                  ;
  1345                                  ;=======================================================================================================================
  1346                                  ;=======================================================================================================================
  1347                                  ;
  1348                                  ;       Kernel Tables
  1349                                  ;
  1350                                  ;=======================================================================================================================
  1351                                  ;-----------------------------------------------------------------------------------------------------------------------
  1352                                  ;
  1353                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1354                                  ;
  1355                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1356                                  ;       first descriptor must be all nulls.
  1357                                  ;
  1358                                  ;       6   5         4         3         2         1         0
  1359                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1360                                  ;       ----------------------------------------------------------------
  1361                                  ;       h......hffffmmmma......ab......................bn..............n
  1362                                  ;       00000000                        all areas have base addresses below 2^24
  1363                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1364                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1365                                  ;                   1001                present, ring-0, selector
  1366                                  ;
  1367                                  ;       h...h   hi-order base address (bits 24-31)
  1368                                  ;       ffff    flags
  1369                                  ;       mmmm    hi-order limit (bits 16-19)
  1370                                  ;       a...a   access
  1371                                  ;       b...b   lo-order base address (bits 0-23)
  1372                                  ;       n...n   lo-order limit (bits 0-15)
  1373                                  ;
  1374                                  ;-----------------------------------------------------------------------------------------------------------------------
  1375                                  section                 gdt                                                     ;global descriptor table
  1376                                                          dq      0000000000000000h                               ;00 required null selector
  1377                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1378                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1379                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1380                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1381                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1382                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1383                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1384                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1385                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1386                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1387                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1388                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1389                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1390                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1391                                  ;-----------------------------------------------------------------------------------------------------------------------
  1392                                  ;
  1393                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1394                                  ;
  1395                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1396                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1397                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1398                                  ;
  1399                                  ;       6   5         4         3         2         1         0
  1400                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1401                                  ;       ----------------------------------------------------------------
  1402                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1403                                  ;
  1404                                  ;       h...h   high-order offset (bits 16-31)
  1405                                  ;       P       present (0=unused interrupt)
  1406                                  ;       zz      descriptor privilege level
  1407                                  ;       S       storage segment (must be zero for IDT)
  1408                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1409                                  ;       S...S   handling code selector in GDT
  1410                                  ;       l...l   lo-order offset (bits 0-15)
  1411                                  ;
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                  section                 idt                                                     ;interrupt descriptor table
  1414                                                          mint    dividebyzero                                    ;00 divide by zero
  1415                                                          mint    singlestep                                      ;01 single step
  1416                                                          mint    nmi                                             ;02 non-maskable
  1417                                                          mint    break                                           ;03 break
  1418                                                          mint    into                                            ;04 into
  1419                                                          mint    bounds                                          ;05 bounds
  1420                                                          mint    badopcode                                       ;06 bad op code
  1421                                                          mint    nocoproc                                        ;07 no coprocessor
  1422                                                          mint    doublefault                                     ;08 double-fault
  1423                                                          mint    operand                                         ;09 operand
  1424                                                          mint    badtss                                          ;0a bad TSS
  1425                                                          mint    notpresent                                      ;0b not-present
  1426                                                          mint    stacklimit                                      ;0c stack limit
  1427                                                          mint    protection                                      ;0d general protection fault
  1428                                                          mint    int14                                           ;0e (reserved)
  1429                                                          mint    int15                                           ;0f (reserved)
  1430                                                          mint    coproccalc                                      ;10 (reserved)
  1431                                                          mint    int17                                           ;11 (reserved)
  1432                                                          mint    int18                                           ;12 (reserved)
  1433                                                          mint    int19                                           ;13 (reserved)
  1434                                                          mint    int20                                           ;14 (reserved)
  1435                                                          mint    int21                                           ;15 (reserved)
  1436                                                          mint    int22                                           ;16 (reserved)
  1437                                                          mint    int23                                           ;17 (reserved)
  1438                                                          mint    int24                                           ;18 (reserved)
  1439                                                          mint    int25                                           ;19 (reserved)
  1440                                                          mint    int26                                           ;1a (reserved)
  1441                                                          mint    int27                                           ;1b (reserved)
  1442                                                          mint    int28                                           ;1c (reserved)
  1443                                                          mint    int29                                           ;1d (reserved)
  1444                                                          mint    int30                                           ;1e (reserved)
  1445                                                          mint    int31                                           ;1f (reserved)
  1446                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1447                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1448                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1449                                                          mtrap   com2                                            ;23 IRQ3 com2
  1450                                                          mtrap   com1                                            ;24 IRQ4 com1
  1451                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1452                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1453                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1454                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1455                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1456                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1457                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1458                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1459                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1460                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1461                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1462                                                          mtrap   svc                                             ;30 OS services
  1463                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1464                                  ;=======================================================================================================================
  1465                                  ;
  1466                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1467                                  ;
  1468                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1469                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1470                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1471                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1472                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1473                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1474                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1475                                  ;
  1476                                  ;=======================================================================================================================
  1477                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1478                                                          cpu     386                                             ;allow 80386 instructions
  1479                                                          bits    32                                              ;this is 32-bit code
  1480                                  ;=======================================================================================================================
  1481                                  ;
  1482                                  ;       CPU Interrupt Handlers
  1483                                  ;
  1484                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1485                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1486                                  ;
  1487                                  ;=======================================================================================================================
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;       INT0    Divide By Zero
  1491                                  ;
  1492                                  ;-----------------------------------------------------------------------------------------------------------------------
  1493                                                          menter  dividebyzero                                    ;divide by zero
  1494                                                          push    0                                               ;store interrupt nbr
  1495                                                          push    czIntDivideByZero                               ;store message offset
  1496                                                          jmp     ReportInterrupt                                 ;report interrupt
  1497                                  ;-----------------------------------------------------------------------------------------------------------------------
  1498                                  ;
  1499                                  ;       INT1    Single Step
  1500                                  ;
  1501                                  ;-----------------------------------------------------------------------------------------------------------------------
  1502                                                          menter  singlestep                                      ;single step
  1503                                                          push    1                                               ;store interrupt nbr
  1504                                                          push    czIntSingleStep                                 ;store message offset
  1505                                                          jmp     ReportInterrupt                                 ;report interrupt
  1506                                  ;-----------------------------------------------------------------------------------------------------------------------
  1507                                  ;
  1508                                  ;       INT2    Non-Maskable Interrupt
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                                          menter  nmi                                             ;non-maskable
  1512                                                          push    2                                               ;store interrupt nbr
  1513                                                          push    czIntNonMaskable                                ;store message offset
  1514                                                          jmp     ReportInterrupt                                 ;report interrupt
  1515                                  ;-----------------------------------------------------------------------------------------------------------------------
  1516                                  ;
  1517                                  ;       INT3    Break
  1518                                  ;
  1519                                  ;-----------------------------------------------------------------------------------------------------------------------
  1520                                                          menter  break                                           ;break
  1521                                                          push    3                                               ;store interrupt nbr
  1522                                                          push    czIntBreak                                      ;store message offset
  1523                                                          jmp     ReportInterrupt                                 ;report interrupt
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;       INT4    Into
  1527                                  ;
  1528                                  ;-----------------------------------------------------------------------------------------------------------------------
  1529                                                          menter  into                                            ;into
  1530                                                          push    4                                               ;store interrupt nbr
  1531                                                          push    czIntInto                                       ;store message offset
  1532                                                          jmp     ReportInterrupt                                 ;report interrupt
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  ;
  1535                                  ;       INT5    Bounds
  1536                                  ;
  1537                                  ;-----------------------------------------------------------------------------------------------------------------------
  1538                                                          menter  bounds                                          ;bounds
  1539                                                          push    5                                               ;store interrupt nbr
  1540                                                          push    czIntBounds                                     ;store message offset
  1541                                                          jmp     ReportInterrupt                                 ;report interrupt
  1542                                  ;-----------------------------------------------------------------------------------------------------------------------
  1543                                  ;
  1544                                  ;       INT6    Bad Operation Code
  1545                                  ;
  1546                                  ;-----------------------------------------------------------------------------------------------------------------------
  1547                                                          menter  badopcode                                       ;bad opcode interrupt
  1548                                                          push    6                                               ;store interrupt nbr
  1549                                                          push    czIntBadOpCode                                  ;store message offset
  1550                                                          jmp     ReportInterrupt                                 ;report interrupt
  1551                                  ;-----------------------------------------------------------------------------------------------------------------------
  1552                                  ;
  1553                                  ;       INT7    No Coprocessor
  1554                                  ;
  1555                                  ;-----------------------------------------------------------------------------------------------------------------------
  1556                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1557                                                          push    7                                               ;store interrupt nbr
  1558                                                          push    czIntNoCoprocessor                              ;store message offset
  1559                                                          jmp     ReportInterrupt                                 ;report interrupt
  1560                                  ;-----------------------------------------------------------------------------------------------------------------------
  1561                                  ;
  1562                                  ;       INT8    Double Fault
  1563                                  ;
  1564                                  ;-----------------------------------------------------------------------------------------------------------------------
  1565                                                          menter  doublefault                                     ;doublefault interrupt
  1566                                                          push    8                                               ;store interrupt nbr
  1567                                                          push    czIntDoubleFault                                ;store message offset
  1568                                                          jmp     ReportInterrupt                                 ;report interrupt
  1569                                  ;-----------------------------------------------------------------------------------------------------------------------
  1570                                  ;
  1571                                  ;       INT9    Operand
  1572                                  ;
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                                          menter  operand                                         ;operand interrupt
  1575                                                          push    9                                               ;store interrupt nbr
  1576                                                          push    czIntOperand                                    ;store message offset
  1577                                                          jmp     ReportInterrupt                                 ;report interrupt
  1578                                  ;-----------------------------------------------------------------------------------------------------------------------
  1579                                  ;
  1580                                  ;       INT10   Bad Task State Segment
  1581                                  ;
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                                          menter  badtss                                          ;bad TSS interrupt
  1584                                                          push    10                                              ;store interrupt nbr
  1585                                                          push    czIntBadTSS                                     ;store message offset
  1586                                                          jmp     ReportInterrupt                                 ;report interrupt
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                  ;
  1589                                  ;       INT11   Not Present
  1590                                  ;
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                                          menter  notpresent                                      ;not present interrupt
  1593                                                          push    11                                              ;store interrupt nbr
  1594                                                          push    czIntNotPresent                                 ;store message offset
  1595                                                          jmp     ReportInterrupt                                 ;report interrupt
  1596                                  ;-----------------------------------------------------------------------------------------------------------------------
  1597                                  ;
  1598                                  ;       INT12   Stack Limit
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                                          menter  stacklimit                                      ;stack limit interrupt
  1602                                                          push    12                                              ;store interrupt nbr
  1603                                                          push    czIntStackLimit                                 ;store message offset
  1604                                                          jmp     ReportInterrupt                                 ;report interrupt
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  ;
  1607                                  ;       INT13   General Protection Fault
  1608                                  ;
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                                          menter  protection                                      ;protection fault interrupt
  1611                                                          push    13                                              ;store interrupt nbr
  1612                                                          push    czIntProtection                                 ;store message offset
  1613                                                          jmp     ReportInterrupt                                 ;report interrupt
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                  ;
  1616                                  ;       INT14   Reserved
  1617                                  ;
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                                          menter  int14                                           ;(reserved)
  1620                                                          push    14                                              ;store interrupt nbr
  1621                                                          push    czIntReserved                                   ;store message offset
  1622                                                          jmp     ReportInterrupt                                 ;report interrupt
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                  ;
  1625                                  ;       INT15   Reserved
  1626                                  ;
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                                          menter  int15                                           ;(reserved)
  1629                                                          push    15                                              ;store interrupt nbr
  1630                                                          push    czIntReserved                                   ;store message offset
  1631                                                          jmp     ReportInterrupt                                 ;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;       INT16   Coprocessor Calculation
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                                          menter  coproccalc                                      ;coprocessor calculation
  1638                                                          push    16                                              ;store interrupt nbr
  1639                                                          push    czIntCoprocessorCalc                            ;store message offset
  1640                                                          jmp     ReportInterrupt                                 ;report interrupt
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  ;
  1643                                  ;       INT17   Reserved
  1644                                  ;
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                                          menter  int17                                           ;(reserved)
  1647                                                          push    17                                              ;store interrupt nbr
  1648                                                          push    czIntReserved                                   ;store message offset
  1649                                                          jmp     ReportInterrupt                                 ;report interrupt
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  ;
  1652                                  ;       INT18   Reserved
  1653                                  ;
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                                          menter  int18                                           ;(reserved)
  1656                                                          push    18                                              ;store interrupt nbr
  1657                                                          push    czIntReserved                                   ;store message offset
  1658                                                          jmp     ReportInterrupt                                 ;report interrupt
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  ;
  1661                                  ;       INT19   Reserved
  1662                                  ;
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                                          menter  int19                                           ;(reserved)
  1665                                                          push    19                                              ;store interrupt nbr
  1666                                                          push    czIntReserved                                   ;store message offset
  1667                                                          jmp     ReportInterrupt                                 ;report interrupt
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  ;
  1670                                  ;       INT20   Reserved
  1671                                  ;
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                                          menter  int20                                           ;(reserved)
  1674                                                          push    20                                              ;store interrupt nbr
  1675                                                          push    czIntReserved                                   ;store message offset
  1676                                                          jmp     ReportInterrupt                                 ;report interrupt
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  ;
  1679                                  ;       INT21   Reserved
  1680                                  ;
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                                          menter  int21                                           ;(reserved)
  1683                                                          push    21                                              ;store interrupt nbr
  1684                                                          push    czIntReserved                                   ;store message offset
  1685                                                          jmp     ReportInterrupt                                 ;report interrupt
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT22   Reserved
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  int22                                           ;(reserved)
  1692                                                          push    22                                              ;store interrupt nbr
  1693                                                          push    czIntReserved                                   ;store message offset
  1694                                                          jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT23   Reserved
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  int23                                           ;(reserved)
  1701                                                          push    23                                              ;store interrupt nbr
  1702                                                          push    czIntReserved                                   ;store message offset
  1703                                                          jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT24   Reserved
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  int24                                           ;(reserved)
  1710                                                          push    24                                              ;store interrupt nbr
  1711                                                          push    czIntReserved                                   ;store message offset
  1712                                                          jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT25   Reserved
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  int25                                           ;(reserved)
  1719                                                          push    25                                              ;store interrupt nbr
  1720                                                          push    czIntReserved                                   ;store message offset
  1721                                                          jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT26   Reserved
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  int26                                           ;(reserved)
  1728                                                          push    26                                              ;store interrupt nbr
  1729                                                          push    czIntReserved                                   ;store message offset
  1730                                                          jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT27   Reserved
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  int27                                           ;(reserved)
  1737                                                          push    27                                              ;store interrupt nbr
  1738                                                          push    czIntReserved                                   ;store message offset
  1739                                                          jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT28   Reserved
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  int28                                           ;(reserved)
  1746                                                          push    28                                              ;store interrupt nbr
  1747                                                          push    czIntReserved                                   ;store message offset
  1748                                                          jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT29   Reserved
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  int29                                           ;(reserved)
  1755                                                          push    29                                              ;store interrupt nbr
  1756                                                          push    czIntReserved                                   ;store message offset
  1757                                                          jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT30   Reserved
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  int30                                           ;(reserved)
  1764                                                          push    30                                              ;store interrupt nbr
  1765                                                          push    czIntReserved                                   ;store message offset
  1766                                                          jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT31   Reserved
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  int31                                           ;(reserved)
  1773                                                          push    31                                              ;store interrupt nbr
  1774                                                          push    czIntReserved                                   ;store message offset
  1775                                                          jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       Routine:        ReportInterrupt
  1779                                  ;
  1780                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1781                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1782                                  ;
  1783                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1784                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                  ReportInterrupt         pop     eax                                             ;error message address
  1788                                                          pop     eax                                             ;interrupt number
  1789                                                          iretd                                                   ;return
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       Processor Interrupt Name Strings
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  czIntDivideByZero       db      "Division by zero",0
  1796                                  czIntSingleStep         db      "Single step",0
  1797                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1798                                  czIntBreak              db      "Break",0
  1799                                  czIntInto               db      "Into",0
  1800                                  czIntBounds             db      "Bounds",0
  1801                                  czIntBadOpCode          db      "Bad Operation Code",0
  1802                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1803                                  czIntDoubleFault        db      "Double Fault",0
  1804                                  czIntOperand            db      "Operand",0
  1805                                  czIntBadTSS             db      "Bad Task State Segment",0
  1806                                  czIntNotPresent         db      "Not Present",0
  1807                                  czIntStackLimit         db      "Stack Limit",0
  1808                                  czIntProtection         db      "General Protection Fault",0
  1809                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1810                                  czIntReserved           db      "Reserved",0
  1811                                  ;=======================================================================================================================
  1812                                  ;
  1813                                  ;       Hardware Device Interupts
  1814                                  ;
  1815                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1816                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1817                                  ;       (BX=2028h).
  1818                                  ;
  1819                                  ;=======================================================================================================================
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                  ;
  1822                                  ;       IRQ0    Clock Tick Interrupt
  1823                                  ;
  1824                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1825                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1826                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1827                                  ;
  1828                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1829                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1830                                  ;
  1831                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1832                                  ;       zero, the floppy disk motors are turned off.
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  clocktick                                       ;clock tick interrupt
  1836                                                          push    eax                                             ;save modified regs
  1837                                                          push    edx                                             ;
  1838                                                          push    ds                                              ;
  1839                                  ;
  1840                                  ;       Update the clock tick count and the elapsed days as needed.
  1841                                  ;
  1842                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1843                                                          pop     ds                                              ;... into data segment register
  1844                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1845                                                          inc     eax                                             ;increment clock ticks
  1846                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1847                                                          jb      irq0.10                                         ;no, skip ahead
  1848                                                          inc     byte [wbClockDays]                              ;increment clock days
  1849                                                          xor     eax,eax                                         ;reset clock ticks
  1850                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1851                                  ;
  1852                                  ;       Decrement floppy disk motor timeout.
  1853                                  ;
  1854                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1855                                                          je      irq0.20                                         ;yes, skip ahead
  1856                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1857                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1858                                  ;
  1859                                  ;       Turn off the floppy disk motor if appropriate.
  1860                                  ;
  1861                                                          sti                                                     ;enable maskable interrupts
  1862                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1863                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1864                                                          in      al,dx                                           ;FDC main status byte
  1865                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1866                                                          jnz     irq0.15                                         ;wait while busy
  1867                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1868                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1869                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1870                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1871                                                          out     dx,al                                           ;turn motor off
  1872                                  ;
  1873                                  ;       Signal the end of the hardware interrupt.
  1874                                  ;
  1875                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1876                                  ;
  1877                                  ;       Restore and return.
  1878                                  ;
  1879                                                          pop     ds                                              ;restore modified regs
  1880                                                          pop     edx                                             ;
  1881                                                          pop     eax                                             ;
  1882                                                          iretd                                                   ;return
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  ;
  1885                                  ;       IRQ1    Keyboard Interrupt
  1886                                  ;
  1887                                  ;-----------------------------------------------------------------------------------------------------------------------
  1888                                                          menter  keyboard                                        ;keyboard interrrupt
  1889                                                          push    eax                                             ;
  1890                                                          jmp     hwint                                           ;
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                                          menter  iochannel                                       ;secondary 8259A cascade
  1897                                                          push    eax                                             ;save modified regs
  1898                                                          jmp     hwint                                           ;end interrupt and return
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                                          menter  com2                                            ;serial port 2 interrupt
  1905                                                          push    eax                                             ;save modified regs
  1906                                                          jmp     hwint                                           ;end interrupt and return
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                  ;
  1909                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  1910                                  ;
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                                          menter  com1                                            ;serial port 1 interrupt
  1913                                                          push    eax                                             ;save modified regs
  1914                                                          jmp     hwint                                           ;end interrupt and return
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                  ;
  1917                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                                          menter  lpt2                                            ;parallel port 2 interrupt
  1921                                                          push    eax                                             ;save modified regs
  1922                                                          jmp     hwint                                           ;end interrupt and return
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                  ;
  1925                                  ;       IRQ6    Diskette Hardware Interrupt
  1926                                  ;
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                                          menter  diskette                                        ;floppy disk interrupt
  1929                                                          push    eax                                             ;save non-volatile regs
  1930                                                          push    ds                                              ;
  1931                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1932                                                          pop     ds                                              ;... into DS register
  1933                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  1934                                                          or      al,10000000b                                    ;set IRQ flag
  1935                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  1936                                                          pop     ds                                              ;restore non-volatile regs
  1937                                                          jmp     hwint                                           ;end primary PIC interrupt
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  lpt1                                            ;parallel port 1 interrupt
  1944                                                          push    eax                                             ;save modified regs
  1945                                                          jmp     hwint                                           ;end interrupt and return
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  1949                                  ;
  1950                                  ;-----------------------------------------------------------------------------------------------------------------------
  1951                                                          menter  rtclock                                         ;real-time clock interrupt
  1952                                                          push    eax                                             ;save modified regs
  1953                                                          jmp     hwwint                                          ;end interrupt and return
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  1957                                  ;
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  1960                                                          push    eax                                             ;save modified regs
  1961                                                          jmp     hwwint                                          ;end interrupt and return
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                  ;
  1964                                  ;       IRQ10   Reserved Hardware Interrupt
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                                          menter  irq10                                           ;reserved
  1968                                                          push    eax                                             ;save modified regs
  1969                                                          jmp     hwwint                                          ;end interrupt and return
  1970                                  ;-----------------------------------------------------------------------------------------------------------------------
  1971                                  ;
  1972                                  ;       IRQ11   Reserved Hardware Interrupt
  1973                                  ;
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                                          menter  irq11                                           ;reserved
  1976                                                          push    eax                                             ;save modified regs
  1977                                                          jmp     hwwint                                          ;end interrupt and return
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  ;
  1980                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  1981                                  ;
  1982                                  ;-----------------------------------------------------------------------------------------------------------------------
  1983                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  1984                                                          push    eax                                             ;save modified regs
  1985                                                          jmp     hwwint                                          ;end interrupt and return
  1986                                  ;-----------------------------------------------------------------------------------------------------------------------
  1987                                  ;
  1988                                  ;       IRQ13   Coprocessor Hardware Interrupt
  1989                                  ;
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                                          menter  coprocessor                                     ;coprocessor interrupt
  1992                                                          push    eax                                             ;save modified regs
  1993                                                          jmp     hwwint                                          ;end interrupt and return
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                  ;
  1996                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  1997                                  ;
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2000                                                          push    eax                                             ;save modified regs
  2001                                                          jmp     hwwint                                          ;end interrupt and return
  2002                                  ;-----------------------------------------------------------------------------------------------------------------------
  2003                                  ;
  2004                                  ;       IRQ15   Reserved Hardware Interrupt
  2005                                  ;
  2006                                  ;-----------------------------------------------------------------------------------------------------------------------
  2007                                                          menter  irq15                                           ;reserved
  2008                                                          push    eax                                             ;save modified regs
  2009                                                          jmp     hwwint                                          ;end interrupt and return
  2010                                  ;-----------------------------------------------------------------------------------------------------------------------
  2011                                  ;
  2012                                  ;       Exit from hardware interrupt
  2013                                  ;
  2014                                  ;-----------------------------------------------------------------------------------------------------------------------
  2015                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2016                                                          jmp     hwint90                                         ;skip ahead
  2017                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2018                                  hwint90                 pop     eax                                             ;restore modified regs
  2019                                                          iretd                                                   ;return from interrupt
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                  ;
  2022                                  ;       INT 30h Operating System Software Service Interrupt
  2023                                  ;
  2024                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2025                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2026                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2027                                  ;       the entry address of the specific function from a table.
  2028                                  ;
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                                          menter  svc
  2031                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2032                                                          jae     svc90                                           ;yes, skip ahead
  2033                                                          movzx   eax,al                                          ;function
  2034                                                          shl     eax,2                                           ;offset into table
  2035                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2036                                  svc90                   iretd                                                   ;return from interrupt
  2037                                  ;-----------------------------------------------------------------------------------------------------------------------
  2038                                  ;
  2039                                  ;       Service Request Table
  2040                                  ;
  2041                                  ;
  2042                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2043                                  ;
  2044                                  ;-----------------------------------------------------------------------------------------------------------------------
  2045                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2046                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2047                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2048                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2049                                  ;-----------------------------------------------------------------------------------------------------------------------
  2050                                  ;
  2051                                  ;       Service Request Macros
  2052                                  ;
  2053                                  ;       These macros provide positional parameterization of service request calls.
  2054                                  ;
  2055                                  ;-----------------------------------------------------------------------------------------------------------------------
  2056                                  %macro                  clearConsoleScreen 0
  2057                                                          mov     al,eClearConsoleScreen                          ;function code
  2058                                                          int     _svc                                            ;invoke OS service
  2059                                  %endmacro
  2060                                  %macro                  placeCursor 0
  2061                                                          mov     al,ePlaceCursor                                 ;function code
  2062                                                          int     _svc                                            ;invoke OS service
  2063                                  %endmacro
  2064                                  %macro                  putConsoleString 1
  2065                                                          mov     edx,%1                                          ;string address
  2066                                                          mov     al,ePutConsoleString                            ;function code
  2067                                                          int     _svc                                            ;invoke OS service
  2068                                  %endmacro
  2069                                  ;=======================================================================================================================
  2070                                  ;
  2071                                  ;       Kernel Function Library
  2072                                  ;
  2073                                  ;=======================================================================================================================
  2074                                  ;=======================================================================================================================
  2075                                  ;
  2076                                  ;       Console Helper Routines
  2077                                  ;
  2078                                  ;       FirstConsoleColumn
  2079                                  ;       NextConsoleColumn
  2080                                  ;       NextConsoleRow
  2081                                  ;       PutConsoleChar
  2082                                  ;       PutConsoleString
  2083                                  ;
  2084                                  ;=======================================================================================================================
  2085                                  ;-----------------------------------------------------------------------------------------------------------------------
  2086                                  ;
  2087                                  ;       Routine:        FirstConsoleColumn
  2088                                  ;
  2089                                  ;       Description:    This routine resets the console column to start of the row.
  2090                                  ;
  2091                                  ;       In:             DS      OS data selector
  2092                                  ;
  2093                                  ;-----------------------------------------------------------------------------------------------------------------------
  2094                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2095                                                          mov     [wbConsoleColumn],al                            ;save column
  2096                                                          ret                                                     ;return
  2097                                  ;-----------------------------------------------------------------------------------------------------------------------
  2098                                  ;
  2099                                  ;       Routine:        NextConsoleColumn
  2100                                  ;
  2101                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2102                                  ;                       incremented if the end of the current row is reached.
  2103                                  ;
  2104                                  ;       In:             DS      OS data selector
  2105                                  ;
  2106                                  ;-----------------------------------------------------------------------------------------------------------------------
  2107                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2108                                                          inc     al                                              ;increment column
  2109                                                          mov     [wbConsoleColumn],al                            ;save column
  2110                                                          cmp     al,ECONCOLS                                     ;end of row?
  2111                                                          jb      .10                                             ;no, skip ahead
  2112                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2113                                                          call    NextConsoleRow                                  ;line feed to next row
  2114                                  .10                     ret                                                     ;return
  2115                                  ;-----------------------------------------------------------------------------------------------------------------------
  2116                                  ;
  2117                                  ;       Routine:        NextConsoleRow
  2118                                  ;
  2119                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2120                                  ;
  2121                                  ;       In:             DS      OS data selector
  2122                                  ;
  2123                                  ;-----------------------------------------------------------------------------------------------------------------------
  2124                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2125                                                          inc     al                                              ;increment row
  2126                                                          mov     [wbConsoleRow],al                               ;save row
  2127                                                          cmp     al,ECONROWS                                     ;end of screen?
  2128                                                          jb      .10                                             ;no, skip ahead
  2129                                                          call    ScrollConsoleRow                                ;scroll up one row
  2130                                                          mov     al,[wbConsoleRow]                               ;row
  2131                                                          dec     al                                              ;decrement row
  2132                                                          mov     [wbConsoleRow],al                               ;save row
  2133                                  .10                     ret                                                     ;return
  2134                                  ;-----------------------------------------------------------------------------------------------------------------------
  2135                                  ;
  2136                                  ;       Routine:        PutConsoleChar
  2137                                  ;
  2138                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2139                                  ;
  2140                                  ;       In:             AL      ASCII character
  2141                                  ;                       DS      OS data selector
  2142                                  ;
  2143                                  ;-----------------------------------------------------------------------------------------------------------------------
  2144                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2145                                                          push    es                                              ;
  2146                                                          push    EGDTCGA                                         ;load CGA selector ...
  2147                                                          pop     es                                              ;... into extra segment reg
  2148                                                          mov     cl,[wbConsoleColumn]                            ;column
  2149                                                          mov     ch,[wbConsoleRow]                               ;row
  2150                                                          call    SetConsoleChar                                  ;put character at row, column
  2151                                                          pop     es                                              ;restore non-volatile regs
  2152                                                          pop     ecx                                             ;
  2153                                                          ret                                                     ;return
  2154                                  ;-----------------------------------------------------------------------------------------------------------------------
  2155                                  ;
  2156                                  ;       Routine:        PutConsoleString
  2157                                  ;
  2158                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2159                                  ;                       console position as needed.
  2160                                  ;
  2161                                  ;       In:             EDX     source address
  2162                                  ;                       DS      OS data selector
  2163                                  ;
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2166                                                          mov     esi,edx                                         ;source address
  2167                                                          cld                                                     ;forward strings
  2168                                  .10                     lodsb                                                   ;ASCII character
  2169                                                          or      al,al                                           ;end of string?
  2170                                                          jz      .40                                             ;yes, skip ahead
  2171                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2172                                                          jne     .20                                             ;no, skip ahead
  2173                                                          call    FirstConsoleColumn                              ;move to start of row
  2174                                                          jmp     .10                                             ;next character
  2175                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2176                                                          jne     .30                                             ;no, skip ahead
  2177                                                          call    NextConsoleRow                                  ;move to next row
  2178                                                          jmp     .10                                             ;next character
  2179                                  .30                     call    PutConsoleChar                                  ;output character to console
  2180                                                          call    NextConsoleColumn                               ;advance to next column
  2181                                                          jmp     .10                                             ;next character
  2182                                  .40                     pop     esi                                             ;restore non-volatile regs
  2183                                                          ret                                                     ;return
  2184                                  ;=======================================================================================================================
  2185                                  ;
  2186                                  ;       Memory-Mapped Video Routines
  2187                                  ;
  2188                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2189                                  ;
  2190                                  ;       ClearConsoleScreen
  2191                                  ;       ScrollConsoleRow
  2192                                  ;       SetConsoleChar
  2193                                  ;
  2194                                  ;=======================================================================================================================
  2195                                  ;-----------------------------------------------------------------------------------------------------------------------
  2196                                  ;
  2197                                  ;       Routine:        ClearConsoleScreen
  2198                                  ;
  2199                                  ;       Description:    This routine clears the console (CGA) screen.
  2200                                  ;
  2201                                  ;-----------------------------------------------------------------------------------------------------------------------
  2202                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2203                                                          push    edi                                             ;
  2204                                                          push    ds                                              ;
  2205                                                          push    es                                              ;
  2206                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2207                                                          pop     ds                                              ;... into DS register
  2208                                                          push    EGDTCGA                                         ;load CGA selector ...
  2209                                                          pop     es                                              ;... into ES register
  2210                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2211                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2212                                                          xor     edi,edi                                         ;target offset
  2213                                                          cld                                                     ;forward strings
  2214                                                          rep     stosd                                           ;reset screen body
  2215                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2216                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2217                                                          rep     stosd                                           ;reset OIA line
  2218                                                          xor     al,al                                           ;zero register
  2219                                                          mov     [wbConsoleRow],al                               ;reset console row
  2220                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2221                                                          call    PlaceCursor                                     ;place cursor at current position
  2222                                                          pop     es                                              ;restore non-volatile regs
  2223                                                          pop     ds                                              ;
  2224                                                          pop     edi                                             ;
  2225                                                          pop     ecx                                             ;
  2226                                                          ret                                                     ;return
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                  ;
  2229                                  ;       Routine:        ScrollConsoleRow
  2230                                  ;
  2231                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2232                                  ;
  2233                                  ;-----------------------------------------------------------------------------------------------------------------------
  2234                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2235                                                          push    esi                                             ;
  2236                                                          push    edi                                             ;
  2237                                                          push    ds                                              ;
  2238                                                          push    es                                              ;
  2239                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2240                                                          pop     ds                                              ;... into DS
  2241                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2242                                                          pop     es                                              ;... into ES
  2243                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2244                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2245                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2246                                                          cld                                                     ;forward strings
  2247                                                          rep     movsd                                           ;move 24 lines up
  2248                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2249                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2250                                                          rep     stosd                                           ;clear bottom row
  2251                                                          pop     es                                              ;restore non-volatile regs
  2252                                                          pop     ds                                              ;
  2253                                                          pop     edi                                             ;
  2254                                                          pop     esi                                             ;
  2255                                                          pop     ecx                                             ;
  2256                                                          ret                                                     ;return
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                  ;
  2259                                  ;       Routine:        SetConsoleChar
  2260                                  ;
  2261                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2262                                  ;
  2263                                  ;       In:             AL      ASCII character
  2264                                  ;                       CL      column
  2265                                  ;                       CH      row
  2266                                  ;                       ES      CGA selector
  2267                                  ;
  2268                                  ;       Out:            EAX     last target address written (ES:)
  2269                                  ;                       CL      column + 1
  2270                                  ;
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2273                                                          movzx   eax,ch                                          ;row
  2274                                                          mov     ah,ECONCOLS                                     ;cols/row
  2275                                                          mul     ah                                              ;row * cols/row
  2276                                                          add     al,cl                                           ;add column
  2277                                                          adc     ah,0                                            ;handle carry
  2278                                                          shl     eax,1                                           ;screen offset
  2279                                                          mov     [es:eax],dl                                     ;store character
  2280                                                          inc     cl                                              ;next column
  2281                                                          ret                                                     ;return
  2282                                  ;=======================================================================================================================
  2283                                  ;
  2284                                  ;       Input/Output Routines
  2285                                  ;
  2286                                  ;       These routines read and/or write directly to ports.
  2287                                  ;
  2288                                  ;       PlaceCursor
  2289                                  ;       PutPrimaryEndOfInt
  2290                                  ;       PutSecondaryEndOfInt
  2291                                  ;
  2292                                  ;=======================================================================================================================
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  ;
  2295                                  ;       Routine:        PlaceCursor
  2296                                  ;
  2297                                  ;       Description:    This routine positions the cursor on the console.
  2298                                  ;
  2299                                  ;       In:             DS      OS data selector
  2300                                  ;
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2303                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2304                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2305                                                          mul     ah                                              ;row offset
  2306                                                          add     al,[wbConsoleColumn]                            ;add column
  2307                                                          adc     ah,0                                            ;add overflow
  2308                                                          mov     ecx,eax                                         ;screen offset
  2309                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2310                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2311                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2312                                                          out     dx,al                                           ;select register
  2313                                                          inc     edx                                             ;data port
  2314                                                          mov     al,ch                                           ;hi-order cursor loc
  2315                                                          out     dx,al                                           ;store hi-order loc
  2316                                                          dec     edx                                             ;register select port
  2317                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2318                                                          out     dx,al                                           ;select register
  2319                                                          inc     edx                                             ;data port
  2320                                                          mov     al,cl                                           ;lo-order cursor loc
  2321                                                          out     dx,al                                           ;store lo-order loc
  2322                                                          pop     ecx                                             ;restore non-volatile regs
  2323                                                          ret                                                     ;return
  2324                                  ;-----------------------------------------------------------------------------------------------------------------------
  2325                                  ;
  2326                                  ;       Routine:        PutPrimaryEndOfInt
  2327                                  ;
  2328                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2329                                  ;
  2330                                  ;-----------------------------------------------------------------------------------------------------------------------
  2331                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2332                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2333                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2334                                                          ret                                                     ;return
  2335                                  ;-----------------------------------------------------------------------------------------------------------------------
  2336                                  ;
  2337                                  ;       Routine:        PutSecondaryEndOfInt
  2338                                  ;
  2339                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2340                                  ;
  2341                                  ;-----------------------------------------------------------------------------------------------------------------------
  2342                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2343                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2344                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2345                                                          ret                                                     ;return
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       End of the Kernel Function Library
  2349                                  ;
  2350                                  ;-----------------------------------------------------------------------------------------------------------------------
  2351                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2352                                  ;=======================================================================================================================
  2353                                  ;
  2354                                  ;       Console Task
  2355                                  ;
  2356                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2357                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2358                                  ;       screen and responds to user commands.
  2359                                  ;
  2360                                  ;=======================================================================================================================
  2361                                  ;-----------------------------------------------------------------------------------------------------------------------
  2362                                  ;
  2363                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2364                                  ;
  2365                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2366                                  ;
  2367                                  ;-----------------------------------------------------------------------------------------------------------------------
  2368                                  section                 constack                                                ;console task stack
  2369                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2370                                  ;-----------------------------------------------------------------------------------------------------------------------
  2371                                  ;
  2372                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2373                                  ;
  2374                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2375                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2376                                  ;       16 descriptors. Six are initially defined.
  2377                                  ;
  2378                                  ;-----------------------------------------------------------------------------------------------------------------------
  2379                                  section                 conldt                                                  ;console local descriptors
  2380                                                          dq      004093004780007Fh                               ;04 TSS alias
  2381                                                          dq      004093004700007Fh                               ;0c LDT alias
  2382                                                          dq      00409300400006FFh                               ;14 stack
  2383                                                          dq      00CF93000000FFFFh                               ;1c data
  2384                                                          dq      00409B0050000FFFh                               ;24 code
  2385                                                          dq      00409300480007FFh                               ;2c message queue
  2386                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2387                                  ;-----------------------------------------------------------------------------------------------------------------------
  2388                                  ;
  2389                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2390                                  ;
  2391                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2392                                  ;       segment. CS to console code.
  2393                                  ;
  2394                                  ;-----------------------------------------------------------------------------------------------------------------------
  2395                                  section                 contss                                                  ;console task state segment
  2396                                                          dd      0                                               ;00 back-link tss
  2397                                                          dd      0700h                                           ;04 esp ring 0
  2398                                                          dd      0014h                                           ;08 ss ring 0
  2399                                                          dd      0700h                                           ;0c esp ring 1
  2400                                                          dd      0014h                                           ;10 es ring 1
  2401                                                          dd      0700h                                           ;14 esp ring 2
  2402                                                          dd      0014h                                           ;18 ss ring 2
  2403                                                          dd      0                                               ;1c cr ring 3
  2404                                                          dd      0                                               ;20 eip
  2405                                                          dd      0200h                                           ;24 eflags
  2406                                                          dd      0                                               ;28 eax
  2407                                                          dd      0                                               ;2c ecx
  2408                                                          dd      0                                               ;30 edx
  2409                                                          dd      0                                               ;34 ebx
  2410                                                          dd      0700h                                           ;38 esp ring 3
  2411                                                          dd      0                                               ;3c ebp
  2412                                                          dd      0                                               ;40 esi
  2413                                                          dd      0                                               ;44 edi
  2414                                                          dd      001Ch                                           ;48 es
  2415                                                          dd      0024h                                           ;4c cs
  2416                                                          dd      0014h                                           ;50 ss ring 3
  2417                                                          dd      001Ch                                           ;54 ds
  2418                                                          dd      0                                               ;58 fs
  2419                                                          dd      0                                               ;5c gs
  2420                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2421                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2422                                  ;-----------------------------------------------------------------------------------------------------------------------
  2423                                  ;
  2424                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2425                                  ;
  2426                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2427                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2428                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2429                                  ;       event.
  2430                                  ;
  2431                                  ;-----------------------------------------------------------------------------------------------------------------------
  2432                                  section                 conmque                                                 ;console message queue
  2433                                                          dd      8                                               ;head pointer
  2434                                                          dd      8                                               ;tail pointer
  2435                                                          times   510 dd 0                                        ;queue elements
  2436                                  ;-----------------------------------------------------------------------------------------------------------------------
  2437                                  ;
  2438                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2439                                  ;
  2440                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2441                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2442                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2443                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2444                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2445                                  ;       board input, echoing to the console screen and responding to user commands.
  2446                                  ;
  2447                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2448                                  ;
  2449                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2450                                  ;                               |  Real Mode Interrupt Vectors                  |
  2451                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2452                                  ;                               |  Reserved BIOS Memory Area                    |
  2453                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2454                                  ;                               |  Shared Kernel Memory Area                    |
  2455                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2456                                  ;                               |  Global Descriptor Table (GDT)                |
  2457                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2458                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2459                                  ;                       002000  +-----------------------------------------------+
  2460                                  ;                               |  Interrupt Handlers                           |
  2461                                  ;                               |  Kernel Function Library                      |
  2462                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2463                                  ;                               |  Console Task Stack Area                      |
  2464                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2465                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2466                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2467                                  ;                               |  Console Task Task State Segment (TSS)        |
  2468                                  ;                       004800  +-----------------------------------------------+
  2469                                  ;                               |  Console Task Message Queue                   |
  2470                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2471                                  ;                               |  Console Task Code                            |
  2472                                  ;                               |  Console Task Constants                       |
  2473                                  ;                       006000  +===============================================+
  2474                                  ;
  2475                                  ;-----------------------------------------------------------------------------------------------------------------------
  2476                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2477                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  2478                                  
  2479                                                          putConsoleString czTitle                                ;display startup message
  2480                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2481                                                          placeCursor                                             ;set CRT cursor location
  2482                                  
  2483                                  .20                     sti                                                     ;enable interrupts
  2484                                                          hlt                                                     ;halt until interrupt
  2485                                                          jmp     .20                                             ;continue halt loop
  2486                                  ;-----------------------------------------------------------------------------------------------------------------------
  2487                                  ;
  2488                                  ;       Routine:        ConInitializeData
  2489                                  ;
  2490                                  ;       Description:    This routine initializes console task variables.
  2491                                  ;
  2492                                  ;-----------------------------------------------------------------------------------------------------------------------
  2493                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  2494                                                          push    edi                                             ;
  2495                                                          push    es                                              ;
  2496                                  ;
  2497                                  ;       Initialize console work areas.
  2498                                  ;
  2499                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2500                                                          pop     es                                              ;... into extra segment register
  2501                                                          mov     edi,ECONDATA                                    ;OS console data address
  2502                                                          xor     al,al                                           ;initialization value
  2503                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2504                                                          cld                                                     ;forward strings
  2505                                                          rep     stosb                                           ;initialize data
  2506                                                          mov     byte [wbConsoleRow],5                           ;avoid overwriting loader messages
  2507                                  ;
  2508                                  ;       Restore and return.
  2509                                  ;
  2510                                                          pop     es                                              ;restore non-volatile regs
  2511                                                          pop     edi                                             ;
  2512                                                          pop     ecx                                             ;
  2513                                                          ret                                                     ;return
  2514                                  ;-----------------------------------------------------------------------------------------------------------------------
  2515                                  ;
  2516                                  ;       Constants
  2517                                  ;
  2518                                  ;-----------------------------------------------------------------------------------------------------------------------
  2519                                  czNewLine               db      13,10,0                                         ;new line string
  2520                                  czPrompt                db      ":",0                                           ;prompt string
  2521                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  2522                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2523                                  %endif
  2524                                  %ifdef BUILDDISK
  2525                                  ;-----------------------------------------------------------------------------------------------------------------------
  2526                                  ;
  2527                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2528                                  ;
  2529                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2530                                  ;
  2531                                  ;-----------------------------------------------------------------------------------------------------------------------
  2532                                  section                 unused                                                  ;unused disk space
  2533                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2534                                  %endif
  2535                                  ;=======================================================================================================================
  2536                                  ;
  2537                                  ;       End of Program Code
  2538                                  ;
  2539                                  ;=======================================================================================================================
