     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;
   166                                  ;=======================================================================================================================
   167                                  ;-----------------------------------------------------------------------------------------------------------------------
   168                                  ;
   169                                  ;       Hardware-Defined Values
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   175                                  ;
   176                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   177                                  ;       for CGA, EGA, VGA and compatible video modes.
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   181                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   182                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   183                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ;
   186                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   187                                  ;
   188                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   189                                  ;
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   192                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   193                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   194                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   195                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  ;
   198                                  ;       8042 Keyboard Controller                                                EKEYB...
   199                                  ;
   200                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   201                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   202                                  ;
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  EKEYBPORTDATA           equ     060h                                            ;data port
   205                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   206                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   207                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   208                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   209                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   210                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   211                                                                                                                  ;---------------------------------------
   212                                                                                                                  ;       Keyboard Scan Codes
   213                                                                                                                  ;---------------------------------------
   214                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   215                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   216                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   217                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   218                                  EKEYBSLASH              equ     035h                                            ;slash
   219                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   220                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   221                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   222                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   223                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   224                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   225                                  EKEYBUP                 equ     080h                                            ;up
   226                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   227                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   228                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   229                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   230                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   231                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   232                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   233                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   234                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   235                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   236                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   237                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   238                                  ;-----------------------------------------------------------------------------------------------------------------------
   239                                  ;
   240                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   241                                  ;
   242                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   243                                  ;       external devices and signals a hardware interrupt to the CPU.
   244                                  ;
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   247                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   248                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   249                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   250                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;       8253 Programmable Interval Timer                                        EPIT...
   254                                  ;
   255                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   256                                  ;       approximately 18.2 times per second.
   257                                  ;
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       x86 CPU Architecture                                                    ;EX86...
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  ;
   268                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   269                                  ;
   270                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   271                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   272                                  ;
   273                                  ;       0.......        Segment is not present in memory (triggers int 11)
   274                                  ;       1.......        Segment is present in memory
   275                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   276                                  ;       ...0....        Segment is a system segment
   277                                  ;       ...00010                Local Descriptor Table
   278                                  ;       ...00101                Task Gate
   279                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   280                                  ;       ...01100                Call Gate (386)
   281                                  ;       ...01110                Interrupt Gate (386)
   282                                  ;       ...01111                Trap Gate (386)
   283                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   284                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   285                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   286                                  ;
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   289                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   290                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   291                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   292                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   293                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   294                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   295                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       Firmware-Defined Values
   299                                  ;
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   304                                  ;
   305                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   306                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   310                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   311                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   312                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   313                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   314                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   315                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   316                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   317                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;
   320                                  ;       Standards-Based Values
   321                                  ;
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       ASCII                                                                   EASCII...
   326                                  ;
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   329                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   330                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   331                                  EASCIISPACE             equ     020h                                            ;space
   332                                  EASCIIUPPERA            equ     041h                                            ;'A'
   333                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   334                                  EASCIICASE              equ     00100000b                                       ;case bit
   335                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   336                                  ;-----------------------------------------------------------------------------------------------------------------------
   337                                  ;
   338                                  ;       Operating System Values
   339                                  ;
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;
   343                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   344                                  ;
   345                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   346                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   347                                  ;
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   350                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   351                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   352                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   353                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   354                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   355                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;       Console Constants                                                       ECON...
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  ECONCOLS                equ     80                                              ;columns per row
   360                                  ECONROWS                equ     24                                              ;console rows
   361                                  ECONOIAROW              equ     24                                              ;operator information area row
   362                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   363                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   364                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   365                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   366                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   371                                  EGDTCGA                 equ     020h                                            ;cga video selector
   372                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   373                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   374                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   375                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   376                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   377                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;       Keyboard Flags                                                          EKEYF...
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   382                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   383                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   384                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   385                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   386                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   387                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   388                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   389                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   390                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   391                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  ;       Kernel Constants                                                        EKRN...
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   396                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   397                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   398                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   399                                  ;=======================================================================================================================
   400                                  ;
   401                                  ;       Structures
   402                                  ;
   403                                  ;=======================================================================================================================
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;
   406                                  ;       OSDATA
   407                                  ;
   408                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   409                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   410                                  ;
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  struc                   OSDATA
   413 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   414 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   415 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   416 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   417 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   418 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   419 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   420 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   421 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   422 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   423 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   424 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   425 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   426 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   427 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   428 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   429 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   430 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   431 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   432 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   433 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   434 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   435 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   436 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   437 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   438 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   439 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   440 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   441 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   442 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   443 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   444 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   445 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   446 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   447 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   448 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   449 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   450 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   451 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   452 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   453 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   454 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   455 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   456 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   457 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   458 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   459 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   460 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   461 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   462 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   463 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   464 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   465 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   466 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   467 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   468 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   469 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   470 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   471 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   472 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   473 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   474 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   475 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   476 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   477 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   478 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   479 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   480 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   481 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   482 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   483 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   484 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   485 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   486 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   487 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   488 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   489 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   490 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   491 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   492 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   493 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   494 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   495 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   496 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   497 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   498 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   499 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   500 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   501 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   502 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   503 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   504 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   505 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   506 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   507 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   508 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   509 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   510 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   511 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   512 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   513 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   514                                  ;-----------------------------------------------------------------------------------------------------------------------
   515                                  ;
   516                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   517                                  ;
   518                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   519                                  ;
   520                                  ;-----------------------------------------------------------------------------------------------------------------------
   521                                  ECONDATA                equ     ($)
   522 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   523 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   524 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   525 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   526 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   527 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   528 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   529 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   530 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   531 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   532 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   533 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   534                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   535                                  ;-----------------------------------------------------------------------------------------------------------------------
   536                                  ;
   537                                  ;       End of OS Variables
   538                                  ;
   539                                  ;-----------------------------------------------------------------------------------------------------------------------
   540                                  endstruc
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  ;
   543                                  ;       Macros
   544                                  ;
   545                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   546                                  ;
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  %macro                  mint    1
   549                                  _%1                     equ     ($-$$) / EX86DESCLEN
   550                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   551                                  %endmacro
   552                                  %macro                  mtrap   1
   553                                  _%1                     equ     ($-$$) / EX86DESCLEN
   554                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   555                                  %endmacro
   556                                  %macro                  menter  1
   557                                  ?%1                     equ     ($-$$)
   558                                  %endmacro
   559                                  %macro                  tsvce   1
   560                                  e%1                     equ     ($-tsvc)/4
   561                                                          dd      %1
   562                                  %endmacro
   563                                  %ifdef BUILDBOOT
   564                                  ;=======================================================================================================================
   565                                  ;
   566                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   567                                  ;
   568                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   569                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   570                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   571                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   572                                  ;
   573                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   574                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   575                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   576                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   577                                  ;       immediately followed by a disk parameter table.
   578                                  ;
   579                                  ;=======================================================================================================================
   580                                                          cpu     8086                                            ;assume minimal CPU
   581                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   582                                                          bits    16                                              ;16-bit code at power-up
   583                                  %ifdef BUILDPREP
   584 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   585                                  %else
   586                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   587                                  %endif
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  ;
   590                                  ;       Disk Parameter Table
   591                                  ;
   592                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   593                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   594                                  ;
   595                                  ;-----------------------------------------------------------------------------------------------------------------------
   596 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   597 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   598 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   599 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   600 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   601 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   602 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   603 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   604 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   605                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   606 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   607 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   608 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   609                                  ;
   610                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   611                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   612                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   613                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   614                                  ;       given several possible starting values for CS:IP.
   615                                  ;
   616                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   617 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   618                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   619 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   620 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   621 00000025 B104                                            mov     cl,4                                            ;shift count
   622 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   623 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   624 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   625                                  ;
   626                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   627                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   628                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   629                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   630                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   631                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   632                                  ;
   633 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   634 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   635 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   636 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   637 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   638                                  ;
   639                                  ;       Our boot addressability is now set up according to the following diagram.
   640                                  ;
   641                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   642                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   643                                  ;                               |  256 = 100h bytes                             |
   644                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   645                                  ;                               |  Boot Sector (vstart=0100h)                   |
   646                                  ;                               |  1 sector = 512 = 200h bytes                  |
   647                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   648                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   649                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   650                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   651                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   652                                  ;                               |  2 sectors = 1024 = 400h bytes
   653                                  ;                       009400  +-----------------------------------------------+ DS:1900
   654                                  ;
   655                                  ;       On entry, DL indicates the drive being booted from.
   656                                  ;
   657 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   658                                  ;
   659                                  ;       Compute directory i/o buffer address.
   660                                  ;
   661 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   662 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   663 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   664 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   665                                  ;
   666                                  ;       Compute segment where os.com will be loaded.
   667                                  ;
   668 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   669 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   670 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   671 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   672                                  ;
   673                                  ;       Set the video mode to 80 column, 25 row, text.
   674                                  ;
   675 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   676 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   677                                  ;
   678                                  ;       Write a message to the console so we know we have our addressability established.
   679                                  ;
   680 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   681 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   682                                  ;
   683                                  ;       Initialize the number of directory sectors to search.
   684                                  ;
   685 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   686 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   687                                  ;
   688                                  ;       Compute number of directory sectors and initialize overhead count.
   689                                  ;
   690 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   691 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   692 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   693 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   694                                  ;
   695                                  ;       Compute directory entries per sector.
   696                                  ;
   697 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   698 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   699 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   700                                  ;
   701                                  ;       Compute first logical directory sector and update overhead count.
   702                                  ;
   703 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   704 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   705 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   706 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   707 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   708 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   709                                  ;
   710                                  ;       Read directory sector.
   711                                  ;
   712 0000008E B001                    .30                     mov     al,1                                            ;sector count
   713 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   714 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   715 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   716                                  ;
   717                                  ;       Setup variables to search this directory sector.
   718                                  ;
   719 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   720 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   721 000000A1 7603                                            jna     .40                                             ;no, continue
   722 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   723 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   724 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   725 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   726                                  ;
   727                                  ;       Loop through directory sectors searching for kernel program.
   728                                  ;
   729 000000B1 56                      .50                     push    si                                              ;save kernel name address
   730 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   731 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   732 000000B6 FC                                              cld                                                     ;forward strings
   733 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   734 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   735 000000BA 5E                                              pop     si                                              ;restore kernel name address
   736 000000BB 7418                                            je      .60                                             ;exit loop if found
   737 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   738 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   739 000000C2 75ED                                            jnz     .50                                             ;next entry
   740                                  ;
   741                                  ;       Repeat search if we are not at the end of the directory.
   742                                  ;
   743 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   744 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   745 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   746 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   747 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   748                                  ;
   749                                  ;       If we find the kernel program in the directory, read the FAT.
   750                                  ;
   751 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   752 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   753 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   754 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   755 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   756 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   757                                  ;
   758                                  ;       Get the starting cluster of the kernel program and target address.
   759                                  ;
   760 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   761 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   762                                  ;
   763                                  ;       Read each program cluster into RAM.
   764                                  ;
   765 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   766 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   767 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   768 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   769 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   770 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   771 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   772 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   773 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   774                                  ;
   775                                  ;       Update buffer pointer for next cluster.
   776                                  ;
   777 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   778 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   779 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   780 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   781 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   782                                  ;
   783                                  ;       Compute next cluster number.
   784                                  ;
   785 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   786 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   787 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   788 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   789 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   790 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   791 00000120 83E701                                          and     di,1                                            ;get low bit
   792 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   793 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   794 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   795                                  ;
   796                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   797                                  ;
   798 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   799 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   800 00000130 B104                                            mov     cl,4                                            ;shift count
   801 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   802 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   803 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   804 0000013A 75B2                                            jne     .70                                             ;no, continue
   805                                  ;
   806                                  ;       Transfer control to the operating system program.
   807                                  ;
   808 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   809 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   810 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   811                                  ;
   812                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   813                                  ;
   814 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   815 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   816 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   817 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   818 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   819 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   820 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   821 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   822 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   823 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   824                                  ;
   825                                  ;       Try maxtries times to read sector.
   826                                  ;
   827 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   828 00000160 53                      .10                     push    bx                                              ;save buffer address
   829 00000161 51                                              push    cx                                              ;save retry count
   830 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   831 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   832 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   833 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   834 0000016F 59                                              pop     cx                                              ;restore retry count
   835 00000170 5B                                              pop     bx                                              ;restore buffer address
   836 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   837 00000173 E2EB                                            loop    .10                                             ;retry
   838                                  ;
   839                                  ;       Handle disk error: convert to ASCII and store in error string.
   840                                  ;
   841 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   842 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   843 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   844 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   845 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   846 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   847 00000183 7203                                            jb      .20                                             ;continue if numeral
   848 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   849 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   850 0000018A 7203                                            jb      .30                                             ;continue if numeral
   851 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   852 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   853 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   854 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   855                                  ;
   856                                  ;       Wait for a key press.
   857                                  ;
   858 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   859 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   860 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   861 0000019E FB                                              sti                                                     ;enable maskable interrupts
   862 0000019F F4                                              hlt                                                     ;wait for interrupt
   863 000001A0 EBF6                                            jmp     .10                                             ;repeat
   864                                  ;
   865                                  ;       Reset the system.
   866                                  ;
   867 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   868 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   869 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   870 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   871 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   872                                  ;
   873                                  ;       Display text message.
   874                                  ;
   875 000001AA FC                      BootPrint               cld                                                     ;forward strings
   876 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   877 000001AC 84C0                                            test    al,al                                           ;end of string?
   878 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   879 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   880 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   881 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   882 000001B6 C3                      BootReturn              ret                                                     ;return
   883                                  ;-----------------------------------------------------------------------------------------------------------------------
   884                                  ;
   885                                  ;       Constants
   886                                  ;
   887                                  ;-----------------------------------------------------------------------------------------------------------------------
   888 000001B7 90                                              align   2
   889 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   890 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   890 000001C3 4F4D               
   891 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   891 000001CE 530D0A00           
   892 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   892 000001DB 7220               
   893 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   894 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   894 000001E9 6700               
   895                                  ;-----------------------------------------------------------------------------------------------------------------------
   896                                  ;
   897                                  ;       Work Areas
   898                                  ;
   899                                  ;-----------------------------------------------------------------------------------------------------------------------
   900 000001EB 90                                              align   2
   901 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   902 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   903 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   904 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   905 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   906                                  wwReadCountCommand      equ     $                                               ;read count and command
   907 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   908 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   909                                  wwDriveHead             equ     $                                               ;drive, head (word)
   910 000001F8 00                      wbDrive                 db      0                                               ;drive
   911 000001F9 00                      wbHead                  db      0                                               ;head
   912                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   913 000001FA 00                                              db      0                                               ;sector
   914 000001FB 00                      wbTrack                 db      0                                               ;track
   915 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   916 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   917                                  %endif
   918                                  %ifdef BUILDPREP
   919                                  ;=======================================================================================================================
   920                                  ;
   921                                  ;       Diskette Preparation Code
   922                                  ;
   923                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   924                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   925                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   926                                  ;
   927                                  ;=======================================================================================================================
   928                                  ;
   929                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   930                                  ;
   931 00000200 BE[CA02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   932 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   933                                  ;
   934                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   935                                  ;
   936 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   937 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   938 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   939 0000020C FB                                              sti                                                     ;enable interrupts
   940 0000020D F4                                              hlt                                                     ;wait for interrupt
   941 0000020E EBF6                                            jmp     .10                                             ;repeat
   942 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   943 00000212 7407                                            je      .30                                             ;yes, branch
   944 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   945 00000216 75EE                                            jne     .10                                             ;no, repeat
   946 00000218 E9A900                                          jmp     .120                                            ;yes, exit program
   947                                  ;
   948                                  ;       Display writing-sector message and patch the JMP instruction.
   949                                  ;
   950 0000021B BE[6E04]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   951 0000021E E889FF                                          call    BootPrint                                       ;display message
   952 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   953 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   954 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   955                                  ;
   956                                  ;       Try to read the boot sector.
   957                                  ;
   958 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   959 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   960 0000022D BB[760A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   961 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   962 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
   963 00000236 B80102                                          mov     ax,0201h                                        ;read one sector
   964 00000239 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
   965 0000023B 59                                              pop     cx                                              ;restore remaining retries
   966 0000023C 7307                                            jnc     .50                                             ;skip ahead if successful
   967 0000023E E2EC                                            loop    .40                                             ;try again
   968 00000240 BE[9E04]                                        mov     si,czPrepMsg20                                  ;read-error message address
   969 00000243 EB2C                                            jmp     .70                                             ;branch to error routine
   970                                  ;
   971                                  ;       Copy diskette parms from input buffer to output buffer.
   972                                  ;
   973 00000245 BE[760A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   974 00000248 83C60B                                          add     si,11                                           ;skip over JMP and system ID
   975 0000024B BF[0000]                                        mov     di,Boot                                         ;output buffer address
   976 0000024E 83C70B                                          add     di,11                                           ;skip over JMP and system ID
   977 00000251 B91300                                          mov     cx,19                                           ;length of diskette parameters
   978 00000254 FC                                              cld                                                     ;forward string copies
   979 00000255 F3A4                                            rep     movsb                                           ;copy diskette parameters
   980                                  ;
   981                                  ;       Try to write boot sector to diskette.
   982                                  ;
   983 00000257 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   984 0000025A 51                      .60                     push    cx                                              ;save remaining tries
   985 0000025B BB[0000]                                        mov     bx,Boot                                         ;output buffer address
   986 0000025E BA0000                                          mov     dx,0                                            ;head zero, drive zero
   987 00000261 B90100                                          mov     cx,1                                            ;track zero, sector one
   988 00000264 B80103                                          mov     ax,0301h                                        ;write one sector
   989 00000267 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
   990 00000269 59                                              pop     cx                                              ;restore remaining retries
   991 0000026A 7326                                            jnc     .100                                            ;skip ahead if successful
   992 0000026C E2EC                                            loop    .60                                             ;try again
   993 0000026E BE[EC04]                                        mov     si,czPrepMsg30                                  ;write-error message address
   994                                  ;
   995                                  ;       Convert the error code to ASCII and display the error message.
   996                                  ;
   997 00000271 50                      .70                     push    ax                                              ;save error code
   998 00000272 88E0                                            mov     al,ah                                           ;copy error code
   999 00000274 B400                                            mov     ah,0                                            ;AX = error code
  1000 00000276 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1001 00000278 F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1002 0000027A 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1003 0000027D 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1004 00000280 7203                                            jb      .80                                             ;yes, continue
  1005 00000282 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1006 00000285 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1007 00000287 7202                                            jb      .90                                             ;yes, continue
  1008 00000289 0407                                            add     al,7                                            ;no, make ASCII
  1009 0000028B 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1010 0000028E E819FF                                          call    BootPrint                                       ;write error message
  1011 00000291 58                                              pop     ax                                              ;restore error code
  1012                                  ;
  1013                                  ;       Display the completion message.
  1014                                  ;
  1015 00000292 BE[3805]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1016 00000295 88E0                                            mov     al,ah                                           ;BIOS return code
  1017 00000297 3C00                                            cmp     al,0                                            ;success?
  1018 00000299 7426                                            je      .110                                            ;yes, continue
  1019 0000029B BE[D705]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1020 0000029E 3C01                                            cmp     al,1                                            ;disk parameter error?
  1021 000002A0 741F                                            je      .110                                            ;yes, continue
  1022 000002A2 BE[A106]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1023 000002A5 3C02                                            cmp     al,2                                            ;address mark not found?
  1024 000002A7 7418                                            je      .110                                            ;yes, continue
  1025 000002A9 BE[2A07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1026 000002AC 3C03                                            cmp     al,3                                            ;protected disk?
  1027 000002AE 7411                                            je      .110                                            ;yes, continue
  1028 000002B0 BE[E407]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1029 000002B3 3C06                                            cmp     al,6                                            ;diskette removed?
  1030 000002B5 740A                                            je      .110                                            ;yes, continue
  1031 000002B7 BE[1409]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1032 000002BA 3C80                                            cmp     al,80H                                          ;drive timed out?
  1033 000002BC 7403                                            je      .110                                            ;yes, continue
  1034 000002BE BE[C509]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1035 000002C1 E8E6FE                  .110                    call    BootPrint                                       ;display result message
  1036 000002C4 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1037 000002C7 CD21                                            int     021h                                            ;terminate DOS program
  1038 000002C9 C3                                              ret                                                     ;return (should not execute)
  1039                                  ;-----------------------------------------------------------------------------------------------------------------------
  1040                                  ;
  1041                                  ;       Diskette Preparation Messages
  1042                                  ;
  1043                                  ;-----------------------------------------------------------------------------------------------------------------------
  1044 000002CA 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1044 000002D3 5320426F6F742D4469-
  1044 000002DC 736B65747465205072-
  1044 000002E5 657061726174696F6E-
  1044 000002EE 2050726F6772616D   
  1045 000002F6 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1045 000002FF 687420284329203230-
  1045 00000308 31302D323031372044-
  1045 00000311 61766964204A2E2057-
  1045 0000031A 616C6C696E672E2041-
  1045 00000323 6C6C20726967687473-
  1045 0000032C 207265736572766564-
  1045 00000335 2E                 
  1046 00000336 0D0A                                            db      13,10
  1047 00000338 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1047 00000341 6F6772616D206F7665-
  1047 0000034A 727772697465732074-
  1047 00000353 686520626F6F742073-
  1047 0000035C 6563746F72206F6620-
  1047 00000365 61206469736B657474-
  1047 0000036E 652077697468207374-
  1047 00000377 617274757020636F64-
  1047 00000380 652074686174       
  1048 00000386 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1048 0000038F 616420746865206F70-
  1048 00000398 65726174696E672073-
  1048 000003A1 797374656D20696E74-
  1048 000003AA 6F206D656D6F727920-
  1048 000003B3 7768656E2074686520-
  1048 000003BC 636F6D707574657220-
  1048 000003C5 697320726573746172-
  1048 000003CE 7465642E           
  1049 000003D2 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1049 000003DB 6565642C20706C6163-
  1049 000003E4 65206120666F726D61-
  1049 000003ED 74746564206469736B-
  1049 000003F6 6574746520696E746F-
  1049 000003FF 20647269766520413A-
  1049 00000408 20616E642070726573-
  1049 00000411 732074686520456E74-
  1049 0000041A 6572206B65792E     
  1050 00000421 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1050 0000042A 20746869732070726F-
  1050 00000433 6772616D2077697468-
  1050 0000043C 6F7574207072657061-
  1050 00000445 72696E672061206469-
  1050 0000044E 736B657474652C2070-
  1050 00000457 726573732074686520-
  1050 00000460 457363617065206B65-
  1050 00000469 792E               
  1051 0000046B 0D0A00                                          db      13,10,0
  1052 0000046E 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1052 00000477 2074686520626F6F74-
  1052 00000480 20736563746F722074-
  1052 00000489 6F2074686520646973-
  1052 00000492 6B65747465202E2E2E 
  1053 0000049B 0D0A00                                          db      13,10,0
  1054 0000049E 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1054 000004A7 6F722D636F6465202E-
  1054 000004B0 2E2077617320726574-
  1054 000004B9 75726E65642066726F-
  1054 000004C2 6D207468652042494F-
  1054 000004CB 53207768696C652072-
  1054 000004D4 656164696E67206672-
  1054 000004DD 6F6D20746865206469-
  1054 000004E6 736B2E             
  1055 000004E9 0D0A00                                          db      13,10,0
  1056 000004EC 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1056 000004F5 6F722D636F6465202E-
  1056 000004FE 2E2077617320726574-
  1056 00000507 75726E65642066726F-
  1056 00000510 6D207468652042494F-
  1056 00000519 53207768696C652077-
  1056 00000522 726974696E6720746F-
  1056 0000052B 20746865206469736B-
  1056 00000534 2E                 
  1057 00000535 0D0A00                                          db      13,10,0
  1058 00000538 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1058 00000541 742D736563746F7220-
  1058 0000054A 776173207772697474-
  1058 00000553 656E20746F20746865-
  1058 0000055C 206469736B65747465-
  1058 00000565 2E204265666F726520-
  1058 0000056E 626F6F74696E672079-
  1058 00000577 6F757220636F6D7075-
  1058 00000580 7465722077697468   
  1059 00000588 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1059 00000591 736B657474652C206D-
  1059 0000059A 616B65207375726520-
  1059 000005A3 746861742074686520-
  1059 000005AC 66696C65204F532E43-
  1059 000005B5 4F4D20697320636F70-
  1059 000005BE 696564206F6E746F20-
  1059 000005C7 746865206469736B65-
  1059 000005D0 7474652E           
  1060 000005D4 0D0A00                                          db      13,10,0
  1061 000005D7 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1061 000005E0 76616C696420446973-
  1061 000005E9 6B20506172616D6574-
  1061 000005F2 6572               
  1062 000005F4 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1062 000005FD 20616E20696E746572-
  1062 00000606 6E616C206572726F72-
  1062 0000060F 206361757365642062-
  1062 00000618 7920616E20696E7661-
  1062 00000621 6C69642076616C7565-
  1062 0000062A 206265696E67207061-
  1062 00000633 7373656420746F2061-
  1062 0000063C 2073797374656D     
  1063 00000643 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1063 0000064C 6E2E20546865204F53-
  1063 00000655 424F4F542E434F4D20-
  1063 0000065E 66696C65206D617920-
  1063 00000667 626520636F72727570-
  1063 00000670 742E20436F7079206F-
  1063 00000679 7220646F776E6C6F61-
  1063 00000682 64207468652066696C-
  1063 0000068B 6520616761696E     
  1064 00000692 0D0A616E6420726574-                             db      13,10,"and retry."
  1064 0000069B 72792E             
  1065 0000069E 0D0A00                                          db      13,10,0
  1066 000006A1 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1066 000006AA 6472657373204D6172-
  1066 000006B3 6B204E6F7420466F75-
  1066 000006BC 6E64               
  1067 000006BE 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1067 000006C7 726F7220696E646963-
  1067 000006D0 617465732061207068-
  1067 000006D9 79736963616C207072-
  1067 000006E2 6F626C656D20776974-
  1067 000006EB 682074686520666C6F-
  1067 000006F4 707079206469736B65-
  1067 000006FD 7474652E20506C6561-
  1067 00000706 7365207265747279   
  1068 0000070E 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1068 00000717 6E6F74686572206469-
  1068 00000720 736B657474652E     
  1069 00000727 0D0A00                                          db      13,10,0
  1070 0000072A 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1070 00000733 6F7465637465642044-
  1070 0000073C 69736B             
  1071 0000073F 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1071 00000748 726F72206973207573-
  1071 00000751 75616C6C7920636175-
  1071 0000075A 736564206279206174-
  1071 00000763 74656D7074696E6720-
  1071 0000076C 746F20777269746520-
  1071 00000775 746F20612077726974-
  1071 0000077E 652D70726F74656374-
  1071 00000787 6564206469736B2E   
  1072 0000078F 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1072 00000798 686520277772697465-
  1072 000007A1 2D70726F7465637427-
  1072 000007AA 2073657474696E6720-
  1072 000007B3 6F6E20746865206469-
  1072 000007BC 736B206F7220726574-
  1072 000007C5 7279207573696E6720-
  1072 000007CE 7573696E6720616E6F-
  1072 000007D7 74686572206469736B-
  1072 000007E0 2E                 
  1073 000007E1 0D0A00                                          db      13,10,0
  1074 000007E4 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1074 000007ED 736B65747465205265-
  1074 000007F6 6D6F766564         
  1075 000007FB 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1075 00000804 726F72206D61792069-
  1075 0000080D 6E6469636174652074-
  1075 00000816 686174207468652066-
  1075 0000081F 6C6F70707920646973-
  1075 00000828 6B6574746520686173-
  1075 00000831 206265656E2072656D-
  1075 0000083A 6F7665642066726F6D-
  1075 00000843 20746865           
  1076 00000847 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1076 00000850 652064726976652E20-
  1076 00000859 4F6E20736F6D652073-
  1076 00000862 797374656D732C2074-
  1076 0000086B 68697320636F646520-
  1076 00000874 6D617920616C736F20-
  1076 0000087D 6F6363757220696620-
  1076 00000886 746865206469736B65-
  1076 0000088F 747465206973       
  1077 00000895 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1077 0000089E 70726F746563746564-
  1077 000008A7 2E2720506C65617365-
  1077 000008B0 207665726966792074-
  1077 000008B9 686174207468652064-
  1077 000008C2 69736B657474652069-
  1077 000008CB 73206E6F7420777269-
  1077 000008D4 74652D70726F746563-
  1077 000008DD 74656420616E64     
  1078 000008E4 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1078 000008ED 65726C7920696E7365-
  1078 000008F6 7274656420696E2074-
  1078 000008FF 6865206469736B6574-
  1078 00000908 74652064726976652E 
  1079 00000911 0D0A00                                          db      13,10,0
  1080 00000914 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1080 0000091D 6976652054696D6564-
  1080 00000926 204F7574           
  1081 0000092A 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1081 00000933 726F7220757375616C-
  1081 0000093C 6C7920696E64696361-
  1081 00000945 746573207468617420-
  1081 0000094E 6E6F206469736B6574-
  1081 00000957 746520697320696E20-
  1081 00000960 746865206469736B65-
  1081 00000969 747465206472697665-
  1081 00000972 2E20506C65617365   
  1082 0000097A 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1082 00000983 726520746861742074-
  1082 0000098C 6865206469736B6574-
  1082 00000995 74652069732070726F-
  1082 0000099E 7065726C7920736561-
  1082 000009A7 74656420696E207468-
  1082 000009B0 652064726976652061-
  1082 000009B9 6E642072657472792E 
  1083 000009C2 0D0A00                                          db      13,10,0
  1084 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1084 000009CE 6B6E6F776E20457272-
  1084 000009D7 6F72               
  1085 000009D9 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1085 000009E2 6F722D636F64652072-
  1085 000009EB 657475726E65642062-
  1085 000009F4 79207468652042494F-
  1085 000009FD 53206973206E6F7420-
  1085 00000A06 61207265636F676E69-
  1085 00000A0F 7A6564206572726F72-
  1085 00000A18 2E20506C6561736520-
  1085 00000A21 636F6E73756C74     
  1086 00000A28 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1086 00000A31 6D7075746572277320-
  1086 00000A3A 746563686E6963616C-
  1086 00000A43 207265666572656E63-
  1086 00000A4C 6520666F7220612064-
  1086 00000A55 65736372697074696F-
  1086 00000A5E 6E206F662074686973-
  1086 00000A67 206572726F7220636F-
  1086 00000A70 64652E             
  1087 00000A73 0D0A00                                          db      13,10,0
  1088                                  wcPrepInBuf             equ     $
  1089                                  %endif
  1090                                  %ifdef BUILDDISK
  1091                                  ;=======================================================================================================================
  1092                                  ;
  1093                                  ;       File Allocation Tables
  1094                                  ;
  1095                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1096                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1097                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1098                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1099                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1100                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1101                                  ;       the last cluster in the chain.
  1102                                  ;
  1103                                  ;       Every three bytes encode two FAT entries as follows:
  1104                                  ;
  1105                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1106                                  ;
  1107                                  ;=======================================================================================================================
  1108                                  ;-----------------------------------------------------------------------------------------------------------------------
  1109                                  ;
  1110                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1111                                  ;
  1112                                  ;-----------------------------------------------------------------------------------------------------------------------
  1113                                  section                 fat1                                                    ;first copy of FAT
  1114                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1115                                                          db      005h,060h,000h, 007h,080h,000h
  1116                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1117                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1118                                                          db      011h,020h,001h, 013h,040h,001h
  1119                                                          db      015h,060h,001h, 017h,080h,001h
  1120                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1121                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1122                                                          db      021h,020h,002h, 023h,040h,002h
  1123                                                          db      025h,060h,002h, 027h,080h,002h
  1124                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1125                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1126                                  ;-----------------------------------------------------------------------------------------------------------------------
  1127                                  ;
  1128                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1129                                  ;
  1130                                  ;-----------------------------------------------------------------------------------------------------------------------
  1131                                  section                 fat2                                                    ;second copy of FAT
  1132                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1133                                                          db      005h,060h,000h, 007h,080h,000h
  1134                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1135                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1136                                                          db      011h,020h,001h, 013h,040h,001h
  1137                                                          db      015h,060h,001h, 017h,080h,001h
  1138                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1139                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1140                                                          db      021h,020h,002h, 023h,040h,002h
  1141                                                          db      025h,060h,002h, 027h,080h,002h
  1142                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1143                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1144                                  ;-----------------------------------------------------------------------------------------------------------------------
  1145                                  ;
  1146                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1147                                  ;
  1148                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1149                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1150                                  ;       copy.
  1151                                  ;
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  section                 dir                                                     ;diskette directory
  1154                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1155                                                          db      020h                                            ;attribute (archive bit set)
  1156                                                          times   10 db 0                                         ;unused
  1157                                                          dw      0h                                              ;time
  1158                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1159                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1160                                                          dw      2                                               ;first cluster
  1161                                                          dd      05400h                                          ;file size
  1162                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1163                                  %endif
  1164                                  %ifdef BUILDCOM
  1165                                  ;=======================================================================================================================
  1166                                  ;
  1167                                  ;       OS.COM
  1168                                  ;
  1169                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1170                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1171                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1172                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1173                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1174                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1175                                  ;
  1176                                  ;       Our loader addressability is set up according to the following diagram.
  1177                                  ;
  1178                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1179                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1180                                  ;                               |  256 = 100h bytes                             |
  1181                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1182                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1183                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1184                                  ;                       007e00  +-----------------------------------------------+
  1185                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1186                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1187                                  ;                               |                                               |
  1188                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1189                                  ;                               |                                               |
  1190                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1191                                  ;                               |  Loader Code                                  |
  1192                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1193                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1194                                  ;
  1195                                  ;=======================================================================================================================
  1196                                  ;-----------------------------------------------------------------------------------------------------------------------
  1197                                  ;
  1198                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1199                                  ;
  1200                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1201                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1202                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1203                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1204                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1205                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1206                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1207                                  ;       registers.
  1208                                  ;
  1209                                  ;-----------------------------------------------------------------------------------------------------------------------
  1210                                                          cpu     8086                                            ;assume minimal CPU
  1211                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1212                                                          bits    16                                              ;this is 16-bit code
  1213                                  Loader                  push    cs                                              ;use the code segment
  1214                                                          pop     ds                                              ;...as our data segment
  1215                                                          push    cs                                              ;use the code segment
  1216                                                          pop     es                                              ;...as our extra segment
  1217                                  ;
  1218                                  ;       Write a message to the console so we know we have our addressability established.
  1219                                  ;
  1220                                                          mov     si,czStartingMsg                                ;starting message
  1221                                                          call    PutTTYString                                    ;display loader message
  1222                                  ;
  1223                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1224                                  ;
  1225                                                          call    GetCPUType                                      ;AL = cpu type
  1226                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1227                                                          cmp     al,3                                            ;80386+?
  1228                                                          jb      LoaderExit                                      ;no, exit with error message
  1229                                                          cpu     386                                             ;allow 80386 instructions
  1230                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1231                                                          call    PutTTYString                                    ;display message
  1232                                  ;
  1233                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1234                                  ;
  1235                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1236                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1237                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1238                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1239                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1240                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1241                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1242                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1243                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1244                                                          call    PutTTYString                                    ;display message
  1245                                  ;
  1246                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1247                                  ;
  1248                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1249                                                          pop     es                                              ;... as target segment
  1250                                                          xor     di,di                                           ;ES:DI = target address
  1251                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1252                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1253                                                          cld                                                     ;forward strings
  1254                                                          rep     movsb                                           ;copy kernel image
  1255                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1256                                                          call    PutTTYString                                    ;display message
  1257                                  ;
  1258                                  ;       Switch to protected mode.
  1259                                  ;
  1260                                                          xor     si,si                                           ;ES:SI = gdt addr
  1261                                                          mov     ss,si                                           ;protected mode ss
  1262                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1263                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1264                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1265                                                          mov     dx,001Fh                                        ;outer delay loop count
  1266                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1267                                                          loop    $                                               ;wait out pending interrupts
  1268                                                          dec     dx                                              ;restore outer loop count
  1269                                                          jnz     .10                                             ;continue outer loop
  1270                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1271                                  ;
  1272                                  ;       Enable hardware and maskable interrupts.
  1273                                  ;
  1274                                                          xor     al,al                                           ;enable all registers code
  1275                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1276                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1277                                                          sti                                                     ;enable maskable interrupts
  1278                                  ;
  1279                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1280                                  ;
  1281                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1282                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1283                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                  ;
  1286                                  ;       Routine:        LoaderExit
  1287                                  ;
  1288                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1289                                  ;
  1290                                  ;       In:             DS:SI   string address
  1291                                  ;
  1292                                  ;-----------------------------------------------------------------------------------------------------------------------
  1293                                  LoaderExit              call    PutTTYString                                    ;display error message
  1294                                  ;
  1295                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1296                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1297                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1298                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1299                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1300                                  ;
  1301                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1302                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1303                                                          jnz     .40                                             ;exit if key pressed
  1304                                                          sti                                                     ;enable maskable interrupts
  1305                                                          hlt                                                     ;wait for interrupt
  1306                                                          jmp     .30                                             ;repeat until keypress
  1307                                  ;
  1308                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1309                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1310                                  ;       HLT until the system resets.
  1311                                  ;
  1312                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1313                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1314                                  .50                     sti                                                     ;enable maskable interrupts
  1315                                                          hlt                                                     ;stop until reset, int, nmi
  1316                                                          jmp     .50                                             ;loop until restart kicks in
  1317                                  ;-----------------------------------------------------------------------------------------------------------------------
  1318                                  ;
  1319                                  ;       Routine:        GetCPUType
  1320                                  ;
  1321                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1322                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1323                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1324                                  ;
  1325                                  ;       Out:            AX      0 = 808x, v20, etc.
  1326                                  ;                               1 = 80186
  1327                                  ;                               2 = 80286
  1328                                  ;                               3 = 80386
  1329                                  ;
  1330                                  ;-----------------------------------------------------------------------------------------------------------------------
  1331                                  GetCPUType              mov     al,1                                            ;AL = 1
  1332                                                          mov     cl,32                                           ;shift count
  1333                                                          shr     al,cl                                           ;try a 32-bit shift
  1334                                                          or      al,al                                           ;did the shift happen?
  1335                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1336                                                          cpu     186
  1337                                                          push    sp                                              ;save stack pointer
  1338                                                          pop     cx                                              ;...into cx
  1339                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1340                                                          jne     .10                                             ;yes, cpu is 80186
  1341                                                          cpu     286
  1342                                                          inc     ax                                              ;AX = 2
  1343                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1344                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1345                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1346                                                          jz      .10                                             ;yes, cpu is 80286
  1347                                                          inc     ax                                              ;AX = 3
  1348                                  .10                     ret                                                     ;return
  1349                                  ;-----------------------------------------------------------------------------------------------------------------------
  1350                                  ;
  1351                                  ;       Routine:        PutTTYString
  1352                                  ;
  1353                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1354                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1355                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1356                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1357                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1358                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1359                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1360                                  ;                       to LODSB is not needed.
  1361                                  ;
  1362                                  ;       In:             DS:SI   address of string
  1363                                  ;
  1364                                  ;       Out:            DF      0
  1365                                  ;                       ZF      1
  1366                                  ;                       AL      0
  1367                                  ;
  1368                                  ;-----------------------------------------------------------------------------------------------------------------------
  1369                                  PutTTYString            cld                                                     ;forward strings
  1370                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1371                                                          test    al,al                                           ;end of string?
  1372                                                          jz      .20                                             ;... yes, exit our loop
  1373                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1374                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1375                                                          jmp     .10                                             ;repeat until done
  1376                                  .20                     ret                                                     ;return
  1377                                  ;-----------------------------------------------------------------------------------------------------------------------
  1378                                  ;
  1379                                  ;       Loader Data
  1380                                  ;
  1381                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1382                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1383                                  ;
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                                          align   2
  1386                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1387                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1388                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1389                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1390                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1391                                                          db      "Please press any key to restart the computer.",13,10,0
  1392                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1393                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1394                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1395                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1396                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1397                                  ;=======================================================================================================================
  1398                                  ;
  1399                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1400                                  ;
  1401                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1402                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1403                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1404                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1405                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1406                                  ;
  1407                                  ;=======================================================================================================================
  1408                                  ;=======================================================================================================================
  1409                                  ;
  1410                                  ;       Kernel Tables
  1411                                  ;
  1412                                  ;=======================================================================================================================
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  ;
  1415                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1416                                  ;
  1417                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1418                                  ;       first descriptor must be all nulls.
  1419                                  ;
  1420                                  ;       6   5         4         3         2         1         0
  1421                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1422                                  ;       ----------------------------------------------------------------
  1423                                  ;       h......hffffmmmma......ab......................bn..............n
  1424                                  ;       00000000                        all areas have base addresses below 2^24
  1425                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1426                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1427                                  ;                   1001                present, ring-0, selector
  1428                                  ;
  1429                                  ;       h...h   hi-order base address (bits 24-31)
  1430                                  ;       ffff    flags
  1431                                  ;       mmmm    hi-order limit (bits 16-19)
  1432                                  ;       a...a   access
  1433                                  ;       b...b   lo-order base address (bits 0-23)
  1434                                  ;       n...n   lo-order limit (bits 0-15)
  1435                                  ;
  1436                                  ;-----------------------------------------------------------------------------------------------------------------------
  1437                                  section                 gdt                                                     ;global descriptor table
  1438                                                          dq      0000000000000000h                               ;00 required null selector
  1439                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1440                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1441                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1442                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1443                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1444                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1445                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1446                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1447                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1448                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1449                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1450                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1451                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1452                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1453                                  ;-----------------------------------------------------------------------------------------------------------------------
  1454                                  ;
  1455                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1456                                  ;
  1457                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1458                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1459                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1460                                  ;
  1461                                  ;       6   5         4         3         2         1         0
  1462                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1463                                  ;       ----------------------------------------------------------------
  1464                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1465                                  ;
  1466                                  ;       h...h   high-order offset (bits 16-31)
  1467                                  ;       P       present (0=unused interrupt)
  1468                                  ;       zz      descriptor privilege level
  1469                                  ;       S       storage segment (must be zero for IDT)
  1470                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1471                                  ;       S...S   handling code selector in GDT
  1472                                  ;       l...l   lo-order offset (bits 0-15)
  1473                                  ;
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                  section                 idt                                                     ;interrupt descriptor table
  1476                                                          mint    dividebyzero                                    ;00 divide by zero
  1477                                                          mint    singlestep                                      ;01 single step
  1478                                                          mint    nmi                                             ;02 non-maskable
  1479                                                          mint    break                                           ;03 break
  1480                                                          mint    into                                            ;04 into
  1481                                                          mint    bounds                                          ;05 bounds
  1482                                                          mint    badopcode                                       ;06 bad op code
  1483                                                          mint    nocoproc                                        ;07 no coprocessor
  1484                                                          mint    doublefault                                     ;08 double-fault
  1485                                                          mint    operand                                         ;09 operand
  1486                                                          mint    badtss                                          ;0a bad TSS
  1487                                                          mint    notpresent                                      ;0b not-present
  1488                                                          mint    stacklimit                                      ;0c stack limit
  1489                                                          mint    protection                                      ;0d general protection fault
  1490                                                          mint    int14                                           ;0e (reserved)
  1491                                                          mint    int15                                           ;0f (reserved)
  1492                                                          mint    coproccalc                                      ;10 (reserved)
  1493                                                          mint    int17                                           ;11 (reserved)
  1494                                                          mint    int18                                           ;12 (reserved)
  1495                                                          mint    int19                                           ;13 (reserved)
  1496                                                          mint    int20                                           ;14 (reserved)
  1497                                                          mint    int21                                           ;15 (reserved)
  1498                                                          mint    int22                                           ;16 (reserved)
  1499                                                          mint    int23                                           ;17 (reserved)
  1500                                                          mint    int24                                           ;18 (reserved)
  1501                                                          mint    int25                                           ;19 (reserved)
  1502                                                          mint    int26                                           ;1a (reserved)
  1503                                                          mint    int27                                           ;1b (reserved)
  1504                                                          mint    int28                                           ;1c (reserved)
  1505                                                          mint    int29                                           ;1d (reserved)
  1506                                                          mint    int30                                           ;1e (reserved)
  1507                                                          mint    int31                                           ;1f (reserved)
  1508                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1509                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1510                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1511                                                          mtrap   com2                                            ;23 IRQ3 com2
  1512                                                          mtrap   com1                                            ;24 IRQ4 com1
  1513                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1514                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1515                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1516                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1517                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1518                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1519                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1520                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1521                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1522                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1523                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1524                                                          mtrap   svc                                             ;30 OS services
  1525                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1526                                  ;=======================================================================================================================
  1527                                  ;
  1528                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1529                                  ;
  1530                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1531                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1532                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1533                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1534                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1535                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1536                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1537                                  ;
  1538                                  ;=======================================================================================================================
  1539                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1540                                                          cpu     386                                             ;allow 80386 instructions
  1541                                                          bits    32                                              ;this is 32-bit code
  1542                                  ;=======================================================================================================================
  1543                                  ;
  1544                                  ;       CPU Interrupt Handlers
  1545                                  ;
  1546                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1547                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1548                                  ;
  1549                                  ;=======================================================================================================================
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                  ;
  1552                                  ;       INT0    Divide By Zero
  1553                                  ;
  1554                                  ;-----------------------------------------------------------------------------------------------------------------------
  1555                                                          menter  dividebyzero                                    ;divide by zero
  1556                                                          push    0                                               ;store interrupt nbr
  1557                                                          push    czIntDivideByZero                               ;store message offset
  1558                                                          jmp     ReportInterrupt                                 ;report interrupt
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;       INT1    Single Step
  1562                                  ;
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                                          menter  singlestep                                      ;single step
  1565                                                          push    1                                               ;store interrupt nbr
  1566                                                          push    czIntSingleStep                                 ;store message offset
  1567                                                          jmp     ReportInterrupt                                 ;report interrupt
  1568                                  ;-----------------------------------------------------------------------------------------------------------------------
  1569                                  ;
  1570                                  ;       INT2    Non-Maskable Interrupt
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                                          menter  nmi                                             ;non-maskable
  1574                                                          push    2                                               ;store interrupt nbr
  1575                                                          push    czIntNonMaskable                                ;store message offset
  1576                                                          jmp     ReportInterrupt                                 ;report interrupt
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                  ;
  1579                                  ;       INT3    Break
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                                          menter  break                                           ;break
  1583                                                          push    3                                               ;store interrupt nbr
  1584                                                          push    czIntBreak                                      ;store message offset
  1585                                                          jmp     ReportInterrupt                                 ;report interrupt
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                  ;
  1588                                  ;       INT4    Into
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                                          menter  into                                            ;into
  1592                                                          push    4                                               ;store interrupt nbr
  1593                                                          push    czIntInto                                       ;store message offset
  1594                                                          jmp     ReportInterrupt                                 ;report interrupt
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                  ;
  1597                                  ;       INT5    Bounds
  1598                                  ;
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                                          menter  bounds                                          ;bounds
  1601                                                          push    5                                               ;store interrupt nbr
  1602                                                          push    czIntBounds                                     ;store message offset
  1603                                                          jmp     ReportInterrupt                                 ;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;       INT6    Bad Operation Code
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                                          menter  badopcode                                       ;bad opcode interrupt
  1610                                                          push    6                                               ;store interrupt nbr
  1611                                                          push    czIntBadOpCode                                  ;store message offset
  1612                                                          jmp     ReportInterrupt                                 ;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;       INT7    No Coprocessor
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1619                                                          push    7                                               ;store interrupt nbr
  1620                                                          push    czIntNoCoprocessor                              ;store message offset
  1621                                                          jmp     ReportInterrupt                                 ;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;       INT8    Double Fault
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                                          menter  doublefault                                     ;doublefault interrupt
  1628                                                          push    8                                               ;store interrupt nbr
  1629                                                          push    czIntDoubleFault                                ;store message offset
  1630                                                          jmp     ReportInterrupt                                 ;report interrupt
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;
  1633                                  ;       INT9    Operand
  1634                                  ;
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                                          menter  operand                                         ;operand interrupt
  1637                                                          push    9                                               ;store interrupt nbr
  1638                                                          push    czIntOperand                                    ;store message offset
  1639                                                          jmp     ReportInterrupt                                 ;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;       INT10   Bad Task State Segment
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                                          menter  badtss                                          ;bad TSS interrupt
  1646                                                          push    10                                              ;store interrupt nbr
  1647                                                          push    czIntBadTSS                                     ;store message offset
  1648                                                          jmp     ReportInterrupt                                 ;report interrupt
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;       INT11   Not Present
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                                          menter  notpresent                                      ;not present interrupt
  1655                                                          push    11                                              ;store interrupt nbr
  1656                                                          push    czIntNotPresent                                 ;store message offset
  1657                                                          jmp     ReportInterrupt                                 ;report interrupt
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  ;
  1660                                  ;       INT12   Stack Limit
  1661                                  ;
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                                          menter  stacklimit                                      ;stack limit interrupt
  1664                                                          push    12                                              ;store interrupt nbr
  1665                                                          push    czIntStackLimit                                 ;store message offset
  1666                                                          jmp     ReportInterrupt                                 ;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       INT13   General Protection Fault
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                                          menter  protection                                      ;protection fault interrupt
  1673                                                          push    13                                              ;store interrupt nbr
  1674                                                          push    czIntProtection                                 ;store message offset
  1675                                                          jmp     ReportInterrupt                                 ;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       INT14   Reserved
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                                          menter  int14                                           ;(reserved)
  1682                                                          push    14                                              ;store interrupt nbr
  1683                                                          push    czIntReserved                                   ;store message offset
  1684                                                          jmp     ReportInterrupt                                 ;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       INT15   Reserved
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                                          menter  int15                                           ;(reserved)
  1691                                                          push    15                                              ;store interrupt nbr
  1692                                                          push    czIntReserved                                   ;store message offset
  1693                                                          jmp     ReportInterrupt                                 ;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;       INT16   Coprocessor Calculation
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                                          menter  coproccalc                                      ;coprocessor calculation
  1700                                                          push    16                                              ;store interrupt nbr
  1701                                                          push    czIntCoprocessorCalc                            ;store message offset
  1702                                                          jmp     ReportInterrupt                                 ;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       INT17   Reserved
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                                          menter  int17                                           ;(reserved)
  1709                                                          push    17                                              ;store interrupt nbr
  1710                                                          push    czIntReserved                                   ;store message offset
  1711                                                          jmp     ReportInterrupt                                 ;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;       INT18   Reserved
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                                          menter  int18                                           ;(reserved)
  1718                                                          push    18                                              ;store interrupt nbr
  1719                                                          push    czIntReserved                                   ;store message offset
  1720                                                          jmp     ReportInterrupt                                 ;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;       INT19   Reserved
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                                          menter  int19                                           ;(reserved)
  1727                                                          push    19                                              ;store interrupt nbr
  1728                                                          push    czIntReserved                                   ;store message offset
  1729                                                          jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       INT20   Reserved
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                                          menter  int20                                           ;(reserved)
  1736                                                          push    20                                              ;store interrupt nbr
  1737                                                          push    czIntReserved                                   ;store message offset
  1738                                                          jmp     ReportInterrupt                                 ;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;       INT21   Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                                          menter  int21                                           ;(reserved)
  1745                                                          push    21                                              ;store interrupt nbr
  1746                                                          push    czIntReserved                                   ;store message offset
  1747                                                          jmp     ReportInterrupt                                 ;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       INT22   Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                                          menter  int22                                           ;(reserved)
  1754                                                          push    22                                              ;store interrupt nbr
  1755                                                          push    czIntReserved                                   ;store message offset
  1756                                                          jmp     ReportInterrupt                                 ;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;       INT23   Reserved
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                                          menter  int23                                           ;(reserved)
  1763                                                          push    23                                              ;store interrupt nbr
  1764                                                          push    czIntReserved                                   ;store message offset
  1765                                                          jmp     ReportInterrupt                                 ;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;       INT24   Reserved
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                                          menter  int24                                           ;(reserved)
  1772                                                          push    24                                              ;store interrupt nbr
  1773                                                          push    czIntReserved                                   ;store message offset
  1774                                                          jmp     ReportInterrupt                                 ;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;       INT25   Reserved
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                                          menter  int25                                           ;(reserved)
  1781                                                          push    25                                              ;store interrupt nbr
  1782                                                          push    czIntReserved                                   ;store message offset
  1783                                                          jmp     ReportInterrupt                                 ;report interrupt
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                  ;
  1786                                  ;       INT26   Reserved
  1787                                  ;
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                                          menter  int26                                           ;(reserved)
  1790                                                          push    26                                              ;store interrupt nbr
  1791                                                          push    czIntReserved                                   ;store message offset
  1792                                                          jmp     ReportInterrupt                                 ;report interrupt
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;       INT27   Reserved
  1796                                  ;
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                                          menter  int27                                           ;(reserved)
  1799                                                          push    27                                              ;store interrupt nbr
  1800                                                          push    czIntReserved                                   ;store message offset
  1801                                                          jmp     ReportInterrupt                                 ;report interrupt
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ;
  1804                                  ;       INT28   Reserved
  1805                                  ;
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                                          menter  int28                                           ;(reserved)
  1808                                                          push    28                                              ;store interrupt nbr
  1809                                                          push    czIntReserved                                   ;store message offset
  1810                                                          jmp     ReportInterrupt                                 ;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;       INT29   Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                                          menter  int29                                           ;(reserved)
  1817                                                          push    29                                              ;store interrupt nbr
  1818                                                          push    czIntReserved                                   ;store message offset
  1819                                                          jmp     ReportInterrupt                                 ;report interrupt
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                  ;
  1822                                  ;       INT30   Reserved
  1823                                  ;
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                                          menter  int30                                           ;(reserved)
  1826                                                          push    30                                              ;store interrupt nbr
  1827                                                          push    czIntReserved                                   ;store message offset
  1828                                                          jmp     ReportInterrupt                                 ;report interrupt
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                  ;
  1831                                  ;       INT31   Reserved
  1832                                  ;
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                                          menter  int31                                           ;(reserved)
  1835                                                          push    31                                              ;store interrupt nbr
  1836                                                          push    czIntReserved                                   ;store message offset
  1837                                                          jmp     ReportInterrupt                                 ;report interrupt
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                  ;
  1840                                  ;       Routine:        ReportInterrupt
  1841                                  ;
  1842                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1843                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1844                                  ;
  1845                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1846                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ReportInterrupt         pop     eax                                             ;error message address
  1850                                                          pop     eax                                             ;interrupt number
  1851                                                          iretd                                                   ;return
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       Processor Interrupt Name Strings
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  czIntDivideByZero       db      "Division by zero",0
  1858                                  czIntSingleStep         db      "Single step",0
  1859                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1860                                  czIntBreak              db      "Break",0
  1861                                  czIntInto               db      "Into",0
  1862                                  czIntBounds             db      "Bounds",0
  1863                                  czIntBadOpCode          db      "Bad Operation Code",0
  1864                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1865                                  czIntDoubleFault        db      "Double Fault",0
  1866                                  czIntOperand            db      "Operand",0
  1867                                  czIntBadTSS             db      "Bad Task State Segment",0
  1868                                  czIntNotPresent         db      "Not Present",0
  1869                                  czIntStackLimit         db      "Stack Limit",0
  1870                                  czIntProtection         db      "General Protection Fault",0
  1871                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1872                                  czIntReserved           db      "Reserved",0
  1873                                  ;=======================================================================================================================
  1874                                  ;
  1875                                  ;       Hardware Device Interupts
  1876                                  ;
  1877                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1878                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1879                                  ;       (BX=2028h).
  1880                                  ;
  1881                                  ;=======================================================================================================================
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       IRQ0    Clock Tick Interrupt
  1885                                  ;
  1886                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1887                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1888                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1889                                  ;
  1890                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1891                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1892                                  ;
  1893                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1894                                  ;       zero, the floppy disk motors are turned off.
  1895                                  ;
  1896                                  ;-----------------------------------------------------------------------------------------------------------------------
  1897                                                          menter  clocktick                                       ;clock tick interrupt
  1898                                                          push    eax                                             ;save modified regs
  1899                                                          push    edx                                             ;
  1900                                                          push    ds                                              ;
  1901                                  ;
  1902                                  ;       Update the clock tick count and the elapsed days as needed.
  1903                                  ;
  1904                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1905                                                          pop     ds                                              ;... into data segment register
  1906                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1907                                                          inc     eax                                             ;increment clock ticks
  1908                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1909                                                          jb      irq0.10                                         ;no, skip ahead
  1910                                                          inc     byte [wbClockDays]                              ;increment clock days
  1911                                                          xor     eax,eax                                         ;reset clock ticks
  1912                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1913                                  ;
  1914                                  ;       Decrement floppy disk motor timeout.
  1915                                  ;
  1916                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1917                                                          je      irq0.20                                         ;yes, skip ahead
  1918                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1919                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1920                                  ;
  1921                                  ;       Turn off the floppy disk motor if appropriate.
  1922                                  ;
  1923                                                          sti                                                     ;enable maskable interrupts
  1924                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1925                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1926                                                          in      al,dx                                           ;FDC main status byte
  1927                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1928                                                          jnz     irq0.15                                         ;wait while busy
  1929                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1930                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1931                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1932                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1933                                                          out     dx,al                                           ;turn motor off
  1934                                  ;
  1935                                  ;       Signal the end of the hardware interrupt.
  1936                                  ;
  1937                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1938                                  ;
  1939                                  ;       Restore and return.
  1940                                  ;
  1941                                                          pop     ds                                              ;restore modified regs
  1942                                                          pop     edx                                             ;
  1943                                                          pop     eax                                             ;
  1944                                                          iretd                                                   ;return
  1945                                  ;-----------------------------------------------------------------------------------------------------------------------
  1946                                  ;
  1947                                  ;       IRQ1    Keyboard Interrupt
  1948                                  ;
  1949                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1950                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1951                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1952                                  ;       ALL modified registers upon return.
  1953                                  ;
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                                          menter  keyboard                                        ;keyboard interrrupt
  1956                                                          push    eax                                             ;save non-volatile regs
  1957                                                          push    ebx                                             ;
  1958                                                          push    ecx                                             ;
  1959                                                          push    esi                                             ;
  1960                                                          push    ds                                              ;
  1961                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1962                                                          pop     ds                                              ;... into data segment register
  1963                                                          xor     al,al                                           ;zero
  1964                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1965                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1966                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1967                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  1968                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  1969                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  1970                                                          mov     al,' '                                          ;space
  1971                                                          mov     [wbConsoleChar],al                              ;set character to space
  1972                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1973                                                          not     al                                              ;controller timeout mask
  1974                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1975                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  1976                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  1977                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1978                                                          jz      irq1.140                                        ;yes, skip ahead
  1979                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  1980                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  1981                                                          mov     ah,al                                           ;copy scan code 0
  1982                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1983                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1984                                                          je      irq1.30                                         ;yes, set flag
  1985                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1986                                                          je      irq1.40                                         ;yes, reset flag
  1987                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1988                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1989                                                          je      irq1.30                                         ;yes, set flag
  1990                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1991                                                          je      irq1.40                                         ;yes, reset flag
  1992                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  1993                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1994                                                          je      irq1.30                                         ;yes, set flag
  1995                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1996                                                          je      irq1.40                                         ;yes, reset flag
  1997                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  1998                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1999                                                          je      irq1.30                                         ;yes, set flag
  2000                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2001                                                          je      irq1.40                                         ;yes, reset flag
  2002                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2003                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2004                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2005                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2006                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2007                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2008                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2009                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2010                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2011                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2012                                                          jne     irq1.70                                         ;no, skip ahead
  2013                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2014                                                          jz      irq1.140                                        ;yes, skip ahead
  2015                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2016                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2017                                                          mov     ah,al                                           ;copy scan code 1
  2018                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2019                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2020                                                          je      irq1.30                                         ;yes, set flag
  2021                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2022                                                          je      irq1.40                                         ;yes, reset flag
  2023                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2024                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2025                                                          je      irq1.30                                         ;yes, set flag
  2026                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2027                                                          je      irq1.40                                         ;yes, reset flag
  2028                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2029                                                          je      irq1.80                                         ;yes, skip ahead
  2030                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2031                                                          je      irq1.80                                         ;yes, skip ahead
  2032                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2033                                                          je      irq1.10                                         ;yes, continue
  2034                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2035                                                          jne     irq1.20                                         ;no, skip ahead
  2036                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2037                                                          jz      irq1.140                                        ;yes, skip ahead
  2038                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2039                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2040                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2041                                                          jz      irq1.140                                        ;yes, skip ahead
  2042                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2043                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2044                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2045                                  irq1.30                 or      bl,al                                           ;set shift flag
  2046                                                          jmp     irq1.60                                         ;skip ahead
  2047                                  irq1.40                 not     al                                              ;convert flag to mask
  2048                                                          and     bl,al                                           ;reset shift flag
  2049                                                          jmp     irq1.60                                         ;skip ahead
  2050                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2051                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2052                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2053                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2054                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2055                                                          jmp     irq1.150                                        ;finish keyboard handling
  2056                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2057                                                          jne     irq1.80                                         ;no continue
  2058                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2059                                                          jz      irq1.140                                        ;yes, skip ahead
  2060                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2061                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2062                                                          mov     ah,al                                           ;copy scan code 1
  2063                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2064                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2065                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2066                                                          jz      irq1.140                                        ;yes, skip ahead
  2067                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2068                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2069                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2070                                                          jz      irq1.140                                        ;yes, skip ahead
  2071                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2072                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2073                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2074                                                          jz      irq1.140                                        ;yes, skip ahead
  2075                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2076                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2077                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2078                                                          jz      irq1.140                                        ;yes, skip ahead
  2079                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2080                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2081                                                          jmp     irq1.150                                        ;continue
  2082                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2083                                                          test    ah,EKEYBUP                                      ;release code?
  2084                                                          jnz     irq1.130                                        ;yes, skip ahead
  2085                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2086                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2087                                                          jz      irq1.90                                         ;no, skip ahead
  2088                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2089                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2090                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2091                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2092                                                          jz      irq1.100                                        ;no skip ahead
  2093                                                          mov     cl,al                                           ;copy ASCII code
  2094                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2095                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2096                                                          jb      irq1.100                                        ;yes, skip ahead
  2097                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2098                                                          ja      irq1.100                                        ;yes, skip ahead
  2099                                                          xor     al,EASCIICASE                                   ;switch case
  2100                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2101                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2102                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2103                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2104                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2105                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2106                                                          pop     ds                                              ;restore non-volatile regs
  2107                                                          pop     esi                                             ;
  2108                                                          pop     ecx                                             ;
  2109                                                          pop     ebx                                             ;
  2110                                                          pop     eax                                             ;
  2111                                                          iretd                                                   ;return
  2112                                  ;-----------------------------------------------------------------------------------------------------------------------
  2113                                  ;       Scan-Code to ASCII Translation Tables
  2114                                  ;-----------------------------------------------------------------------------------------------------------------------
  2115                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2116                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2117                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2118                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2119                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2120                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2121                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2122                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2123                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2124                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2125                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2126                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2127                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2128                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2129                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2130                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2131                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2132                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2133                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2134                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2135                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2136                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2137                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2138                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2139                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2140                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2141                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2142                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2143                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2144                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2145                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2146                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2147                                  ;-----------------------------------------------------------------------------------------------------------------------
  2148                                  ;
  2149                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2150                                  ;
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                                          menter  iochannel                                       ;secondary 8259A cascade
  2153                                                          push    eax                                             ;save modified regs
  2154                                                          jmp     hwint                                           ;end interrupt and return
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156                                  ;
  2157                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2158                                  ;
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                                          menter  com2                                            ;serial port 2 interrupt
  2161                                                          push    eax                                             ;save modified regs
  2162                                                          jmp     hwint                                           ;end interrupt and return
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  ;
  2165                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2166                                  ;
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                                          menter  com1                                            ;serial port 1 interrupt
  2169                                                          push    eax                                             ;save modified regs
  2170                                                          jmp     hwint                                           ;end interrupt and return
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                  ;
  2173                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2174                                  ;
  2175                                  ;-----------------------------------------------------------------------------------------------------------------------
  2176                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2177                                                          push    eax                                             ;save modified regs
  2178                                                          jmp     hwint                                           ;end interrupt and return
  2179                                  ;-----------------------------------------------------------------------------------------------------------------------
  2180                                  ;
  2181                                  ;       IRQ6    Diskette Hardware Interrupt
  2182                                  ;
  2183                                  ;-----------------------------------------------------------------------------------------------------------------------
  2184                                                          menter  diskette                                        ;floppy disk interrupt
  2185                                                          push    eax                                             ;save non-volatile regs
  2186                                                          push    ds                                              ;
  2187                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2188                                                          pop     ds                                              ;... into DS register
  2189                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2190                                                          or      al,10000000b                                    ;set IRQ flag
  2191                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2192                                                          pop     ds                                              ;restore non-volatile regs
  2193                                                          jmp     hwint                                           ;end primary PIC interrupt
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2197                                  ;
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2200                                                          push    eax                                             ;save modified regs
  2201                                                          jmp     hwint                                           ;end interrupt and return
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                  ;
  2204                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2205                                  ;
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                                          menter  rtclock                                         ;real-time clock interrupt
  2208                                                          push    eax                                             ;save modified regs
  2209                                                          jmp     hwwint                                          ;end interrupt and return
  2210                                  ;-----------------------------------------------------------------------------------------------------------------------
  2211                                  ;
  2212                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2213                                  ;
  2214                                  ;-----------------------------------------------------------------------------------------------------------------------
  2215                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2216                                                          push    eax                                             ;save modified regs
  2217                                                          jmp     hwwint                                          ;end interrupt and return
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                  ;
  2220                                  ;       IRQ10   Reserved Hardware Interrupt
  2221                                  ;
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                                          menter  irq10                                           ;reserved
  2224                                                          push    eax                                             ;save modified regs
  2225                                                          jmp     hwwint                                          ;end interrupt and return
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                  ;
  2228                                  ;       IRQ11   Reserved Hardware Interrupt
  2229                                  ;
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                                          menter  irq11                                           ;reserved
  2232                                                          push    eax                                             ;save modified regs
  2233                                                          jmp     hwwint                                          ;end interrupt and return
  2234                                  ;-----------------------------------------------------------------------------------------------------------------------
  2235                                  ;
  2236                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2237                                  ;
  2238                                  ;-----------------------------------------------------------------------------------------------------------------------
  2239                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2240                                                          push    eax                                             ;save modified regs
  2241                                                          jmp     hwwint                                          ;end interrupt and return
  2242                                  ;-----------------------------------------------------------------------------------------------------------------------
  2243                                  ;
  2244                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2245                                  ;
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                                          menter  coprocessor                                     ;coprocessor interrupt
  2248                                                          push    eax                                             ;save modified regs
  2249                                                          jmp     hwwint                                          ;end interrupt and return
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                  ;
  2252                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2253                                  ;
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2256                                                          push    eax                                             ;save modified regs
  2257                                                          jmp     hwwint                                          ;end interrupt and return
  2258                                  ;-----------------------------------------------------------------------------------------------------------------------
  2259                                  ;
  2260                                  ;       IRQ15   Reserved Hardware Interrupt
  2261                                  ;
  2262                                  ;-----------------------------------------------------------------------------------------------------------------------
  2263                                                          menter  irq15                                           ;reserved
  2264                                                          push    eax                                             ;save modified regs
  2265                                                          jmp     hwwint                                          ;end interrupt and return
  2266                                  ;-----------------------------------------------------------------------------------------------------------------------
  2267                                  ;
  2268                                  ;       Exit from hardware interrupt
  2269                                  ;
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2272                                                          jmp     hwint90                                         ;skip ahead
  2273                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2274                                  hwint90                 pop     eax                                             ;restore modified regs
  2275                                                          iretd                                                   ;return from interrupt
  2276                                  ;-----------------------------------------------------------------------------------------------------------------------
  2277                                  ;
  2278                                  ;       INT 30h Operating System Software Service Interrupt
  2279                                  ;
  2280                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2281                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2282                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2283                                  ;       the entry address of the specific function from a table.
  2284                                  ;
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                                          menter  svc
  2287                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2288                                                          jae     svc90                                           ;yes, skip ahead
  2289                                                          movzx   eax,al                                          ;function
  2290                                                          shl     eax,2                                           ;offset into table
  2291                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2292                                  svc90                   iretd                                                   ;return from interrupt
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  ;
  2295                                  ;       Service Request Table
  2296                                  ;
  2297                                  ;
  2298                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2299                                  ;
  2300                                  ;-----------------------------------------------------------------------------------------------------------------------
  2301                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2302                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2303                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2304                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  ;
  2307                                  ;       Service Request Macros
  2308                                  ;
  2309                                  ;       These macros provide positional parameterization of service request calls.
  2310                                  ;
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312                                  %macro                  clearConsoleScreen 0
  2313                                                          mov     al,eClearConsoleScreen                          ;function code
  2314                                                          int     _svc                                            ;invoke OS service
  2315                                  %endmacro
  2316                                  %macro                  placeCursor 0
  2317                                                          mov     al,ePlaceCursor                                 ;function code
  2318                                                          int     _svc                                            ;invoke OS service
  2319                                  %endmacro
  2320                                  %macro                  putConsoleString 1
  2321                                                          mov     edx,%1                                          ;string address
  2322                                                          mov     al,ePutConsoleString                            ;function code
  2323                                                          int     _svc                                            ;invoke OS service
  2324                                  %endmacro
  2325                                  ;=======================================================================================================================
  2326                                  ;
  2327                                  ;       Kernel Function Library
  2328                                  ;
  2329                                  ;=======================================================================================================================
  2330                                  ;=======================================================================================================================
  2331                                  ;
  2332                                  ;       Console Helper Routines
  2333                                  ;
  2334                                  ;       FirstConsoleColumn
  2335                                  ;       NextConsoleColumn
  2336                                  ;       NextConsoleRow
  2337                                  ;       PutConsoleChar
  2338                                  ;       PutConsoleHexByte
  2339                                  ;       PutConsoleOIAChar
  2340                                  ;       PutConsoleOIAShift
  2341                                  ;       PutConsoleString
  2342                                  ;
  2343                                  ;=======================================================================================================================
  2344                                  ;-----------------------------------------------------------------------------------------------------------------------
  2345                                  ;
  2346                                  ;       Routine:        FirstConsoleColumn
  2347                                  ;
  2348                                  ;       Description:    This routine resets the console column to start of the row.
  2349                                  ;
  2350                                  ;       In:             DS      OS data selector
  2351                                  ;
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2354                                                          mov     [wbConsoleColumn],al                            ;save column
  2355                                                          ret                                                     ;return
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  ;
  2358                                  ;       Routine:        NextConsoleColumn
  2359                                  ;
  2360                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2361                                  ;                       incremented if the end of the current row is reached.
  2362                                  ;
  2363                                  ;       In:             DS      OS data selector
  2364                                  ;
  2365                                  ;-----------------------------------------------------------------------------------------------------------------------
  2366                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2367                                                          inc     al                                              ;increment column
  2368                                                          mov     [wbConsoleColumn],al                            ;save column
  2369                                                          cmp     al,ECONCOLS                                     ;end of row?
  2370                                                          jb      .10                                             ;no, skip ahead
  2371                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2372                                                          call    NextConsoleRow                                  ;line feed to next row
  2373                                  .10                     ret                                                     ;return
  2374                                  ;-----------------------------------------------------------------------------------------------------------------------
  2375                                  ;
  2376                                  ;       Routine:        NextConsoleRow
  2377                                  ;
  2378                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2379                                  ;
  2380                                  ;       In:             DS      OS data selector
  2381                                  ;
  2382                                  ;-----------------------------------------------------------------------------------------------------------------------
  2383                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2384                                                          inc     al                                              ;increment row
  2385                                                          mov     [wbConsoleRow],al                               ;save row
  2386                                                          cmp     al,ECONROWS                                     ;end of screen?
  2387                                                          jb      .10                                             ;no, skip ahead
  2388                                                          call    ScrollConsoleRow                                ;scroll up one row
  2389                                                          mov     al,[wbConsoleRow]                               ;row
  2390                                                          dec     al                                              ;decrement row
  2391                                                          mov     [wbConsoleRow],al                               ;save row
  2392                                  .10                     ret                                                     ;return
  2393                                  ;-----------------------------------------------------------------------------------------------------------------------
  2394                                  ;
  2395                                  ;       Routine:        PutConsoleChar
  2396                                  ;
  2397                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2398                                  ;
  2399                                  ;       In:             AL      ASCII character
  2400                                  ;                       DS      OS data selector
  2401                                  ;
  2402                                  ;-----------------------------------------------------------------------------------------------------------------------
  2403                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2404                                                          push    es                                              ;
  2405                                                          push    EGDTCGA                                         ;load CGA selector ...
  2406                                                          pop     es                                              ;... into extra segment reg
  2407                                                          mov     cl,[wbConsoleColumn]                            ;column
  2408                                                          mov     ch,[wbConsoleRow]                               ;row
  2409                                                          call    SetConsoleChar                                  ;put character at row, column
  2410                                                          pop     es                                              ;restore non-volatile regs
  2411                                                          pop     ecx                                             ;
  2412                                                          ret                                                     ;return
  2413                                  ;-----------------------------------------------------------------------------------------------------------------------
  2414                                  ;
  2415                                  ;       Routine:        PutConsoleHexByte
  2416                                  ;
  2417                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2418                                  ;
  2419                                  ;       In:             AL      byte value
  2420                                  ;                       CL      column
  2421                                  ;                       CH      row
  2422                                  ;                       DS      OS data selector
  2423                                  ;                       ES      CGA selector
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2427                                                          mov     bl,al                                           ;save byte value
  2428                                                          shr     al,4                                            ;hi-order nybble
  2429                                                          or      al,030h                                         ;apply ASCII zone
  2430                                                          cmp     al,03ah                                         ;numeric?
  2431                                                          jb      .10                                             ;yes, skip ahead
  2432                                                          add     al,7                                            ;add ASCII offset for alpha
  2433                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  2434                                                          mov     al,bl                                           ;byte value
  2435                                                          and     al,0fh                                          ;lo-order nybble
  2436                                                          or      al,30h                                          ;apply ASCII zone
  2437                                                          cmp     al,03ah                                         ;numeric?
  2438                                                          jb      .20                                             ;yes, skip ahead
  2439                                                          add     al,7                                            ;add ASCII offset for alpha
  2440                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2441                                                          pop     ebx                                             ;restore non-volatile regs
  2442                                                          ret                                                     ;return
  2443                                  ;-----------------------------------------------------------------------------------------------------------------------
  2444                                  ;
  2445                                  ;       Routine:        PutConsoleOIAChar
  2446                                  ;
  2447                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2448                                  ;
  2449                                  ;       In:             DS      OS data selector
  2450                                  ;
  2451                                  ;-----------------------------------------------------------------------------------------------------------------------
  2452                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2453                                                          push    ecx                                             ;
  2454                                                          push    esi                                             ;
  2455                                                          push    ds                                              ;
  2456                                                          push    es                                              ;
  2457                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2458                                                          pop     ds                                              ;... into data segment register
  2459                                                          push    EGDTCGA                                         ;load CGA selector ...
  2460                                                          pop     es                                              ;... into extra segment register
  2461                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2462                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2463                                                          mov     bl,0                                            ;starting column
  2464                                                          mov     ecx,6                                           ;maximum scan codes
  2465                                  .10                     push    ecx                                             ;save remaining count
  2466                                                          mov     ecx,ebx                                         ;row, column
  2467                                                          lodsb                                                   ;read scan code
  2468                                                          or      al,al                                           ;scan code present?
  2469                                                          jz      .20                                             ;no, skip ahead
  2470                                                          call    PutConsoleHexByte                               ;display scan code
  2471                                                          jmp     .30                                             ;continue
  2472                                  .20                     mov     al,' '                                          ;ASCII space
  2473                                                          call    SetConsoleChar                                  ;display space
  2474                                                          mov     al,' '                                          ;ASCII space
  2475                                                          call    SetConsoleChar                                  ;display space
  2476                                  .30                     add     bl,2                                            ;next column (+2)
  2477                                                          pop     ecx                                             ;restore remaining
  2478                                                          loop    .10                                             ;next code
  2479                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2480                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2481                                                          jb      .40                                             ;no, skip ahead
  2482                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2483                                                          ja      .40                                             ;no, skip ahead
  2484                                                          mov     ch,bh                                           ;OIA row
  2485                                                          mov     cl,40                                           ;character display column
  2486                                                          call    SetConsoleChar                                  ;display ASCII character
  2487                                  .40                     pop     es                                              ;restore non-volatile regs
  2488                                                          pop     ds                                              ;
  2489                                                          pop     esi                                             ;
  2490                                                          pop     ecx                                             ;
  2491                                                          pop     ebx                                             ;
  2492                                                          ret                                                     ;return
  2493                                  ;-----------------------------------------------------------------------------------------------------------------------
  2494                                  ;
  2495                                  ;       Routine:        PutConsoleOIAShift
  2496                                  ;
  2497                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2498                                  ;
  2499                                  ;       In:             BL      shift flags
  2500                                  ;                       BH      lock flags
  2501                                  ;                       DS      OS data selector
  2502                                  ;
  2503                                  ;-----------------------------------------------------------------------------------------------------------------------
  2504                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2505                                                          push    es                                              ;
  2506                                                          push    EGDTCGA                                         ;load CGA selector ...
  2507                                                          pop     es                                              ;... into ES register
  2508                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2509                                                          mov     al,EASCIISPACE                                  ;space is default character
  2510                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2511                                                          jz      .10                                             ;no, skip ahead
  2512                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2513                                  .10                     mov     cl,14                                           ;indicator column
  2514                                                          call    SetConsoleChar                                  ;display ASCII character
  2515                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2516                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2517                                                          jz      .20                                             ;no, skip ahead
  2518                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2519                                  .20                     mov     cl,64                                           ;indicator column
  2520                                                          call    SetConsoleChar                                  ;display ASCII character
  2521                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2522                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2523                                                          jz      .30                                             ;no, skip ahead
  2524                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2525                                  .30                     mov     cl,15                                           ;indicator column
  2526                                                          call    SetConsoleChar                                  ;display ASCII character
  2527                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2528                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2529                                                          jz      .40                                             ;no, skip ahead
  2530                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2531                                  .40                     mov     cl,63                                           ;indicator column
  2532                                                          call    SetConsoleChar                                  ;display ASCII character
  2533                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2534                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2535                                                          jz      .50                                             ;no, skip ahead
  2536                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2537                                  .50                     mov     cl,16                                           ;indicator column
  2538                                                          call    SetConsoleChar                                  ;display ASCII character
  2539                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2540                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2541                                                          jz      .60                                             ;no, skip ahead
  2542                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2543                                  .60                     mov     cl,62                                           ;indicator column
  2544                                                          call    SetConsoleChar                                  ;display ASCII character
  2545                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2546                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2547                                                          jz      .70                                             ;no, skip ahead
  2548                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2549                                  .70                     mov     cl,78                                           ;indicator column
  2550                                                          call    SetConsoleChar                                  ;display ASCII character
  2551                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2552                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2553                                                          jz      .80                                             ;no, skip ahead
  2554                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2555                                  .80                     mov     cl,77                                           ;indicator column
  2556                                                          call    SetConsoleChar                                  ;display ASCII character
  2557                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2558                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2559                                                          jz      .90                                             ;no, skip ahead
  2560                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2561                                  .90                     mov     cl,76                                           ;indicator column
  2562                                                          call    SetConsoleChar                                  ;display ASCII character
  2563                                                          pop     es                                              ;restore non-volatile regs
  2564                                                          pop     ecx                                             ;
  2565                                                          ret                                                     ;return
  2566                                  ;-----------------------------------------------------------------------------------------------------------------------
  2567                                  ;
  2568                                  ;       Routine:        PutConsoleString
  2569                                  ;
  2570                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2571                                  ;                       console position as needed.
  2572                                  ;
  2573                                  ;       In:             EDX     source address
  2574                                  ;                       DS      OS data selector
  2575                                  ;
  2576                                  ;-----------------------------------------------------------------------------------------------------------------------
  2577                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2578                                                          mov     esi,edx                                         ;source address
  2579                                                          cld                                                     ;forward strings
  2580                                  .10                     lodsb                                                   ;ASCII character
  2581                                                          or      al,al                                           ;end of string?
  2582                                                          jz      .40                                             ;yes, skip ahead
  2583                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2584                                                          jne     .20                                             ;no, skip ahead
  2585                                                          call    FirstConsoleColumn                              ;move to start of row
  2586                                                          jmp     .10                                             ;next character
  2587                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2588                                                          jne     .30                                             ;no, skip ahead
  2589                                                          call    NextConsoleRow                                  ;move to next row
  2590                                                          jmp     .10                                             ;next character
  2591                                  .30                     call    PutConsoleChar                                  ;output character to console
  2592                                                          call    NextConsoleColumn                               ;advance to next column
  2593                                                          jmp     .10                                             ;next character
  2594                                  .40                     pop     esi                                             ;restore non-volatile regs
  2595                                                          ret                                                     ;return
  2596                                  ;=======================================================================================================================
  2597                                  ;
  2598                                  ;       Memory-Mapped Video Routines
  2599                                  ;
  2600                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2601                                  ;
  2602                                  ;       ClearConsoleScreen
  2603                                  ;       ScrollConsoleRow
  2604                                  ;       SetConsoleChar
  2605                                  ;
  2606                                  ;=======================================================================================================================
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                  ;
  2609                                  ;       Routine:        ClearConsoleScreen
  2610                                  ;
  2611                                  ;       Description:    This routine clears the console (CGA) screen.
  2612                                  ;
  2613                                  ;-----------------------------------------------------------------------------------------------------------------------
  2614                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2615                                                          push    edi                                             ;
  2616                                                          push    ds                                              ;
  2617                                                          push    es                                              ;
  2618                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2619                                                          pop     ds                                              ;... into DS register
  2620                                                          push    EGDTCGA                                         ;load CGA selector ...
  2621                                                          pop     es                                              ;... into ES register
  2622                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2623                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2624                                                          xor     edi,edi                                         ;target offset
  2625                                                          cld                                                     ;forward strings
  2626                                                          rep     stosd                                           ;reset screen body
  2627                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2628                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2629                                                          rep     stosd                                           ;reset OIA line
  2630                                                          xor     al,al                                           ;zero register
  2631                                                          mov     [wbConsoleRow],al                               ;reset console row
  2632                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2633                                                          call    PlaceCursor                                     ;place cursor at current position
  2634                                                          pop     es                                              ;restore non-volatile regs
  2635                                                          pop     ds                                              ;
  2636                                                          pop     edi                                             ;
  2637                                                          pop     ecx                                             ;
  2638                                                          ret                                                     ;return
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                  ;
  2641                                  ;       Routine:        ScrollConsoleRow
  2642                                  ;
  2643                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2644                                  ;
  2645                                  ;-----------------------------------------------------------------------------------------------------------------------
  2646                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2647                                                          push    esi                                             ;
  2648                                                          push    edi                                             ;
  2649                                                          push    ds                                              ;
  2650                                                          push    es                                              ;
  2651                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2652                                                          pop     ds                                              ;... into DS
  2653                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2654                                                          pop     es                                              ;... into ES
  2655                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2656                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2657                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2658                                                          cld                                                     ;forward strings
  2659                                                          rep     movsd                                           ;move 24 lines up
  2660                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2661                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2662                                                          rep     stosd                                           ;clear bottom row
  2663                                                          pop     es                                              ;restore non-volatile regs
  2664                                                          pop     ds                                              ;
  2665                                                          pop     edi                                             ;
  2666                                                          pop     esi                                             ;
  2667                                                          pop     ecx                                             ;
  2668                                                          ret                                                     ;return
  2669                                  ;-----------------------------------------------------------------------------------------------------------------------
  2670                                  ;
  2671                                  ;       Routine:        SetConsoleChar
  2672                                  ;
  2673                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2674                                  ;
  2675                                  ;       In:             AL      ASCII character
  2676                                  ;                       CL      column
  2677                                  ;                       CH      row
  2678                                  ;                       ES      CGA selector
  2679                                  ;
  2680                                  ;       Out:            EAX     last target address written (ES:)
  2681                                  ;                       CL      column + 1
  2682                                  ;
  2683                                  ;-----------------------------------------------------------------------------------------------------------------------
  2684                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2685                                                          movzx   eax,ch                                          ;row
  2686                                                          mov     ah,ECONCOLS                                     ;cols/row
  2687                                                          mul     ah                                              ;row * cols/row
  2688                                                          add     al,cl                                           ;add column
  2689                                                          adc     ah,0                                            ;handle carry
  2690                                                          shl     eax,1                                           ;screen offset
  2691                                                          mov     [es:eax],dl                                     ;store character
  2692                                                          inc     cl                                              ;next column
  2693                                                          ret                                                     ;return
  2694                                  ;=======================================================================================================================
  2695                                  ;
  2696                                  ;       Input/Output Routines
  2697                                  ;
  2698                                  ;       These routines read and/or write directly to ports.
  2699                                  ;
  2700                                  ;       PlaceCursor
  2701                                  ;       PutPrimaryEndOfInt
  2702                                  ;       PutSecondaryEndOfInt
  2703                                  ;       SetKeyboardLamps
  2704                                  ;       WaitForKeyInBuffer
  2705                                  ;       WaitForKeyOutBuffer
  2706                                  ;
  2707                                  ;=======================================================================================================================
  2708                                  ;-----------------------------------------------------------------------------------------------------------------------
  2709                                  ;
  2710                                  ;       Routine:        PlaceCursor
  2711                                  ;
  2712                                  ;       Description:    This routine positions the cursor on the console.
  2713                                  ;
  2714                                  ;       In:             DS      OS data selector
  2715                                  ;
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2718                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2719                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2720                                                          mul     ah                                              ;row offset
  2721                                                          add     al,[wbConsoleColumn]                            ;add column
  2722                                                          adc     ah,0                                            ;add overflow
  2723                                                          mov     ecx,eax                                         ;screen offset
  2724                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2725                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2726                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2727                                                          out     dx,al                                           ;select register
  2728                                                          inc     edx                                             ;data port
  2729                                                          mov     al,ch                                           ;hi-order cursor loc
  2730                                                          out     dx,al                                           ;store hi-order loc
  2731                                                          dec     edx                                             ;register select port
  2732                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2733                                                          out     dx,al                                           ;select register
  2734                                                          inc     edx                                             ;data port
  2735                                                          mov     al,cl                                           ;lo-order cursor loc
  2736                                                          out     dx,al                                           ;store lo-order loc
  2737                                                          pop     ecx                                             ;restore non-volatile regs
  2738                                                          ret                                                     ;return
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  ;
  2741                                  ;       Routine:        PutPrimaryEndOfInt
  2742                                  ;
  2743                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2744                                  ;
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2747                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2748                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2749                                                          ret                                                     ;return
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                  ;
  2752                                  ;       Routine:        PutSecondaryEndOfInt
  2753                                  ;
  2754                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2755                                  ;
  2756                                  ;-----------------------------------------------------------------------------------------------------------------------
  2757                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2758                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2759                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2760                                                          ret                                                     ;return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       Routine:        SetKeyboardLamps
  2764                                  ;
  2765                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2766                                  ;
  2767                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2768                                  ;
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2771                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2772                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  2773                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2774                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2775                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2776                                                          mov     al,bh                                           ;set/reset lamps value
  2777                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  2778                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2779                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2780                                                          ret                                                     ;return
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                  ;
  2783                                  ;       Routine:        WaitForKeyInBuffer
  2784                                  ;
  2785                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2786                                  ;
  2787                                  ;       Out:            ZF      1 = Input buffer ready
  2788                                  ;                               0 = Input buffer not ready after timeout
  2789                                  ;
  2790                                  ;-----------------------------------------------------------------------------------------------------------------------
  2791                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2792                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2793                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2794                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  2795                                                          loopnz  .10                                             ;yes, repeat till timeout
  2796                                                          pop     ecx                                             ;restore non-volatile regs
  2797                                                          ret                                                     ;return
  2798                                  ;-----------------------------------------------------------------------------------------------------------------------
  2799                                  ;
  2800                                  ;       Routine:        WaitForKeyOutBuffer
  2801                                  ;
  2802                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2803                                  ;
  2804                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2805                                  ;                               0 = Output buffer empty after timeout
  2806                                  ;
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2809                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2810                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2811                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  2812                                                          loopz   .10                                             ;loop until output buffer bit
  2813                                                          pop     ecx                                             ;restore non-volatile regs
  2814                                                          ret                                                     ;return
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                  ;
  2817                                  ;       End of the Kernel Function Library
  2818                                  ;
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2821                                  ;=======================================================================================================================
  2822                                  ;
  2823                                  ;       Console Task
  2824                                  ;
  2825                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2826                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2827                                  ;       screen and responds to user commands.
  2828                                  ;
  2829                                  ;=======================================================================================================================
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831                                  ;
  2832                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2833                                  ;
  2834                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837                                  section                 constack                                                ;console task stack
  2838                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840                                  ;
  2841                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2842                                  ;
  2843                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2844                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2845                                  ;       16 descriptors. Six are initially defined.
  2846                                  ;
  2847                                  ;-----------------------------------------------------------------------------------------------------------------------
  2848                                  section                 conldt                                                  ;console local descriptors
  2849                                                          dq      004093004780007Fh                               ;04 TSS alias
  2850                                                          dq      004093004700007Fh                               ;0c LDT alias
  2851                                                          dq      00409300400006FFh                               ;14 stack
  2852                                                          dq      00CF93000000FFFFh                               ;1c data
  2853                                                          dq      00409B0050000FFFh                               ;24 code
  2854                                                          dq      00409300480007FFh                               ;2c message queue
  2855                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2859                                  ;
  2860                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2861                                  ;       segment. CS to console code.
  2862                                  ;
  2863                                  ;-----------------------------------------------------------------------------------------------------------------------
  2864                                  section                 contss                                                  ;console task state segment
  2865                                                          dd      0                                               ;00 back-link tss
  2866                                                          dd      0700h                                           ;04 esp ring 0
  2867                                                          dd      0014h                                           ;08 ss ring 0
  2868                                                          dd      0700h                                           ;0c esp ring 1
  2869                                                          dd      0014h                                           ;10 es ring 1
  2870                                                          dd      0700h                                           ;14 esp ring 2
  2871                                                          dd      0014h                                           ;18 ss ring 2
  2872                                                          dd      0                                               ;1c cr ring 3
  2873                                                          dd      0                                               ;20 eip
  2874                                                          dd      0200h                                           ;24 eflags
  2875                                                          dd      0                                               ;28 eax
  2876                                                          dd      0                                               ;2c ecx
  2877                                                          dd      0                                               ;30 edx
  2878                                                          dd      0                                               ;34 ebx
  2879                                                          dd      0700h                                           ;38 esp ring 3
  2880                                                          dd      0                                               ;3c ebp
  2881                                                          dd      0                                               ;40 esi
  2882                                                          dd      0                                               ;44 edi
  2883                                                          dd      001Ch                                           ;48 es
  2884                                                          dd      0024h                                           ;4c cs
  2885                                                          dd      0014h                                           ;50 ss ring 3
  2886                                                          dd      001Ch                                           ;54 ds
  2887                                                          dd      0                                               ;58 fs
  2888                                                          dd      0                                               ;5c gs
  2889                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2890                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2894                                  ;
  2895                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2896                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2897                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2898                                  ;       event.
  2899                                  ;
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901                                  section                 conmque                                                 ;console message queue
  2902                                                          dd      8                                               ;head pointer
  2903                                                          dd      8                                               ;tail pointer
  2904                                                          times   510 dd 0                                        ;queue elements
  2905                                  ;-----------------------------------------------------------------------------------------------------------------------
  2906                                  ;
  2907                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2908                                  ;
  2909                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2910                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2911                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2912                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2913                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2914                                  ;       board input, echoing to the console screen and responding to user commands.
  2915                                  ;
  2916                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2917                                  ;
  2918                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2919                                  ;                               |  Real Mode Interrupt Vectors                  |
  2920                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2921                                  ;                               |  Reserved BIOS Memory Area                    |
  2922                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2923                                  ;                               |  Shared Kernel Memory Area                    |
  2924                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2925                                  ;                               |  Global Descriptor Table (GDT)                |
  2926                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2927                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2928                                  ;                       002000  +-----------------------------------------------+
  2929                                  ;                               |  Interrupt Handlers                           |
  2930                                  ;                               |  Kernel Function Library                      |
  2931                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2932                                  ;                               |  Console Task Stack Area                      |
  2933                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2934                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2935                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2936                                  ;                               |  Console Task Task State Segment (TSS)        |
  2937                                  ;                       004800  +-----------------------------------------------+
  2938                                  ;                               |  Console Task Message Queue                   |
  2939                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2940                                  ;                               |  Console Task Code                            |
  2941                                  ;                               |  Console Task Constants                       |
  2942                                  ;                       006000  +===============================================+
  2943                                  ;
  2944                                  ;-----------------------------------------------------------------------------------------------------------------------
  2945                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2946                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  2947                                  
  2948                                                          clearConsoleScreen                                      ;clear the console screen
  2949                                                          putConsoleString czTitle                                ;display startup message
  2950                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2951                                                          placeCursor                                             ;set CRT cursor location
  2952                                  
  2953                                  .20                     sti                                                     ;enable interrupts
  2954                                                          hlt                                                     ;halt until interrupt
  2955                                                          jmp     .20                                             ;continue halt loop
  2956                                  ;-----------------------------------------------------------------------------------------------------------------------
  2957                                  ;
  2958                                  ;       Routine:        ConInitializeData
  2959                                  ;
  2960                                  ;       Description:    This routine initializes console task variables.
  2961                                  ;
  2962                                  ;-----------------------------------------------------------------------------------------------------------------------
  2963                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  2964                                                          push    edi                                             ;
  2965                                                          push    es                                              ;
  2966                                  ;
  2967                                  ;       Initialize console work areas.
  2968                                  ;
  2969                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2970                                                          pop     es                                              ;... into extra segment register
  2971                                                          mov     edi,ECONDATA                                    ;OS console data address
  2972                                                          xor     al,al                                           ;initialization value
  2973                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2974                                                          cld                                                     ;forward strings
  2975                                                          rep     stosb                                           ;initialize data
  2976                                  ;
  2977                                  ;       Restore and return.
  2978                                  ;
  2979                                                          pop     es                                              ;restore non-volatile regs
  2980                                                          pop     edi                                             ;
  2981                                                          pop     ecx                                             ;
  2982                                                          ret                                                     ;return
  2983                                  ;-----------------------------------------------------------------------------------------------------------------------
  2984                                  ;
  2985                                  ;       Constants
  2986                                  ;
  2987                                  ;-----------------------------------------------------------------------------------------------------------------------
  2988                                  czNewLine               db      13,10,0                                         ;new line string
  2989                                  czPrompt                db      ":",0                                           ;prompt string
  2990                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  2991                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2992                                  %endif
  2993                                  %ifdef BUILDDISK
  2994                                  ;-----------------------------------------------------------------------------------------------------------------------
  2995                                  ;
  2996                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2997                                  ;
  2998                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2999                                  ;
  3000                                  ;-----------------------------------------------------------------------------------------------------------------------
  3001                                  section                 unused                                                  ;unused disk space
  3002                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3003                                  %endif
  3004                                  ;=======================================================================================================================
  3005                                  ;
  3006                                  ;       End of Program Code
  3007                                  ;
  3008                                  ;=======================================================================================================================
