     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.005
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;			updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;	Revised:	July 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;			Register names in comments are in upper case.
    51                                  ;			Hexadecimal values in comments are in lower case.
    52                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    53                                  ;			register contents on entry and exit.
    54                                  ;
    55                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    56                                  ;			Assembly operands begin in column 33.
    57                                  ;			Lines should not extend beyond column 120.
    58                                  ;
    59                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    60                                  ;			Routine names begin with a verb (Get, Read, etc.).
    61                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    62                                  ;
    63                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    64                                  ;			Constant stored values are named in camel case, starting with 'c'.
    65                                  ;			The 2nd letter of the constant label indicates the storage type.
    66                                  ;
    67                                  ;			cq......	constant quad-word (dq)
    68                                  ;			cd......	constant double-word (dd)
    69                                  ;			cw......	constant word (dw)
    70                                  ;			cb......	constant byte (db)
    71                                  ;			cz......	constant ASCIIZ (null-terminated) string
    72                                  ;
    73                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    74                                  ;			The 2nd letter of the variable label indicates the storage type.
    75                                  ;
    76                                  ;			wq......	variable quad-word (resq)
    77                                  ;			wd......	variable double-word (resd)
    78                                  ;			ww......	variable word (resw)
    79                                  ;			wb......	variable byte (resb)
    80                                  ;
    81                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    82                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    83                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    84                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    85                                  ;			Octal literal values are avoided.
    86                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    87                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    88                                  ;
    89                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    90                                  ;			Structure names do not begin with a verb.
    91                                  ;
    92                                  ;	Macros:		Macro names are in camel case (getDateString).
    93                                  ;			Macro names do begin with a verb.
    94                                  ;
    95                                  ;	Registers:	Register names in comments are in upper case.
    96                                  ;			Register names in source code are in lower case.
    97                                  ;
    98                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    99                                  ;			Registers EAX and ECX are preferred for returning response/result values.
   100                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   101                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   102                                  ;
   103                                  ;-----------------------------------------------------------------------------------------------------------------------
   104                                  ;=======================================================================================================================
   105                                  ;
   106                                  ;	Equates
   107                                  ;
   108                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   109                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   110                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   111                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   112                                  ;
   113                                  ;=======================================================================================================================
   114                                  ;-----------------------------------------------------------------------------------------------------------------------
   115                                  ;
   116                                  ;	8042 Keyboard Controller						EKEYB...
   117                                  ;
   118                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   119                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   120                                  ;
   121                                  ;-----------------------------------------------------------------------------------------------------------------------
   122                                  EKEYBPORTDATA		equ	060h						;data port
   123                                  EKEYBPORTSTAT		equ	064h						;status port
   124                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   125                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   126                                  EKEYBBITIN		equ	002h						;input buffer status bit
   127                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   128                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   129                                  										;---------------------------------------
   130                                  										;	Keyboard Scan Codes
   131                                  										;---------------------------------------
   132                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   133                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   134                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   135                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   136                                  EKEYBSLASH		equ	035h						;slash
   137                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   138                                  EKEYBALTDOWN		equ	038h						;alt key down
   139                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   140                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   141                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   142                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   143                                  EKEYBUP			equ	080h						;up
   144                                  EKEYBCTRLUP		equ	09Dh						;control key up
   145                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   146                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   147                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   148                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   149                                  EKEYBALTUP		equ	0B8h						;alt key up
   150                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   151                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   152                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   153                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   154                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   155                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   156                                  ;-----------------------------------------------------------------------------------------------------------------------
   157                                  ;
   158                                  ;	8253 Programmable Interrupt Timer					EPIT...
   159                                  ;
   160                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   161                                  ;	approximately 18.2 times per second.
   162                                  ;
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   165                                  ;-----------------------------------------------------------------------------------------------------------------------
   166                                  ;
   167                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   168                                  ;
   169                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   170                                  ;	external devices and signals a hardware interrupt to the CPU.
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  EPICPORTPRI		equ	020h						;primary control port 0
   174                                  EPICPORTPRI1		equ	021h						;primary control port 1
   175                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   176                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   177                                  EPICEOI			equ	020h						;non-specific EOI code
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;
   180                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   181                                  ;
   182                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   183                                  ;	for CGA, EGA, VGA and compatible video modes.
   184                                  ;
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ECRTPORTHI		equ	003h						;controller port hi
   187                                  ECRTPORTLO		equ	0D4h						;controller port lo
   188                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   189                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  ;
   192                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   193                                  ;
   194                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   195                                  ;
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  EFDCPORTHI		equ	003h						;controller port hi
   198                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   199                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   200                                  EFDCSTATBUSY		equ	010h						;main status is busy
   201                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  ;
   204                                  ;	x86 Descriptor Access Codes						EACC...
   205                                  ;
   206                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   207                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   208                                  ;
   209                                  ;	0.......	Segment is not present in memory (triggers int 11)
   210                                  ;	1.......	Segment is present in memory
   211                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   212                                  ;	...0....	Segment is a system segment
   213                                  ;	...00010		Local Descriptor Table
   214                                  ;	...00101		Task Gate
   215                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   216                                  ;	...01100		Call Gate (386)
   217                                  ;	...01110		Interrupt Gate (386)
   218                                  ;	...01111		Trap Gate (386)
   219                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   220                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   221                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   222                                  ;
   223                                  ;-----------------------------------------------------------------------------------------------------------------------
   224                                  EACCLDT			equ	10000010b					;local descriptor table
   225                                  EACCTASK		equ	10000101b					;task gate
   226                                  EACCTSS			equ	10001001b					;task-state segment
   227                                  EACCGATE		equ	10001100b					;call gate
   228                                  EACCINT			equ	10001110b					;interrupt gate
   229                                  EACCTRAP		equ	10001111b					;trap gate
   230                                  EACCDATA		equ	10010011b					;upward writable data
   231                                  EACCCODE		equ	10011011b					;non-conforming readable code
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	BIOS Interrupts and Functions						EBIOS...
   235                                  ;
   236                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   237                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   238                                  ;
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   241                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   242                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   243                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   244                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   245                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   246                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   247                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   248                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;
   251                                  ;	ASCII									EASCII...
   252                                  ;
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  EASCIILINEFEED		equ	00Ah						;line feed
   255                                  EASCIIRETURN		equ	00Dh						;carriage return
   256                                  EASCIIESCAPE		equ	01Bh						;escape
   257                                  EASCIISPACE		equ	020h						;space
   258                                  EASCIIUPPERA		equ	041h						;'A'
   259                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   260                                  EASCIICASE		equ	00100000b					;case bit
   261                                  EASCIICASEMASK		equ	11011111b					;case mask
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;	Boot Sector and Loader Constants					EBOOT...
   265                                  ;
   266                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   267                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   271                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   272                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   273                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   274                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   275                                  EBOOTMAXTRIES		equ	5						;max read retries
   276                                  ;-----------------------------------------------------------------------------------------------------------------------
   277                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   278                                  ;-----------------------------------------------------------------------------------------------------------------------
   279                                  ESELDAT			equ	018h						;kernel data selector
   280                                  ESELCGA			equ	020h						;cga video selector
   281                                  ESELOSCODE		equ	048h						;os kernel code selector
   282                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   283                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   284                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   285                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;	Kernel Constants							EKRN...
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  EKRNDESLEN		equ	8						;size of descriptor
   290                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   291                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;	Keyboard Flags								EKEYF...
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   296                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   297                                  EKEYFALTLEFT		equ	00000100b					;left alt
   298                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   299                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   300                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   301                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   302                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   303                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   304                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   305                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;	Console Constants							ECON...
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  ECONCOLS		equ	80						;columns per row
   310                                  ECONROWS		equ	24						;console rows
   311                                  ECONOIAROW		equ	24						;operator information area row
   312                                  ECONCOLBYTES		equ	2						;bytes per column
   313                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   314                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   315                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   316                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   317                                  ;=======================================================================================================================
   318                                  ;
   319                                  ;	Structures
   320                                  ;
   321                                  ;=======================================================================================================================
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;	OSDATA
   325                                  ;
   326                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   327                                  ;	used by the BIOS.
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  struc			OSDATA
   331 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   332 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   333 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   334 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   335 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   336 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   337 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   338 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   339 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   340 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   341 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   342 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   343 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   344 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   345 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   346 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   347 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   348 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   349 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   350 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   351 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   352 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   353 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   354 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   355 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   356 00000449 <res 00000001>          			resb	1						;449 current video mode
   357 0000044A <res 00000002>          			resw	1						;44a screen columns
   358 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   359 0000044E <res 00000002>          			resw	1						;44e current video page offset
   360 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   361 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   362 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   363 00000462 <res 00000001>          			resb	1						;462 active display page number
   364 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   365 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   366 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   367 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   368 00000469 <res 00000003>          			resb	3						;469 vague
   369 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   370 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   371 00000471 <res 00000001>          			resb	1						;471 bios break flag
   372 00000472 <res 00000002>          			resw	1						;472 soft reset
   373 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   374 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   375 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   376 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   377 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   378 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   379 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   380 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   381 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   382 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   383 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   384 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   385 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   386 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   387 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   388 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   389 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   390 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   391 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   392 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   393 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   394 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   395 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   396 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   397 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   398 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   399 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   400 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   401 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   402 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   403 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   404 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   405 000004AC <res 00000008>          			resb	8						;4ac reserved
   406 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   407 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   408 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   409 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   410 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   411 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   412 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   413 000004CD <res 00000001>          			resb	1						;4cd unknown
   414 000004CE <res 00000002>          			resw	1						;4de day counter
   415 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   416 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   417 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   418 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   419 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   420 00000505 <res 0000000A>          			resb	10						;505 POST work area
   421 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   422 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   423 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   424 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   425 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   426 0000051E <res 00000002>          			resw	1						;51e unknown
   427 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   428 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   429 00000530 <res 00000004>          			resb	4						;530 MODE command
   430 00000534 <res 000001CC>          			resb	460						;534 unused
   431 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  ;
   434                                  ;	OS Variables								@disk: N/A	@mem: 000800
   435                                  ;
   436                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   437                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   438                                  ;	are organized based on the task that usually accesses them.
   439                                  ;
   440                                  ;-----------------------------------------------------------------------------------------------------------------------
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  ;
   443                                  ;	Console Task Variables
   444                                  ;
   445                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   446                                  ;	the console task starts.
   447                                  ;
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  			align	4
   450                                  ECONDATA		equ	($)
   451 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   452 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   453 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   454 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   455 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   456 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   457 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   458 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   459 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   460 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   461 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   462 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   463                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  ;
   466                                  ;	End of OS Variables
   467                                  ;
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  endstruc
   470                                  ;-----------------------------------------------------------------------------------------------------------------------
   471                                  ;
   472                                  ;	Macros
   473                                  ;
   474                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   475                                  ;
   476                                  ;-----------------------------------------------------------------------------------------------------------------------
   477                                  %macro			mint	1
   478                                  _%1			equ	($-$$) / EKRNDESLEN
   479                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   480                                  %endmacro
   481                                  %macro			mtrap	1
   482                                  _%1			equ	($-$$) / EKRNDESLEN
   483                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   484                                  %endmacro
   485                                  %macro			menter	1
   486                                  ?%1			equ	($-$$)
   487                                  %endmacro
   488                                  %macro			tsvce	1
   489                                  e%1			equ	($-tsvc)/4
   490                                  			dd	%1
   491                                  %endmacro
   492                                  %ifdef BUILDBOOT
   493                                  ;=======================================================================================================================
   494                                  ;
   495                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   496                                  ;
   497                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   498                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   499                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   500                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   501                                  ;
   502                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   503                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   504                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   505                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   506                                  ;	immediately followed by a disk parameter table.
   507                                  ;
   508                                  ;=======================================================================================================================
   509                                  			cpu	8086						;assume minimal CPU
   510                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   511                                  			bits	16						;16-bit code at power-up
   512                                  %ifdef BUILDPREP
   513 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   514                                  %else
   515                                  Boot			jmp	word Boot.10					;jump over parameter table
   516                                  %endif
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  ;
   519                                  ;	Disk Parameter Table
   520                                  ;
   521                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   522                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   523                                  ;
   524                                  ;-----------------------------------------------------------------------------------------------------------------------
   525 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   526 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   527 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   528 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   529 00000010 02                      cbFatCount		db	2						;file allocation table copies
   530 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   531 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   532 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   533 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   534                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   535 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   536 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   537 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   538                                  ;
   539                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   540                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   541                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   542                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   543                                  ;	given several possible starting values for CS:IP.
   544                                  ;
   545                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   546 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   547                                  .@20			equ	$-$$						;.@20 = 021h
   548 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   549 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   550 00000025 B104                    			mov	cl,4						;shift count
   551 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   552 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   553 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   554                                  ;
   555                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   556                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   557                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   558                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   559                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   560                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   561                                  ;
   562 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   563 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   564 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   565 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   566 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   567                                  ;
   568                                  ;	Our boot addressability is now set up according to the following diagram.
   569                                  ;
   570                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   571                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   572                                  ;				|  256 = 100h bytes				|
   573                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   574                                  ;				|  Boot Sector (vstart=0100h)			|
   575                                  ;				|  1 sector = 512 = 200h bytes			|
   576                                  ;			007e00	+-----------------------------------------------+ DS:0300
   577                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   578                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   579                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   580                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   581                                  ;			009200	+-----------------------------------------------+ DS:1700
   582                                  ;
   583                                  ;	On entry, DL indicates the drive being booted from.
   584                                  ;
   585 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   586                                  ;
   587                                  ;	Compute directory i/o buffer address.
   588                                  ;
   589 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   590 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   591 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   592 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   593                                  ;
   594                                  ;	Compute segment where os.com will be loaded.
   595                                  ;
   596 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   597 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   598 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   599 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   600                                  ;
   601                                  ;	Set the video mode to 80 column, 25 row, text.
   602                                  ;
   603 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   604 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   605                                  ;
   606                                  ;	Write a message to the console so we know we have our addressability established.
   607                                  ;
   608 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   609 0000005C E84B01                  			call	BootPrint					;display loader message
   610                                  ;
   611                                  ;	Initialize the number of directory sectors to search.
   612                                  ;
   613 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   614 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   615                                  ;
   616                                  ;	Compute number of directory sectors and initialize overhead count.
   617                                  ;
   618 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   619 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   620 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   621 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   622                                  ;
   623                                  ;	Compute directory entries per sector.
   624                                  ;
   625 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   626 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   627 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   628                                  ;
   629                                  ;	Compute first logical directory sector and update overhead count.
   630                                  ;
   631 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   632 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   633 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   634 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   635 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   636 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   637                                  ;
   638                                  ;	Read directory sector.
   639                                  ;
   640 0000008E B001                    .30			mov	al,1						;sector count
   641 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   642 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   643 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   644                                  ;
   645                                  ;	Setup variables to search this directory sector.
   646                                  ;
   647 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   648 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   649 000000A1 7603                    			jna	.40						;no, continue
   650 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   651 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   652 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   653 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   654                                  ;
   655                                  ;	Loop through directory sectors searching for kernel program.
   656                                  ;
   657 000000B1 56                      .50			push	si						;save kernel name address
   658 000000B2 57                      			push	di						;save dir i/o buffer address
   659 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   660 000000B6 FC                      			cld							;forward strings
   661 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   662 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   663 000000BA 5E                      			pop	si						;restore kernel name address
   664 000000BB 7418                    			je	.60						;exit loop if found
   665 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   666 000000C1 48                      			dec	ax						;decrement remaining entries
   667 000000C2 75ED                    			jnz	.50						;next entry
   668                                  ;
   669                                  ;	Repeat search if we are not at the end of the directory.
   670                                  ;
   671 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   672 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   673 000000CD 75BF                    			jne	.30						;no, get next sector
   674 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   675 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   676                                  ;
   677                                  ;	If we find the kernel program in the directory, read the FAT.
   678                                  ;
   679 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   680 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   681 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   682 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   683 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   684 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   685                                  ;
   686                                  ;	Get the starting cluster of the kernel program and target address.
   687                                  ;
   688 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   689 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   690                                  ;
   691                                  ;	Read each program cluster into RAM.
   692                                  ;
   693 000000EE 50                      .70			push	ax						;save cluster nbr
   694 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   695 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   696 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   697 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   698 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   699 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   700 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   701 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   702                                  ;
   703                                  ;	Update buffer pointer for next cluster.
   704                                  ;
   705 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   706 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   707 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   708 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   709 00000113 58                      			pop	ax						;AX = restore cluster nbr
   710                                  ;
   711                                  ;	Compute next cluster number.
   712                                  ;
   713 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   714 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   715 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   716 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   717 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   718 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   719 00000120 83E701                  			and	di,1						;get low bit
   720 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   721 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   722 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   723                                  ;
   724                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   725                                  ;
   726 0000012B F6C101                  			test	cl,1						;is cluster odd?
   727 0000012E 7404                    			jz	.80						;no, skip ahead
   728 00000130 B104                    			mov	cl,4						;shift count
   729 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   730 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   731 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   732 0000013A 75B2                    			jne	.70						;no, continue
   733                                  ;
   734                                  ;	Transfer control to the operating system program.
   735                                  ;
   736 0000013C EA                      			db	0EAh						;jmp seg:offset
   737 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   738 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   739                                  ;
   740                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   741                                  ;
   742 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   743 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   744 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   745 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   746 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   747 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   748 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   749 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   750 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   751 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   752                                  ;
   753                                  ;	Try maxtries times to read sector.
   754                                  ;
   755 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   756 00000160 53                      .10			push	bx						;save buffer address
   757 00000161 51                      			push	cx						;save retry count
   758 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   759 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   760 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   761 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   762 0000016F 59                      			pop	cx						;restore retry count
   763 00000170 5B                      			pop	bx						;restore buffer address
   764 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   765 00000173 E2EB                    			loop	.10						;retry
   766                                  ;
   767                                  ;	Handle disk error: convert to ASCII and store in error string.
   768                                  ;
   769 00000175 88E0                    			mov	al,ah						;AL = bios error code
   770 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   771 00000179 B210                    			mov	dl,16						;divisor for base 16
   772 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   773 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   774 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   775 00000183 7203                    			jb	.20						;continue if numeral
   776 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   777 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   778 0000018A 7203                    			jb	.30						;continue if numeral
   779 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   780 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   781 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   782 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   783 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   784 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   785 0000019C 7504                    			jnz	.20						;continue if key pressed
   786 0000019E FB                      			sti							;enable maskable interrupts
   787 0000019F F4                      			hlt							;wait for interrupt
   788 000001A0 EBF6                    			jmp	.10						;repeat
   789 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   790 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   791 000001A6 FB                      .30			sti							;enable maskable interrupts
   792 000001A7 F4                      			hlt							;stop until reset, int, nmi
   793 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   794                                  ;
   795                                  ;	Display text message.
   796                                  ;
   797 000001AA FC                      BootPrint		cld							;forward strings
   798 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   799 000001AC 84C0                    			test	al,al						;end of string?
   800 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   801 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   802 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   803 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   804 000001B6 C3                      BootReturn		ret							;return
   805                                  ;-----------------------------------------------------------------------------------------------------------------------
   806                                  ;
   807                                  ;	Constants
   808                                  ;
   809                                  ;-----------------------------------------------------------------------------------------------------------------------
   810 000001B7 90                      			align	2
   811 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   812 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   812 000001C3 4F4D               
   813 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   813 000001CE 530D0A00           
   814 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   814 000001DB 7220               
   815 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   816 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   816 000001E9 6700               
   817                                  ;-----------------------------------------------------------------------------------------------------------------------
   818                                  ;
   819                                  ;	Work Areas
   820                                  ;
   821                                  ;-----------------------------------------------------------------------------------------------------------------------
   822 000001EB 90                      			align	2
   823 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   824 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   825 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   826 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   827 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   828                                  wwReadCountCommand	equ	$						;read count and command
   829 000001F6 00                      wbReadCount		db	0						;sectors to read
   830 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   831                                  wwDriveHead		equ	$						;drive, head (word)
   832 000001F8 00                      wbDrive			db	0						;drive
   833 000001F9 00                      wbHead			db	0						;head
   834                                  wwSectorTrack		equ	$						;sector, track (word)
   835 000001FA 00                      			db	0						;sector
   836 000001FB 00                      wbTrack			db	0						;track
   837 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   838 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   839                                  %endif
   840                                  %ifdef BUILDPREP
   841                                  ;=======================================================================================================================
   842                                  ;
   843                                  ;	Diskette Preparation Code
   844                                  ;
   845                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   846                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   847                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   848                                  ;
   849                                  ;=======================================================================================================================
   850                                  ;
   851                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   852                                  ;
   853 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   854 00000203 E8A4FF                  			call	BootPrint					;display message
   855                                  ;
   856                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   857                                  ;
   858 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   859 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   860 0000020A 7504                    			jnz	.12						;continue if key pressed
   861 0000020C FB                      			sti							;enable interrupts
   862 0000020D F4                      			hlt							;wait for interrupt
   863 0000020E EBF6                    			jmp	.10						;repeat
   864 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   865 00000212 7407                    			je	.15						;yes, branch
   866 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   867 00000216 75EE                    			jne	.10						;no, repeat
   868 00000218 E9A900                  			jmp	.90						;yes, exit program
   869                                  ;
   870                                  ;	Display writing-sector message and patch the JMP instruction.
   871                                  ;
   872 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   873 0000021E E889FF                  			call	BootPrint					;display message
   874 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   875 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   876 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   877                                  ;
   878                                  ;	Try to read the boot sector.
   879                                  ;
   880 00000229 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   881 0000022C 51                      .20			push	cx						;save remaining tries
   882 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   883 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   884 00000233 B90100                  			mov	cx,1						;track zero, sector one
   885 00000236 B80102                  			mov	ax,0201h					;read one sector
   886 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   887 0000023B 59                      			pop	cx						;restore remaining retries
   888 0000023C 7307                    			jnc	.30						;skip ahead if successful
   889 0000023E E2EC                    			loop	.20						;try again
   890 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   891 00000243 EB2C                    			jmp	.50						;branch to error routine
   892                                  ;
   893                                  ;	Copy diskette parms from input buffer to output buffer.
   894                                  ;
   895 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   896 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   897 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   898 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   899 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   900 00000254 FC                      			cld							;forward string copies
   901 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   902                                  ;
   903                                  ;	Try to write boot sector to diskette.
   904                                  ;
   905 00000257 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   906 0000025A 51                      .40			push	cx						;save remaining tries
   907 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   908 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   909 00000261 B90100                  			mov	cx,1						;track zero, sector one
   910 00000264 B80103                  			mov	ax,0301h					;write one sector
   911 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   912 00000269 59                      			pop	cx						;restore remaining retries
   913 0000026A 7326                    			jnc	.80						;skip ahead if successful
   914 0000026C E2EC                    			loop	.40						;try again
   915 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   916                                  ;
   917                                  ;	Convert the error code to ASCII and display the error message.
   918                                  ;
   919 00000271 50                      .50			push	ax						;save error code
   920 00000272 88E0                    			mov	al,ah						;copy error code
   921 00000274 B400                    			mov	ah,0						;AX = error code
   922 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   923 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   924 0000027A 0D3030                  			or	ax,03030h					;add ASCII zone digits
   925 0000027D 80FC3A                  			cmp	ah,03Ah						;AH ASCII numeral?
   926 00000280 7203                    			jb	.60						;yes, continue
   927 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   928 00000285 3C3A                    .60			cmp	al,03Ah						;al ASCII numeral?
   929 00000287 7202                    			jb	.70						;yes, continue
   930 00000289 0407                    			add	al,7						;no, make ASCII
   931 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   932 0000028E E819FF                  			call	BootPrint					;write error message
   933 00000291 58                      			pop	ax						;restore error code
   934                                  ;
   935                                  ;	Display the completion message.
   936                                  ;
   937 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   938 00000295 88E0                    			mov	al,ah						;BIOS return code
   939 00000297 3C00                    			cmp	al,0						;success?
   940 00000299 7426                    			je	.85						;yes, continue
   941 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   942 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   943 000002A0 741F                    			je	.85						;yes, continue
   944 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   945 000002A5 3C02                    			cmp	al,2						;address mark not found?
   946 000002A7 7418                    			je	.85						;yes, continue
   947 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   948 000002AC 3C03                    			cmp	al,3						;protected disk?
   949 000002AE 7411                    			je	.85						;yes, continue
   950 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   951 000002B3 3C06                    			cmp	al,6						;diskette removed?
   952 000002B5 740A                    			je	.85						;yes, continue
   953 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   954 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   955 000002BC 7403                    			je	.85						;yes, continue
   956 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   957 000002C1 E8E6FE                  .85			call	BootPrint					;display result message
   958 000002C4 B8004C                  .90			mov	ax,04C00H					;terminate with zero result code
   959 000002C7 CD21                    			int	021h						;terminate DOS program
   960 000002C9 C3                      			ret							;return (should not execute)
   961                                  ;-----------------------------------------------------------------------------------------------------------------------
   962                                  ;
   963                                  ;	Diskette Preparation Messages
   964                                  ;
   965                                  ;-----------------------------------------------------------------------------------------------------------------------
   966 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   966 000002D3 5320426F6F742D4469-
   966 000002DC 736B65747465205072-
   966 000002E5 657061726174696F6E-
   966 000002EE 2050726F6772616D   
   967 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   967 000002FF 687420284329203230-
   967 00000308 31302D323031372044-
   967 00000311 61766964204A2E2057-
   967 0000031A 616C6C696E672E2041-
   967 00000323 6C6C20726967687473-
   967 0000032C 207265736572766564-
   967 00000335 2E                 
   968 00000336 0D0A                    			db	13,10
   969 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   969 00000341 6F6772616D206F7665-
   969 0000034A 727772697465732074-
   969 00000353 686520626F6F742073-
   969 0000035C 6563746F72206F6620-
   969 00000365 61206469736B657474-
   969 0000036E 652077697468207374-
   969 00000377 617274757020636F64-
   969 00000380 652074686174       
   970 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   970 0000038F 616420746865206F70-
   970 00000398 65726174696E672073-
   970 000003A1 797374656D20696E74-
   970 000003AA 6F206D656D6F727920-
   970 000003B3 7768656E2074686520-
   970 000003BC 636F6D707574657220-
   970 000003C5 697320726573746172-
   970 000003CE 7465642E           
   971 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   971 000003DB 6565642C20706C6163-
   971 000003E4 65206120666F726D61-
   971 000003ED 74746564206469736B-
   971 000003F6 6574746520696E746F-
   971 000003FF 20647269766520413A-
   971 00000408 20616E642070726573-
   971 00000411 732074686520456E74-
   971 0000041A 6572206B65792E     
   972 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   972 0000042A 20746869732070726F-
   972 00000433 6772616D2077697468-
   972 0000043C 6F7574207072657061-
   972 00000445 72696E672061206469-
   972 0000044E 736B657474652C2070-
   972 00000457 726573732074686520-
   972 00000460 457363617065206B65-
   972 00000469 792E               
   973 0000046B 0D0A00                  			db	13,10,0
   974 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   974 00000477 2074686520626F6F74-
   974 00000480 20736563746F722074-
   974 00000489 6F2074686520646973-
   974 00000492 6B65747465202E2E2E 
   975 0000049B 0D0A00                  			db	13,10,0
   976 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   976 000004A7 6F722D636F6465202E-
   976 000004B0 2E2077617320726574-
   976 000004B9 75726E65642066726F-
   976 000004C2 6D207468652042494F-
   976 000004CB 53207768696C652072-
   976 000004D4 656164696E67206672-
   976 000004DD 6F6D20746865206469-
   976 000004E6 736B2E             
   977 000004E9 0D0A00                  			db	13,10,0
   978 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   978 000004F5 6F722D636F6465202E-
   978 000004FE 2E2077617320726574-
   978 00000507 75726E65642066726F-
   978 00000510 6D207468652042494F-
   978 00000519 53207768696C652077-
   978 00000522 726974696E6720746F-
   978 0000052B 20746865206469736B-
   978 00000534 2E                 
   979 00000535 0D0A00                  			db	13,10,0
   980 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   980 00000541 742D736563746F7220-
   980 0000054A 776173207772697474-
   980 00000553 656E20746F20746865-
   980 0000055C 206469736B65747465-
   980 00000565 2E204265666F726520-
   980 0000056E 626F6F74696E672079-
   980 00000577 6F757220636F6D7075-
   980 00000580 7465722077697468   
   981 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   981 00000591 736B657474652C206D-
   981 0000059A 616B65207375726520-
   981 000005A3 746861742074686520-
   981 000005AC 66696C65204F532E43-
   981 000005B5 4F4D20697320636F70-
   981 000005BE 696564206F6E746F20-
   981 000005C7 746865206469736B65-
   981 000005D0 7474652E           
   982 000005D4 0D0A00                  			db	13,10,0
   983 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   983 000005E0 76616C696420446973-
   983 000005E9 6B20506172616D6574-
   983 000005F2 6572               
   984 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   984 000005FD 20616E20696E746572-
   984 00000606 6E616C206572726F72-
   984 0000060F 206361757365642062-
   984 00000618 7920616E20696E7661-
   984 00000621 6C69642076616C7565-
   984 0000062A 206265696E67207061-
   984 00000633 7373656420746F2061-
   984 0000063C 2073797374656D     
   985 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   985 0000064C 6E2E20546865204F53-
   985 00000655 424F4F542E434F4D20-
   985 0000065E 66696C65206D617920-
   985 00000667 626520636F72727570-
   985 00000670 742E20436F7079206F-
   985 00000679 7220646F776E6C6F61-
   985 00000682 64207468652066696C-
   985 0000068B 6520616761696E     
   986 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
   986 0000069B 72792E             
   987 0000069E 0D0A00                  			db	13,10,0
   988 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   988 000006AA 6472657373204D6172-
   988 000006B3 6B204E6F7420466F75-
   988 000006BC 6E64               
   989 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   989 000006C7 726F7220696E646963-
   989 000006D0 617465732061207068-
   989 000006D9 79736963616C207072-
   989 000006E2 6F626C656D20776974-
   989 000006EB 682074686520666C6F-
   989 000006F4 707079206469736B65-
   989 000006FD 7474652E20506C6561-
   989 00000706 7365207265747279   
   990 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
   990 00000717 6E6F74686572206469-
   990 00000720 736B657474652E     
   991 00000727 0D0A00                  			db	13,10,0
   992 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   992 00000733 6F7465637465642044-
   992 0000073C 69736B             
   993 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   993 00000748 726F72206973207573-
   993 00000751 75616C6C7920636175-
   993 0000075A 736564206279206174-
   993 00000763 74656D7074696E6720-
   993 0000076C 746F20777269746520-
   993 00000775 746F20612077726974-
   993 0000077E 652D70726F74656374-
   993 00000787 6564206469736B2E   
   994 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   994 00000798 686520277772697465-
   994 000007A1 2D70726F7465637427-
   994 000007AA 2073657474696E6720-
   994 000007B3 6F6E20746865206469-
   994 000007BC 736B206F7220726574-
   994 000007C5 7279207573696E6720-
   994 000007CE 7573696E6720616E6F-
   994 000007D7 74686572206469736B-
   994 000007E0 2E                 
   995 000007E1 0D0A00                  			db	13,10,0
   996 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   996 000007ED 736B65747465205265-
   996 000007F6 6D6F766564         
   997 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   997 00000804 726F72206D61792069-
   997 0000080D 6E6469636174652074-
   997 00000816 686174207468652066-
   997 0000081F 6C6F70707920646973-
   997 00000828 6B6574746520686173-
   997 00000831 206265656E2072656D-
   997 0000083A 6F7665642066726F6D-
   997 00000843 20746865           
   998 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   998 00000850 652064726976652E20-
   998 00000859 4F6E20736F6D652073-
   998 00000862 797374656D732C2074-
   998 0000086B 68697320636F646520-
   998 00000874 6D617920616C736F20-
   998 0000087D 6F6363757220696620-
   998 00000886 746865206469736B65-
   998 0000088F 747465206973       
   999 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   999 0000089E 70726F746563746564-
   999 000008A7 2E2720506C65617365-
   999 000008B0 207665726966792074-
   999 000008B9 686174207468652064-
   999 000008C2 69736B657474652069-
   999 000008CB 73206E6F7420777269-
   999 000008D4 74652D70726F746563-
   999 000008DD 74656420616E64     
  1000 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
  1000 000008ED 65726C7920696E7365-
  1000 000008F6 7274656420696E2074-
  1000 000008FF 6865206469736B6574-
  1000 00000908 74652064726976652E 
  1001 00000911 0D0A00                  			db	13,10,0
  1002 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1002 0000091D 6976652054696D6564-
  1002 00000926 204F7574           
  1003 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1003 00000933 726F7220757375616C-
  1003 0000093C 6C7920696E64696361-
  1003 00000945 746573207468617420-
  1003 0000094E 6E6F206469736B6574-
  1003 00000957 746520697320696E20-
  1003 00000960 746865206469736B65-
  1003 00000969 747465206472697665-
  1003 00000972 2E20506C65617365   
  1004 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1004 00000983 726520746861742074-
  1004 0000098C 6865206469736B6574-
  1004 00000995 74652069732070726F-
  1004 0000099E 7065726C7920736561-
  1004 000009A7 74656420696E207468-
  1004 000009B0 652064726976652061-
  1004 000009B9 6E642072657472792E 
  1005 000009C2 0D0A00                  			db	13,10,0
  1006 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1006 000009CE 6B6E6F776E20457272-
  1006 000009D7 6F72               
  1007 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1007 000009E2 6F722D636F64652072-
  1007 000009EB 657475726E65642062-
  1007 000009F4 79207468652042494F-
  1007 000009FD 53206973206E6F7420-
  1007 00000A06 61207265636F676E69-
  1007 00000A0F 7A6564206572726F72-
  1007 00000A18 2E20506C6561736520-
  1007 00000A21 636F6E73756C74     
  1008 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
  1008 00000A31 6D7075746572277320-
  1008 00000A3A 746563686E6963616C-
  1008 00000A43 207265666572656E63-
  1008 00000A4C 6520666F7220612064-
  1008 00000A55 65736372697074696F-
  1008 00000A5E 6E206F662074686973-
  1008 00000A67 206572726F7220636F-
  1008 00000A70 64652E             
  1009 00000A73 0D0A00                  			db	13,10,0
  1010                                  wcPrepInBuf		equ	$
  1011                                  %endif
  1012                                  %ifdef BUILDDISK
  1013                                  ;=======================================================================================================================
  1014                                  ;
  1015                                  ;	File Allocation Tables
  1016                                  ;
  1017                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1018                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1019                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1020                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1021                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1022                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1023                                  ;	the last cluster in the chain.
  1024                                  ;
  1025                                  ;	Every three bytes encode two FAT entries as follows:
  1026                                  ;
  1027                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1028                                  ;
  1029                                  ;=======================================================================================================================
  1030                                  ;-----------------------------------------------------------------------------------------------------------------------
  1031                                  ;
  1032                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1033                                  ;
  1034                                  ;-----------------------------------------------------------------------------------------------------------------------
  1035                                  section			fat1							;first copy of FAT
  1036                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1037                                  			db	005h,060h,000h,	007h,080h,000h
  1038                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1039                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1040                                  			db	011h,020h,001h,	013h,040h,001h
  1041                                  			db	015h,060h,001h,	017h,080h,001h
  1042                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1043                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1044                                  			db	021h,020h,002h,	023h,040h,002h
  1045                                  			db	025h,060h,002h,	027h,080h,002h
  1046                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1047                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1048                                  ;-----------------------------------------------------------------------------------------------------------------------
  1049                                  ;
  1050                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1051                                  ;
  1052                                  ;-----------------------------------------------------------------------------------------------------------------------
  1053                                  section			fat2							;second copy of FAT
  1054                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1055                                  			db	005h,060h,000h,	007h,080h,000h
  1056                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1057                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1058                                  			db	011h,020h,001h,	013h,040h,001h
  1059                                  			db	015h,060h,001h,	017h,080h,001h
  1060                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1061                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1062                                  			db	021h,020h,002h,	023h,040h,002h
  1063                                  			db	025h,060h,002h,	027h,080h,002h
  1064                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1065                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1066                                  ;-----------------------------------------------------------------------------------------------------------------------
  1067                                  ;
  1068                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1069                                  ;
  1070                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1071                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1072                                  ;	copy.
  1073                                  ;
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  section			dir							;diskette directory
  1076                                  			db	"OS      COM"					;file name (must contain spaces)
  1077                                  			db	020h						;attribute (archive bit set)
  1078                                  			times	10 db 0						;unused
  1079                                  			dw	0h						;time
  1080                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1081                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1082                                  			dw	2						;first cluster
  1083                                  			dd	05200h						;file size
  1084                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1085                                  %endif
  1086                                  %ifdef BUILDCOM
  1087                                  ;=======================================================================================================================
  1088                                  ;
  1089                                  ;	OS.COM
  1090                                  ;
  1091                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1092                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1093                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1094                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1095                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1096                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1097                                  ;
  1098                                  ;	Our loader addressability is set up according to the following diagram.
  1099                                  ;
  1100                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1101                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1102                                  ;				|  256 = 100h bytes				|
  1103                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1104                                  ;				|  Boot Sector (vstart=0100h)			|
  1105                                  ;				|  1 sector = 512 = 200h bytes			|
  1106                                  ;			007e00	+-----------------------------------------------+
  1107                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1108                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1109                                  ;				|						|
  1110                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1111                                  ;				|						|
  1112                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1113                                  ;				|  Loader Code					|
  1114                                  ;				|  1 sector = 512 = 200h bytes			|
  1115                                  ;			009200	+-----------------------------------------------+ DS:0300
  1116                                  ;
  1117                                  ;=======================================================================================================================
  1118                                  ;-----------------------------------------------------------------------------------------------------------------------
  1119                                  ;
  1120                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1121                                  ;
  1122                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1123                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1124                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1125                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1126                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1127                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1128                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1129                                  ;	registers.
  1130                                  ;
  1131                                  ;-----------------------------------------------------------------------------------------------------------------------
  1132                                  			cpu	8086						;assume minimal CPU
  1133                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1134                                  			bits	16						;this is 16-bit code
  1135                                  Loader			push	cs						;use the code segment
  1136                                  			pop	ds						;...as our data segment
  1137                                  			push	cs						;use the code segment
  1138                                  			pop	es						;...as our extra segment
  1139                                  ;
  1140                                  ;	Write a message to the console so we know we have our addressability established.
  1141                                  ;
  1142                                  			mov	si,czStartingMsg				;starting message
  1143                                  			call	PutTTYString					;display loader message
  1144                                  ;
  1145                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1146                                  ;
  1147                                  			call	GetCPUType					;AL = cpu type
  1148                                  			mov	si,czCPUErrorMsg				;loader error message
  1149                                  			cmp	al,3						;80386+?
  1150                                  			jb	LoaderExit					;no, exit with error message
  1151                                  			cpu	386						;allow 80386 instructions
  1152                                  			mov	si,czCPUOKMsg					;cpu ok message
  1153                                  			call	PutTTYString					;display message
  1154                                  ;
  1155                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1156                                  ;
  1157                                  			mov	si,0300h					;GDT offset
  1158                                  			mov	ax,cs						;AX:SI = gdt source
  1159                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1160                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1161                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1162                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1163                                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1164                                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1165                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1166                                  			call	PutTTYString					;display message
  1167                                  ;
  1168                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1169                                  ;
  1170                                  			push	EKRNCODESEG					;use kernel code segment ...
  1171                                  			pop	es						;... as target segment
  1172                                  			xor	di,di						;ES:DI = target address
  1173                                  			mov	si,0300h					;DS:SI = source address
  1174                                  			mov	cx,05000h					;CX = kernel size
  1175                                  			cld							;forward strings
  1176                                  			rep	movsb						;copy kernel image
  1177                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1178                                  			call	PutTTYString					;display message
  1179                                  ;
  1180                                  ;	Switch to protected mode.
  1181                                  ;
  1182                                  			xor	si,si						;ES:SI = gdt addr
  1183                                  			mov	ss,si						;protected mode ss
  1184                                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1185                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1186                                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1187                                  			mov	dx,001Fh					;outer delay loop count
  1188                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1189                                  			loop	$						;wait out pending interrupts
  1190                                  			dec	dx						;restore outer loop count
  1191                                  			jnz	.10						;continue outer loop
  1192                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1193                                  ;
  1194                                  ;	Enable hardware and maskable interrupts
  1195                                  ;
  1196                                  			xor	al,al						;enable all registers code
  1197                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1198                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1199                                  			sti							;enable maskable interrupts
  1200                                  ;
  1201                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1202                                  ;
  1203                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1204                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1205                                  			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1206                                  ;-----------------------------------------------------------------------------------------------------------------------
  1207                                  ;
  1208                                  ;	Routine:	LoaderExit
  1209                                  ;
  1210                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1211                                  ;
  1212                                  ;	In:		DS:SI	string address
  1213                                  ;
  1214                                  ;-----------------------------------------------------------------------------------------------------------------------
  1215                                  LoaderExit		call	PutTTYString					;display error message
  1216                                  ;
  1217                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1218                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1219                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1220                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1221                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1222                                  ;
  1223                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1224                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1225                                  			jnz	.40						;exit if key pressed
  1226                                  			sti							;enable maskable interrupts
  1227                                  			hlt							;wait for interrupt
  1228                                  			jmp	.30						;repeat until keypress
  1229                                  ;
  1230                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1231                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1232                                  ;	HLT until the system resets.
  1233                                  ;
  1234                                  .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1235                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1236                                  .50			sti							;enable maskable interrupts
  1237                                  			hlt							;stop until reset, int, nmi
  1238                                  			jmp	.50						;loop until restart kicks in
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240                                  ;
  1241                                  ;	Routine:	GetCPUType
  1242                                  ;
  1243                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1244                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1245                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1246                                  ;
  1247                                  ;	Out:		AX	0 = 808x, v20, etc.
  1248                                  ;				1 = 80186
  1249                                  ;				2 = 80286
  1250                                  ;				3 = 80386
  1251                                  ;
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  GetCPUType		mov	al,1						;AL = 1
  1254                                  			mov	cl,32						;shift count
  1255                                  			shr	al,cl						;try a 32-bit shift
  1256                                  			or	al,al						;did the shift happen?
  1257                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1258                                  			cpu	186
  1259                                  			push	sp						;save stack pointer
  1260                                  			pop	cx						;...into cx
  1261                                  			cmp	cx,sp						;did sp decrement before push?
  1262                                  			jne	.10						;yes, cpu is 80186
  1263                                  			cpu	286
  1264                                  			inc	ax						;AX = 2
  1265                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1266                                  			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1267                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1268                                  			jz	.10						;yes, cpu is 80286
  1269                                  			inc	ax						;AX = 3
  1270                                  .10			ret							;return
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272                                  ;
  1273                                  ;	Routine:	PutTTYString
  1274                                  ;
  1275                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1276                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1277                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1278                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1279                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1280                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1281                                  ;			registers and flags unless used to indicate return status.
  1282                                  ;
  1283                                  ;	In:		DS:SI	address of string
  1284                                  ;
  1285                                  ;-----------------------------------------------------------------------------------------------------------------------
  1286                                  PutTTYString		cld							;forward strings
  1287                                  			lodsb							;load next byte at DS:SI in AL
  1288                                  			test	al,al						;end of string?
  1289                                  			jz	.10						;... yes, exit our loop
  1290                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1291                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1292                                  			jmp	PutTTYString					;repeat until done
  1293                                  .10			ret							;return
  1294                                  ;-----------------------------------------------------------------------------------------------------------------------
  1295                                  ;
  1296                                  ;	Loader Data
  1297                                  ;
  1298                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1299                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1300                                  ;
  1301                                  ;-----------------------------------------------------------------------------------------------------------------------
  1302                                  			align	2
  1303                                  cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1304                                  cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1305                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1306                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1307                                  czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1308                                  			db	"Please press any key to restart the computer.",13,10,0
  1309                                  czCPUOKMsg		db	"CPU OK",13,10,0
  1310                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1311                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1312                                  czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1313                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1314                                  			db	055h,0AAh					;end of sector signature
  1315                                  ;=======================================================================================================================
  1316                                  ;
  1317                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1318                                  ;
  1319                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1320                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1321                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1322                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1323                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1324                                  ;
  1325                                  ;=======================================================================================================================
  1326                                  ;=======================================================================================================================
  1327                                  ;
  1328                                  ;	Kernel Tables
  1329                                  ;
  1330                                  ;=======================================================================================================================
  1331                                  ;-----------------------------------------------------------------------------------------------------------------------
  1332                                  ;
  1333                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1334                                  ;
  1335                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1336                                  ;	first descriptor must be all nulls.
  1337                                  ;
  1338                                  ;	6   5         4         3         2         1         0
  1339                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1340                                  ;	----------------------------------------------------------------
  1341                                  ;	h......hffffmmmma......ab......................bn..............n
  1342                                  ;	00000000			all areas have base addresses below 2^24
  1343                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1344                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1345                                  ;	            1001		present, ring-0, selector
  1346                                  ;
  1347                                  ;	h...h	hi-order base address (bits 24-31)
  1348                                  ;	ffff	flags
  1349                                  ;	mmmm	hi-order limit (bits 16-19)
  1350                                  ;	a...a	access
  1351                                  ;	b...b	lo-order base address (bits 0-23)
  1352                                  ;	n...n	lo-order limit (bits 0-15)
  1353                                  ;
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  section			gdt							;global descriptor table
  1356                                  			dq	0000000000000000h				;00 required null selector
  1357                                  			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1358                                  			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1359                                  			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1360                                  			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1361                                  			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1362                                  			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1363                                  			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1364                                  			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1365                                  			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1366                                  			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1367                                  			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1368                                  			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1369                                  			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1370                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1371                                  ;-----------------------------------------------------------------------------------------------------------------------
  1372                                  ;
  1373                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1374                                  ;
  1375                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1376                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1377                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1378                                  ;
  1379                                  ;	6   5         4         3         2         1         0
  1380                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1381                                  ;	----------------------------------------------------------------
  1382                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1383                                  ;
  1384                                  ;	h...h	high-order offset (bits 16-31)
  1385                                  ;	P	present (0=unused interrupt)
  1386                                  ;	zz	descriptor privilege level
  1387                                  ;	S	storage segment (must be zero for IDT)
  1388                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1389                                  ;	S...S	handling code selector in GDT
  1390                                  ;	l...l	lo-order offset (bits 0-15)
  1391                                  ;
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  section			idt							;interrupt descriptor table
  1394                                  			mint	dividebyzero					;00 divide by zero
  1395                                  			mint	singlestep					;01 single step
  1396                                  			mint	nmi						;02 non-maskable
  1397                                  			mint	break						;03 break
  1398                                  			mint	into						;04 into
  1399                                  			mint	bounds						;05 bounds
  1400                                  			mint	badopcode					;06 bad op code
  1401                                  			mint	nocoproc					;07 no coprocessor
  1402                                  			mint	doublefault					;08 double-fault
  1403                                  			mint	operand						;09 operand
  1404                                  			mint	badtss						;0a bad TSS
  1405                                  			mint	notpresent					;0b not-present
  1406                                  			mint	stacklimit					;0c stack limit
  1407                                  			mint	protection					;0d general protection fault
  1408                                  			mint	int14						;0e (reserved)
  1409                                  			mint	int15						;0f (reserved)
  1410                                  			mint	coproccalc					;10 (reserved)
  1411                                  			mint	int17						;11 (reserved)
  1412                                  			mint	int18						;12 (reserved)
  1413                                  			mint	int19						;13 (reserved)
  1414                                  			mint	int20						;14 (reserved)
  1415                                  			mint	int21						;15 (reserved)
  1416                                  			mint	int22						;16 (reserved)
  1417                                  			mint	int23						;17 (reserved)
  1418                                  			mint	int24						;18 (reserved)
  1419                                  			mint	int25						;19 (reserved)
  1420                                  			mint	int26						;1a (reserved)
  1421                                  			mint	int27						;1b (reserved)
  1422                                  			mint	int28						;1c (reserved)
  1423                                  			mint	int29						;1d (reserved)
  1424                                  			mint	int30						;1e (reserved)
  1425                                  			mint	int31						;1f (reserved)
  1426                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1427                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1428                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1429                                  			mtrap	com2						;23 IRQ3 com2
  1430                                  			mtrap	com1						;24 IRQ4 com1
  1431                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1432                                  			mtrap	diskette					;26 IRQ6 diskette
  1433                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1434                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1435                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1436                                  			mtrap	irq10						;2a IRQA (reserved)
  1437                                  			mtrap	irq11						;2b IRQB (reserved)
  1438                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1439                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1440                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1441                                  			mtrap	irq15						;2f IRQF (reserved)
  1442                                  			mtrap	svc						;30 OS services
  1443                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1444                                  ;=======================================================================================================================
  1445                                  ;
  1446                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1447                                  ;
  1448                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1449                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1450                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1451                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1452                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1453                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1454                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1455                                  ;
  1456                                  ;=======================================================================================================================
  1457                                  section			kernel	vstart=0h					;data offsets relative to 0
  1458                                  			cpu	386						;allow 80386 instructions
  1459                                  			bits	32						;this is 32-bit code
  1460                                  ;=======================================================================================================================
  1461                                  ;
  1462                                  ;	CPU Interrupt Handlers
  1463                                  ;
  1464                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1465                                  ;	of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1466                                  ;
  1467                                  ;=======================================================================================================================
  1468                                  ;-----------------------------------------------------------------------------------------------------------------------
  1469                                  ;
  1470                                  ;	INT0	Divide By Zero
  1471                                  ;
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  			menter	dividebyzero					;divide by zero
  1474                                  			push	0						;store interrupt nbr
  1475                                  			push	czIntDivideByZero				;store message offset
  1476                                  			jmp	ReportInterrupt					;report interrupt
  1477                                  ;-----------------------------------------------------------------------------------------------------------------------
  1478                                  ;
  1479                                  ;	INT1	Single Step
  1480                                  ;
  1481                                  ;-----------------------------------------------------------------------------------------------------------------------
  1482                                  			menter	singlestep					;single step
  1483                                  			push	1						;store interrupt nbr
  1484                                  			push	czIntSingleStep					;store message offset
  1485                                  			jmp	ReportInterrupt					;report interrupt
  1486                                  ;-----------------------------------------------------------------------------------------------------------------------
  1487                                  ;
  1488                                  ;	INT2	Non-Maskable Interrupt
  1489                                  ;
  1490                                  ;-----------------------------------------------------------------------------------------------------------------------
  1491                                  			menter	nmi						;non-maskable
  1492                                  			push	2						;store interrupt nbr
  1493                                  			push	czIntNonMaskable				;store message offset
  1494                                  			jmp	ReportInterrupt					;report interrupt
  1495                                  ;-----------------------------------------------------------------------------------------------------------------------
  1496                                  ;
  1497                                  ;	INT3	Break
  1498                                  ;
  1499                                  ;-----------------------------------------------------------------------------------------------------------------------
  1500                                  			menter	break						;break
  1501                                  			push	3						;store interrupt nbr
  1502                                  			push	czIntBreak					;store message offset
  1503                                  			jmp	ReportInterrupt					;report interrupt
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                  ;
  1506                                  ;	INT4	Into
  1507                                  ;
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509                                  			menter	into						;into
  1510                                  			push	4						;store interrupt nbr
  1511                                  			push	czIntInto					;store message offset
  1512                                  			jmp	ReportInterrupt					;report interrupt
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                  ;
  1515                                  ;	INT5	Bounds
  1516                                  ;
  1517                                  ;-----------------------------------------------------------------------------------------------------------------------
  1518                                  			menter	bounds						;bounds
  1519                                  			push	5						;store interrupt nbr
  1520                                  			push	czIntBounds					;store message offset
  1521                                  			jmp	ReportInterrupt					;report interrupt
  1522                                  ;-----------------------------------------------------------------------------------------------------------------------
  1523                                  ;
  1524                                  ;	INT6	Bad Operation Code
  1525                                  ;
  1526                                  ;-----------------------------------------------------------------------------------------------------------------------
  1527                                  			menter	badopcode					;bad opcode interrupt
  1528                                  			push	6						;store interrupt nbr
  1529                                  			push	czIntBadOpCode					;store message offset
  1530                                  			jmp	ReportInterrupt					;report interrupt
  1531                                  ;-----------------------------------------------------------------------------------------------------------------------
  1532                                  ;
  1533                                  ;	INT7	No Coprocessor
  1534                                  ;
  1535                                  ;-----------------------------------------------------------------------------------------------------------------------
  1536                                  			menter	nocoproc					;no coprocessor interrupt
  1537                                  			push	7						;store interrupt nbr
  1538                                  			push	czIntNoCoprocessor				;store message offset
  1539                                  			jmp	ReportInterrupt					;report interrupt
  1540                                  ;-----------------------------------------------------------------------------------------------------------------------
  1541                                  ;
  1542                                  ;	INT8	Double Fault
  1543                                  ;
  1544                                  ;-----------------------------------------------------------------------------------------------------------------------
  1545                                  			menter	doublefault					;doublefault interrupt
  1546                                  			push	8						;store interrupt nbr
  1547                                  			push	czIntDoubleFault				;store message offset
  1548                                  			jmp	ReportInterrupt					;report interrupt
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  ;
  1551                                  ;	INT9	Operand
  1552                                  ;
  1553                                  ;-----------------------------------------------------------------------------------------------------------------------
  1554                                  			menter	operand						;operand interrupt
  1555                                  			push	9						;store interrupt nbr
  1556                                  			push	czIntOperand					;store message offset
  1557                                  			jmp	ReportInterrupt					;report interrupt
  1558                                  ;-----------------------------------------------------------------------------------------------------------------------
  1559                                  ;
  1560                                  ;	INT10	Bad Task State Segment
  1561                                  ;
  1562                                  ;-----------------------------------------------------------------------------------------------------------------------
  1563                                  			menter	badtss						;bad tss interrupt
  1564                                  			push	10						;store interrupt nbr
  1565                                  			push	czIntBadTSS					;store message offset
  1566                                  			jmp	ReportInterrupt					;report interrupt
  1567                                  ;-----------------------------------------------------------------------------------------------------------------------
  1568                                  ;
  1569                                  ;	INT11	Not Present
  1570                                  ;
  1571                                  ;-----------------------------------------------------------------------------------------------------------------------
  1572                                  			menter	notpresent					;not present interrupt
  1573                                  			push	11						;store interrupt nbr
  1574                                  			push	czIntNotPresent					;store message offset
  1575                                  			jmp	ReportInterrupt					;report interrupt
  1576                                  ;-----------------------------------------------------------------------------------------------------------------------
  1577                                  ;
  1578                                  ;	INT12	Stack Limit
  1579                                  ;
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                  			menter	stacklimit					;stack limit interrupt
  1582                                  			push	12						;store interrupt nbr
  1583                                  			push	czIntStackLimit					;store message offset
  1584                                  			jmp	ReportInterrupt					;report interrupt
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586                                  ;
  1587                                  ;	INT13	General Protection Fault
  1588                                  ;
  1589                                  ;-----------------------------------------------------------------------------------------------------------------------
  1590                                  			menter	protection					;protection fault interrupt
  1591                                  			push	13						;store interrupt nbr
  1592                                  			push	czIntProtection					;store message offset
  1593                                  			jmp	ReportInterrupt					;report interrupt
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                  ;
  1596                                  ;	INT14	Reserved
  1597                                  ;
  1598                                  ;-----------------------------------------------------------------------------------------------------------------------
  1599                                  			menter	int14						;(reserved)
  1600                                  			push	14						;store interrupt nbr
  1601                                  			push	czIntReserved					;store message offset
  1602                                  			jmp	ReportInterrupt					;report interrupt
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                  ;
  1605                                  ;	INT15	Reserved
  1606                                  ;
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                  			menter	int15						;(reserved)
  1609                                  			push	15						;store interrupt nbr
  1610                                  			push	czIntReserved					;store message offset
  1611                                  			jmp	ReportInterrupt					;report interrupt
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                  ;
  1614                                  ;	INT16	Coprocessor Calculation
  1615                                  ;
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  			menter	coproccalc					;coprocessor calculation
  1618                                  			push	16						;store interrupt nbr
  1619                                  			push	czIntCoprocessorCalc				;store message offset
  1620                                  			jmp	ReportInterrupt					;report interrupt
  1621                                  ;-----------------------------------------------------------------------------------------------------------------------
  1622                                  ;
  1623                                  ;	INT17	Reserved
  1624                                  ;
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  			menter	int17						;(reserved)
  1627                                  			push	17						;store interrupt nbr
  1628                                  			push	czIntReserved					;store message offset
  1629                                  			jmp	ReportInterrupt					;report interrupt
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  ;
  1632                                  ;	INT18	Reserved
  1633                                  ;
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  			menter	int18						;(reserved)
  1636                                  			push	18						;store interrupt nbr
  1637                                  			push	czIntReserved					;store message offset
  1638                                  			jmp	ReportInterrupt					;report interrupt
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                  ;
  1641                                  ;	INT19	Reserved
  1642                                  ;
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  			menter	int19						;(reserved)
  1645                                  			push	19						;store interrupt nbr
  1646                                  			push	czIntReserved					;store message offset
  1647                                  			jmp	ReportInterrupt					;report interrupt
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                  ;
  1650                                  ;	INT20	Reserved
  1651                                  ;
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  			menter	int20						;(reserved)
  1654                                  			push	20						;store interrupt nbr
  1655                                  			push	czIntReserved					;store message offset
  1656                                  			jmp	ReportInterrupt					;report interrupt
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;	INT21	Reserved
  1660                                  ;
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  			menter	int21						;(reserved)
  1663                                  			push	21						;store interrupt nbr
  1664                                  			push	czIntReserved					;store message offset
  1665                                  			jmp	ReportInterrupt					;report interrupt
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                  ;
  1668                                  ;	INT22	Reserved
  1669                                  ;
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  			menter	int22						;(reserved)
  1672                                  			push	22						;store interrupt nbr
  1673                                  			push	czIntReserved					;store message offset
  1674                                  			jmp	ReportInterrupt					;report interrupt
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                  ;
  1677                                  ;	INT23	Reserved
  1678                                  ;
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  			menter	int23						;(reserved)
  1681                                  			push	23						;store interrupt nbr
  1682                                  			push	czIntReserved					;store message offset
  1683                                  			jmp	ReportInterrupt					;report interrupt
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                  ;
  1686                                  ;	INT24	Reserved
  1687                                  ;
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  			menter	int24						;(reserved)
  1690                                  			push	24						;store interrupt nbr
  1691                                  			push	czIntReserved					;store message offset
  1692                                  			jmp	ReportInterrupt					;report interrupt
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                  ;
  1695                                  ;	INT25	Reserved
  1696                                  ;
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  			menter	int25						;(reserved)
  1699                                  			push	25						;store interrupt nbr
  1700                                  			push	czIntReserved					;store message offset
  1701                                  			jmp	ReportInterrupt					;report interrupt
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;	INT26	Reserved
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  			menter	int26						;(reserved)
  1708                                  			push	26						;store interrupt nbr
  1709                                  			push	czIntReserved					;store message offset
  1710                                  			jmp	ReportInterrupt					;report interrupt
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                  ;
  1713                                  ;	INT27	Reserved
  1714                                  ;
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  			menter	int27						;(reserved)
  1717                                  			push	27						;store interrupt nbr
  1718                                  			push	czIntReserved					;store message offset
  1719                                  			jmp	ReportInterrupt					;report interrupt
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                  ;
  1722                                  ;	INT28	Reserved
  1723                                  ;
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  			menter	int28						;(reserved)
  1726                                  			push	28						;store interrupt nbr
  1727                                  			push	czIntReserved					;store message offset
  1728                                  			jmp	ReportInterrupt					;report interrupt
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                  ;
  1731                                  ;	INT29	Reserved
  1732                                  ;
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  			menter	int29						;(reserved)
  1735                                  			push	29						;store interrupt nbr
  1736                                  			push	czIntReserved					;store message offset
  1737                                  			jmp	ReportInterrupt					;report interrupt
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                  ;
  1740                                  ;	INT30	Reserved
  1741                                  ;
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  			menter	int30						;(reserved)
  1744                                  			push	30						;store interrupt nbr
  1745                                  			push	czIntReserved					;store message offset
  1746                                  			jmp	ReportInterrupt					;report interrupt
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                  ;
  1749                                  ;	INT31	Reserved
  1750                                  ;
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  			menter	int31						;(reserved)
  1753                                  			push	31						;store interrupt nbr
  1754                                  			push	czIntReserved					;store message offset
  1755                                  			jmp	ReportInterrupt					;report interrupt
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                  ;
  1758                                  ;	Routine:	ReportInterrupt
  1759                                  ;
  1760                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1761                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1762                                  ;
  1763                                  ;	In:		[esp+4]		interrupt number (0-31)			stored by push instruction
  1764                                  ;			[esp+0]		error message address			stored by push instructions
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ReportInterrupt		pop	eax						;error message address
  1768                                  			pop	eax						;interrupt number
  1769                                  			iretd							;return
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                  ;
  1772                                  ;	Processor Interrupt Name Strings
  1773                                  ;
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                  czIntDivideByZero	db	"Division by zero",0
  1776                                  czIntSingleStep		db	"Single step",0
  1777                                  czIntNonMaskable	db	"Non-maskable interrupt",0
  1778                                  czIntBreak		db	"Break",0
  1779                                  czIntInto		db	"Into",0
  1780                                  czIntBounds		db	"Bounds",0
  1781                                  czIntBadOpCode		db	"Bad Operation Code",0
  1782                                  czIntNoCoprocessor	db	"No Coprocessor",0
  1783                                  czIntDoubleFault	db	"Double Fault",0
  1784                                  czIntOperand		db	"Operand",0
  1785                                  czIntBadTSS		db	"Bad Task State Segment",0
  1786                                  czIntNotPresent		db	"Not Present",0
  1787                                  czIntStackLimit		db	"Stack Limit",0
  1788                                  czIntProtection		db	"General Protection Fault",0
  1789                                  czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  1790                                  czIntReserved		db	"Reserved",0
  1791                                  ;=======================================================================================================================
  1792                                  ;
  1793                                  ;	Hardware Device Interupts
  1794                                  ;
  1795                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1796                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1797                                  ;	(BX=2028h).
  1798                                  ;
  1799                                  ;=======================================================================================================================
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;	IRQ0	Clock Tick Interrupt
  1803                                  ;
  1804                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1805                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1806                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1807                                  ;
  1808                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1809                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1810                                  ;
  1811                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1812                                  ;	zero, the floppy disk motors are turned off.
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  			menter	clocktick					;clock tick interrupt
  1816                                  			push	eax						;save modified regs
  1817                                  			push	edx						;
  1818                                  			push	ds						;
  1819                                  ;
  1820                                  ;	Update the clock tick count and the elapsed days as needed
  1821                                  ;
  1822                                  			push	ESELDAT						;load OS data selector ...
  1823                                  			pop	ds						;... into data segment register
  1824                                  			mov	eax,[wdClockTicks]				;eax = clock ticks
  1825                                  			inc	eax						;increment clock ticks
  1826                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1827                                  			jb	irq0.10						;no, skip ahead
  1828                                  			inc	byte [wbClockDays]				;increment clock days
  1829                                  			xor	eax,eax						;reset clock ticks
  1830                                  irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  1831                                  ;
  1832                                  ;	Decrement floppy disk motor timeout
  1833                                  ;
  1834                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1835                                  			je	irq0.20						;yes, skip ahead
  1836                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1837                                  			jnz	irq0.20						;skip ahead if non-zero
  1838                                  ;
  1839                                  ;	Turn off the floppy disk motor if appropriate
  1840                                  ;
  1841                                  			sti							;enable maskable interrupts
  1842                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1843                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1844                                  			in	al,dx						;FDC main status byte
  1845                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1846                                  			jnz	irq0.15						;wait while busy
  1847                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1848                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1849                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1850                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1851                                  			out	dx,al						;turn motor off
  1852                                  ;
  1853                                  ;	Signal the end of the hardware interrupt
  1854                                  ;
  1855                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1856                                  ;
  1857                                  ;	Restore and return
  1858                                  ;
  1859                                  			pop	ds						;restore modified regs
  1860                                  			pop	edx						;
  1861                                  			pop	eax						;
  1862                                  			iretd							;return
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;	IRQ1	Keyboard Interrupt
  1866                                  ;
  1867                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1868                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1869                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1870                                  ;	ALL modified registers upon return.
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  			menter	keyboard					;keyboard interrrupt
  1874                                  			push	eax						;save non-volatile regs
  1875                                  			push	ebx						;
  1876                                  			push	ecx						;
  1877                                  			push	esi						;
  1878                                  			push	ds						;
  1879                                  			push	ESELDAT						;load OS data selector ...
  1880                                  			pop	ds						;... into data segment register
  1881                                  			xor	al,al						;zero
  1882                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1883                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1884                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1885                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1886                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1887                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1888                                  			mov	al,' '						;space
  1889                                  			mov	[wbConsoleChar],al				;set character to space
  1890                                  			mov	al,EKEYFTIMEOUT					;controller timeout flag
  1891                                  			not	al						;controller timeout mask
  1892                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1893                                  			mov	bl,[wbConsoleShift]				;shift flags
  1894                                  			mov	bh,[wbConsoleLock]				;lock flags
  1895                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1896                                  			jz	irq1.140					;yes, skip ahead
  1897                                  			in	al,EKEYBPORTDATA				;read scan code 0
  1898                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1899                                  			mov	ah,al						;copy scan code 0
  1900                                  			mov	al,EKEYFSHIFTLEFT				;left shift flag
  1901                                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  1902                                  			je	irq1.30						;yes, set flag
  1903                                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  1904                                  			je	irq1.40						;yes, reset flag
  1905                                  			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  1906                                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  1907                                  			je	irq1.30						;yes, set flag
  1908                                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  1909                                  			je	irq1.40						;yes, reset flag
  1910                                  			mov	al,EKEYFCTRLLEFT				;left control flag
  1911                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1912                                  			je	irq1.30						;yes, set flag
  1913                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1914                                  			je	irq1.40						;yes, reset flag
  1915                                  			mov	al,EKEYFALTLEFT					;left alt flag
  1916                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1917                                  			je	irq1.30						;yes, set flag
  1918                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1919                                  			je	irq1.40						;yes, reset flag
  1920                                  			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  1921                                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  1922                                  			je	irq1.50						;yes, toggle lamps and flags
  1923                                  			mov	al,EKEYFLOCKNUM					;num-lock flag
  1924                                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  1925                                  			je	irq1.50						;yes, toggle lamps and flags
  1926                                  			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  1927                                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  1928                                  			je	irq1.50						;yes, toggle lamps and flags
  1929                                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  1930                                  			jne	irq1.70 					;no, skip ahead
  1931                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1932                                  			jz	irq1.140					;yes, skip ahead
  1933                                  			in	al,EKEYBPORTDATA				;read scan code 1
  1934                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1935                                  			mov	ah,al						;copy scan code 1
  1936                                  			mov	al,EKEYFCTRLRIGHT				;right control flag
  1937                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1938                                  			je	irq1.30						;yes, set flag
  1939                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1940                                  			je	irq1.40						;yes, reset flag
  1941                                  			mov	al,EKEYFALTRIGHT				;right alt flag
  1942                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1943                                  			je	irq1.30						;yes, set flag
  1944                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1945                                  			je	irq1.40						;yes, reset flag
  1946                                  			cmp	ah,EKEYBSLASH					;slash down code?
  1947                                  			je	irq1.80						;yes, skip ahead
  1948                                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  1949                                  			je	irq1.80						;yes, skip ahead
  1950                                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  1951                                  			je	irq1.10						;yes, continue
  1952                                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  1953                                  			jne	irq1.20						;no, skip ahead
  1954                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1955                                  			jz	irq1.140					;yes, skip ahead
  1956                                  			in	al,EKEYBPORTDATA				;read scan code 2
  1957                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1958                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1959                                  			jz	irq1.140					;yes, skip ahead
  1960                                  			in	al,EKEYBPORTDATA				;read scan code 3
  1961                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1962                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1963                                  irq1.30			or	bl,al						;set shift flag
  1964                                  			jmp	irq1.60						;skip ahead
  1965                                  irq1.40			not	al						;convert flag to mask
  1966                                  			and	bl,al						;reset shift flag
  1967                                  			jmp	irq1.60						;skip ahead
  1968                                  irq1.50			xor	bh,al						;toggle lock flag
  1969                                  			call	SetKeyboardLamps				;update keyboard lamps
  1970                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1971                                  			mov	[wbConsoleLock],bh				;save lock flags
  1972                                  			call	PutConsoleOIAShift				;update OIA indicators
  1973                                  			jmp	irq1.150					;finish keyboard handling
  1974                                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  1975                                  			jne	irq1.80						;no continue
  1976                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1977                                  			jz	irq1.140					;yes, skip ahead
  1978                                  			in	al,EKEYBPORTDATA				;read scan code 1
  1979                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1980                                  			mov	ah,al						;copy scan code 1
  1981                                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  1982                                  			jne	irq1.150					;no, finish keyboard handling
  1983                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1984                                  			jz	irq1.140					;yes, skip ahead
  1985                                  			in	al,EKEYBPORTDATA				;read scan code 2
  1986                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1987                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1988                                  			jz	irq1.140					;yes, skip ahead
  1989                                  			in	al,EKEYBPORTDATA				;read scan code 3
  1990                                  			mov	[wbConsoleScan3],al				;save scan code 3
  1991                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1992                                  			jz	irq1.140					;yes, skip ahead
  1993                                  			in	al,EKEYBPORTDATA				;read scan code 4
  1994                                  			mov	[wbConsoleScan4],al				;save scan code 4
  1995                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1996                                  			jz	irq1.140					;yes, skip ahead
  1997                                  			in	al,EKEYBPORTDATA				;read scan code 5
  1998                                  			mov	[wbConsoleScan5],al				;save scan code 5
  1999                                  			jmp	irq1.150					;continue
  2000                                  irq1.80			xor	al,al						;assume no ASCII translation
  2001                                  			test	ah,EKEYBUP					;release code?
  2002                                  			jnz	irq1.130					;yes, skip ahead
  2003                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  2004                                  			test	bl,EKEYFSHIFT					;either shift key down?
  2005                                  			jz	irq1.90						;no, skip ahead
  2006                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  2007                                  irq1.90			movzx	ecx,ah						;scan code offset
  2008                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  2009                                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2010                                  			jz	irq1.100					;no skip ahead
  2011                                  			mov	cl,al						;copy ASCII code
  2012                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2013                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2014                                  			jb	irq1.100					;yes, skip ahead
  2015                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2016                                  			ja	irq1.100					;yes, skip ahead
  2017                                  			xor	al,EASCIICASE					;switch case
  2018                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2019                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  2020                                  irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2021                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  2022                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  2023                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2024                                  			pop	ds						;restore non-volatile regs
  2025                                  			pop	esi						;
  2026                                  			pop	ecx						;
  2027                                  			pop	ebx						;
  2028                                  			pop	eax						;
  2029                                  			iretd							;return
  2030                                  ;-----------------------------------------------------------------------------------------------------------------------
  2031                                  ;	Scan-Code to ASCII Translation Tables
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2034                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2035                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2036                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2037                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2038                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2039                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2040                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2041                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2042                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2043                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2044                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2045                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2046                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2047                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2048                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2049                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2050                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2051                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2052                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2053                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2054                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2055                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2056                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2057                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2058                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2059                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2060                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2061                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2062                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2063                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2064                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2065                                  ;-----------------------------------------------------------------------------------------------------------------------
  2066                                  ;
  2067                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2068                                  ;
  2069                                  ;-----------------------------------------------------------------------------------------------------------------------
  2070                                  			menter	iochannel					;secondary 8259A cascade
  2071                                  			push	eax						;save modified regs
  2072                                  			jmp	hwint						;end interrupt and return
  2073                                  ;-----------------------------------------------------------------------------------------------------------------------
  2074                                  ;
  2075                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2076                                  ;
  2077                                  ;-----------------------------------------------------------------------------------------------------------------------
  2078                                  			menter	com2						;serial port 2 interrupt
  2079                                  			push	eax						;save modified regs
  2080                                  			jmp	hwint						;end interrupt and return
  2081                                  ;-----------------------------------------------------------------------------------------------------------------------
  2082                                  ;
  2083                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2084                                  ;
  2085                                  ;-----------------------------------------------------------------------------------------------------------------------
  2086                                  			menter	com1						;serial port 1 interrupt
  2087                                  			push	eax						;save modified regs
  2088                                  			jmp	hwint						;end interrupt and return
  2089                                  ;-----------------------------------------------------------------------------------------------------------------------
  2090                                  ;
  2091                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2092                                  ;
  2093                                  ;-----------------------------------------------------------------------------------------------------------------------
  2094                                  			menter	lpt2						;parallel port 2 interrupt
  2095                                  			push	eax						;save modified regs
  2096                                  			jmp	hwint						;end interrupt and return
  2097                                  ;-----------------------------------------------------------------------------------------------------------------------
  2098                                  ;
  2099                                  ;	IRQ6	Diskette Hardware Interrupt
  2100                                  ;
  2101                                  ;-----------------------------------------------------------------------------------------------------------------------
  2102                                  			menter	diskette					;floppy disk interrupt
  2103                                  			push	eax						;save non-volatile regs
  2104                                  			push	ds						;
  2105                                  			push	ESELDAT						;load OS data selector ...
  2106                                  			pop	ds						;... into DS register
  2107                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2108                                  			or	al,10000000b					;set IRQ flag
  2109                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  2110                                  			pop	ds						;restore non-volatile regs
  2111                                  			jmp	hwint						;end primary PIC interrupt
  2112                                  ;-----------------------------------------------------------------------------------------------------------------------
  2113                                  ;
  2114                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2115                                  ;
  2116                                  ;-----------------------------------------------------------------------------------------------------------------------
  2117                                  			menter	lpt1						;parallel port 1 interrupt
  2118                                  			push	eax						;save modified regs
  2119                                  			jmp	hwint						;end interrupt and return
  2120                                  ;-----------------------------------------------------------------------------------------------------------------------
  2121                                  ;
  2122                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2123                                  ;
  2124                                  ;-----------------------------------------------------------------------------------------------------------------------
  2125                                  			menter	rtclock						;real-time clock interrupt
  2126                                  			push	eax						;save modified regs
  2127                                  			jmp	hwwint						;end interrupt and return
  2128                                  ;-----------------------------------------------------------------------------------------------------------------------
  2129                                  ;
  2130                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2131                                  ;
  2132                                  ;-----------------------------------------------------------------------------------------------------------------------
  2133                                  			menter	retrace						;CGA vertical retrace interrupt
  2134                                  			push	eax						;save modified regs
  2135                                  			jmp	hwwint						;end interrupt and return
  2136                                  ;-----------------------------------------------------------------------------------------------------------------------
  2137                                  ;
  2138                                  ;	IRQ10	Reserved Hardware Interrupt
  2139                                  ;
  2140                                  ;-----------------------------------------------------------------------------------------------------------------------
  2141                                  			menter	irq10						;reserved
  2142                                  			push	eax						;save modified regs
  2143                                  			jmp	hwwint						;end interrupt and return
  2144                                  ;-----------------------------------------------------------------------------------------------------------------------
  2145                                  ;
  2146                                  ;	IRQ11	Reserved Hardware Interrupt
  2147                                  ;
  2148                                  ;-----------------------------------------------------------------------------------------------------------------------
  2149                                  			menter	irq11						;reserved
  2150                                  			push	eax						;save modified regs
  2151                                  			jmp	hwwint						;end interrupt and return
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153                                  ;
  2154                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2155                                  ;
  2156                                  ;-----------------------------------------------------------------------------------------------------------------------
  2157                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2158                                  			push	eax						;save modified regs
  2159                                  			jmp	hwwint						;end interrupt and return
  2160                                  ;-----------------------------------------------------------------------------------------------------------------------
  2161                                  ;
  2162                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2163                                  ;
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                  			menter	coprocessor					;coprocessor interrupt
  2166                                  			push	eax						;save modified regs
  2167                                  			jmp	hwwint						;end interrupt and return
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169                                  ;
  2170                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2171                                  ;
  2172                                  ;-----------------------------------------------------------------------------------------------------------------------
  2173                                  			menter	fixeddisk					;fixed disk interrupt
  2174                                  			push	eax						;save modified regs
  2175                                  			jmp	hwwint						;end interrupt and return
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  ;
  2178                                  ;	IRQ15	Reserved Hardware Interrupt
  2179                                  ;
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                  			menter	irq15						;reserved
  2182                                  			push	eax						;save modified regs
  2183                                  			jmp	hwwint						;end interrupt and return
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                  ;
  2186                                  ;	Exit from hardware interrupt
  2187                                  ;
  2188                                  ;-----------------------------------------------------------------------------------------------------------------------
  2189                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2190                                  			jmp	hwint90						;skip ahead
  2191                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2192                                  hwint90			pop	eax						;restore modified regs
  2193                                  			iretd							;return from interrupt
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;	INT 30h Operating System Software Service Interrupt
  2197                                  ;
  2198                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2199                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2200                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2201                                  ;	the entry address of the specific function from a table.
  2202                                  ;
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  			menter	svc
  2205                                  			cmp	al,maxtsvc					;is our function out of range?
  2206                                  			jae	svc90						;yes, skip ahead
  2207                                  			movzx	eax,al						;function
  2208                                  			shl	eax,2						;offset into table
  2209                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2210                                  svc90			iretd							;return from interrupt
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                  ;
  2213                                  ;	Service Request Table
  2214                                  ;
  2215                                  ;
  2216                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2220                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2221                                  			tsvce	PutConsoleString				;tty output asciiz string
  2222                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                  ;
  2225                                  ;	Service Request Macros
  2226                                  ;
  2227                                  ;	These macros provide positional parameterization of service request calls.
  2228                                  ;
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230                                  %macro			clearConsoleScreen 0
  2231                                  			mov	al,eClearConsoleScreen				;function code
  2232                                  			int	_svc						;invoke OS service
  2233                                  %endmacro
  2234                                  %macro			placeCursor 0
  2235                                  			mov	al,ePlaceCursor					;function code
  2236                                  			int	_svc						;invoke OS service
  2237                                  %endmacro
  2238                                  %macro			putConsoleString 1
  2239                                  			mov	edx,%1						;string address
  2240                                  			mov	al,ePutConsoleString				;function code
  2241                                  			int	_svc						;invoke OS service
  2242                                  %endmacro
  2243                                  ;=======================================================================================================================
  2244                                  ;
  2245                                  ;	Kernel Function Library
  2246                                  ;
  2247                                  ;=======================================================================================================================
  2248                                  ;=======================================================================================================================
  2249                                  ;
  2250                                  ;	Console Helper Routines
  2251                                  ;
  2252                                  ;	PutConsoleString
  2253                                  ;	NextConsoleColumn
  2254                                  ;	FirstConsoleColumn
  2255                                  ;	NextConsoleRow
  2256                                  ;	PutConsoleChar
  2257                                  ;	PutConsoleOIAShift
  2258                                  ;	PutConsoleOIAChar
  2259                                  ;	PutConsoleHexByte
  2260                                  ;
  2261                                  ;=======================================================================================================================
  2262                                  ;-----------------------------------------------------------------------------------------------------------------------
  2263                                  ;
  2264                                  ;	Routine:	PutConsoleString
  2265                                  ;
  2266                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2267                                  ;			console position as needed.
  2268                                  ;
  2269                                  ;	In:		EDX	source address
  2270                                  ;			DS	OS data selector
  2271                                  ;
  2272                                  ;-----------------------------------------------------------------------------------------------------------------------
  2273                                  PutConsoleString	push	esi						;save non-volatile regs
  2274                                  			mov	esi,edx						;source address
  2275                                  			cld							;forward strings
  2276                                  .10			lodsb							;ASCII character
  2277                                  			or	al,al						;end of string?
  2278                                  			jz	.40						;yes, skip ahead
  2279                                  			cmp	al,EASCIIRETURN					;carriage return?
  2280                                  			jne	.20						;no, skip ahead
  2281                                  			call	FirstConsoleColumn				;move to start of row
  2282                                  			jmp	.10						;next character
  2283                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2284                                  			jne	.30						;no, skip ahead
  2285                                  			call	NextConsoleRow					;move to next row
  2286                                  			jmp	.10						;next character
  2287                                  .30			call	PutConsoleChar					;output character to console
  2288                                  			call	NextConsoleColumn				;advance to next column
  2289                                  			jmp	.10						;next character
  2290                                  .40			pop	esi						;restore non-volatile regs
  2291                                  			ret							;return
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                  ;
  2294                                  ;	Routine:	NextConsoleColumn
  2295                                  ;
  2296                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2297                                  ;			incremented if the end of the current row is reached.
  2298                                  ;
  2299                                  ;	In:		DS	OS data selector
  2300                                  ;
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2303                                  			inc	al						;increment column
  2304                                  			mov	[wbConsoleColumn],al				;save column
  2305                                  			cmp	al,ECONCOLS					;end of row?
  2306                                  			jb	.10						;no, skip ahead
  2307                                  			call	FirstConsoleColumn				;reset column to start of row
  2308                                  			call	NextConsoleRow					;line feed to next row
  2309                                  .10			ret							;return
  2310                                  ;-----------------------------------------------------------------------------------------------------------------------
  2311                                  ;
  2312                                  ;	Routine:	FirstConsoleColumn
  2313                                  ;
  2314                                  ;	Description:	This routine resets the console column to start of the row.
  2315                                  ;
  2316                                  ;	In:		DS	OS data selector
  2317                                  ;
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319                                  FirstConsoleColumn	xor	al,al						;zero column
  2320                                  			mov	[wbConsoleColumn],al				;save column
  2321                                  			ret							;return
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323                                  ;
  2324                                  ;	Routine:	NextConsoleRow
  2325                                  ;
  2326                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2327                                  ;
  2328                                  ;	In:		DS	OS data selector
  2329                                  ;
  2330                                  ;-----------------------------------------------------------------------------------------------------------------------
  2331                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2332                                  			inc	al						;increment row
  2333                                  			mov	[wbConsoleRow],al				;save row
  2334                                  			cmp	al,ECONROWS					;end of screen?
  2335                                  			jb	.10						;no, skip ahead
  2336                                  			call	ScrollConsoleRow				;scroll up one row
  2337                                  			mov	al,[wbConsoleRow]				;row
  2338                                  			dec	al						;decrement row
  2339                                  			mov	[wbConsoleRow],al				;save row
  2340                                  .10			ret							;return
  2341                                  ;-----------------------------------------------------------------------------------------------------------------------
  2342                                  ;
  2343                                  ;	Routine:	PutConsoleChar
  2344                                  ;
  2345                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2346                                  ;
  2347                                  ;	In:		AL	ASCII character
  2348                                  ;			DS	OS data selector
  2349                                  ;
  2350                                  ;-----------------------------------------------------------------------------------------------------------------------
  2351                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2352                                  			push	es						;
  2353                                  			push	ESELCGA						;load CGA selector ...
  2354                                  			pop	es						;... into extra segment reg
  2355                                  			mov	cl,[wbConsoleColumn]				;column
  2356                                  			mov	ch,[wbConsoleRow]				;row
  2357                                  			call	SetConsoleChar					;put character at row, column
  2358                                  			pop	es						;restore non-volatile regs
  2359                                  			pop	ecx						;
  2360                                  			ret							;return
  2361                                  ;-----------------------------------------------------------------------------------------------------------------------
  2362                                  ;
  2363                                  ;	Routine:	PutConsoleOIAShift
  2364                                  ;
  2365                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2366                                  ;
  2367                                  ;	In:		BL	shift flags
  2368                                  ;			BH	lock flags
  2369                                  ;			DS	OS data selector
  2370                                  ;
  2371                                  ;-----------------------------------------------------------------------------------------------------------------------
  2372                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2373                                  			push	es						;
  2374                                  			push	ESELCGA						;load CGA selector ...
  2375                                  			pop	es						;... into ES register
  2376                                  			mov	ch,ECONOIAROW					;OIA row
  2377                                  			mov	al,EASCIISPACE					;space is default character
  2378                                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  2379                                  			jz	.10						;no, skip ahead
  2380                                  			mov	al,'S'						;yes, indicate with 'S'
  2381                                  .10			mov	cl,14						;indicator column
  2382                                  			call	SetConsoleChar					;display ASCII character
  2383                                  			mov	al,EASCIISPACE					;ASCII space
  2384                                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  2385                                  			jz	.20						;no, skip ahead
  2386                                  			mov	al,'S'						;yes, indicate with 'S'
  2387                                  .20			mov	cl,64						;indicator column
  2388                                  			call	SetConsoleChar					;display ASCII character
  2389                                  			mov	al,EASCIISPACE					;ASCII space
  2390                                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  2391                                  			jz	.30						;no, skip ahead
  2392                                  			mov	al,'C'						;yes, indicate with 'C'
  2393                                  .30			mov	cl,15						;indicator column
  2394                                  			call	SetConsoleChar					;display ASCII character
  2395                                  			mov	al,EASCIISPACE					;ASCII space
  2396                                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  2397                                  			jz	.40						;no, skip ahead
  2398                                  			mov	al,'C'						;yes, indicate with 'C'
  2399                                  .40			mov	cl,63						;indicator column
  2400                                  			call	SetConsoleChar					;display ASCII character
  2401                                  			mov	al,EASCIISPACE					;ASCII space
  2402                                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  2403                                  			jz	.50						;no, skip ahead
  2404                                  			mov	al,'A'						;yes, indicate with 'A'
  2405                                  .50			mov	cl,16						;indicator column
  2406                                  			call	SetConsoleChar					;display ASCII character
  2407                                  			mov	al,EASCIISPACE					;ASCII space
  2408                                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  2409                                  			jz	.60						;no, skip ahead
  2410                                  			mov	al,'A'						;yes, indicate with 'A'
  2411                                  .60			mov	cl,62						;indicator column
  2412                                  			call	SetConsoleChar					;display ASCII character
  2413                                  			mov	al,EASCIISPACE					;ASCII space
  2414                                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  2415                                  			jz	.70						;no, skip ahead
  2416                                  			mov	al,'C'						;yes, indicate with 'C'
  2417                                  .70			mov	cl,78						;indicator column
  2418                                  			call	SetConsoleChar					;display ASCII character
  2419                                  			mov	al,EASCIISPACE					;ASCII space
  2420                                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  2421                                  			jz	.80						;no, skip ahead
  2422                                  			mov	al,'N'						;yes, indicate with 'N'
  2423                                  .80			mov	cl,77						;indicator column
  2424                                  			call	SetConsoleChar					;display ASCII character
  2425                                  			mov	al,EASCIISPACE					;ASCII space
  2426                                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  2427                                  			jz	.90						;no, skip ahead
  2428                                  			mov	al,'S'						;yes, indicate with 'S'
  2429                                  .90			mov	cl,76						;indicator column
  2430                                  			call	SetConsoleChar					;display ASCII character
  2431                                  			pop	es						;restore non-volatile regs
  2432                                  			pop	ecx						;
  2433                                  			ret							;return
  2434                                  ;-----------------------------------------------------------------------------------------------------------------------
  2435                                  ;
  2436                                  ;	Routine:	PutConsoleOIAChar
  2437                                  ;
  2438                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2439                                  ;
  2440                                  ;	In:		DS	OS data selector
  2441                                  ;
  2442                                  ;-----------------------------------------------------------------------------------------------------------------------
  2443                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2444                                  			push	ecx						;
  2445                                  			push	esi						;
  2446                                  			push	ds						;
  2447                                  			push	es						;
  2448                                  			push	ESELDAT						;load OS data selector ...
  2449                                  			pop	ds						;... into data segment register
  2450                                  			push	ESELCGA						;load CGA selector ...
  2451                                  			pop	es						;... into extra segment register
  2452                                  			mov	esi,wbConsoleScan0				;scan codes address
  2453                                  			mov	bh,ECONOIAROW					;OIA row
  2454                                  			mov	bl,0						;starting column
  2455                                  			mov	ecx,6						;maximum scan codes
  2456                                  .10			push	ecx						;save remaining count
  2457                                  			mov	ecx,ebx						;row, column
  2458                                  			lodsb							;read scan code
  2459                                  			or	al,al						;scan code present?
  2460                                  			jz	.20						;no, skip ahead
  2461                                  			call	PutConsoleHexByte				;display scan code
  2462                                  			jmp	.30						;continue
  2463                                  .20			mov	al,' '						;ASCII space
  2464                                  			call	SetConsoleChar					;display space
  2465                                  			mov	al,' '						;ASCII space
  2466                                  			call	SetConsoleChar					;display space
  2467                                  .30			add	bl,2						;next column (+2)
  2468                                  			pop	ecx						;restore remaining
  2469                                  			loop	.10						;next code
  2470                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2471                                  			cmp	al,32						;printable? (lower-bounds)
  2472                                  			jb	.40						;no, skip ahead
  2473                                  			cmp	al,126						;printable? (upper-bounds)
  2474                                  			ja	.40						;no, skip ahead
  2475                                  			mov	ch,bh						;OIA row
  2476                                  			mov	cl,40						;character display column
  2477                                  			call	SetConsoleChar					;display ASCII character
  2478                                  .40			pop	es						;restore non-volatile regs
  2479                                  			pop	ds						;
  2480                                  			pop	esi						;
  2481                                  			pop	ecx						;
  2482                                  			pop	ebx						;
  2483                                  			ret							;return
  2484                                  ;-----------------------------------------------------------------------------------------------------------------------
  2485                                  ;
  2486                                  ;	Routine:	PutConsoleHexByte
  2487                                  ;
  2488                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  2489                                  ;
  2490                                  ;	In:		AL	byte value
  2491                                  ;			CL	column
  2492                                  ;			CH	row
  2493                                  ;			DS	OS data selector
  2494                                  ;			ES	CGA selector
  2495                                  ;
  2496                                  ;-----------------------------------------------------------------------------------------------------------------------
  2497                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  2498                                  			mov	bl,al						;save byte value
  2499                                  			shr	al,4						;hi-order nybble
  2500                                  			or	al,030h						;apply ASCII zone
  2501                                  			cmp	al,03ah						;numeric?
  2502                                  			jb	.10						;yes, skip ahead
  2503                                  			add	al,7						;add ASCII offset for alpha
  2504                                  .10			call	SetConsoleChar					;display ASCII character
  2505                                  			mov	al,bl						;byte value
  2506                                  			and	al,0fh						;lo-order nybble
  2507                                  			or	al,30h						;apply ASCII zone
  2508                                  			cmp	al,03ah						;numeric?
  2509                                  			jb	.20						;yes, skip ahead
  2510                                  			add	al,7						;add ASCII offset for alpha
  2511                                  .20			call	SetConsoleChar					;display ASCII character
  2512                                  			pop	ebx						;restore non-volatile regs
  2513                                  			ret							;return
  2514                                  ;=======================================================================================================================
  2515                                  ;
  2516                                  ;	Memory-Mapped Video Routines
  2517                                  ;
  2518                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2519                                  ;
  2520                                  ;	ClearConsoleScreen
  2521                                  ;	ScrollConsoleRow
  2522                                  ;	SetConsoleChar
  2523                                  ;
  2524                                  ;=======================================================================================================================
  2525                                  ;-----------------------------------------------------------------------------------------------------------------------
  2526                                  ;
  2527                                  ;	Routine:	ClearConsoleScreen
  2528                                  ;
  2529                                  ;	Description:	This routine clears the console (CGA) screen.
  2530                                  ;
  2531                                  ;-----------------------------------------------------------------------------------------------------------------------
  2532                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  2533                                  			push	edi						;
  2534                                  			push	ds						;
  2535                                  			push	es						;
  2536                                  			push	ESELDAT						;load OS Data selector ...
  2537                                  			pop	ds						;... into DS register
  2538                                  			push	ESELCGA						;load CGA selector ...
  2539                                  			pop	es						;... into ES register
  2540                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2541                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2542                                  			xor	edi,edi						;target offset
  2543                                  			cld							;forward strings
  2544                                  			rep	stosd						;reset screen body
  2545                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2546                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2547                                  			rep	stosd						;reset OIA line
  2548                                  			xor	al,al						;zero register
  2549                                  			mov	[wbConsoleRow],al				;reset console row
  2550                                  			mov	[wbConsoleColumn],al				;reset console column
  2551                                  			call	PlaceCursor					;place cursor at current position
  2552                                  			pop	es						;restore non-volatile regs
  2553                                  			pop	ds						;
  2554                                  			pop	edi						;
  2555                                  			pop	ecx						;
  2556                                  			ret							;return
  2557                                  ;-----------------------------------------------------------------------------------------------------------------------
  2558                                  ;
  2559                                  ;	Routine:	ScrollConsoleRow
  2560                                  ;
  2561                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2562                                  ;
  2563                                  ;-----------------------------------------------------------------------------------------------------------------------
  2564                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  2565                                  			push	esi						;
  2566                                  			push	edi						;
  2567                                  			push	ds						;
  2568                                  			push	es						;
  2569                                  			push	ESELCGA						;load CGA video selector ...
  2570                                  			pop	ds						;... into DS
  2571                                  			push	ESELCGA						;load CGA video selector ...
  2572                                  			pop	es						;... into ES
  2573                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2574                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2575                                  			xor	edi,edi						;edi = target (line 1)
  2576                                  			cld							;forward strings
  2577                                  			rep	movsd						;move 24 lines up
  2578                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2579                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2580                                  			rep	stosd						;clear bottom row
  2581                                  			pop	es						;restore non-volatile regs
  2582                                  			pop	ds						;
  2583                                  			pop	edi						;
  2584                                  			pop	esi						;
  2585                                  			pop	ecx						;
  2586                                  			ret							;return
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  ;
  2589                                  ;	Routine:	SetConsoleChar
  2590                                  ;
  2591                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2592                                  ;
  2593                                  ;	In:		AL	ASCII character
  2594                                  ;			CL	column
  2595                                  ;			CH	row
  2596                                  ;			ES	CGA selector
  2597                                  ;
  2598                                  ;	Out:		EAX	last target address written (ES:)
  2599                                  ;			CL	column + 1
  2600                                  ;
  2601                                  ;-----------------------------------------------------------------------------------------------------------------------
  2602                                  SetConsoleChar		mov	dl,al						;ASCII character
  2603                                  			movzx	eax,ch						;row
  2604                                  			mov	ah,ECONCOLS					;cols/row
  2605                                  			mul	ah						;row * cols/row
  2606                                  			add	al,cl						;add column
  2607                                  			adc	ah,0						;handle carry
  2608                                  			shl	eax,1						;screen offset
  2609                                  			mov	[es:eax],dl					;store character
  2610                                  			inc	cl						;next column
  2611                                  			ret							;return
  2612                                  ;=======================================================================================================================
  2613                                  ;
  2614                                  ;	Input/Output Routines
  2615                                  ;
  2616                                  ;	These routines read and/or write directly to ports.
  2617                                  ;
  2618                                  ;	PlaceCursor
  2619                                  ;	PutPrimaryEndOfInt
  2620                                  ;	PutSecondaryEndOfInt
  2621                                  ;	SetKeyboardLamps
  2622                                  ;	WaitForKeyInBuffer
  2623                                  ;	WaitForKeyOutBuffer
  2624                                  ;
  2625                                  ;=======================================================================================================================
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  ;
  2628                                  ;	Routine:	PlaceCursor
  2629                                  ;
  2630                                  ;	Description:	This routine positions the cursor on the console.
  2631                                  ;
  2632                                  ;	In:		DS	OS data selector
  2633                                  ;
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635                                  PlaceCursor		push	ecx						;save non-volatile regs
  2636                                  			mov	al,[wbConsoleRow]				;al = row
  2637                                  			mov	ah,ECONCOLS					;ah = cols/row
  2638                                  			mul	ah						;row offset
  2639                                  			add	al,[wbConsoleColumn]				;add column
  2640                                  			adc	ah,0						;add overflow
  2641                                  			mov	ecx,eax						;screen offset
  2642                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2643                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2644                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2645                                  			out	dx,al						;select register
  2646                                  			inc	edx						;data port
  2647                                  			mov	al,ch						;hi-order cursor loc
  2648                                  			out	dx,al						;store hi-order loc
  2649                                  			dec	edx						;register select port
  2650                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2651                                  			out	dx,al						;select register
  2652                                  			inc	edx						;data port
  2653                                  			mov	al,cl						;lo-order cursor loc
  2654                                  			out	dx,al						;store lo-order loc
  2655                                  			pop	ecx						;restore non-volatile regs
  2656                                  			ret							;return
  2657                                  ;-----------------------------------------------------------------------------------------------------------------------
  2658                                  ;
  2659                                  ;	Routine:	PutPrimaryEndOfInt
  2660                                  ;
  2661                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2662                                  ;
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2665                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2666                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  2667                                  			ret							;return
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;	Routine:	PutSecondaryEndOfInt
  2671                                  ;
  2672                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2673                                  ;
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2676                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2677                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2678                                  			ret							;return
  2679                                  ;-----------------------------------------------------------------------------------------------------------------------
  2680                                  ;
  2681                                  ;	Routine:	SetKeyboardLamps
  2682                                  ;
  2683                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2684                                  ;
  2685                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2689                                  			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  2690                                  			out	EKEYBPORTDATA,al				;send command to 8042
  2691                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2692                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  2693                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  2694                                  			mov	al,bh						;set/reset lamps value
  2695                                  			out	EKEYBPORTDATA,al				;send lamps value
  2696                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2697                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  2698                                  			ret							;return
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                  ;
  2701                                  ;	Routine:	WaitForKeyInBuffer
  2702                                  ;
  2703                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2704                                  ;
  2705                                  ;	Out:		ZF	1 = Input buffer ready
  2706                                  ;				0 = Input buffer not ready after timeout
  2707                                  ;
  2708                                  ;-----------------------------------------------------------------------------------------------------------------------
  2709                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2710                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  2711                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  2712                                  			test	al,EKEYBBITIN					;is input buffer still full?
  2713                                  			loopnz	.10						;yes, repeat till timeout
  2714                                  			pop	ecx						;restore non-volatile regs
  2715                                  			ret							;return
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;	Routine:	WaitForKeyOutBuffer
  2719                                  ;
  2720                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2721                                  ;
  2722                                  ;	Out:		ZF	1 = Output buffer has data from controller
  2723                                  ;				0 = Output buffer empty after timeout
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2727                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  2728                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  2729                                  			test	al,EKEYBBITOUT					;output buffer status bit
  2730                                  			loopz	.10						;loop until output buffer bit
  2731                                  			pop	ecx						;restore non-volatile regs
  2732                                  			ret							;return
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                  ;
  2735                                  ;	End of the Kernel Function Library
  2736                                  ;
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  2739                                  			db	055h,0AAh					;end of segment
  2740                                  ;=======================================================================================================================
  2741                                  ;
  2742                                  ;	Console Task
  2743                                  ;
  2744                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2745                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2746                                  ;	screen and responds to user commands.
  2747                                  ;
  2748                                  ;=======================================================================================================================
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750                                  ;
  2751                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2752                                  ;
  2753                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2754                                  ;
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  section			constack						;console task stack
  2757                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  2758                                  ;-----------------------------------------------------------------------------------------------------------------------
  2759                                  ;
  2760                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2761                                  ;
  2762                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2763                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2764                                  ;	16 descriptors. Six are initially defined.
  2765                                  ;
  2766                                  ;-----------------------------------------------------------------------------------------------------------------------
  2767                                  section			conldt							;console local descriptors
  2768                                  			dq	004093004780007Fh				;04 TSS alias
  2769                                  			dq	004093004700007Fh				;0C LDT alias
  2770                                  			dq	00409300400006FFh				;14 stack
  2771                                  			dq	00CF93000000FFFFh				;1C data
  2772                                  			dq	00409B0050000FFFh				;24 code
  2773                                  			dq	00409300480007FFh				;2C message queue
  2774                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                  ;
  2777                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2778                                  ;
  2779                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2780                                  ;	segment. CS to console code.
  2781                                  ;
  2782                                  ;-----------------------------------------------------------------------------------------------------------------------
  2783                                  section			contss							;console task state segment
  2784                                  			dd	0						;00 back-link tss
  2785                                  			dd	0700h						;04 esp ring 0
  2786                                  			dd	0014h						;08 ss ring 0
  2787                                  			dd	0700h						;0C esp ring 1
  2788                                  			dd	0014h						;10 es ring 1
  2789                                  			dd	0700h						;14 esp ring 2
  2790                                  			dd	0014h						;18 ss ring 2
  2791                                  			dd	0						;1C cr ring 3
  2792                                  			dd	0						;20 eip
  2793                                  			dd	0200h						;24 eflags
  2794                                  			dd	0						;28 eax
  2795                                  			dd	0						;2C ecx
  2796                                  			dd	0						;30 edx
  2797                                  			dd	0						;34 ebx
  2798                                  			dd	0700h						;38 esp ring 3
  2799                                  			dd	0						;3C ebp
  2800                                  			dd	0						;40 esi
  2801                                  			dd	0						;44 edi
  2802                                  			dd	001Ch						;48 es
  2803                                  			dd	0024h						;4C cs
  2804                                  			dd	0014h						;50 ss ring 3
  2805                                  			dd	001Ch						;54 ds
  2806                                  			dd	0						;58 fs
  2807                                  			dd	0						;5c gs
  2808                                  			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  2809                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2810                                  ;-----------------------------------------------------------------------------------------------------------------------
  2811                                  ;
  2812                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2813                                  ;
  2814                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2815                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2816                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2817                                  ;	event.
  2818                                  ;
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  section			conmque							;console message queue
  2821                                  			dd	8						;head pointer
  2822                                  			dd	8						;tail pointer
  2823                                  			times	510 dd 0					;queue elements
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;
  2826                                  ;	Console Code								@disk: 008400	@mem: 005000
  2827                                  ;
  2828                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2829                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2830                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2831                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2832                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2833                                  ;	board input, echoing to the console screen and responding to user commands.
  2834                                  ;
  2835                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2836                                  ;
  2837                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2838                                  ;				|  Real Mode Interrupt Vectors			|
  2839                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2840                                  ;				|  Reserved BIOS Memory Area			|
  2841                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2842                                  ;				|  Shared Kernel Memory Area			|
  2843                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2844                                  ;				|  Global Descriptor Table (GDT)		|
  2845                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2846                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2847                                  ;			002000	+-----------------------------------------------+
  2848                                  ;				|  Interrupt Handlers				|
  2849                                  ;				|  Kernel Function Library			|
  2850                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2851                                  ;				|  Console Task Stack Area			|
  2852                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2853                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2854                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2855                                  ;				|  Console Task Task State Segment (TSS)	|
  2856                                  ;			004800	+-----------------------------------------------+
  2857                                  ;				|  Console Task Message Queue			|
  2858                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2859                                  ;				|  Console Task Code				|
  2860                                  ;				|  Console Task Constants			|
  2861                                  ;			006000	+===============================================+
  2862                                  ;
  2863                                  ;-----------------------------------------------------------------------------------------------------------------------
  2864                                  section			concode	vstart=05000h					;labels relative to 5000h
  2865                                  ConCode			call	ConInitializeData				;initialize console variables
  2866                                  
  2867                                  			clearConsoleScreen					;clear the console screen
  2868                                  			putConsoleString czTitle				;display startup message
  2869                                  .10			putConsoleString czPrompt				;display input prompt
  2870                                  			placeCursor						;set CRT cursor location
  2871                                  
  2872                                  .20			sti							;enable interrupts
  2873                                  			hlt							;halt until interrupt
  2874                                  			jmp	.20						;continue halt loop
  2875                                  ;-----------------------------------------------------------------------------------------------------------------------
  2876                                  ;
  2877                                  ;	Routine:	ConInitializeData
  2878                                  ;
  2879                                  ;	Description:	This routine initializes console task variables.
  2880                                  ;
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  ConInitializeData	push	ecx						;save non-volatile regs
  2883                                  			push	edi						;
  2884                                  			push	es						;
  2885                                  ;
  2886                                  ;	Initialize console work areas
  2887                                  ;
  2888                                  			push	ESELDAT						;load OS data selector ...
  2889                                  			pop	es						;... into extra segment register
  2890                                  			mov	edi,ECONDATA					;OS console data address
  2891                                  			xor	al,al						;initialization value
  2892                                  			mov	ecx,ECONDATALEN					;size of OS console data
  2893                                  			cld							;forward strings
  2894                                  			rep	stosb						;initialize data
  2895                                  ;
  2896                                  ;	Restore and return
  2897                                  ;
  2898                                  			pop	es						;restore non-volatile regs
  2899                                  			pop	edi						;
  2900                                  			pop	ecx						;
  2901                                  			ret							;return
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;	Constants
  2905                                  ;
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                  czNewLine		db	13,10,0						;new line string
  2908                                  czPrompt		db	":",0						;prompt string
  2909                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  2910                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  2911                                  			db	055h,0AAh					;end of section
  2912                                  %endif
  2913                                  %ifdef BUILDDISK
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                  ;
  2916                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  2917                                  ;
  2918                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2919                                  ;
  2920                                  ;-----------------------------------------------------------------------------------------------------------------------
  2921                                  section			unused							;unused disk space
  2922                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  2923                                  %endif
  2924                                  ;=======================================================================================================================
  2925                                  ;
  2926                                  ;	End of Program Code
  2927                                  ;
  2928                                  ;=======================================================================================================================
