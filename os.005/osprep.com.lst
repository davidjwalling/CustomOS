     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.005
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;			updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Register EAX is preferred for returning a response/result value.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX and ECX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	x86 Descriptor Access Codes						EACC...
   190                                  ;
   191                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   192                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   193                                  ;
   194                                  ;	0.......	Segment is not present in memory (triggers int 11)
   195                                  ;	1.......	Segment is present in memory
   196                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   197                                  ;	...0....	Segment is a system segment
   198                                  ;	...00010		Local Descriptor Table
   199                                  ;	...00101		Task Gate
   200                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   201                                  ;	...01100		Call Gate (386)
   202                                  ;	...01110		Interrupt Gate (386)
   203                                  ;	...01111		Trap Gate (386)
   204                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   205                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   206                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EACCLDT			equ	10000010b					;local descriptor table
   210                                  EACCTASK		equ	10000101b					;task gate
   211                                  EACCTSS			equ	10001001b					;task-state segment
   212                                  EACCGATE		equ	10001100b					;call gate
   213                                  EACCINT			equ	10001110b					;interrupt gate
   214                                  EACCTRAP		equ	10001111b					;trap gate
   215                                  EACCDATA		equ	10010011b					;upward writable data
   216                                  EACCCODE		equ	10011011b					;non-conforming readable code
   217                                  ;-----------------------------------------------------------------------------------------------------------------------
   218                                  ;
   219                                  ;	BIOS Interrupts and Functions						EBIOS...
   220                                  ;
   221                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   222                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   226                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   227                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   228                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   229                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   230                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   231                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	ASCII									EASC...
   235                                  ;
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  EASCIILINEFEED		equ	10						;ASCII line feed
   238                                  EASCIIRETURN		equ	13						;ASCII carriage return
   239                                  EASCIIESCAPE		equ	27						;ASCII escape
   240                                  EASCIISPACE		equ	32						;ASCII space
   241                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   242                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   243                                  EASCIICASE		equ	00100000b					;ASCII case bit
   244                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  ;
   247                                  ;	Boot Sector and Loader Constants
   248                                  ;
   249                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   250                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   251                                  ;
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   254                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   255                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   256                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   257                                  EMAXTRIES		equ	5						;max read retries
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ESELDAT			equ	18h						;kernel data selector
   262                                  ESELCGA			equ	20h						;cga video selector
   263                                  ESELOSCODE		equ	48h						;os kernel selector
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;	Kernel Constants							EKRN...
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EKRNDESLEN		equ	8						;size of descriptor
   268                                  EKRNADR			equ	1000h						;kernel base address
   269                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ;	Keyboard Flags
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EKEYCTRLLEFT		equ	00000001b					;left control
   274                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   275                                  EKEYALTLEFT		equ	00000100b					;left alt
   276                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   277                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   278                                  EKEYSHIFT		equ	00010010b					;left or right shift
   279                                  EKEYALTRIGHT		equ	00100000b					;right alt
   280                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   281                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   282                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   283                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  ;	Console Constants							ECON...
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ECONCOLS		equ	80						;columns per row
   288                                  ECONROWS		equ	24						;console rows
   289                                  ECONOIAROW		equ	24						;operator information area row
   290                                  ECONCOLBYTES		equ	2						;bytes per column
   291                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   292                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   293                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   294                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  ;
   297                                  ;	Structures
   298                                  ;
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;	OSDATA
   303                                  ;
   304                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   305                                  ;	used by the BIOS.
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  struc			OSDATA
   309 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   310 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   311 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   312 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   313 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   314 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   315 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   316 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   317 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   318 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   319 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   320 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   321 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   322 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   323 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   324 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   325 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   326 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   327 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   328 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   329 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   330 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   331 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   332 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   333 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   334 00000449 <res 00000001>          			resb	1						;449 current video mode
   335 0000044A <res 00000002>          			resw	1						;44A screen columns
   336 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   337 0000044E <res 00000002>          			resw	1						;44E current video page offset
   338 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   339 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   340 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   341 00000462 <res 00000001>          			resb	1						;462 active display page number
   342 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   343 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   344 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   345 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   346 00000469 <res 00000003>          			resb	3						;469 vague
   347 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   348 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   349 00000471 <res 00000001>          			resb	1						;471 bios break flag
   350 00000472 <res 00000002>          			resw	1						;472 soft reset
   351 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   352 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   353 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   354 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   355 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   356 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   357 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   358 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   359 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   360 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   361 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   362 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   363 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   364 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   365 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   366 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   367 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   368 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   369 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   370 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   371 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   372 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   373 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   374 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   375 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   376 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   377 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   378 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   379 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   380 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   381 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   382 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   383 000004AC <res 00000008>          			resb	8						;4AC reserved
   384 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   385 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   386 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   387 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   388 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   389 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   390 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   391 000004CD <res 00000001>          			resb	1						;4CD unknown
   392 000004CE <res 00000002>          			resw	1						;4CE day counter
   393 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   394 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   395 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   396 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   397 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   398 00000505 <res 0000000A>          			resb	10						;505 POST work area
   399 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   400 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   401 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   402 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   403 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   404 0000051E <res 00000002>          			resw	1						;51E unknown
   405 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   406 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   407 00000530 <res 00000004>          			resb	4						;530 MODE command
   408 00000534 <res 000001CC>          			resb	460						;534 unused
   409 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;
   412                                  ;	OS Variables								@disk: N/A	@mem: 000800
   413                                  ;
   414                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   415                                  ;	accessible by any kernel task or interrupt.
   416                                  ;
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ECONDATA		equ	($)
   419 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   420 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   421 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   422 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   423 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   424 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   425 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   426 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   427 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   428 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   429 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   430 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   431                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   432                                  endstruc
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;
   435                                  ;	Macros
   436                                  ;
   437                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   438                                  ;
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  %macro			mint	1
   441                                  _%1			equ	($-$$) / EKRNDESLEN
   442                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   443                                  %endmacro
   444                                  %macro			mtrap	1
   445                                  _%1			equ	($-$$) / EKRNDESLEN
   446                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   447                                  %endmacro
   448                                  %macro			menter	1
   449                                  ?%1			equ	($-$$)
   450                                  %endmacro
   451                                  %macro			tsvce	1
   452                                  e%1			equ	($-tsvc)/4
   453                                  			dd	%1
   454                                  %endmacro
   455                                  %ifdef BUILDBOOT
   456                                  ;-----------------------------------------------------------------------------------------------------------------------
   457                                  ;
   458                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   459                                  ;
   460                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   461                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   462                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   463                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   464                                  ;
   465                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   466                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   467                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   468                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   469                                  ;	immediately followed by a disk parameter table.
   470                                  ;
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  			cpu	8086						;assume minimal CPU
   473                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   474                                  			bits	16						;16-bit code at power-up
   475                                  %ifdef BUILDPREP
   476 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   477                                  %else
   478                                  Boot			jmp	word Boot.10					;jump over parameter table
   479                                  %endif
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  ;
   482                                  ;	Disk Parameter Table
   483                                  ;
   484                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   485                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   486                                  ;
   487                                  ;-----------------------------------------------------------------------------------------------------------------------
   488 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   489 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   490 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   491 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   492 00000010 02                      cbFatCount		db	2						;file allocation table copies
   493 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   494 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   495 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   496 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   497                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   498 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   499 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   500 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   501                                  ;
   502                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   503                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   504                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   505                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   506                                  ;	given several possible starting values for CS:IP.
   507                                  ;
   508                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   509 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   510                                  .@20			equ	$-$$						;.@20 = 021h
   511 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   512 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   513 00000025 B104                    			mov	cl,4						;shift count
   514 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   515 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   516 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   517                                  ;
   518                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   519                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   520                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   521                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   522                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   523                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   524                                  ;
   525 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   526 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   527 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   528 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   529 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   530                                  ;
   531                                  ;	Our boot addressability is now set up according to the following diagram.
   532                                  ;
   533                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   534                                  ;				|  Unused (DOS Program Segment Prefix)		|
   535                                  ;			007c00	+-----------------------------------------------+ DS:0100
   536                                  ;				|  Boot Sector Code (vstart=100h)		|
   537                                  ;				|						|
   538                                  ;			007e00	+-----------------------------------------------+ DS:0300
   539                                  ;				|  Boot Stack					|
   540                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   541                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   542                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   543                                  ;				|						|
   544                                  ;			009100	+-----------------------------------------------+ DS:1600
   545                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   546                                  ;				|						|
   547                                  ;			009300	+-----------------------------------------------+ DS:1800
   548                                  ;
   549                                  ;	On entry, DL indicates the drive being booted from.
   550                                  ;
   551 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   552                                  ;
   553                                  ;	Compute directory i/o buffer address.
   554                                  ;
   555 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   556 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   557 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   558 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   559                                  ;
   560                                  ;	Compute segment where os.com will be loaded.
   561                                  ;
   562 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   563 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   564 0000004E 83E810                  			sub	ax,16						;AX = 0900
   565 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   566                                  ;
   567                                  ;	Write a message to the console so we know we have our addressability established.
   568                                  ;
   569 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   570 00000057 E84B01                  			call	BootPrint					;display loader message
   571                                  ;
   572                                  ;	Initialize the number of directory sectors to search.
   573                                  ;
   574 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   575 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   576                                  ;
   577                                  ;	Compute number of directory sectors and initialize overhead count.
   578                                  ;
   579 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   580 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   581 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   582 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   583                                  ;
   584                                  ;	Compute directory entries per sector.
   585                                  ;
   586 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   587 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   588 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   589                                  ;
   590                                  ;	Compute first logical directory sector and update overhead count.
   591                                  ;
   592 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   593 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   594 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   595 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   596 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   597 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   598                                  ;
   599                                  ;	Read directory sector.
   600                                  ;
   601 00000089 B001                    .30			mov	al,1						;sector count
   602 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   603 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   604 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   605                                  ;
   606                                  ;	Setup variables to search this directory sector.
   607                                  ;
   608 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   609 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   610 0000009C 7603                    			jna	.40						;no, continue
   611 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   612 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   613 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   614 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   615                                  ;
   616                                  ;	Loop through directory sectors searching for kernel program.
   617                                  ;
   618 000000AC 56                      .50			push	si						;save kernel name address
   619 000000AD 57                      			push	di						;save dir i/o buffer address
   620 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   621 000000B1 FC                      			cld							;forward strings
   622 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   623 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   624 000000B5 5E                      			pop	si						;restore kernel name address
   625 000000B6 7418                    			je	.60						;exit loop if found
   626 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   627 000000BC 48                      			dec	ax						;decrement remaining entries
   628 000000BD 75ED                    			jnz	.50						;next entry
   629                                  ;
   630                                  ;	Repeat search if we are not at the end of the directory.
   631                                  ;
   632 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   633 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   634 000000C8 75BF                    			jne	.30						;no, get next sector
   635 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   636 000000CD E9C000                  			jmp	BootExit					;display message and exit
   637                                  ;
   638                                  ;	If we find the kernel program in the directory, read the FAT.
   639                                  ;
   640 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   641 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   642 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   643 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   644 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0500
   645 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   646                                  ;
   647                                  ;	Get the starting cluster of the kernel program and target address.
   648                                  ;
   649 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   650 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   651                                  ;
   652                                  ;	Read each program cluster into RAM.
   653                                  ;
   654 000000E9 50                      .70			push	ax						;save cluster nbr
   655 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   656 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   657 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   658 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   659 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   660 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   661 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   662 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   663                                  ;
   664                                  ;	Update buffer pointer for next cluster.
   665                                  ;
   666 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   667 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   668 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   669 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   670 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   671                                  ;
   672                                  ;	Compute next cluster number.
   673                                  ;
   674 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   675 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   676 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   677 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   678 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   679 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   680 0000011B 83E701                  			and	di,1						;get low bit
   681 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   682 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   683 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   684                                  ;
   685                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   686                                  ;
   687 00000126 F6C101                  			test	cl,1						;is cluster odd?
   688 00000129 7404                    			jz	.80						;no, skip ahead
   689 0000012B B104                    			mov	cl,4						;shift count
   690 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   691 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   692 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   693 00000135 75B2                    			jne	.70						;no, continue
   694                                  ;
   695                                  ;	Transfer control to the operating system program.
   696                                  ;
   697 00000137 EA                      			db	0EAh						;jmp seg:offset
   698 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   699 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   700                                  ;
   701                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   702                                  ;
   703 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   704 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   705 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   706 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   707 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   708 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   709 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   710 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   711 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   712 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   713                                  ;
   714                                  ;	Try maxtries times to read sector.
   715                                  ;
   716 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   717 0000015B 53                      .10			push	bx						;save buffer address
   718 0000015C 51                      			push	cx						;save retry count
   719 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   720 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   721 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   722 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   723 0000016A 59                      			pop	cx						;restore retry count
   724 0000016B 5B                      			pop	bx						;restore buffer address
   725 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   726 0000016E E2EB                    			loop	.10						;retry
   727                                  ;
   728                                  ;	Handle disk error: convert to ASCII and store in error string.
   729                                  ;
   730 00000170 88E0                    			mov	al,ah						;AL = bios error code
   731 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   732 00000174 B210                    			mov	dl,16						;divisor for base 16
   733 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   734 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   735 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   736 0000017E 7203                    			jb	.20						;continue if numeral
   737 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   738 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   739 00000185 7203                    			jb	.30						;continue if numeral
   740 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   741 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   742 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   743 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   744 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   745 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   746 00000197 7504                    			jnz	.20						;continue if key pressed
   747 00000199 FB                      			sti							;enable interrupts
   748 0000019A F4                      			hlt							;wait for interrupt
   749 0000019B EBF6                    			jmp	.10						;repeat
   750 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   751 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   752 000001A1 FB                      .30			sti							;enable interrupts
   753 000001A2 F4                      			hlt							;stop until reset, int, nmi
   754 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   755                                  ;
   756                                  ;	Display text message.
   757                                  ;
   758 000001A5 FC                      BootPrint		cld							;forward strings
   759 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   760 000001A7 84C0                    			test	al,al						;end of string?
   761 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   762 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   763 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   764 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   765 000001B1 C3                      BootReturn		ret							;return to caller
   766                                  ;-----------------------------------------------------------------------------------------------------------------------
   767                                  ;
   768                                  ;	Constants
   769                                  ;
   770                                  ;-----------------------------------------------------------------------------------------------------------------------
   771                                  			align	2
   772 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   773 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   773 000001BD 4F4D               
   774 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   774 000001C8 2E2E0D0A00         
   775 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   775 000001D6 7220               
   776 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   777 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   777 000001E4 7373696E6700       
   778                                  ;-----------------------------------------------------------------------------------------------------------------------
   779                                  ;
   780                                  ;	Work Areas
   781                                  ;
   782                                  ;-----------------------------------------------------------------------------------------------------------------------
   783                                  			align	2
   784 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   785 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   786 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   787 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   788 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   789                                  wwReadCountCommand	equ	$						;read count and command
   790 000001F4 00                      wbReadCount		db	0						;sectors to read
   791 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   792                                  wwDriveHead		equ	$						;drive, head (word)
   793 000001F6 00                      wbDrive			db	0						;drive
   794 000001F7 00                      wbHead			db	0						;head
   795                                  wwSectorTrack		equ	$						;sector, track (word)
   796 000001F8 00                      			db	0						;sector
   797 000001F9 00                      wbTrack			db	0						;track
   798 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   799 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   800                                  %endif
   801                                  %ifdef BUILDPREP
   802                                  ;-----------------------------------------------------------------------------------------------------------------------
   803                                  ;
   804                                  ;	Diskette Preparation Code
   805                                  ;
   806                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   807                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   808                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   809                                  ;
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811                                  ;
   812                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   813                                  ;
   814 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   815 00000203 E89FFF                  			call	BootPrint					;display message
   816                                  ;
   817                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   818                                  ;
   819 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   820 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   821 0000020A 7504                    			jnz	.12						;continue if key pressed
   822 0000020C FB                      			sti							;enable interrupts
   823 0000020D F4                      			hlt							;wait for interrupt
   824 0000020E EBF6                    			jmp	short .10					;repeat
   825 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   826 00000212 7407                    			je	.15						;yes, branch
   827 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   828 00000216 75EE                    			jne	.10						;no, repeat
   829 00000218 E9A900                  			jmp	.90						;yes, exit program
   830                                  ;
   831                                  ;	Display writing-sector message and patch the JMP instruction.
   832                                  ;
   833 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   834 0000021E E884FF                  			call	BootPrint					;display message
   835 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   836 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   837 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   838                                  ;
   839                                  ;	Try to read the boot sector.
   840                                  ;
   841 00000229 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   842 0000022C 51                      .20			push	cx						;save remaining tries
   843 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   844 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   845 00000233 B90100                  			mov	cx,1						;track zero, sector one
   846 00000236 B80102                  			mov	ax,0201h					;read one sector
   847 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   848 0000023B 59                      			pop	cx						;restore remaining retries
   849 0000023C 7307                    			jnc	.30						;skip ahead if successful
   850 0000023E E2EC                    			loop	.20						;try again
   851 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   852 00000243 EB2C                    			jmp	.50						;branch to error routine
   853                                  ;
   854                                  ;	Copy diskette parms from input buffer to output buffer.
   855                                  ;
   856 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   857 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   858 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   859 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   860 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   861 00000254 FC                      			cld							;forward string copies
   862 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   863                                  ;
   864                                  ;	Try to write boot sector to diskette.
   865                                  ;
   866 00000257 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   867 0000025A 51                      .40			push	cx						;save remaining tries
   868 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   869 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   870 00000261 B90100                  			mov	cx,1						;track zero, sector one
   871 00000264 B80103                  			mov	ax,0301h					;write one sector
   872 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   873 00000269 59                      			pop	cx						;restore remaining retries
   874 0000026A 7326                    			jnc	.80						;skip ahead if successful
   875 0000026C E2EC                    			loop	.40						;try again
   876 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   877                                  ;
   878                                  ;	Convert the error code to ASCII and display the error message.
   879                                  ;
   880 00000271 50                      .50			push	ax						;save error code
   881 00000272 88E0                    			mov	al,ah						;copy error code
   882 00000274 B400                    			mov	ah,0						;AX = error code
   883 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   884 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   885 0000027A 0D3030                  			or	ax,3030h					;add ASCII zone digits
   886 0000027D 80FC3A                  			cmp	ah,3Ah						;AH ASCII numeral?
   887 00000280 7203                    			jb	.60						;yes, continue
   888 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   889 00000285 3C3A                    .60			cmp	al,3Ah						;al ASCII numeral?
   890 00000287 7202                    			jb	.70						;yes, continue
   891 00000289 0407                    			add	al,7						;no, make ASCII
   892 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   893 0000028E E814FF                  			call	BootPrint					;write error message
   894 00000291 58                      			pop	ax						;restore error code
   895                                  ;
   896                                  ;	Display the completion message.
   897                                  ;
   898 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   899 00000295 88E0                    			mov	al,ah						;BIOS return code
   900 00000297 3C00                    			cmp	al,0						;success?
   901 00000299 7426                    			je	.85						;yes, continue
   902 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   903 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   904 000002A0 741F                    			je	.85						;yes, continue
   905 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   906 000002A5 3C02                    			cmp	al,2						;address mark not found?
   907 000002A7 7418                    			je	.85						;yes, continue
   908 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   909 000002AC 3C03                    			cmp	al,3						;protected disk?
   910 000002AE 7411                    			je	.85						;yes, continue
   911 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   912 000002B3 3C06                    			cmp	al,6						;diskette removed?
   913 000002B5 740A                    			je	.85						;yes, continue
   914 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   915 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   916 000002BC 7403                    			je	.85						;yes, continue
   917 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   918 000002C1 E8E1FE                  .85			call	BootPrint					;display result message
   919 000002C4 B8004C                  .90			mov	ax,4C00H					;terminate with zero result code
   920 000002C7 CD21                    			int	21h						;terminate DOS program
   921 000002C9 C3                      			ret							;return (should not execute)
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923                                  ;
   924                                  ;	Diskette Preparation Messages
   925                                  ;
   926                                  ;-----------------------------------------------------------------------------------------------------------------------
   927 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   927 000002D3 5320426F6F742D4469-
   927 000002DC 736B65747465205072-
   927 000002E5 657061726174696F6E-
   927 000002EE 2050726F6772616D   
   928 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   928 000002FF 687420284329203230-
   928 00000308 31302D323031372044-
   928 00000311 61766964204A2E2057-
   928 0000031A 616C6C696E672E2041-
   928 00000323 6C6C20726967687473-
   928 0000032C 207265736572766564-
   928 00000335 2E                 
   929 00000336 0D0A                    			db	13,10
   930 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   930 00000341 6F6772616D206F7665-
   930 0000034A 727772697465732074-
   930 00000353 686520626F6F742073-
   930 0000035C 6563746F72206F6620-
   930 00000365 61206469736B657474-
   930 0000036E 652077697468207374-
   930 00000377 617274757020636F64-
   930 00000380 652074686174       
   931 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   931 0000038F 616420746865206F70-
   931 00000398 65726174696E672073-
   931 000003A1 797374656D20696E74-
   931 000003AA 6F206D656D6F727920-
   931 000003B3 7768656E2074686520-
   931 000003BC 636F6D707574657220-
   931 000003C5 697320726573746172-
   931 000003CE 7465642E           
   932 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   932 000003DB 6565642C20706C6163-
   932 000003E4 65206120666F726D61-
   932 000003ED 74746564206469736B-
   932 000003F6 6574746520696E746F-
   932 000003FF 20647269766520413A-
   932 00000408 20616E642070726573-
   932 00000411 732074686520456E74-
   932 0000041A 6572206B65792E     
   933 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   933 0000042A 20746869732070726F-
   933 00000433 6772616D2077697468-
   933 0000043C 6F7574207072657061-
   933 00000445 72696E672061206469-
   933 0000044E 736B657474652C2070-
   933 00000457 726573732074686520-
   933 00000460 457363617065206B65-
   933 00000469 792E               
   934 0000046B 0D0A00                  			db	13,10,0
   935 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   935 00000477 2074686520626F6F74-
   935 00000480 20736563746F722074-
   935 00000489 6F2074686520646973-
   935 00000492 6B65747465202E2E2E 
   936 0000049B 0D0A00                  			db	13,10,0
   937 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   937 000004A7 6F722D636F6465202E-
   937 000004B0 2E2077617320726574-
   937 000004B9 75726E65642066726F-
   937 000004C2 6D207468652042494F-
   937 000004CB 53207768696C652072-
   937 000004D4 656164696E67206672-
   937 000004DD 6F6D20746865206469-
   937 000004E6 736B2E             
   938 000004E9 0D0A00                  			db	13,10,0
   939 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   939 000004F5 6F722D636F6465202E-
   939 000004FE 2E2077617320726574-
   939 00000507 75726E65642066726F-
   939 00000510 6D207468652042494F-
   939 00000519 53207768696C652077-
   939 00000522 726974696E6720746F-
   939 0000052B 20746865206469736B-
   939 00000534 2E                 
   940 00000535 0D0A00                  			db	13,10,0
   941 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   941 00000541 742D736563746F7220-
   941 0000054A 776173207772697474-
   941 00000553 656E20746F20746865-
   941 0000055C 206469736B65747465-
   941 00000565 2E204265666F726520-
   941 0000056E 626F6F74696E672079-
   941 00000577 6F757220636F6D7075-
   941 00000580 7465722077697468   
   942 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   942 00000591 736B657474652C206D-
   942 0000059A 616B65207375726520-
   942 000005A3 746861742074686520-
   942 000005AC 66696C65204F532E43-
   942 000005B5 4F4D20697320636F70-
   942 000005BE 696564206F6E746F20-
   942 000005C7 746865206469736B65-
   942 000005D0 7474652E           
   943 000005D4 0D0A00                  			db	13,10,0
   944 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   944 000005E0 76616C696420446973-
   944 000005E9 6B20506172616D6574-
   944 000005F2 6572               
   945 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   945 000005FD 20616E20696E746572-
   945 00000606 6E616C206572726F72-
   945 0000060F 206361757365642062-
   945 00000618 7920616E20696E7661-
   945 00000621 6C69642076616C7565-
   945 0000062A 206265696E67207061-
   945 00000633 7373656420746F2061-
   945 0000063C 2073797374656D     
   946 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   946 0000064C 6E2E20546865204F53-
   946 00000655 424F4F542E434F4D20-
   946 0000065E 66696C65206D617920-
   946 00000667 626520636F72727570-
   946 00000670 742E20436F7079206F-
   946 00000679 7220646F776E6C6F61-
   946 00000682 64207468652066696C-
   946 0000068B 6520616761696E     
   947 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
   947 0000069B 72792E             
   948 0000069E 0D0A00                  			db	13,10,0
   949 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   949 000006AA 6472657373204D6172-
   949 000006B3 6B204E6F7420466F75-
   949 000006BC 6E64               
   950 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   950 000006C7 726F7220696E646963-
   950 000006D0 617465732061207068-
   950 000006D9 79736963616C207072-
   950 000006E2 6F626C656D20776974-
   950 000006EB 682074686520666C6F-
   950 000006F4 707079206469736B65-
   950 000006FD 7474652E20506C6561-
   950 00000706 7365207265747279   
   951 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
   951 00000717 6E6F74686572206469-
   951 00000720 736B657474652E     
   952 00000727 0D0A00                  			db	13,10,0
   953 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   953 00000733 6F7465637465642044-
   953 0000073C 69736B             
   954 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   954 00000748 726F72206973207573-
   954 00000751 75616C6C7920636175-
   954 0000075A 736564206279206174-
   954 00000763 74656D7074696E6720-
   954 0000076C 746F20777269746520-
   954 00000775 746F20612077726974-
   954 0000077E 652D70726F74656374-
   954 00000787 6564206469736B2E   
   955 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   955 00000798 686520277772697465-
   955 000007A1 2D70726F7465637427-
   955 000007AA 2073657474696E6720-
   955 000007B3 6F6E20746865206469-
   955 000007BC 736B206F7220726574-
   955 000007C5 7279207573696E6720-
   955 000007CE 7573696E6720616E6F-
   955 000007D7 74686572206469736B-
   955 000007E0 2E                 
   956 000007E1 0D0A00                  			db	13,10,0
   957 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   957 000007ED 736B65747465205265-
   957 000007F6 6D6F766564         
   958 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   958 00000804 726F72206D61792069-
   958 0000080D 6E6469636174652074-
   958 00000816 686174207468652066-
   958 0000081F 6C6F70707920646973-
   958 00000828 6B6574746520686173-
   958 00000831 206265656E2072656D-
   958 0000083A 6F7665642066726F6D-
   958 00000843 20746865           
   959 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   959 00000850 652064726976652E20-
   959 00000859 4F6E20736F6D652073-
   959 00000862 797374656D732C2074-
   959 0000086B 68697320636F646520-
   959 00000874 6D617920616C736F20-
   959 0000087D 6F6363757220696620-
   959 00000886 746865206469736B65-
   959 0000088F 747465206973       
   960 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   960 0000089E 70726F746563746564-
   960 000008A7 2E2720506C65617365-
   960 000008B0 207665726966792074-
   960 000008B9 686174207468652064-
   960 000008C2 69736B657474652069-
   960 000008CB 73206E6F7420777269-
   960 000008D4 74652D70726F746563-
   960 000008DD 74656420616E64     
   961 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
   961 000008ED 65726C7920696E7365-
   961 000008F6 7274656420696E2074-
   961 000008FF 6865206469736B6574-
   961 00000908 74652064726976652E 
   962 00000911 0D0A00                  			db	13,10,0
   963 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   963 0000091D 6976652054696D6564-
   963 00000926 204F7574           
   964 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   964 00000933 726F7220757375616C-
   964 0000093C 6C7920696E64696361-
   964 00000945 746573207468617420-
   964 0000094E 6E6F206469736B6574-
   964 00000957 746520697320696E20-
   964 00000960 746865206469736B65-
   964 00000969 747465206472697665-
   964 00000972 2E20506C65617365   
   965 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   965 00000983 726520746861742074-
   965 0000098C 6865206469736B6574-
   965 00000995 74652069732070726F-
   965 0000099E 7065726C7920736561-
   965 000009A7 74656420696E207468-
   965 000009B0 652064726976652061-
   965 000009B9 6E642072657472792E 
   966 000009C2 0D0A00                  			db	13,10,0
   967 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   967 000009CE 6B6E6F776E20457272-
   967 000009D7 6F72               
   968 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   968 000009E2 6F722D636F64652072-
   968 000009EB 657475726E65642062-
   968 000009F4 79207468652042494F-
   968 000009FD 53206973206E6F7420-
   968 00000A06 61207265636F676E69-
   968 00000A0F 7A6564206572726F72-
   968 00000A18 2E20506C6561736520-
   968 00000A21 636F6E73756C74     
   969 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
   969 00000A31 6D7075746572277320-
   969 00000A3A 746563686E6963616C-
   969 00000A43 207265666572656E63-
   969 00000A4C 6520666F7220612064-
   969 00000A55 65736372697074696F-
   969 00000A5E 6E206F662074686973-
   969 00000A67 206572726F7220636F-
   969 00000A70 64652E             
   970 00000A73 0D0A00                  			db	13,10,0
   971                                  wcPrepInBuf		equ	$
   972                                  %endif
   973                                  %ifdef BUILDDISK
   974                                  ;-----------------------------------------------------------------------------------------------------------------------
   975                                  ;
   976                                  ;	File Allocation Tables
   977                                  ;
   978                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
   979                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
   980                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
   981                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
   982                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
   983                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
   984                                  ;	the last cluster in the chain.
   985                                  ;
   986                                  ;	Every three bytes encode two FAT entries as follows:
   987                                  ;
   988                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
   989                                  ;
   990                                  ;-----------------------------------------------------------------------------------------------------------------------
   991                                  ;-----------------------------------------------------------------------------------------------------------------------
   992                                  ;
   993                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
   994                                  ;
   995                                  ;-----------------------------------------------------------------------------------------------------------------------
   996                                  section			fat1							;first copy of FAT
   997                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
   998                                  			db	005h,060h,000h,	007h,080h,000h
   999                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1000                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1001                                  			db	011h,020h,001h,	013h,040h,001h
  1002                                  			db	015h,060h,001h,	017h,080h,001h
  1003                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1004                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1005                                  			db	021h,020h,002h,	023h,040h,002h
  1006                                  			db	025h,060h,002h,	027h,080h,002h
  1007                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1008                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1009                                  ;-----------------------------------------------------------------------------------------------------------------------
  1010                                  ;
  1011                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1012                                  ;
  1013                                  ;-----------------------------------------------------------------------------------------------------------------------
  1014                                  section			fat2							;second copy of FAT
  1015                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1016                                  			db	005h,060h,000h,	007h,080h,000h
  1017                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1018                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1019                                  			db	011h,020h,001h,	013h,040h,001h
  1020                                  			db	015h,060h,001h,	017h,080h,001h
  1021                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1022                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1023                                  			db	021h,020h,002h,	023h,040h,002h
  1024                                  			db	025h,060h,002h,	027h,080h,002h
  1025                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1026                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1027                                  ;-----------------------------------------------------------------------------------------------------------------------
  1028                                  ;
  1029                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1030                                  ;
  1031                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1032                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1033                                  ;	copy.
  1034                                  ;
  1035                                  ;-----------------------------------------------------------------------------------------------------------------------
  1036                                  section			dir							;diskette directory
  1037                                  			db	"OS      COM"					;file name (must contain spaces)
  1038                                  			db	20h						;attribute (archive bit set)
  1039                                  			times	10 db 0;					;unused
  1040                                  			dw	0h						;time
  1041                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1042                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1043                                  			dw	2						;first cluster
  1044                                  			dd	5200h						;file size
  1045                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1046                                  %endif
  1047                                  %ifdef BUILDCOM
  1048                                  ;-----------------------------------------------------------------------------------------------------------------------
  1049                                  ;
  1050                                  ;	OS.COM
  1051                                  ;
  1052                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1053                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1054                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1055                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1056                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1057                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1058                                  ;
  1059                                  ;	Our loader addressability is set up according to the following diagram.
  1060                                  ;
  1061                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1062                                  ;				|  Boot Sector & Loader Stack Area		|
  1063                                  ;				|						|
  1064                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1065                                  ;
  1066                                  ;
  1067                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1068                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1069                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1070                                  ;				|  Loader Code					|
  1071                                  ;				|						|
  1072                                  ;			009300	+-----------------------------------------------+ CS:0200
  1073                                  ;
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076                                  ;
  1077                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1078                                  ;
  1079                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1080                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1081                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1082                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1083                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1084                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1085                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1086                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1087                                  ;	registers.
  1088                                  ;
  1089                                  ;-----------------------------------------------------------------------------------------------------------------------
  1090                                  			cpu	8086						;assume minimal CPU
  1091                                  section			loader	vstart=100h					;use .COM compatible addressing
  1092                                  			bits	16						;this is 16-bit code
  1093                                  Loader			push	cs						;use the code segment
  1094                                  			pop	ds						;...as our data segment
  1095                                  			push	cs						;use the code segment
  1096                                  			pop	es						;...as our extra segment
  1097                                  ;
  1098                                  ;	Write a message to the console so we know we have our addressability established.
  1099                                  ;
  1100                                  			mov	si,czStartingMsg				;starting message
  1101                                  			call	PutTTYString					;display loader message
  1102                                  ;
  1103                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1104                                  ;
  1105                                  			call	GetCPUType					;AL = cpu type
  1106                                  			mov	si,czCPUErrorMsg				;loader error message
  1107                                  			cmp	al,3						;80386+?
  1108                                  			jb	LoaderExit					;no, exit with error message
  1109                                  			cpu	386						;allow 80386 instructions
  1110                                  			mov	si,czCPUOKMsg					;cpu ok message
  1111                                  			call	PutTTYString					;display message
  1112                                  ;
  1113                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1114                                  ;
  1115                                  			mov	si,300h						;GDT offset
  1116                                  			mov	ax,cs						;AX:SI = gdt source
  1117                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1118                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1119                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1120                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1121                                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1122                                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1123                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1124                                  			call	PutTTYString					;display message
  1125                                  ;
  1126                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1127                                  ;
  1128                                  			push	EKRNSEG						;use kernel segment ...
  1129                                  			pop	es						;... as target segment
  1130                                  			xor	di,di						;ES:DI = target address
  1131                                  			mov	si,300h						;DS:SI = source address
  1132                                  			mov	cx,5000h					;CX = kernel size
  1133                                  			cld							;forward strings
  1134                                  			rep	movsb						;copy kernel image
  1135                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1136                                  			call	PutTTYString					;display message
  1137                                  ;
  1138                                  ;	Switch to protected mode.
  1139                                  ;
  1140                                  			xor	si,si						;ES:SI = gdt addr
  1141                                  			mov	ss,si						;protected mode ss
  1142                                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1143                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1144                                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1145                                  			mov	dx,001Fh					;outer delay loop count
  1146                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1147                                  			loop	$						;wait out pending interrupts
  1148                                  			dec	dx						;restore outer loop count
  1149                                  			jnz	.10						;continue outer loop
  1150                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1151                                  ;
  1152                                  ;	Enable hardware and maskable interrupts
  1153                                  ;
  1154                                  			xor	al,al						;enable all registers code
  1155                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1156                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1157                                  			sti							;enable maskable interrupts
  1158                                  ;
  1159                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1160                                  ;
  1161                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1162                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1163                                  			jmp	0058h:0						;jump to task state segment selector
  1164                                  ;-----------------------------------------------------------------------------------------------------------------------
  1165                                  ;
  1166                                  ;	Routine:	LoaderExit
  1167                                  ;
  1168                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1169                                  ;
  1170                                  ;	In:		DS:SI	string address
  1171                                  ;
  1172                                  ;-----------------------------------------------------------------------------------------------------------------------
  1173                                  LoaderExit		call	PutTTYString					;display error message
  1174                                  ;
  1175                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1176                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1177                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1178                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1179                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1180                                  ;
  1181                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1182                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1183                                  			jnz	.40						;exit if key pressed
  1184                                  			sti							;enable maskable interrupts
  1185                                  			hlt							;wait for interrupt
  1186                                  			jmp	.30						;repeat until keypress
  1187                                  ;
  1188                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1189                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1190                                  ;	HLT until the system resets.
  1191                                  ;
  1192                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1193                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1194                                  .50			sti							;enable maskable interrupts
  1195                                  			hlt							;stop until reset, int, nmi
  1196                                  			jmp	.50						;loop until restart kicks in
  1197                                  ;-----------------------------------------------------------------------------------------------------------------------
  1198                                  ;
  1199                                  ;	Routine:	GetCPUType
  1200                                  ;
  1201                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1202                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1203                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1204                                  ;
  1205                                  ;	Output:		AX	0 = 808x, v20, etc.
  1206                                  ;				1 = 80186
  1207                                  ;				2 = 80286
  1208                                  ;				3 = 80386
  1209                                  ;
  1210                                  ;-----------------------------------------------------------------------------------------------------------------------
  1211                                  GetCPUType		mov	al,1						;AL = 1
  1212                                  			mov	cl,32						;shift count
  1213                                  			shr	al,cl						;try a 32-bit shift
  1214                                  			or	al,al						;did the shift happen?
  1215                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1216                                  			cpu	186
  1217                                  			push	sp						;save stack pointer
  1218                                  			pop	cx						;...into cx
  1219                                  			cmp	cx,sp						;did sp decrement before push?
  1220                                  			jne	.10						;yes, cpu is 80186
  1221                                  			cpu	286
  1222                                  			inc	ax						;AX = 2
  1223                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1224                                  			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1225                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1226                                  			jz	.10						;yes, cpu is 80286
  1227                                  			inc	ax						;AX = 3
  1228                                  .10			ret							;return to caller
  1229                                  ;-----------------------------------------------------------------------------------------------------------------------
  1230                                  ;
  1231                                  ;	Routine:	PutTTYString
  1232                                  ;
  1233                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1234                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1235                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1236                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1237                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1238                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1239                                  ;			registers and flags unless used to indicate return status.
  1240                                  ;
  1241                                  ;	In:		DS:SI	address of string
  1242                                  ;
  1243                                  ;-----------------------------------------------------------------------------------------------------------------------
  1244                                  PutTTYString		cld							;forward strings
  1245                                  			lodsb							;load next byte at DS:SI in AL
  1246                                  			test	al,al						;end of string?
  1247                                  			jz	.10						;... yes, exit our loop
  1248                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1249                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1250                                  			jmp	PutTTYString					;repeat until done
  1251                                  .10			ret							;return to caller
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  ;
  1254                                  ;	Loader Data
  1255                                  ;
  1256                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1257                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1258                                  ;
  1259                                  ;-----------------------------------------------------------------------------------------------------------------------
  1260                                  			align	2
  1261                                  cwLoaderTSS		dw	0068h						;TSS selector
  1262                                  cwLoaderLDT		dw	0060h						;LDT selector
  1263                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1264                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1265                                  czCPUErrorMsg		db	"The operating system requires an i386 "
  1266                                  			db	"or later processor.",13,10,
  1267                                  			db	"Please press any key to restart the "
  1268                                  			db	"computer.",13,10,0
  1269                                  czCPUOKMsg		db	"CPU ok",13,10,0
  1270                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1271                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1272                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1273                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1274                                  			db	055h,0AAh					;end of sector signature
  1275                                  ;-----------------------------------------------------------------------------------------------------------------------
  1276                                  ;
  1277                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1278                                  ;
  1279                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1280                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1281                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1282                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1283                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1284                                  ;
  1285                                  ;-----------------------------------------------------------------------------------------------------------------------
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  ;
  1288                                  ;	Tables
  1289                                  ;
  1290                                  ;-----------------------------------------------------------------------------------------------------------------------
  1291                                  ;-----------------------------------------------------------------------------------------------------------------------
  1292                                  ;
  1293                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1294                                  ;
  1295                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1296                                  ;	first descriptor must be all nulls.
  1297                                  ;
  1298                                  ;	6   5         4         3         2         1         0
  1299                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1300                                  ;	----------------------------------------------------------------
  1301                                  ;	h......hffffmmmma......ab......................bn..............n
  1302                                  ;	00000000			all areas have base addresses below 2^24
  1303                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1304                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1305                                  ;	            1001		present, ring-0, selector
  1306                                  ;
  1307                                  ;	h...h	hi-order base address (bits 24-31)
  1308                                  ;	ffff	flags
  1309                                  ;	mmmm	hi-order limit (bits 16-19)
  1310                                  ;	a...a	access
  1311                                  ;	b...b	lo-order base address (bits 0-23)
  1312                                  ;	n...n	lo-order limit (bits 0-15)
  1313                                  ;
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  section			gdt							;global descriptor table
  1316                                  			dq	0000000000000000h				;00 required null selector
  1317                                  			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1318                                  			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1319                                  			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1320                                  			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1321                                  			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1322                                  			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1323                                  			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1324                                  			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1325                                  			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1326                                  			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1327                                  			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1328                                  			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1329                                  			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1330                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1331                                  ;-----------------------------------------------------------------------------------------------------------------------
  1332                                  ;
  1333                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1334                                  ;
  1335                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1336                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1337                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1338                                  ;
  1339                                  ;	6   5         4         3         2         1         0
  1340                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1341                                  ;	----------------------------------------------------------------
  1342                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1343                                  ;
  1344                                  ;	h...h	high-order offset (bits 16-31)
  1345                                  ;	P	present (0=unused interrupt)
  1346                                  ;	zz	descriptor privilege level
  1347                                  ;	S	storage segment (must be zero for IDT)
  1348                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1349                                  ;	S...S	handling code selector in GDT
  1350                                  ;	l...l	lo-order offset (bits 0-15)
  1351                                  ;
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  section			idt							;interrupt descriptor table
  1354                                  			mint	dividebyzero					;00 divide by zero
  1355                                  			mint	singlestep					;01 single step
  1356                                  			mint	nmi						;02 non-maskable
  1357                                  			mint	break						;03 break
  1358                                  			mint	into						;04 into
  1359                                  			mint	bounds						;05 bounds
  1360                                  			mint	badopcode					;06 bad op code
  1361                                  			mint	nocoproc					;07 no coprocessor
  1362                                  			mint	doublefault					;08 double-fault
  1363                                  			mint	operand						;09 operand
  1364                                  			mint	badtss						;0A bad TSS
  1365                                  			mint	notpresent					;0B not-present
  1366                                  			mint	stacklimit					;0C stack limit
  1367                                  			mint	protection					;0D general protection fault
  1368                                  			mint	int14						;0E (reserved)
  1369                                  			mint	int15						;0F (reserved)
  1370                                  			mint	coproccalc					;10 (reserved)
  1371                                  			mint	int17						;11 (reserved)
  1372                                  			mint	int18						;12 (reserved)
  1373                                  			mint	int19						;13 (reserved)
  1374                                  			mint	int20						;14 (reserved)
  1375                                  			mint	int21						;15 (reserved)
  1376                                  			mint	int22						;16 (reserved)
  1377                                  			mint	int23						;17 (reserved)
  1378                                  			mint	int24						;18 (reserved)
  1379                                  			mint	int25						;19 (reserved)
  1380                                  			mint	int26						;1A (reserved)
  1381                                  			mint	int27						;1B (reserved)
  1382                                  			mint	int28						;1C (reserved)
  1383                                  			mint	int29						;1D (reserved)
  1384                                  			mint	int30						;1E (reserved)
  1385                                  			mint	int31						;1F (reserved)
  1386                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1387                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1388                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1389                                  			mtrap	com2						;23 IRQ3 com2
  1390                                  			mtrap	com1						;24 IRQ4 com1
  1391                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1392                                  			mtrap	diskette					;26 IRQ6 diskette
  1393                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1394                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1395                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1396                                  			mtrap	irq10						;2A IRQA (reserved)
  1397                                  			mtrap	irq11						;2B IRQB (reserved)
  1398                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1399                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1400                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1401                                  			mtrap	irq15						;2F IRQF (reserved)
  1402                                  			mtrap	svc						;30 OS services
  1403                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1404                                  ;-----------------------------------------------------------------------------------------------------------------------
  1405                                  ;
  1406                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1407                                  ;
  1408                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1409                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1410                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1411                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1412                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1413                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1414                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1415                                  ;
  1416                                  ;-----------------------------------------------------------------------------------------------------------------------
  1417                                  section			kernel	vstart=0h					;data offsets relative to 0
  1418                                  			cpu	386						;allow 80386 instructions
  1419                                  			bits	32						;this is 32-bit code
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;	CPU Interrupt Handlers
  1423                                  ;
  1424                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                  			menter	dividebyzero					;divide by zero
  1428                                  			push	0						;
  1429                                  			jmp	intcpu						;
  1430                                  			menter	singlestep					;single step
  1431                                  			push	1						;
  1432                                  			jmp	intcpu						;
  1433                                  			menter	nmi						;non-maskable
  1434                                  			push	2						;
  1435                                  			jmp	intcpu						;
  1436                                  			menter	break						;break
  1437                                  			push	3						;
  1438                                  			jmp	intcpu						;
  1439                                  			menter	into						;into
  1440                                  			push	4						;
  1441                                  			jmp	intcpu						;
  1442                                  			menter	bounds						;bounds
  1443                                  			push	5						;
  1444                                  			jmp	intcpu						;
  1445                                  			menter	badopcode					;bad opcode interrupt
  1446                                  			push	6						;
  1447                                  			jmp	intcpu						;
  1448                                  			menter	nocoproc					;no coprocessor interrupt
  1449                                  			push	7						;
  1450                                  			jmp	intcpu						;
  1451                                  			menter	doublefault					;doublefault interrupt
  1452                                  			push	8						;
  1453                                  			jmp	intcpu						;
  1454                                  			menter	operand						;operand interrupt
  1455                                  			push	9						;
  1456                                  			jmp	intcpu						;
  1457                                  			menter	badtss						;bad tss interrupt
  1458                                  			push	10						;
  1459                                  			jmp	intcpu						;
  1460                                  			menter	notpresent					;not present interrupt
  1461                                  			push	11						;
  1462                                  			jmp	intcpu						;
  1463                                  			menter	stacklimit					;stack limit interrupt
  1464                                  			push	12						;
  1465                                  			jmp	intcpu						;
  1466                                  			menter	protection					;protection fault interrupt
  1467                                  			push	13						;
  1468                                  			jmp	intcpu						;
  1469                                  			menter	int14						;(reserved)
  1470                                  			push	14						;
  1471                                  			jmp	intcpu						;
  1472                                  			menter	int15						;(reserved)
  1473                                  			push	15						;
  1474                                  			jmp	intcpu						;
  1475                                  			menter	coproccalc					;coprocessor calculation
  1476                                  			push	16						;
  1477                                  			jmp	intcpu						;
  1478                                  			menter	int17						;(reserved)
  1479                                  			push	17						;
  1480                                  			jmp	intcpu						;
  1481                                  			menter	int18						;(reserved)
  1482                                  			push	18						;
  1483                                  			jmp	intcpu						;
  1484                                  			menter	int19						;(reserved)
  1485                                  			push	19						;
  1486                                  			jmp	intcpu						;
  1487                                  			menter	int20						;(reserved)
  1488                                  			push	20						;
  1489                                  			jmp	intcpu						;
  1490                                  			menter	int21						;(reserved)
  1491                                  			push	21						;
  1492                                  			jmp	intcpu						;
  1493                                  			menter	int22						;(reserved)
  1494                                  			push	22						;
  1495                                  			jmp	intcpu						;
  1496                                  			menter	int23						;(reserved)
  1497                                  			push	23						;
  1498                                  			jmp	intcpu						;
  1499                                  			menter	int24						;(reserved)
  1500                                  			push	24						;
  1501                                  			jmp	intcpu						;
  1502                                  			menter	int25						;(reserved)
  1503                                  			push	25						;
  1504                                  			jmp	intcpu						;
  1505                                  			menter	int26						;(reserved)
  1506                                  			push	26						;
  1507                                  			jmp	intcpu						;
  1508                                  			menter	int27						;(reserved)
  1509                                  			push	27						;
  1510                                  			jmp	intcpu						;
  1511                                  			menter	int28						;(reserved)
  1512                                  			push	28						;
  1513                                  			jmp	intcpu						;
  1514                                  			menter	int29						;(reserved)
  1515                                  			push	29						;
  1516                                  			jmp	intcpu						;
  1517                                  			menter	int30						;(reserved)
  1518                                  			push	30						;
  1519                                  			jmp	intcpu						;
  1520                                  			menter	int31						;(reserved)
  1521                                  			push	31						;
  1522                                  intcpu			pop	eax						;
  1523                                  			iretd
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;	Hardware Device Interupts
  1527                                  ;
  1528                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1529                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1530                                  ;	(BX=2028h).
  1531                                  ;
  1532                                  ;-----------------------------------------------------------------------------------------------------------------------
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  ;
  1535                                  ;	IRQ0	Clock Tick Interrupt
  1536                                  ;
  1537                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1538                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1539                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1540                                  ;
  1541                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1542                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1543                                  ;
  1544                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1545                                  ;	zero, the floppy disk motors are turned off.
  1546                                  ;
  1547                                  ;-----------------------------------------------------------------------------------------------------------------------
  1548                                  			menter	clocktick					;clock tick interrupt
  1549                                  			push	eax						;save volatile regs
  1550                                  			push	edx						;
  1551                                  			push	ds						;
  1552                                  			push	ESELDAT						;load OS data selector ...
  1553                                  			pop	ds						;... into data segment register
  1554                                  			mov	eax,[wfClockTicks]				;eax = clock ticks
  1555                                  			inc	eax						;increment clock ticks
  1556                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1557                                  			jb	irq0.10						;no, skip ahead
  1558                                  			inc	byte [wbClockDays]				;increment clock days
  1559                                  			xor	eax,eax						;reset clock ticks
  1560                                  irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1561                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1562                                  			je	irq0.20						;yes, skip ahead
  1563                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1564                                  			jnz	irq0.20						;skip ahead if non-zero
  1565                                  			sti							;enable maskable interrupts
  1566                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1567                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1568                                  			in	al,dx						;FDC main status byte
  1569                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1570                                  			jnz	irq0.15						;wait while busy
  1571                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1572                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1573                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1574                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1575                                  			out	dx,al						;turn motor off
  1576                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1577                                  			pop	ds						;restore volatile regs
  1578                                  			pop	edx						;
  1579                                  			pop	eax						;
  1580                                  			iretd							;return to caller
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  ;
  1583                                  ;	IRQ1	Keyboard Interrupt
  1584                                  ;
  1585                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1586                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1587                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1588                                  ;	ALL modified registers upon return.
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  			menter	keyboard					;keyboard interrrupt
  1592                                  			push	eax						;save volatile regs
  1593                                  			push	ebx						;
  1594                                  			push	ecx						;
  1595                                  			push	esi						;
  1596                                  			push	ds						;
  1597                                  			push	ESELDAT						;load OS data selector ...
  1598                                  			pop	ds						;... into data segment register
  1599                                  			xor	al,al						;zero
  1600                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1601                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1602                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1603                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1604                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1605                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1606                                  			mov	al,' '						;space
  1607                                  			mov	[wbConsoleChar],al				;set character to space
  1608                                  			mov	al,EKEYTIMEOUT					;controller timeout flag
  1609                                  			not	al						;controller timeout mask
  1610                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1611                                  			mov	bl,[wbConsoleShift]				;shift flags
  1612                                  			mov	bh,[wbConsoleLock]				;lock flags
  1613                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1614                                  			jz	irq1.140					;yes, skip ahead
  1615                                  			in	al,EKEYPORTDATA					;read scan code 0
  1616                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1617                                  			mov	ah,al						;copy scan code 0
  1618                                  			mov	al,EKEYSHIFTLEFT				;left shift flag
  1619                                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1620                                  			je	irq1.30						;yes, set flag
  1621                                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1622                                  			je	irq1.40						;yes, reset flag
  1623                                  			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1624                                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1625                                  			je	irq1.30						;yes, set flag
  1626                                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1627                                  			je	irq1.40						;yes, reset flag
  1628                                  			mov	al,EKEYCTRLLEFT					;left control flag
  1629                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1630                                  			je	irq1.30						;yes, set flag
  1631                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1632                                  			je	irq1.40						;yes, reset flag
  1633                                  			mov	al,EKEYALTLEFT					;left alt flag
  1634                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1635                                  			je	irq1.30						;yes, set flag
  1636                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1637                                  			je	irq1.40						;yes, reset flag
  1638                                  			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1639                                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1640                                  			je	irq1.50						;yes, toggle lamps and flags
  1641                                  			mov	al,EKEYLOCKNUM					;num-lock flag
  1642                                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1643                                  			je	irq1.50						;yes, toggle lamps and flags
  1644                                  			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1645                                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1646                                  			je	irq1.50						;yes, toggle lamps and flags
  1647                                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1648                                  			jne	irq1.70 					;no, skip ahead
  1649                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1650                                  			jz	irq1.140					;yes, skip ahead
  1651                                  			in	al,EKEYPORTDATA					;read scan code 1
  1652                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1653                                  			mov	ah,al						;copy scan code 1
  1654                                  			mov	al,EKEYCTRLRIGHT				;right control flag
  1655                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1656                                  			je	irq1.30						;yes, set flag
  1657                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1658                                  			je	irq1.40						;yes, reset flag
  1659                                  			mov	al,EKEYALTRIGHT					;right alt flag
  1660                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1661                                  			je	irq1.30						;yes, set flag
  1662                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1663                                  			je	irq1.40						;yes, reset flag
  1664                                  			cmp	ah,EKEYSLASH					;slash down code?
  1665                                  			je	irq1.80						;yes, skip ahead
  1666                                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1667                                  			je	irq1.80						;yes, skip ahead
  1668                                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1669                                  			je	irq1.10						;yes, continue
  1670                                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1671                                  			jne	irq1.20						;no, skip ahead
  1672                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1673                                  			jz	irq1.140					;yes, skip ahead
  1674                                  			in	al,EKEYPORTDATA					;read scan code 2
  1675                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1676                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1677                                  			jz	irq1.140					;yes, skip ahead
  1678                                  			in	al,EKEYPORTDATA					;read scan code 3
  1679                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1680                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1681                                  irq1.30			or	bl,al						;set shift flag
  1682                                  			jmp	irq1.60						;skip ahead
  1683                                  irq1.40			not	al						;convert flag to mask
  1684                                  			and	bl,al						;reset shift flag
  1685                                  			jmp	irq1.60						;skip ahead
  1686                                  irq1.50			xor	bh,al						;toggle lock flag
  1687                                  			call	SetKeyboardLamps				;update keyboard lamps
  1688                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1689                                  			mov	[wbConsoleLock],bh				;save lock flags
  1690                                  			call	PutConsoleOIAShift				;update OIA indicators
  1691                                  			jmp	irq1.150					;finish keyboard handling
  1692                                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1693                                  			jne	irq1.80						;no continue
  1694                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1695                                  			jz	irq1.140					;yes, skip ahead
  1696                                  			in	al,EKEYPORTDATA					;read scan code 1
  1697                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1698                                  			mov	ah,al						;copy scan code 1
  1699                                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1700                                  			jne	irq1.150					;no, finish keyboard handling
  1701                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1702                                  			jz	irq1.140					;yes, skip ahead
  1703                                  			in	al,EKEYPORTDATA					;read scan code 2
  1704                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1705                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1706                                  			jz	irq1.140					;yes, skip ahead
  1707                                  			in	al,EKEYPORTDATA					;read scan code 3
  1708                                  			mov	[wbConsoleScan3],al				;save scan code 3
  1709                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1710                                  			jz	irq1.140					;yes, skip ahead
  1711                                  			in	al,EKEYPORTDATA					;read scan code 4
  1712                                  			mov	[wbConsoleScan4],al				;save scan code 4
  1713                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1714                                  			jz	irq1.140					;yes, skip ahead
  1715                                  			in	al,EKEYPORTDATA					;read scan code 5
  1716                                  			mov	[wbConsoleScan5],al				;save scan code 5
  1717                                  			jmp	irq1.150					;continue
  1718                                  irq1.80			xor	al,al						;assume no ASCII translation
  1719                                  			test	ah,EKEYUP					;release code?
  1720                                  			jnz	irq1.130					;yes, skip ahead
  1721                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  1722                                  			test	bl,EKEYSHIFT					;either shift key down?
  1723                                  			jz	irq1.90						;no, skip ahead
  1724                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  1725                                  irq1.90			movzx	ecx,ah						;scan code offset
  1726                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  1727                                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1728                                  			jz	irq1.100					;no skip ahead
  1729                                  			mov	cl,al						;copy ASCII code
  1730                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1731                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1732                                  			jb	irq1.100					;yes, skip ahead
  1733                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1734                                  			ja	irq1.100					;yes, skip ahead
  1735                                  			xor	al,EASCIICASE					;switch case
  1736                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1737                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  1738                                  irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1739                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  1740                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  1741                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1742                                  			pop	ds						;restore volatile regs
  1743                                  			pop	esi						;
  1744                                  			pop	ecx						;
  1745                                  			pop	ebx						;
  1746                                  			pop	eax						;
  1747                                  			iretd							;return to caller
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;	Scan-Code to ASCII Translation Tables
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1752                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1753                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1754                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1755                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1756                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1757                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1758                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1759                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1760                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1761                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1762                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1763                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1764                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1765                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1766                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1767                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1768                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1769                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1770                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1771                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1772                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1773                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1774                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1775                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1776                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1777                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1778                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1779                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1780                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1781                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1782                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1783                                  			menter	iochannel					;secondary 8259A cascade
  1784                                  			push	eax						;
  1785                                  			jmp	hwint						;
  1786                                  			menter	com2						;serial port 2 interrupt
  1787                                  			push	eax						;
  1788                                  			jmp	hwint						;
  1789                                  			menter	com1						;serial port 1 interrupt
  1790                                  			push	eax						;
  1791                                  			jmp	hwint						;
  1792                                  			menter	lpt2						;parallel port 2 interrupt
  1793                                  			push	eax						;
  1794                                  			jmp	hwint						;
  1795                                  			menter	diskette					;floppy disk interrupt
  1796                                  			push	eax						;save non-volatile regs
  1797                                  			push	ds						;
  1798                                  			push	ESELDAT						;load OS data selector ...
  1799                                  			pop	ds						;... into DS register
  1800                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1801                                  			or	al,10000000b					;set IRQ flag
  1802                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  1803                                  			sti							;enable maskable interrupts
  1804                                  			mov	al,20h						;non-specific end-of-interrupt
  1805                                  			out	20h,al						;signal end of interrupt
  1806                                  			pop	ds						;restore non-volatile regs
  1807                                  			pop	eax						;
  1808                                  			iretd							;return from interrupt
  1809                                  			menter	lpt1						;parallel port 1 interrupt
  1810                                  			push	eax						;
  1811                                  			jmp	hwint						;
  1812                                  			menter	rtclock						;real-time clock interrupt
  1813                                  			push	eax						;
  1814                                  			jmp	hwwint						;
  1815                                  			menter	retrace						;CGA vertical retrace interrupt
  1816                                  			push	eax						;
  1817                                  			jmp	hwwint						;
  1818                                  			menter	irq10						;reserved
  1819                                  			push	eax						;
  1820                                  			jmp	hwwint						;
  1821                                  			menter	irq11						;reserved
  1822                                  			push	eax						;
  1823                                  			jmp	hwwint						;
  1824                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1825                                  			push	eax						;
  1826                                  			jmp	hwwint						;
  1827                                  			menter	coprocessor					;coprocessor interrupt
  1828                                  			push	eax						;
  1829                                  			jmp	hwwint						;
  1830                                  			menter	fixeddisk					;fixed disk interrupt
  1831                                  			push	eax						;
  1832                                  			jmp	hwwint						;
  1833                                  			menter	irq15						;reserved
  1834                                  			push	eax						;save volatile reg
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;	Exit from hardware interrupt
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1841                                  			jmp	hwint90						;skip ahead
  1842                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1843                                  hwint90			pop	eax						;restore volatile reg
  1844                                  			iretd							;return from interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;	INT 30h Operating System Software Service Interrupt
  1848                                  ;
  1849                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1850                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1851                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1852                                  ;	the entry address of the specific function from a table.
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  			menter	svc
  1856                                  			cmp	al,maxtsvc					;is our function out of range?
  1857                                  			jae	svc90						;yes, skip ahead
  1858                                  			movzx	eax,al						;function
  1859                                  			shl	eax,2						;offset into table
  1860                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  1861                                  svc90			iretd							;return from interrupt
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;	Service Request Table
  1865                                  ;
  1866                                  ;
  1867                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1868                                  ;
  1869                                  ;-----------------------------------------------------------------------------------------------------------------------
  1870                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1871                                  			tsvce	ClearConsoleScreen				;clear console screen
  1872                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1873                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                  ;
  1876                                  ;	Service Request Macros
  1877                                  ;
  1878                                  ;	These macros provide positional parameterization of service request calls.
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  %macro			putConsoleString 1
  1882                                  			mov	edx,%1						;EDX = string address
  1883                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1884                                  			int	_svc						;invoke OS service
  1885                                  %endmacro
  1886                                  %macro			clearConsoleScreen 0
  1887                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  1888                                  			int	_svc						;invoke OS service
  1889                                  %endmacro
  1890                                  %macro			placeCursor 0
  1891                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  1892                                  			int	_svc						;invoke OS service
  1893                                  %endmacro
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;	Kernel Function Library
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;	Console Helper Routines
  1902                                  ;
  1903                                  ;	PutConsoleString
  1904                                  ;	NextConsoleColumn
  1905                                  ;	FirstConsoleColumn
  1906                                  ;	NextConsoleRow
  1907                                  ;	PutConsoleChar
  1908                                  ;	PutConsoleOIAShift
  1909                                  ;	PutConsoleOIAChar
  1910                                  ;	PutConsoleHexByte
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;	Routine:	PutConsoleString
  1916                                  ;
  1917                                  ;	Description:	Write a sequence of ASCII characters to the console until null and update the console position
  1918                                  ;			as needed.
  1919                                  ;
  1920                                  ;	In:		EDX	source address
  1921                                  ;			DS	OS data selector
  1922                                  ;
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                  PutConsoleString	push	esi						;save volatile regs
  1925                                  			mov	esi,edx						;source address
  1926                                  			cld							;forward strings
  1927                                  .10			lodsb							;ASCII character
  1928                                  			or	al,al						;end of string?
  1929                                  			jz	.40						;yes, skip ahead
  1930                                  			cmp	al,EASCIIRETURN					;carriage return?
  1931                                  			jne	.20						;no, skip ahead
  1932                                  			call	FirstConsoleColumn				;move to start of row
  1933                                  			jmp	.10						;next character
  1934                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  1935                                  			jne	.30						;no, skip ahead
  1936                                  			call	NextConsoleRow					;move to next row
  1937                                  			jmp	.10						;next character
  1938                                  .30			call	PutConsoleChar					;output character to console
  1939                                  			call	NextConsoleColumn				;advance to next column
  1940                                  			jmp	.10						;next character
  1941                                  .40			pop	esi						;restore volatile regs
  1942                                  			ret							;return to caller
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  ;
  1945                                  ;	Routine:	NextConsoleColumn
  1946                                  ;
  1947                                  ;	Description:	Advance the console position one column. Wrap the column and advance one row if needed.
  1948                                  ;
  1949                                  ;	In:		DS	OS data selector
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  1953                                  			inc	al						;increment column
  1954                                  			mov	[wbConsoleColumn],al				;save column
  1955                                  			cmp	al,ECONCOLS					;end of row?
  1956                                  			jb	.10						;no, skip ahead
  1957                                  			call	FirstConsoleColumn				;reset column to start of row
  1958                                  			call	NextConsoleRow					;line feed to next row
  1959                                  .10			ret							;return to caller
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                  ;
  1962                                  ;	Routine:	FirstConsoleColumn
  1963                                  ;
  1964                                  ;	Description:	Reset the console column to start of the row.
  1965                                  ;
  1966                                  ;	In:		DS	OS data selector
  1967                                  ;
  1968                                  ;-----------------------------------------------------------------------------------------------------------------------
  1969                                  FirstConsoleColumn	xor	al,al						;zero column
  1970                                  			mov	[wbConsoleColumn],al				;save column
  1971                                  			ret							;return to caller
  1972                                  ;-----------------------------------------------------------------------------------------------------------------------
  1973                                  ;
  1974                                  ;	Routine:	NextConsoleRow
  1975                                  ;
  1976                                  ;	Description:	Advance the console position one line. Scroll the screen one row if needed.
  1977                                  ;
  1978                                  ;	In:		DS	OS data selector
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  1982                                  			inc	al						;increment row
  1983                                  			mov	[wbConsoleRow],al				;save row
  1984                                  			cmp	al,ECONROWS					;end of screen?
  1985                                  			jb	.10						;no, skip ahead
  1986                                  			call	ScrollConsoleRow				;scroll up one row
  1987                                  			mov	al,[wbConsoleRow]				;row
  1988                                  			dec	al						;decrement row
  1989                                  			mov	[wbConsoleRow],al				;save row
  1990                                  .10			ret							;return to caller
  1991                                  ;-----------------------------------------------------------------------------------------------------------------------
  1992                                  ;
  1993                                  ;	Routine:	PutConsoleChar
  1994                                  ;
  1995                                  ;	Description:	Write one ASCII character to the console screen.
  1996                                  ;
  1997                                  ;	In:		AL	ASCII character
  1998                                  ;			DS	OS data selector
  1999                                  ;
  2000                                  ;-----------------------------------------------------------------------------------------------------------------------
  2001                                  PutConsoleChar		push	ecx						;save volatile regs
  2002                                  			push	es						;
  2003                                  			push	ESELCGA						;load CGA selector ...
  2004                                  			pop	es						;... into extra segment reg
  2005                                  			mov	cl,[wbConsoleColumn]				;column
  2006                                  			mov	ch,[wbConsoleRow]				;row
  2007                                  			call	SetConsoleChar					;put character at row, column
  2008                                  			pop	es						;restore volatile regs
  2009                                  			pop	ecx						;
  2010                                  			ret							;return to caller
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                  ;
  2013                                  ;	Routine:	PutConsoleOIAShift
  2014                                  ;
  2015                                  ;	Description:	Update the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2016                                  ;
  2017                                  ;	Input:		bl	shift flags
  2018                                  ;			bh	lock flags
  2019                                  ;			ds	OS data selector
  2020                                  ;
  2021                                  ;-----------------------------------------------------------------------------------------------------------------------
  2022                                  PutConsoleOIAShift	push	ecx						;save volatile regs
  2023                                  			push	es						;
  2024                                  			push	ESELCGA						;load CGA selector ...
  2025                                  			pop	es						;... into ES register
  2026                                  			mov	ch,ECONOIAROW					;OIA row
  2027                                  			mov	al,EASCIISPACE					;space is default character
  2028                                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2029                                  			jz	.10						;no, skip ahead
  2030                                  			mov	al,'S'						;yes, indicate with 'S'
  2031                                  .10			mov	cl,14						;indicator column
  2032                                  			call	SetConsoleChar					;display ASCII character
  2033                                  			mov	al,EASCIISPACE					;ASCII space
  2034                                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2035                                  			jz	.20						;no, skip ahead
  2036                                  			mov	al,'S'						;yes, indicate with 'S'
  2037                                  .20			mov	cl,64						;indicator column
  2038                                  			call	SetConsoleChar					;display ASCII character
  2039                                  			mov	al,EASCIISPACE					;ASCII space
  2040                                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2041                                  			jz	.30						;no, skip ahead
  2042                                  			mov	al,'C'						;yes, indicate with 'C'
  2043                                  .30			mov	cl,15						;indicator column
  2044                                  			call	SetConsoleChar					;display ASCII character
  2045                                  			mov	al,EASCIISPACE					;ASCII space
  2046                                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2047                                  			jz	.40						;no, skip ahead
  2048                                  			mov	al,'C'						;yes, indicate with 'C'
  2049                                  .40			mov	cl,63						;indicator column
  2050                                  			call	SetConsoleChar					;display ASCII character
  2051                                  			mov	al,EASCIISPACE					;ASCII space
  2052                                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2053                                  			jz	.50						;no, skip ahead
  2054                                  			mov	al,'A'						;yes, indicate with 'A'
  2055                                  .50			mov	cl,16						;indicator column
  2056                                  			call	SetConsoleChar					;display ASCII character
  2057                                  			mov	al,EASCIISPACE					;ASCII space
  2058                                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2059                                  			jz	.60						;no, skip ahead
  2060                                  			mov	al,'A'						;yes, indicate with 'A'
  2061                                  .60			mov	cl,62						;indicator column
  2062                                  			call	SetConsoleChar					;display ASCII character
  2063                                  			mov	al,EASCIISPACE					;ASCII space
  2064                                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2065                                  			jz	.70						;no, skip ahead
  2066                                  			mov	al,'C'						;yes, indicate with 'C'
  2067                                  .70			mov	cl,78						;indicator column
  2068                                  			call	SetConsoleChar					;display ASCII character
  2069                                  			mov	al,EASCIISPACE					;ASCII space
  2070                                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2071                                  			jz	.80						;no, skip ahead
  2072                                  			mov	al,'N'						;yes, indicate with 'N'
  2073                                  .80			mov	cl,77						;indicator column
  2074                                  			call	SetConsoleChar					;display ASCII character
  2075                                  			mov	al,EASCIISPACE					;ASCII space
  2076                                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2077                                  			jz	.90						;no, skip ahead
  2078                                  			mov	al,'S'						;yes, indicate with 'S'
  2079                                  .90			mov	cl,76						;indicator column
  2080                                  			call	SetConsoleChar					;display ASCII character
  2081                                  			pop	es						;restore volatile regs
  2082                                  			pop	ecx						;
  2083                                  			ret							;return to caller
  2084                                  ;-----------------------------------------------------------------------------------------------------------------------
  2085                                  ;
  2086                                  ;	Routine:	PutConsoleOIAChar
  2087                                  ;
  2088                                  ;	Description:	Update the Operator Information Area (OIA).
  2089                                  ;
  2090                                  ;	In:		ds	OS data selector
  2091                                  ;
  2092                                  ;-----------------------------------------------------------------------------------------------------------------------
  2093                                  PutConsoleOIAChar	push	ebx						;save volatile regs
  2094                                  			push	ecx						;
  2095                                  			push	esi						;
  2096                                  			push	ds						;
  2097                                  			push	es						;
  2098                                  			push	ESELDAT						;load OS data selector ...
  2099                                  			pop	ds						;... into data segment register
  2100                                  			push	ESELCGA						;load CGA selector ...
  2101                                  			pop	es						;... into extra segment register
  2102                                  			mov	esi,wbConsoleScan0				;scan codes address
  2103                                  			mov	bh,ECONOIAROW					;OIA row
  2104                                  			mov	bl,0						;starting column
  2105                                  			mov	ecx,6						;maximum scan codes
  2106                                  .10			push	ecx						;save remaining count
  2107                                  			mov	ecx,ebx						;row, column
  2108                                  			lodsb							;read scan code
  2109                                  			or	al,al						;scan code present?
  2110                                  			jz	.20						;no, skip ahead
  2111                                  			call	PutConsoleHexByte				;display scan code
  2112                                  			jmp	.30						;continue
  2113                                  .20			mov	al,' '						;ASCII space
  2114                                  			call	SetConsoleChar					;display space
  2115                                  			inc	cl
  2116                                  			mov	al,' '						;ASCII space
  2117                                  			call	SetConsoleChar					;display space
  2118                                  .30			add	bl,2						;next column (+2)
  2119                                  			pop	ecx						;restore remaining
  2120                                  			loop	.10						;next code
  2121                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2122                                  			cmp	al,32						;printable? (lower-bounds)
  2123                                  			jb	.40						;no, skip ahead
  2124                                  			cmp	al,126						;printable? (upper-bounds)
  2125                                  			ja	.40						;no, skip ahead
  2126                                  			mov	ch,bh						;OIA row
  2127                                  			mov	cl,40						;character display column
  2128                                  			call	SetConsoleChar					;display ASCII character
  2129                                  .40			pop	es						;restore volatile regs
  2130                                  			pop	ds						;
  2131                                  			pop	esi						;
  2132                                  			pop	ecx						;
  2133                                  			pop	ebx						;
  2134                                  			ret							;return to caller
  2135                                  ;-----------------------------------------------------------------------------------------------------------------------
  2136                                  ;
  2137                                  ;	Routine:	PutConsoleHexByte
  2138                                  ;
  2139                                  ;	Description:	Write two ASCII characters to the console screen representing the value of a byte.
  2140                                  ;
  2141                                  ;	In:		al	byte value
  2142                                  ;			ch	row
  2143                                  ;			cl	column
  2144                                  ;			ds	OS data selector
  2145                                  ;			es	CGA selector
  2146                                  ;
  2147                                  ;-----------------------------------------------------------------------------------------------------------------------
  2148                                  PutConsoleHexByte	push	ebx						;save volatile regs
  2149                                  			mov	bl,al						;save byte value
  2150                                  			shr	al,4						;hi-order nybble
  2151                                  			or	al,030h						;apply ASCII zone
  2152                                  			cmp	al,03ah						;numeric?
  2153                                  			jb	.10						;yes, skip ahead
  2154                                  			add	al,7						;add ASCII offset for alpha
  2155                                  .10			call	SetConsoleChar					;display ASCII character
  2156                                  			inc	cl						;increment column
  2157                                  			mov	al,bl						;byte value
  2158                                  			and	al,0fh						;lo-order nybble
  2159                                  			or	al,30h						;apply ASCII zone
  2160                                  			cmp	al,03ah						;numeric?
  2161                                  			jb	.20						;yes, skip ahead
  2162                                  			add	al,7						;add ASCII offset for alpha
  2163                                  .20			call	SetConsoleChar					;display ASCII character
  2164                                  			pop	ebx						;restore volatile regs
  2165                                  			ret							;return to caller
  2166                                  ;-----------------------------------------------------------------------------------------------------------------------
  2167                                  ;
  2168                                  ;	Memory-Mapped Video Routines
  2169                                  ;
  2170                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2171                                  ;
  2172                                  ;	ClearConsoleScreen
  2173                                  ;	ScrollConsoleRow
  2174                                  ;	SetConsoleChar
  2175                                  ;
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  ;-----------------------------------------------------------------------------------------------------------------------
  2178                                  ;
  2179                                  ;	Routine:	ClearConsoleScreen
  2180                                  ;
  2181                                  ;	Description:	Clear the console (CGA) screen.
  2182                                  ;
  2183                                  ;-----------------------------------------------------------------------------------------------------------------------
  2184                                  ClearConsoleScreen	push	ecx						;save volatile regs
  2185                                  			push	edi						;
  2186                                  			push	ds						;
  2187                                  			push	es						;
  2188                                  			push	ESELDAT						;load OS Data selector ...
  2189                                  			pop	ds						;... into DS register
  2190                                  			push	ESELCGA						;load CGA selector ...
  2191                                  			pop	es						;... into ES register
  2192                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2193                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2194                                  			xor	edi,edi						;target offset
  2195                                  			cld							;forward strings
  2196                                  			rep	stosd						;reset screen body
  2197                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2198                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2199                                  			rep	stosd						;reset OIA line
  2200                                  			xor	al,al						;zero register
  2201                                  			mov	[wbConsoleRow],al				;reset console row
  2202                                  			mov	[wbConsoleColumn],al				;reset console column
  2203                                  			call	PlaceCursor					;place cursor at current position
  2204                                  			pop	es						;restore volatile regs
  2205                                  			pop	ds						;
  2206                                  			pop	edi						;
  2207                                  			pop	ecx						;
  2208                                  			ret							;return to caller
  2209                                  ;-----------------------------------------------------------------------------------------------------------------------
  2210                                  ;
  2211                                  ;	Routine:	ScrollConsoleRow
  2212                                  ;
  2213                                  ;	Description:	Scroll console (text) screen up one row.
  2214                                  ;
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ScrollConsoleRow	push	ecx						;save volatile regs
  2217                                  			push	esi						;
  2218                                  			push	edi						;
  2219                                  			push	ds						;
  2220                                  			push	es						;
  2221                                  			push	ESELCGA						;load CGA video selector ...
  2222                                  			pop	ds						;... into DS
  2223                                  			push	ESELCGA						;load CGA video selector ...
  2224                                  			pop	es						;... into ES
  2225                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2226                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2227                                  			xor	edi,edi						;edi = target (line 1)
  2228                                  			cld							;forward strings
  2229                                  			rep	movsd						;move 24 lines up
  2230                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2231                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2232                                  			rep	stosd						;clear bottom row
  2233                                  			pop	es						;restore volatile regs
  2234                                  			pop	ds						;
  2235                                  			pop	edi						;
  2236                                  			pop	esi						;
  2237                                  			pop	ecx						;
  2238                                  			ret							;return to caller
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                  ;
  2241                                  ;	Routine:	SetConsoleChar
  2242                                  ;
  2243                                  ;	Description:	Output an ASCII character at the given row and column.
  2244                                  ;
  2245                                  ;	In:		AL	ASCII character
  2246                                  ;			CL	column
  2247                                  ;			CH	row
  2248                                  ;			ES	CGA selector
  2249                                  ;
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                  SetConsoleChar		mov	dl,al						;ASCII character
  2252                                  			movzx	eax,ch						;row
  2253                                  			mov	ah,ECONCOLS					;cols/row
  2254                                  			mul	ah						;row * cols/row
  2255                                  			add	al,cl						;add column
  2256                                  			adc	ah,0						;handle carry
  2257                                  			shl	eax,1						;screen offset
  2258                                  			mov	[es:eax],dl					;store character
  2259                                  			ret							;return to caller
  2260                                  ;-----------------------------------------------------------------------------------------------------------------------
  2261                                  ;
  2262                                  ;	Input/Output Routines
  2263                                  ;
  2264                                  ;	These routines read and/or write directly to ports.
  2265                                  ;
  2266                                  ;	PlaceCursor
  2267                                  ;	PutPrimaryEndOfInt
  2268                                  ;	PutSecondaryEndOfInt
  2269                                  ;	SetKeyboardLamps
  2270                                  ;	WaitForKeyInBuffer
  2271                                  ;	WaitForKeyOutBuffer
  2272                                  ;
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  ;-----------------------------------------------------------------------------------------------------------------------
  2275                                  ;
  2276                                  ;	Routine:	PlaceCursor
  2277                                  ;
  2278                                  ;	Description:	Position the cursor on the console.
  2279                                  ;
  2280                                  ;	In:		DS	OS data selector
  2281                                  ;
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283                                  PlaceCursor		push	ecx						;save volatile regs
  2284                                  			mov	al,[wbConsoleRow]				;al = row
  2285                                  			mov	ah,ECONCOLS					;ah = cols/row
  2286                                  			mul	ah						;row offset
  2287                                  			add	al,[wbConsoleColumn]				;add column
  2288                                  			adc	ah,0						;add overflow
  2289                                  			mov	ecx,eax						;screen offset
  2290                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2291                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2292                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2293                                  			out	dx,al						;select register
  2294                                  			inc	edx						;data port
  2295                                  			mov	al,ch						;hi-order cursor loc
  2296                                  			out	dx,al						;store hi-order loc
  2297                                  			dec	edx						;register select port
  2298                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2299                                  			out	dx,al						;select register
  2300                                  			inc	edx						;data port
  2301                                  			mov	al,cl						;lo-order cursor loc
  2302                                  			out	dx,al						;store lo-order loc
  2303                                  			pop	ecx						;restore volatile regs
  2304                                  			ret							;return to caller
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  ;
  2307                                  ;	Routine:	PutPrimaryEndOfInt
  2308                                  ;
  2309                                  ;	Description:	Send non-specific end-of-interrupt signal to the primary PIC.
  2310                                  ;
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2313                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2314                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  2315                                  			ret							;return to caller
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                  ;
  2318                                  ;	Routine:	PutSecondaryEndOfInt
  2319                                  ;
  2320                                  ;	Description:	Send non-specific end-of-interrupt signal to the secondary PIC.
  2321                                  ;
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2324                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2325                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2326                                  			ret							;return to caller
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                  ;
  2329                                  ;	Routine:	SetKeyboardLamps
  2330                                  ;
  2331                                  ;	Description:	Send the set/reset mode indicators command.
  2332                                  ;
  2333                                  ;	In:		bh	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2334                                  ;
  2335                                  ;-----------------------------------------------------------------------------------------------------------------------
  2336                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2337                                  			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2338                                  			out	EKEYPORTDATA,al					;send command to 8042
  2339                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2340                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2341                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  2342                                  			mov	al,bh						;set/reset lamps value
  2343                                  			out	EKEYPORTDATA,al					;send lamps value
  2344                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2345                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2346                                  			ret							;return to caller
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348                                  ;
  2349                                  ;	Routine:	WaitForKeyInBuffer
  2350                                  ;
  2351                                  ;	Description:	Wait for keyboard input buffer to be ready for input.
  2352                                  ;
  2353                                  ;	Out:		ZF	1 = Input buffer ready
  2354                                  ;				0 = Input buffer not ready after timeout
  2355                                  ;
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  WaitForKeyInBuffer	push	ecx						;save volatile regs
  2358                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2359                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2360                                  			test	al,EKEYBITIN					;is input buffer still full?
  2361                                  			loopnz	.10						;yes, repeat till timeout
  2362                                  			pop	ecx						;restore volatile regs
  2363                                  			ret							;return to caller
  2364                                  ;-----------------------------------------------------------------------------------------------------------------------
  2365                                  ;
  2366                                  ;	Routine:	WaitForKeyOutBuffer
  2367                                  ;
  2368                                  ;	Description:	Wait for keyboard output buffer to have data to read.
  2369                                  ;
  2370                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2371                                  ;				1 = Output buffer empty after timeout
  2372                                  ;
  2373                                  ;-----------------------------------------------------------------------------------------------------------------------
  2374                                  WaitForKeyOutBuffer	push	ecx						;save volatile regs
  2375                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2376                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2377                                  			test	al,EKEYBITOUT					;output buffer status bit
  2378                                  			loopz	.10						;loop until output buffer bit
  2379                                  			pop	ecx						;restore volatile regs
  2380                                  			ret							;return to caller
  2381                                  ;-----------------------------------------------------------------------------------------------------------------------
  2382                                  ;
  2383                                  ;	End of the Kernel Function Library
  2384                                  ;
  2385                                  ;-----------------------------------------------------------------------------------------------------------------------
  2386                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  2387                                  			db	055h,0AAh					;end of segment
  2388                                  ;-----------------------------------------------------------------------------------------------------------------------
  2389                                  ;
  2390                                  ;	Console Task
  2391                                  ;
  2392                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2393                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2394                                  ;	screen and responds to user commands.
  2395                                  ;
  2396                                  ;-----------------------------------------------------------------------------------------------------------------------
  2397                                  ;-----------------------------------------------------------------------------------------------------------------------
  2398                                  ;
  2399                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2400                                  ;
  2401                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2402                                  ;
  2403                                  ;-----------------------------------------------------------------------------------------------------------------------
  2404                                  section			constack						;console task stack
  2405                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  2406                                  ;-----------------------------------------------------------------------------------------------------------------------
  2407                                  ;
  2408                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2409                                  ;
  2410                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2411                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2412                                  ;	16 descriptors. Six are initially defined.
  2413                                  ;
  2414                                  ;-----------------------------------------------------------------------------------------------------------------------
  2415                                  section			conldt							;console local descriptors
  2416                                  			dq	004093004780007Fh				;04 TSS alias
  2417                                  			dq	004093004700007Fh				;0C LDT alias
  2418                                  			dq	00409300400006FFh				;14 stack
  2419                                  			dq	00C093000000FFFFh				;1C data
  2420                                  			dq	00409B0050000FFFh				;24 code
  2421                                  			dq	00409300480007FFh				;2C message queue
  2422                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2423                                  ;-----------------------------------------------------------------------------------------------------------------------
  2424                                  ;
  2425                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2426                                  ;
  2427                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2428                                  ;	segment. CS to console code.
  2429                                  ;
  2430                                  ;-----------------------------------------------------------------------------------------------------------------------
  2431                                  section			contss							;console task state segment
  2432                                  			dd	0						;00 back-link tss
  2433                                  			dd	0700h						;04 esp ring 0
  2434                                  			dd	0014h						;08 ss ring 0
  2435                                  			dd	0700h						;0C esp ring 1
  2436                                  			dd	0014h						;10 es ring 1
  2437                                  			dd	0700h						;14 esp ring 2
  2438                                  			dd	0014h						;18 ss ring 2
  2439                                  			dd	0						;1C cr ring 3
  2440                                  			dd	0						;20 eip
  2441                                  			dd	0200h						;24 eflags
  2442                                  			dd	0						;28 eax
  2443                                  			dd	0						;2C ecx
  2444                                  			dd	0						;30 edx
  2445                                  			dd	0						;34 ebx
  2446                                  			dd	0700h						;38 esp ring 3
  2447                                  			dd	0						;3C ebp
  2448                                  			dd	0						;40 esi
  2449                                  			dd	0						;44 edi
  2450                                  			dd	001Ch						;48 es
  2451                                  			dd	0024h						;4C cs
  2452                                  			dd	0014h						;50 ss ring 3
  2453                                  			dd	001Ch						;54 ds
  2454                                  			dd	0						;58 fs
  2455                                  			dd	0						;5c gs
  2456                                  			dd	0050h						;60 ldt selector in gdt
  2457                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2458                                  ;-----------------------------------------------------------------------------------------------------------------------
  2459                                  ;
  2460                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2461                                  ;
  2462                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2463                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2464                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2465                                  ;	event.
  2466                                  ;
  2467                                  ;-----------------------------------------------------------------------------------------------------------------------
  2468                                  section			conmque							;console message queue
  2469                                  			dd	8						;head pointer
  2470                                  			dd	8						;tail pointer
  2471                                  			times	510 dd 0					;queue elements
  2472                                  ;-----------------------------------------------------------------------------------------------------------------------
  2473                                  ;
  2474                                  ;	Console Code								@disk: 008400	@mem: 005000
  2475                                  ;
  2476                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2477                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2478                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2479                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2480                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2481                                  ;	board input, echoing to the console screen and responding to user commands.
  2482                                  ;
  2483                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2484                                  ;
  2485                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2486                                  ;				|  Real Mode Interrupt Vectors			|
  2487                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2488                                  ;				|  Reserved BIOS Memory Area			|
  2489                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2490                                  ;				|  Shared Kernel Memory Area			|
  2491                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2492                                  ;				|  Global Descriptor Table (GDT)		|
  2493                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2494                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2495                                  ;			002000	+-----------------------------------------------+
  2496                                  ;				|  Interrupt Handlers				|
  2497                                  ;				|  Kernel Function Library			|
  2498                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2499                                  ;				|  Console Task Stack Area			|
  2500                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2501                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2502                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2503                                  ;				|  Console Task Task State Segment (TSS)	|
  2504                                  ;			004800	+-----------------------------------------------+
  2505                                  ;				|  Console Task Message Queue			|
  2506                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2507                                  ;				|  Console Task Code				|
  2508                                  ;				|  Console Task Constants			|
  2509                                  ;			006000	+===============================================+
  2510                                  ;
  2511                                  ;-----------------------------------------------------------------------------------------------------------------------
  2512                                  section			concode	vstart=5000h					;labels relative to 5000h
  2513                                  ConCode			call	ConInitializeData				;initialize console variables
  2514                                  			clearConsoleScreen					;clear the console screen
  2515                                  			putConsoleString czTitle				;display startup message
  2516                                  .10			putConsoleString czPrompt				;display input prompt
  2517                                  			placeCursor						;set CRT cursor location
  2518                                  .20			sti							;enable interrupts
  2519                                  			hlt							;halt until interrupt
  2520                                  			jmp	.20						;continue halt loop
  2521                                  ;-----------------------------------------------------------------------------------------------------------------------
  2522                                  ;
  2523                                  ;	Routine:	ConInitializeData
  2524                                  ;
  2525                                  ;	Description:	Initialize console variables used by the console task.
  2526                                  ;
  2527                                  ;-----------------------------------------------------------------------------------------------------------------------
  2528                                  ConInitializeData	push	ecx						;save volatile regs
  2529                                  			push	edi						;
  2530                                  			push	es						;
  2531                                  			push	ESELDAT						;load OS data selector ...
  2532                                  			pop	es						;... into extra segment register
  2533                                  			mov	edi,ECONDATA					;OS console data address
  2534                                  			xor	al,al						;initialization value
  2535                                  			mov	ecx,ECONDATALEN					;size of OS console data
  2536                                  			cld							;forward strings
  2537                                  			rep	stosb						;initialize data
  2538                                  			pop	es						;restore volatile regs
  2539                                  			pop	edi						;
  2540                                  			pop	ecx						;
  2541                                  			ret							;return to caller
  2542                                  ;-----------------------------------------------------------------------------------------------------------------------
  2543                                  ;
  2544                                  ;	Constants
  2545                                  ;
  2546                                  ;-----------------------------------------------------------------------------------------------------------------------
  2547                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  2548                                  czPrompt		db	":",0						;prompt string
  2549                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  2550                                  			db	055h,0AAh					;end of section
  2551                                  %endif
  2552                                  %ifdef BUILDDISK
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  ;
  2555                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  2556                                  ;
  2557                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2558                                  ;
  2559                                  ;-----------------------------------------------------------------------------------------------------------------------
  2560                                  section			unused							;unused disk space
  2561                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  2562                                  %endif
