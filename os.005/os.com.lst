     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   272                                  ;
   273                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   274                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   275                                  ;
   276                                  ;       0.......        Segment is not present in memory (triggers int 11)
   277                                  ;       1.......        Segment is present in memory
   278                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   279                                  ;       ...0....        Segment is a system segment
   280                                  ;       ...00010                Local Descriptor Table
   281                                  ;       ...00101                Task Gate
   282                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   283                                  ;       ...01100                Call Gate (386)
   284                                  ;       ...01110                Interrupt Gate (386)
   285                                  ;       ...01111                Trap Gate (386)
   286                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   287                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   288                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   292                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   293                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   294                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   295                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   296                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   297                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   298                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;
   301                                  ;       Firmware-Defined Values
   302                                  ;
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;
   306                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   307                                  ;
   308                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   309                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   310                                  ;
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   313                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   314                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   315                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   316                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   317                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   318                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   319                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   320                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   321                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   322                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       Standards-Based Values
   326                                  ;
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       ASCII                                                                   EASCII...
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   334                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   335                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   336                                  EASCIISPACE             equ     020h                                            ;space
   337                                  EASCIIUPPERA            equ     041h                                            ;'A'
   338                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   339                                  EASCIICASE              equ     00100000b                                       ;case bit
   340                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;
   343                                  ;       Operating System Values
   344                                  ;
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   349                                  ;
   350                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   351                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   352                                  ;
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   355                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   356                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   357                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   358                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   359                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   360                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  ;       Console Constants                                                       ECON...
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ECONCOLS                equ     80                                              ;columns per row
   365                                  ECONROWS                equ     24                                              ;console rows
   366                                  ECONOIAROW              equ     24                                              ;operator information area row
   367                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   368                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   369                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   370                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   371                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   376                                  EGDTCGA                 equ     020h                                            ;cga video selector
   377                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   378                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   379                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   380                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   381                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   382                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;       Keyboard Flags                                                          EKEYF...
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   387                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   388                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   389                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   390                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   391                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   392                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   393                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   394                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   395                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   396                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;       Kernel Constants                                                        EKRN...
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   401                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   402                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   403                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   404                                  ;=======================================================================================================================
   405                                  ;
   406                                  ;       Structures
   407                                  ;
   408                                  ;=======================================================================================================================
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;
   411                                  ;       OSDATA
   412                                  ;
   413                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   414                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   415                                  ;
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  struc                   OSDATA
   418 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   419 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   420 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   421 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   422 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   423 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   424 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   425 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   426 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   427 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   428 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   429 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   430 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   431 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   432 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   433 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   434 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   435 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   436 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   437 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   438 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   439 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   440 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   441 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   442 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   443 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   444 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   445 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   446 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   447 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   448 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   449 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   450 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   451 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   452 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   453 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   454 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   455 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   456 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   457 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   458 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   459 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   460 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   461 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   462 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   463 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   464 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   465 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   466 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   467 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   468 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   469 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   470 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   471 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   472 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   473 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   474 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   475 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   476 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   477 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   478 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   479 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   480 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   481 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   482 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   483 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   484 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   485 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   486 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   487 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   488 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   489 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   490 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   491 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   492 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   493 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   494 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   495 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   496 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   497 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   498 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   499 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   500 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   501 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   502 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   503 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   504 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   505 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   506 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   507 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   508 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   509 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   510 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   511 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   512 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   513 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   514 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   515 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   516 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   517 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   518 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  ;
   521                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   522                                  ;
   523                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   524                                  ;
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  ECONDATA                equ     ($)
   527 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   528 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   529 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   530 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   531 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   532 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   533 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   534 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   535 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   536 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   537 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   538 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   539                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   540                                  ;-----------------------------------------------------------------------------------------------------------------------
   541                                  ;
   542                                  ;       End of OS Variables
   543                                  ;
   544                                  ;-----------------------------------------------------------------------------------------------------------------------
   545                                  endstruc
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  ;
   548                                  ;       Macros
   549                                  ;
   550                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   551                                  ;
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  %macro                  mint    1
   554                                  _%1                     equ     ($-$$) / EX86DESCLEN
   555                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   556                                  %endmacro
   557                                  %macro                  mtrap   1
   558                                  _%1                     equ     ($-$$) / EX86DESCLEN
   559                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   560                                  %endmacro
   561                                  %macro                  menter  1
   562                                  ?%1                     equ     ($-$$)
   563                                  %endmacro
   564                                  %macro                  tsvce   1
   565                                  e%1                     equ     ($-tsvc)/4
   566                                                          dd      %1
   567                                  %endmacro
   568                                  %ifdef BUILDBOOT
   569                                  ;=======================================================================================================================
   570                                  ;
   571                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   572                                  ;
   573                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   574                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   575                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   576                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   577                                  ;
   578                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   579                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   580                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   581                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   582                                  ;       immediately followed by a disk parameter table.
   583                                  ;
   584                                  ;=======================================================================================================================
   585                                                          cpu     8086                                            ;assume minimal CPU
   586                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   587                                                          bits    16                                              ;16-bit code at power-up
   588                                  %ifdef BUILDPREP
   589                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   590                                  %else
   591                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   592                                  %endif
   593                                  ;-----------------------------------------------------------------------------------------------------------------------
   594                                  ;
   595                                  ;       Disk Parameter Table
   596                                  ;
   597                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   598                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   599                                  ;
   600                                  ;-----------------------------------------------------------------------------------------------------------------------
   601                                                          db      "CustomOS"                                      ;eight-byte label
   602                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   603                                  cbClusterSectors        db      1                                               ;sectors per cluster
   604                                  cwReservedSectors       dw      1                                               ;reserved sectors
   605                                  cbFatCount              db      2                                               ;file allocation table copies
   606                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   607                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   608                                  cbDiskType              db      0F0h                                            ;1.44MB
   609                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   610                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   611                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   612                                  cwDiskSides             dw      2                                               ;sides per disk
   613                                  cwSpecialSectors        dw      0                                               ;special sectors
   614                                  ;
   615                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   616                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   617                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   618                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   619                                  ;       given several possible starting values for CS:IP.
   620                                  ;
   621                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   622                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   623                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   624                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   625                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   626                                                          mov     cl,4                                            ;shift count
   627                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   628                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   629                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   630                                  ;
   631                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   632                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   633                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   634                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   635                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   636                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   637                                  ;
   638                                                          sub     bx,16                                           ;BX = 07b0
   639                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   640                                                          mov     es,bx                                           ;ES = 07b0 = psp
   641                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   642                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   643                                  ;
   644                                  ;       Our boot addressability is now set up according to the following diagram.
   645                                  ;
   646                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   647                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   648                                  ;                               |  256 = 100h bytes                             |
   649                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   650                                  ;                               |  Boot Sector (vstart=0100h)                   |
   651                                  ;                               |  1 sector = 512 = 200h bytes                  |
   652                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   653                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   654                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   655                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   656                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   657                                  ;                               |  2 sectors = 1024 = 400h bytes
   658                                  ;                       009400  +-----------------------------------------------+ DS:1900
   659                                  ;
   660                                  ;       On entry, DL indicates the drive being booted from.
   661                                  ;
   662                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   663                                  ;
   664                                  ;       Compute directory i/o buffer address.
   665                                  ;
   666                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   667                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   668                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   669                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   670                                  ;
   671                                  ;       Compute segment where os.com will be loaded.
   672                                  ;
   673                                                          shr     ax,cl                                           ;AX = 0150
   674                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   675                                                          sub     ax,16                                           ;AX = 08f0
   676                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   677                                  ;
   678                                  ;       Set the video mode to 80 column, 25 row, text.
   679                                  ;
   680                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   681                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   682                                  ;
   683                                  ;       Write a message to the console so we know we have our addressability established.
   684                                  ;
   685                                                          mov     si,czLoadMsg                                    ;loading message
   686                                                          call    BootPrint                                       ;display loader message
   687                                  ;
   688                                  ;       Initialize the number of directory sectors to search.
   689                                  ;
   690                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   691                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   692                                  ;
   693                                  ;       Compute number of directory sectors and initialize overhead count.
   694                                  ;
   695                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   696                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   697                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   698                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   699                                  ;
   700                                  ;       Compute directory entries per sector.
   701                                  ;
   702                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   703                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   704                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   705                                  ;
   706                                  ;       Compute first logical directory sector and update overhead count.
   707                                  ;
   708                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   709                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   710                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   711                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   712                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   713                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   714                                  ;
   715                                  ;       Read directory sector.
   716                                  ;
   717                                  .30                     mov     al,1                                            ;sector count
   718                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   719                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   720                                                          call    ReadSector                                      ;read sector into es:bx
   721                                  ;
   722                                  ;       Setup variables to search this directory sector.
   723                                  ;
   724                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   725                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   726                                                          jna     .40                                             ;no, continue
   727                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   728                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   729                                                          mov     si,cbKernelProgram                              ;program name
   730                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   731                                  ;
   732                                  ;       Loop through directory sectors searching for kernel program.
   733                                  ;
   734                                  .50                     push    si                                              ;save kernel name address
   735                                                          push    di                                              ;save dir i/o buffer address
   736                                                          mov     cx,11                                           ;length of 8+3 name
   737                                                          cld                                                     ;forward strings
   738                                                          repe    cmpsb                                           ;compare entry name
   739                                                          pop     di                                              ;restore dir i/o buffer address
   740                                                          pop     si                                              ;restore kernel name address
   741                                                          je      .60                                             ;exit loop if found
   742                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   743                                                          dec     ax                                              ;decrement remaining entries
   744                                                          jnz     .50                                             ;next entry
   745                                  ;
   746                                  ;       Repeat search if we are not at the end of the directory.
   747                                  ;
   748                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   749                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   750                                                          jne     .30                                             ;no, get next sector
   751                                                          mov     si,czNoKernel                                   ;missing kernel message
   752                                                          jmp     BootExit                                        ;display message and exit
   753                                  ;
   754                                  ;       If we find the kernel program in the directory, read the FAT.
   755                                  ;
   756                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   757                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   758                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   759                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   760                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   761                                                          call    ReadSector                                      ;read FAT into buffer
   762                                  ;
   763                                  ;       Get the starting cluster of the kernel program and target address.
   764                                  ;
   765                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   766                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   767                                  ;
   768                                  ;       Read each program cluster into RAM.
   769                                  ;
   770                                  .70                     push    ax                                              ;save cluster nbr
   771                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   772                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   773                                                          mov     [wbReadCount],cl                                ;save sectors to read
   774                                                          xor     ch,ch                                           ;CX = sectors per cluster
   775                                                          mul     cx                                              ;DX:AX = logical cluster sector
   776                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   777                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   778                                                          call    ReadSector                                      ;read sectors into ES:BX
   779                                  ;
   780                                  ;       Update buffer pointer for next cluster.
   781                                  ;
   782                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   783                                                          xor     ah,ah                                           ;AX = sectors per cluster
   784                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   785                                                          add     bx,ax                                           ;BX = next cluster target address
   786                                                          pop     ax                                              ;AX = restore cluster nbr
   787                                  ;
   788                                  ;       Compute next cluster number.
   789                                  ;
   790                                                          mov     cx,ax                                           ;CX = cluster nbr
   791                                                          mov     di,ax                                           ;DI = cluster nbr
   792                                                          shr     ax,1                                            ;AX = cluster/2
   793                                                          mov     dx,ax                                           ;DX = cluster/2
   794                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   795                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   796                                                          and     di,1                                            ;get low bit
   797                                                          add     di,ax                                           ;add one if cluster is odd
   798                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   799                                                          mov     ax,[di]                                         ;get cluster bytes
   800                                  ;
   801                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   802                                  ;
   803                                                          test    cl,1                                            ;is cluster odd?
   804                                                          jz      .80                                             ;no, skip ahead
   805                                                          mov     cl,4                                            ;shift count
   806                                                          shr     ax,cl                                           ;shift nybble low
   807                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   808                                                          cmp     ax,0FFFh                                        ;end of chain?
   809                                                          jne     .70                                             ;no, continue
   810                                  ;
   811                                  ;       Transfer control to the operating system program.
   812                                  ;
   813                                                          db      0EAh                                            ;jmp seg:offset
   814                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   815                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   816                                  ;
   817                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   818                                  ;
   819                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   820                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   821                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   822                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   823                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   824                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   825                                                          mov     ax,dx                                           ;AX = cyl sector
   826                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   827                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   828                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   829                                  ;
   830                                  ;       Try maxtries times to read sector.
   831                                  ;
   832                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   833                                  .10                     push    bx                                              ;save buffer address
   834                                                          push    cx                                              ;save retry count
   835                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   836                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   837                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   838                                                          int     EBIOSINTDISKETTE                                ;read sector
   839                                                          pop     cx                                              ;restore retry count
   840                                                          pop     bx                                              ;restore buffer address
   841                                                          jnc     BootReturn                                      ;skip ahead if done
   842                                                          loop    .10                                             ;retry
   843                                  ;
   844                                  ;       Handle disk error: convert to ASCII and store in error string.
   845                                  ;
   846                                                          mov     al,ah                                           ;AL = bios error code
   847                                                          xor     ah,ah                                           ;AX = bios error code
   848                                                          mov     dl,16                                           ;divisor for base 16
   849                                                          div     dl                                              ;AL = hi order, AH = lo order
   850                                                          or      ax,03030h                                       ;apply ASCII zone bits
   851                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   852                                                          jb      .20                                             ;continue if numeral
   853                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   854                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   855                                                          jb      .30                                             ;continue if numeral
   856                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   857                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   858                                                          mov     si,czErrorMsg                                   ;error message address
   859                                  BootExit                call    BootPrint                                       ;display messge to console
   860                                  ;
   861                                  ;       Wait for a key press.
   862                                  ;
   863                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   864                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   865                                                          jnz     .20                                             ;continue if key pressed
   866                                                          sti                                                     ;enable maskable interrupts
   867                                                          hlt                                                     ;wait for interrupt
   868                                                          jmp     .10                                             ;repeat
   869                                  ;
   870                                  ;       Reset the system.
   871                                  ;
   872                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   873                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   874                                  .30                     sti                                                     ;enable maskable interrupts
   875                                                          hlt                                                     ;stop until reset, int, nmi
   876                                                          jmp     .30                                             ;loop until restart kicks in
   877                                  ;
   878                                  ;       Display text message.
   879                                  ;
   880                                  BootPrint               cld                                                     ;forward strings
   881                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
   882                                                          test    al,al                                           ;end of string?
   883                                                          jz      BootReturn                                      ;... yes, exit our loop
   884                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   885                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   886                                                          jmp     .10                                             ;repeat until done
   887                                  BootReturn              ret                                                     ;return
   888                                  ;-----------------------------------------------------------------------------------------------------------------------
   889                                  ;
   890                                  ;       Constants
   891                                  ;
   892                                  ;-----------------------------------------------------------------------------------------------------------------------
   893                                                          align   2
   894                                  cwEntryLen              dw      32                                              ;length of directory entry
   895                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   896                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   897                                  czErrorMsg              db      "Disk error "                                   ;error message
   898                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   899                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
   900                                  ;-----------------------------------------------------------------------------------------------------------------------
   901                                  ;
   902                                  ;       Work Areas
   903                                  ;
   904                                  ;-----------------------------------------------------------------------------------------------------------------------
   905                                                          align   2
   906                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
   907                                  wwEntriesLeft           dw      0                                               ;directory entries to search
   908                                  wwOverhead              dw      0                                               ;overhead sectors
   909                                  wwSectorEntries         dw      0                                               ;directory entries per sector
   910                                  wwLogicalSector         dw      0                                               ;current logical sector
   911                                  wwReadCountCommand      equ     $                                               ;read count and command
   912                                  wbReadCount             db      0                                               ;sectors to read
   913                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   914                                  wwDriveHead             equ     $                                               ;drive, head (word)
   915                                  wbDrive                 db      0                                               ;drive
   916                                  wbHead                  db      0                                               ;head
   917                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   918                                                          db      0                                               ;sector
   919                                  wbTrack                 db      0                                               ;track
   920                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
   921                                                          db      055h,0AAh                                       ;end of sector signature
   922                                  %endif
   923                                  %ifdef BUILDPREP
   924                                  ;=======================================================================================================================
   925                                  ;
   926                                  ;       Diskette Preparation Code
   927                                  ;
   928                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   929                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   930                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   931                                  ;
   932                                  ;=======================================================================================================================
   933                                  ;
   934                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   935                                  ;
   936                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   937                                                          call    BootPrint                                       ;display message
   938                                  ;
   939                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   940                                  ;
   941                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   942                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   943                                                          jnz     .20                                             ;continue if key pressed
   944                                                          sti                                                     ;enable interrupts
   945                                                          hlt                                                     ;wait for interrupt
   946                                                          jmp     .10                                             ;repeat
   947                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   948                                                          je      .30                                             ;yes, branch
   949                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   950                                                          jne     .10                                             ;no, repeat
   951                                                          jmp     .120                                            ;yes, exit program
   952                                  ;
   953                                  ;       Display writing-sector message and patch the JMP instruction.
   954                                  ;
   955                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   956                                                          call    BootPrint                                       ;display message
   957                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   958                                                          mov     ax,01Bh                                         ;address past disk parameter table
   959                                                          mov     [bx],ax                                         ;update the JMP instruction
   960                                  ;
   961                                  ;       Try to read the boot sector.
   962                                  ;
   963                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   964                                  .40                     push    cx                                              ;save remaining tries
   965                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   966                                                          mov     dx,0                                            ;head zero, drive zero
   967                                                          mov     cx,1                                            ;track zero, sector one
   968                                                          mov     al,1                                            ;one sector
   969                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   970                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   971                                                          pop     cx                                              ;restore remaining retries
   972                                                          jnc     .50                                             ;skip ahead if successful
   973                                                          loop    .40                                             ;try again
   974                                                          mov     si,czPrepMsg20                                  ;read-error message address
   975                                                          jmp     .70                                             ;branch to error routine
   976                                  ;
   977                                  ;       Copy diskette parms from input buffer to output buffer.
   978                                  ;
   979                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   980                                                          add     si,11                                           ;skip over JMP and system ID
   981                                                          mov     di,Boot                                         ;output buffer address
   982                                                          add     di,11                                           ;skip over JMP and system ID
   983                                                          mov     cx,19                                           ;length of diskette parameters
   984                                                          cld                                                     ;forward string copies
   985                                                          rep     movsb                                           ;copy diskette parameters
   986                                  ;
   987                                  ;       Try to write boot sector to diskette.
   988                                  ;
   989                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   990                                  .60                     push    cx                                              ;save remaining tries
   991                                                          mov     bx,Boot                                         ;output buffer address
   992                                                          mov     dx,0                                            ;head zero, drive zero
   993                                                          mov     cx,1                                            ;track zero, sector one
   994                                                          mov     al,1                                            ;one sector
   995                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   996                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   997                                                          pop     cx                                              ;restore remaining retries
   998                                                          jnc     .100                                            ;skip ahead if successful
   999                                                          loop    .60                                             ;try again
  1000                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1001                                  ;
  1002                                  ;       Convert the error code to ASCII and display the error message.
  1003                                  ;
  1004                                  .70                     push    ax                                              ;save error code
  1005                                                          mov     al,ah                                           ;copy error code
  1006                                                          mov     ah,0                                            ;AX = error code
  1007                                                          mov     dl,10h                                          ;hexadecimal divisor
  1008                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1009                                                          or      ax,03030h                                       ;add ASCII zone digits
  1010                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1011                                                          jb      .80                                             ;yes, continue
  1012                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1013                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1014                                                          jb      .90                                             ;yes, continue
  1015                                                          add     al,7                                            ;no, make ASCII
  1016                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1017                                                          call    BootPrint                                       ;write error message
  1018                                                          pop     ax                                              ;restore error code
  1019                                  ;
  1020                                  ;       Display the completion message.
  1021                                  ;
  1022                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1023                                                          mov     al,ah                                           ;BIOS return code
  1024                                                          cmp     al,0                                            ;success?
  1025                                                          je      .110                                            ;yes, continue
  1026                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1027                                                          cmp     al,1                                            ;disk parameter error?
  1028                                                          je      .110                                            ;yes, continue
  1029                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1030                                                          cmp     al,2                                            ;address mark not found?
  1031                                                          je      .110                                            ;yes, continue
  1032                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1033                                                          cmp     al,3                                            ;protected disk?
  1034                                                          je      .110                                            ;yes, continue
  1035                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1036                                                          cmp     al,6                                            ;diskette removed?
  1037                                                          je      .110                                            ;yes, continue
  1038                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1039                                                          cmp     al,80H                                          ;drive timed out?
  1040                                                          je      .110                                            ;yes, continue
  1041                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1042                                  .110                    call    BootPrint                                       ;display result message
  1043                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1044                                                          int     021h                                            ;terminate DOS program
  1045                                                          ret                                                     ;return (should not execute)
  1046                                  ;-----------------------------------------------------------------------------------------------------------------------
  1047                                  ;
  1048                                  ;       Diskette Preparation Messages
  1049                                  ;
  1050                                  ;-----------------------------------------------------------------------------------------------------------------------
  1051                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1052                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1053                                                          db      13,10
  1054                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1055                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1056                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1057                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1058                                                          db      13,10,0
  1059                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1060                                                          db      13,10,0
  1061                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1062                                                          db      13,10,0
  1063                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1064                                                          db      13,10,0
  1065                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1066                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1067                                                          db      13,10,0
  1068                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1069                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1070                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1071                                                          db      13,10,"and retry."
  1072                                                          db      13,10,0
  1073                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1074                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1075                                                          db      13,10,"using another diskette."
  1076                                                          db      13,10,0
  1077                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1078                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1079                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1080                                                          db      13,10,0
  1081                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1082                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1083                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1084                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1085                                                          db      13,10,"is properly inserted in the diskette drive."
  1086                                                          db      13,10,0
  1087                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1088                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1089                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1090                                                          db      13,10,0
  1091                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1092                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1093                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1094                                                          db      13,10,0
  1095                                  wcPrepInBuf             equ     $
  1096                                  %endif
  1097                                  %ifdef BUILDDISK
  1098                                  ;=======================================================================================================================
  1099                                  ;
  1100                                  ;       File Allocation Tables
  1101                                  ;
  1102                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1103                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1104                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1105                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1106                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1107                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1108                                  ;       the last cluster in the chain.
  1109                                  ;
  1110                                  ;       Every three bytes encode two FAT entries as follows:
  1111                                  ;
  1112                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1113                                  ;
  1114                                  ;=======================================================================================================================
  1115                                  ;-----------------------------------------------------------------------------------------------------------------------
  1116                                  ;
  1117                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1118                                  ;
  1119                                  ;-----------------------------------------------------------------------------------------------------------------------
  1120                                  section                 fat1                                                    ;first copy of FAT
  1121                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1122                                                          db      005h,060h,000h, 007h,080h,000h
  1123                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1124                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1125                                                          db      011h,020h,001h, 013h,040h,001h
  1126                                                          db      015h,060h,001h, 017h,080h,001h
  1127                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1128                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1129                                                          db      021h,020h,002h, 023h,040h,002h
  1130                                                          db      025h,060h,002h, 027h,080h,002h
  1131                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1132                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1133                                  ;-----------------------------------------------------------------------------------------------------------------------
  1134                                  ;
  1135                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1136                                  ;
  1137                                  ;-----------------------------------------------------------------------------------------------------------------------
  1138                                  section                 fat2                                                    ;second copy of FAT
  1139                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1140                                                          db      005h,060h,000h, 007h,080h,000h
  1141                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1142                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1143                                                          db      011h,020h,001h, 013h,040h,001h
  1144                                                          db      015h,060h,001h, 017h,080h,001h
  1145                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1146                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1147                                                          db      021h,020h,002h, 023h,040h,002h
  1148                                                          db      025h,060h,002h, 027h,080h,002h
  1149                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1150                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1151                                  ;-----------------------------------------------------------------------------------------------------------------------
  1152                                  ;
  1153                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1154                                  ;
  1155                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1156                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1157                                  ;       copy.
  1158                                  ;
  1159                                  ;-----------------------------------------------------------------------------------------------------------------------
  1160                                  section                 dir                                                     ;diskette directory
  1161                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1162                                                          db      020h                                            ;attribute (archive bit set)
  1163                                                          times   10 db 0                                         ;unused
  1164                                                          dw      0h                                              ;time
  1165                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1166                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1167                                                          dw      2                                               ;first cluster
  1168                                                          dd      05400h                                          ;file size
  1169                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1170                                  %endif
  1171                                  %ifdef BUILDCOM
  1172                                  ;=======================================================================================================================
  1173                                  ;
  1174                                  ;       OS.COM
  1175                                  ;
  1176                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1177                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1178                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1179                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1180                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1181                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1182                                  ;
  1183                                  ;       Our loader addressability is set up according to the following diagram.
  1184                                  ;
  1185                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1186                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1187                                  ;                               |  256 = 100h bytes                             |
  1188                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1189                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1190                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1191                                  ;                       007e00  +-----------------------------------------------+
  1192                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1193                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1194                                  ;                               |                                               |
  1195                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1196                                  ;                               |                                               |
  1197                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1198                                  ;                               |  Loader Code                                  |
  1199                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1200                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1201                                  ;
  1202                                  ;=======================================================================================================================
  1203                                  ;-----------------------------------------------------------------------------------------------------------------------
  1204                                  ;
  1205                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1206                                  ;
  1207                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1208                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1209                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1210                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1211                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1212                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1213                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1214                                  ;       registers.
  1215                                  ;
  1216                                  ;-----------------------------------------------------------------------------------------------------------------------
  1217                                                          cpu     8086                                            ;assume minimal CPU
  1218                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1219                                                          bits    16                                              ;this is 16-bit code
  1220 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1221 00000001 1F                                              pop     ds                                              ;...as our data segment
  1222 00000002 0E                                              push    cs                                              ;use the code segment
  1223 00000003 07                                              pop     es                                              ;...as our extra segment
  1224                                  ;
  1225                                  ;       Write a message to the console so we know we have our addressability established.
  1226                                  ;
  1227 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1228 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1229                                  ;
  1230                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1231                                  ;
  1232 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1233 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1234 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1235 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1236                                                          cpu     386                                             ;allow 80386 instructions
  1237 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1238 00000017 E89600                                          call    PutTTYString                                    ;display message
  1239                                  ;
  1240                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1241                                  ;
  1242 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1243 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1244 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1245 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1246 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1247 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1248 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1249 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1250 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1251 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1252                                  ;
  1253                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1254                                  ;
  1255 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1256 00000038 07                                              pop     es                                              ;... as target segment
  1257 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1258 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1259 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1260 00000041 FC                                              cld                                                     ;forward strings
  1261 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1262 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1263 00000047 E86600                                          call    PutTTYString                                    ;display message
  1264                                  ;
  1265                                  ;       Switch to protected mode.
  1266                                  ;
  1267 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1268 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1269 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1270 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1271 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1272 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1273 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1274 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1275 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1276 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1277 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1278                                  ;
  1279                                  ;       Enable hardware and maskable interrupts.
  1280                                  ;
  1281 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1282 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1283 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1284 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1285                                  ;
  1286                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1287                                  ;
  1288 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1289 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1290 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1291                                  ;-----------------------------------------------------------------------------------------------------------------------
  1292                                  ;
  1293                                  ;       Routine:        LoaderExit
  1294                                  ;
  1295                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1296                                  ;
  1297                                  ;       In:             DS:SI   string address
  1298                                  ;
  1299                                  ;-----------------------------------------------------------------------------------------------------------------------
  1300 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1301                                  ;
  1302                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1303                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1304                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1305                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1306                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1307                                  ;
  1308 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1309 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1310 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1311 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1312 00000085 F4                                              hlt                                                     ;wait for interrupt
  1313 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1314                                  ;
  1315                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1316                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1317                                  ;       HLT until the system resets.
  1318                                  ;
  1319 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1320 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1321 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1322 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1323 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  ;
  1326                                  ;       Routine:        GetCPUType
  1327                                  ;
  1328                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1329                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1330                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1331                                  ;
  1332                                  ;       Out:            AX      0 = 808x, v20, etc.
  1333                                  ;                               1 = 80186
  1334                                  ;                               2 = 80286
  1335                                  ;                               3 = 80386
  1336                                  ;
  1337                                  ;-----------------------------------------------------------------------------------------------------------------------
  1338 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1339 00000092 B120                                            mov     cl,32                                           ;shift count
  1340 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1341 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1342 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1343                                                          cpu     186
  1344 0000009A 54                                              push    sp                                              ;save stack pointer
  1345 0000009B 59                                              pop     cx                                              ;...into cx
  1346 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1347 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1348                                                          cpu     286
  1349 000000A0 40                                              inc     ax                                              ;AX = 2
  1350 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1351 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1352 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1353 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1354 000000AE 40                                              inc     ax                                              ;AX = 3
  1355 000000AF C3                      .10                     ret                                                     ;return
  1356                                  ;-----------------------------------------------------------------------------------------------------------------------
  1357                                  ;
  1358                                  ;       Routine:        PutTTYString
  1359                                  ;
  1360                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1361                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1362                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1363                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1364                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1365                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1366                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1367                                  ;                       to LODSB is not needed.
  1368                                  ;
  1369                                  ;       In:             DS:SI   address of string
  1370                                  ;
  1371                                  ;       Out:            DF      0
  1372                                  ;                       ZF      1
  1373                                  ;                       AL      0
  1374                                  ;
  1375                                  ;-----------------------------------------------------------------------------------------------------------------------
  1376 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1377 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1378 000000B2 84C0                                            test    al,al                                           ;end of string?
  1379 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1380 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1381 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1382 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1383 000000BC C3                      .20                     ret                                                     ;return
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  ;
  1386                                  ;       Loader Data
  1387                                  ;
  1388                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1389                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1390                                  ;
  1391                                  ;-----------------------------------------------------------------------------------------------------------------------
  1392 000000BD 90                                              align   2
  1393 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1394 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1395 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1396 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1397 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1397 000000D1 74696E672073797374-
  1397 000000DA 656D20726571756972-
  1397 000000E3 657320616E20693338-
  1397 000000EC 36206F72206C617465-
  1397 000000F5 722070726F63657373-
  1397 000000FE 6F722E0D0A         
  1398 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1398 0000010C 65737320616E79206B-
  1398 00000115 657920746F20726573-
  1398 0000011E 746172742074686520-
  1398 00000127 636F6D70757465722E-
  1398 00000130 0D0A00             
  1399 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1400 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1400 00000145 7265640D0A00       
  1401 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1401 00000154 616465640D0A00     
  1402 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1402 00000164 4F530D0A00         
  1403 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1404                                  ;=======================================================================================================================
  1405                                  ;
  1406                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1407                                  ;
  1408                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1409                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1410                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1411                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1412                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1413                                  ;
  1414                                  ;=======================================================================================================================
  1415                                  ;=======================================================================================================================
  1416                                  ;
  1417                                  ;       Kernel Tables
  1418                                  ;
  1419                                  ;=======================================================================================================================
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1423                                  ;
  1424                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1425                                  ;       first descriptor must be all nulls.
  1426                                  ;
  1427                                  ;       6   5         4         3         2         1         0
  1428                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1429                                  ;       ----------------------------------------------------------------
  1430                                  ;       h......hffffmmmma......ab......................bn..............n
  1431                                  ;
  1432                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1433                                  ;               ffff                                                            flags
  1434                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1435                                  ;                       a......a                                                access
  1436                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1437                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1438                                  ;
  1439                                  ;       00000000                                                                all areas have base addresses below 2^24
  1440                                  ;               0...                                                            single-byte size granularity
  1441                                  ;               1...                                                            4-kilobyte size granularity
  1442                                  ;               .0..                                                            16-bit default for code segments
  1443                                  ;               .1..                                                            32-bit default for code segments
  1444                                  ;               ..0.                                                            intel-reserved; should be zero
  1445                                  ;               ...0                                                            available for operating system use
  1446                                  ;                   0000                                                        segment is less than 2^16 in size
  1447                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1448                                  ;                       1.......                                                segment is present in memory
  1449                                  ;                       .00.....                                                segment is of privilege level 0
  1450                                  ;                       ...0....                                                segment is of system or gate type
  1451                                  ;                       ...00010                                                local decriptor table (LDT)
  1452                                  ;                       ...01001                                                task state segment (TSS) available
  1453                                  ;                       ...01011                                                task state segment (TSS) busy
  1454                                  ;                       ...10...                                                data segment
  1455                                  ;                       ...10011                                                writable data (accessed)
  1456                                  ;                       ...11...                                                code segment
  1457                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1458                                  ;
  1459                                  ;-----------------------------------------------------------------------------------------------------------------------
  1460                                  section                 gdt                                                     ;global descriptor table
  1461 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1462 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1463 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1464 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1465 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1466 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1467 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1468 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1469 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1470 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1471 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1472 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1473 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1474 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1475 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1476                                  ;-----------------------------------------------------------------------------------------------------------------------
  1477                                  ;
  1478                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1479                                  ;
  1480                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1481                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1482                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1483                                  ;
  1484                                  ;       6   5         4         3         2         1         0
  1485                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1486                                  ;       ----------------------------------------------------------------
  1487                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1488                                  ;
  1489                                  ;       h...h   high-order offset (bits 16-31)
  1490                                  ;       P       present (0=unused interrupt)
  1491                                  ;       zz      descriptor privilege level
  1492                                  ;       S       storage segment (must be zero for IDT)
  1493                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1494                                  ;       S...S   handling code selector in GDT
  1495                                  ;       l...l   lo-order offset (bits 0-15)
  1496                                  ;
  1497                                  ;-----------------------------------------------------------------------------------------------------------------------
  1498                                  section                 idt                                                     ;interrupt descriptor table
  1499                                                          mint    dividebyzero                                    ;00 divide by zero
  1499                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1499 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1500                                                          mint    singlestep                                      ;01 single step
  1500                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1500 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1501                                                          mint    nmi                                             ;02 non-maskable
  1501                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1501 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1502                                                          mint    break                                           ;03 break
  1502                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1502 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1503                                                          mint    into                                            ;04 into
  1503                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1503 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1504                                                          mint    bounds                                          ;05 bounds
  1504                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1504 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1505                                                          mint    badopcode                                       ;06 bad op code
  1505                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1505 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1506                                                          mint    nocoproc                                        ;07 no coprocessor
  1506                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1506 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1507                                                          mint    doublefault                                     ;08 double-fault
  1507                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1507 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1508                                                          mint    operand                                         ;09 operand
  1508                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1508 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1509                                                          mint    badtss                                          ;0a bad TSS
  1509                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1509 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1510                                                          mint    notpresent                                      ;0b not-present
  1510                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1510 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1511                                                          mint    stacklimit                                      ;0c stack limit
  1511                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1511 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1512                                                          mint    protection                                      ;0d general protection fault
  1512                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1512 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1513                                                          mint    int14                                           ;0e (reserved)
  1513                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1513 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1514                                                          mint    int15                                           ;0f (reserved)
  1514                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1514 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1515                                                          mint    coproccalc                                      ;10 (reserved)
  1515                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1515 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1516                                                          mint    int17                                           ;11 (reserved)
  1516                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1516 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1517                                                          mint    int18                                           ;12 (reserved)
  1517                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1517 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1518                                                          mint    int19                                           ;13 (reserved)
  1518                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1518 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1519                                                          mint    int20                                           ;14 (reserved)
  1519                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1519 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1520                                                          mint    int21                                           ;15 (reserved)
  1520                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1520 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1521                                                          mint    int22                                           ;16 (reserved)
  1521                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1521 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1522                                                          mint    int23                                           ;17 (reserved)
  1522                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1522 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1523                                                          mint    int24                                           ;18 (reserved)
  1523                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1523 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1524                                                          mint    int25                                           ;19 (reserved)
  1524                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1524 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1525                                                          mint    int26                                           ;1a (reserved)
  1525                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1525 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1526                                                          mint    int27                                           ;1b (reserved)
  1526                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1526 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1527                                                          mint    int28                                           ;1c (reserved)
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mint    int29                                           ;1d (reserved)
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529                                                          mint    int30                                           ;1e (reserved)
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mint    int31                                           ;1f (reserved)
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 00000100 3C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 00000108 8C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 00000110 A1054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mtrap   com2                                            ;23 IRQ3 com2
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 00000118 A4054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mtrap   com1                                            ;24 IRQ4 com1
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000120 A7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000128 AA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000130 AD054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000138 C1054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000140 C4054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000148 C7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000150 CA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000158 CD054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000160 D0054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000168 D3054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 00000170 D6054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 00000178 D9054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mtrap   svc                                             ;30 OS services
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 00000180 EA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1549                                  ;=======================================================================================================================
  1550                                  ;
  1551                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1552                                  ;
  1553                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1554                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1555                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1556                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1557                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1558                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1559                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1560                                  ;
  1561                                  ;=======================================================================================================================
  1562                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1563                                                          cpu     386                                             ;allow 80386 instructions
  1564                                                          bits    32                                              ;this is 32-bit code
  1565                                  ;=======================================================================================================================
  1566                                  ;
  1567                                  ;       CPU Interrupt Handlers
  1568                                  ;
  1569                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1570                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1571                                  ;
  1572                                  ;=======================================================================================================================
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                  ;
  1575                                  ;       INT0    Divide By Zero
  1576                                  ;
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                                          menter  dividebyzero                                    ;divide by zero
  1578                              <1> ?%1 equ ($-$$)
  1579 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1580 00000002 68[56010000]                                    push    czIntDivideByZero                               ;store message offset
  1581 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                  ;
  1584                                  ;       INT1    Single Step
  1585                                  ;
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                                          menter  singlestep                                      ;single step
  1587                              <1> ?%1 equ ($-$$)
  1588 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1589 0000000E 68[67010000]                                    push    czIntSingleStep                                 ;store message offset
  1590 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT2    Non-Maskable Interrupt
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  nmi                                             ;non-maskable
  1596                              <1> ?%1 equ ($-$$)
  1597 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1598 0000001A 68[73010000]                                    push    czIntNonMaskable                                ;store message offset
  1599 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;
  1602                                  ;       INT3    Break
  1603                                  ;
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                                          menter  break                                           ;break
  1605                              <1> ?%1 equ ($-$$)
  1606 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1607 00000026 68[8A010000]                                    push    czIntBreak                                      ;store message offset
  1608 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT4    Into
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  into                                            ;into
  1614                              <1> ?%1 equ ($-$$)
  1615 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1616 00000032 68[90010000]                                    push    czIntInto                                       ;store message offset
  1617 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT5    Bounds
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  bounds                                          ;bounds
  1623                              <1> ?%1 equ ($-$$)
  1624 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1625 0000003E 68[95010000]                                    push    czIntBounds                                     ;store message offset
  1626 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT6    Bad Operation Code
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  badopcode                                       ;bad opcode interrupt
  1632                              <1> ?%1 equ ($-$$)
  1633 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1634 0000004A 68[9C010000]                                    push    czIntBadOpCode                                  ;store message offset
  1635 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT7    No Coprocessor
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1641                              <1> ?%1 equ ($-$$)
  1642 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1643 00000056 68[AF010000]                                    push    czIntNoCoprocessor                              ;store message offset
  1644 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT8    Double Fault
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  doublefault                                     ;doublefault interrupt
  1650                              <1> ?%1 equ ($-$$)
  1651 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1652 00000062 68[BE010000]                                    push    czIntDoubleFault                                ;store message offset
  1653 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT9    Operand
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  operand                                         ;operand interrupt
  1659                              <1> ?%1 equ ($-$$)
  1660 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1661 0000006E 68[CB010000]                                    push    czIntOperand                                    ;store message offset
  1662 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT10   Bad Task State Segment
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  badtss                                          ;bad TSS interrupt
  1668                              <1> ?%1 equ ($-$$)
  1669 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1670 0000007A 68[D3010000]                                    push    czIntBadTSS                                     ;store message offset
  1671 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT11   Not Present
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  notpresent                                      ;not present interrupt
  1677                              <1> ?%1 equ ($-$$)
  1678 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1679 00000086 68[EA010000]                                    push    czIntNotPresent                                 ;store message offset
  1680 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT12   Stack Limit
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  stacklimit                                      ;stack limit interrupt
  1686                              <1> ?%1 equ ($-$$)
  1687 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1688 00000092 68[F6010000]                                    push    czIntStackLimit                                 ;store message offset
  1689 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT13   General Protection Fault
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  protection                                      ;protection fault interrupt
  1695                              <1> ?%1 equ ($-$$)
  1696 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1697 0000009E 68[02020000]                                    push    czIntProtection                                 ;store message offset
  1698 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT14   Reserved
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  int14                                           ;(reserved)
  1704                              <1> ?%1 equ ($-$$)
  1705 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1706 000000AA 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1707 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT15   Reserved
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  int15                                           ;(reserved)
  1713                              <1> ?%1 equ ($-$$)
  1714 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1715 000000B6 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1716 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT16   Coprocessor Calculation
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  coproccalc                                      ;coprocessor calculation
  1722                              <1> ?%1 equ ($-$$)
  1723 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1724 000000C2 68[1B020000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1725 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT17   Reserved
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  int17                                           ;(reserved)
  1731                              <1> ?%1 equ ($-$$)
  1732 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1733 000000CE 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1734 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT18   Reserved
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  int18                                           ;(reserved)
  1740                              <1> ?%1 equ ($-$$)
  1741 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1742 000000D7 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1743 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT19   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int19                                           ;(reserved)
  1749                              <1> ?%1 equ ($-$$)
  1750 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1751 000000E0 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1752 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT20   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int20                                           ;(reserved)
  1758                              <1> ?%1 equ ($-$$)
  1759 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1760 000000E9 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1761 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT21   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int21                                           ;(reserved)
  1767                              <1> ?%1 equ ($-$$)
  1768 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1769 000000F2 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1770 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT22   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int22                                           ;(reserved)
  1776                              <1> ?%1 equ ($-$$)
  1777 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1778 000000FB 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1779 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT23   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int23                                           ;(reserved)
  1785                              <1> ?%1 equ ($-$$)
  1786 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1787 00000104 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1788 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT24   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int24                                           ;(reserved)
  1794                              <1> ?%1 equ ($-$$)
  1795 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1796 0000010D 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1797 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       INT25   Reserved
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                                          menter  int25                                           ;(reserved)
  1803                              <1> ?%1 equ ($-$$)
  1804 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1805 00000116 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1806 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT26   Reserved
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  int26                                           ;(reserved)
  1812                              <1> ?%1 equ ($-$$)
  1813 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1814 0000011F 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1815 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT27   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int27                                           ;(reserved)
  1821                              <1> ?%1 equ ($-$$)
  1822 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1823 00000128 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1824 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT28   Reserved
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  int28                                           ;(reserved)
  1830                              <1> ?%1 equ ($-$$)
  1831 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1832 00000131 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1833 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT29   Reserved
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  int29                                           ;(reserved)
  1839                              <1> ?%1 equ ($-$$)
  1840 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1841 0000013A 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1842 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT30   Reserved
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  int30                                           ;(reserved)
  1848                              <1> ?%1 equ ($-$$)
  1849 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1850 00000143 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1851 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT31   Reserved
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  int31                                           ;(reserved)
  1857                              <1> ?%1 equ ($-$$)
  1858 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1859 0000014C 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1860 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       Routine:        ReportInterrupt
  1864                                  ;
  1865                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1866                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1867                                  ;
  1868                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1869                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872 00000153 58                      ReportInterrupt         pop     eax                                             ;error message address
  1873 00000154 58                                              pop     eax                                             ;interrupt number
  1874 00000155 CF                                              iretd                                                   ;return
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       Processor Interrupt Name Strings
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880 00000156 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  1880 0000015F 6279207A65726F00   
  1881 00000167 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  1881 00000170 657000             
  1882 00000173 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  1882 0000017C 626C6520696E746572-
  1882 00000185 7275707400         
  1883 0000018A 427265616B00            czIntBreak              db      "Break",0
  1884 00000190 496E746F00              czIntInto               db      "Into",0
  1885 00000195 426F756E647300          czIntBounds             db      "Bounds",0
  1886 0000019C 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  1886 000001A5 74696F6E20436F6465-
  1886 000001AE 00                 
  1887 000001AF 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  1887 000001B8 6573736F7200       
  1888 000001BE 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  1888 000001C7 756C7400           
  1889 000001CB 4F706572616E6400        czIntOperand            db      "Operand",0
  1890 000001D3 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  1890 000001DC 537461746520536567-
  1890 000001E5 6D656E7400         
  1891 000001EA 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  1891 000001F3 6E7400             
  1892 000001F6 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  1892 000001FF 697400             
  1893 00000202 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  1893 0000020B 726F74656374696F6E-
  1893 00000214 204661756C7400     
  1894 0000021B 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1894 00000224 6F722043616C63756C-
  1894 0000022D 6174696F6E00       
  1895 00000233 526573657276656400      czIntReserved           db      "Reserved",0
  1896                                  ;=======================================================================================================================
  1897                                  ;
  1898                                  ;       Hardware Device Interupts
  1899                                  ;
  1900                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1901                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1902                                  ;       (BX=2028h).
  1903                                  ;
  1904                                  ;=======================================================================================================================
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;       IRQ0    Clock Tick Interrupt
  1908                                  ;
  1909                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1910                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1911                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1912                                  ;
  1913                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1914                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1915                                  ;
  1916                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1917                                  ;       zero, the floppy disk motors are turned off.
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                                          menter  clocktick                                       ;clock tick interrupt
  1920                              <1> ?%1 equ ($-$$)
  1921 0000023C 50                                              push    eax                                             ;save non-volatile regs
  1922 0000023D 52                                              push    edx                                             ;
  1923 0000023E 1E                                              push    ds                                              ;
  1924                                  ;
  1925                                  ;       Update the clock tick count and the elapsed days as needed.
  1926                                  ;
  1927 0000023F 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1928 00000241 1F                                              pop     ds                                              ;... into data segment register
  1929 00000242 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1930 00000247 40                                              inc     eax                                             ;increment clock ticks
  1931 00000248 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1932 0000024D 7208                                            jb      irq0.10                                         ;no, skip ahead
  1933 0000024F FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1934 00000255 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1935 00000257 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1936                                  ;
  1937                                  ;       Decrement floppy disk motor timeout.
  1938                                  ;
  1939 0000025C 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1940 00000263 741E                                            je      irq0.20                                         ;yes, skip ahead
  1941 00000265 FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1942 0000026B 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1943                                  ;
  1944                                  ;       Turn off the floppy disk motor if appropriate.
  1945                                  ;
  1946 0000026D FB                                              sti                                                     ;enable maskable interrupts
  1947 0000026E B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1948 00000270 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1949 00000272 EC                                              in      al,dx                                           ;FDC main status byte
  1950 00000273 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1951 00000275 75F7                                            jnz     irq0.15                                         ;wait while busy
  1952 00000277 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1953 00000279 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1954 0000027E B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1955 00000280 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1956 00000282 EE                                              out     dx,al                                           ;turn motor off
  1957                                  ;
  1958                                  ;       Signal the end of the hardware interrupt.
  1959                                  ;
  1960 00000283 E8CA050000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1961                                  ;
  1962                                  ;       Restore and return.
  1963                                  ;
  1964 00000288 1F                                              pop     ds                                              ;restore modified regs
  1965 00000289 5A                                              pop     edx                                             ;
  1966 0000028A 58                                              pop     eax                                             ;
  1967 0000028B CF                                              iretd                                                   ;return
  1968                                  ;-----------------------------------------------------------------------------------------------------------------------
  1969                                  ;
  1970                                  ;       IRQ1    Keyboard Interrupt
  1971                                  ;
  1972                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1973                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1974                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1975                                  ;       ALL modified registers upon return.
  1976                                  ;
  1977                                  ;-----------------------------------------------------------------------------------------------------------------------
  1978                                                          menter  keyboard                                        ;keyboard interrrupt
  1978                              <1> ?%1 equ ($-$$)
  1979 0000028C 50                                              push    eax                                             ;save non-volatile regs
  1980 0000028D 53                                              push    ebx                                             ;
  1981 0000028E 51                                              push    ecx                                             ;
  1982 0000028F 56                                              push    esi                                             ;
  1983 00000290 1E                                              push    ds                                              ;
  1984 00000291 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1985 00000293 1F                                              pop     ds                                              ;... into data segment register
  1986 00000294 30C0                                            xor     al,al                                           ;zero
  1987 00000296 A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  1988 0000029B A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  1989 000002A0 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  1990 000002A5 A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  1991 000002AA A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  1992 000002AF A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  1993 000002B4 B020                                            mov     al,' '                                          ;space
  1994 000002B6 A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  1995 000002BB B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1996 000002BD F6D0                                            not     al                                              ;controller timeout mask
  1997 000002BF 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1998 000002C5 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  1999 000002CB 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2000 000002D1 E8B7050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2001 000002D6 0F84AD010000                                    jz      irq1.140                                        ;yes, skip ahead
  2002 000002DC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2003 000002DE A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2004 000002E3 88C4                                            mov     ah,al                                           ;copy scan code 0
  2005 000002E5 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2006 000002E7 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2007 000002EA 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2008 000002F0 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2009 000002F3 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2010 000002F9 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2011 000002FB 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2012 000002FE 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2013 00000304 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2014 00000307 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2015 0000030D B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2016 0000030F 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2017 00000312 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2018 00000318 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2019 0000031B 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2020 00000321 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2021 00000323 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2022 00000326 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2023 0000032C 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2024 0000032F 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2025 00000335 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2026 00000337 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2027 0000033A 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2028 00000340 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2029 00000342 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2030 00000345 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2031 0000034B B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2032 0000034D 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2033 00000350 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2034 00000356 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2035 00000359 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2036 0000035F E829050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2037 00000364 0F841F010000                                    jz      irq1.140                                        ;yes, skip ahead
  2038 0000036A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2039 0000036C A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2040 00000371 88C4                                            mov     ah,al                                           ;copy scan code 1
  2041 00000373 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2042 00000375 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2043 00000378 7456                                            je      irq1.30                                         ;yes, set flag
  2044 0000037A 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2045 0000037D 7455                                            je      irq1.40                                         ;yes, reset flag
  2046 0000037F B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2047 00000381 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2048 00000384 744A                                            je      irq1.30                                         ;yes, set flag
  2049 00000386 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2050 00000389 7449                                            je      irq1.40                                         ;yes, reset flag
  2051 0000038B 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2052 0000038E 0F84BB000000                                    je      irq1.80                                         ;yes, skip ahead
  2053 00000394 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2054 00000397 0F84B2000000                                    je      irq1.80                                         ;yes, skip ahead
  2055 0000039D 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2056 000003A0 7405                                            je      irq1.10                                         ;yes, continue
  2057 000003A2 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2058 000003A5 7524                                            jne     irq1.20                                         ;no, skip ahead
  2059 000003A7 E8E1040000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2060 000003AC 0F84D7000000                                    jz      irq1.140                                        ;yes, skip ahead
  2061 000003B2 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2062 000003B4 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2063 000003B9 E8CF040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2064 000003BE 0F84C5000000                                    jz      irq1.140                                        ;yes, skip ahead
  2065 000003C4 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2066 000003C6 A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2067 000003CB E9C1000000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2068 000003D0 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2069 000003D2 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2070 000003D4 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2071 000003D6 20C3                                            and     bl,al                                           ;reset shift flag
  2072 000003D8 EB07                                            jmp     irq1.60                                         ;skip ahead
  2073 000003DA 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2074 000003DC E87D040000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2075 000003E1 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2076 000003E7 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2077 000003ED E8F2020000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2078 000003F2 E99A000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2079 000003F7 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2080 000003FA 7553                                            jne     irq1.80                                         ;no continue
  2081 000003FC E88C040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2082 00000401 0F8482000000                                    jz      irq1.140                                        ;yes, skip ahead
  2083 00000407 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2084 00000409 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2085 0000040E 88C4                                            mov     ah,al                                           ;copy scan code 1
  2086 00000410 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2087 00000413 757C                                            jne     irq1.150                                        ;no, finish keyboard handling
  2088 00000415 E873040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2089 0000041A 746D                                            jz      irq1.140                                        ;yes, skip ahead
  2090 0000041C E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2091 0000041E A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2092 00000423 E865040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2093 00000428 745F                                            jz      irq1.140                                        ;yes, skip ahead
  2094 0000042A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2095 0000042C A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2096 00000431 E857040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2097 00000436 7451                                            jz      irq1.140                                        ;yes, skip ahead
  2098 00000438 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2099 0000043A A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2100 0000043F E849040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2101 00000444 7443                                            jz      irq1.140                                        ;yes, skip ahead
  2102 00000446 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2103 00000448 A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2104 0000044D EB42                                            jmp     irq1.150                                        ;continue
  2105 0000044F 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2106 00000451 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2107 00000454 7531                                            jnz     irq1.130                                        ;yes, skip ahead
  2108 00000456 BE[A1040000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2109 0000045B F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2110 0000045E 7405                                            jz      irq1.90                                         ;no, skip ahead
  2111 00000460 BE[21050000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2112 00000465 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2113 00000468 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2114 0000046C F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2115 0000046F 7411                                            jz      irq1.100                                        ;no skip ahead
  2116 00000471 88C1                                            mov     cl,al                                           ;copy ASCII code
  2117 00000473 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2118 00000476 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2119 00000479 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2120 0000047B 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2121 0000047E 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2122 00000480 3420                                            xor     al,EASCIICASE                                   ;switch case
  2123 00000482 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2124 00000487 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2125 00000489 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2126 0000048B 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2127 00000491 E8F6010000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2128 00000496 E8B7030000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2129 0000049B 1F                                              pop     ds                                              ;restore non-volatile regs
  2130 0000049C 5E                                              pop     esi                                             ;
  2131 0000049D 59                                              pop     ecx                                             ;
  2132 0000049E 5B                                              pop     ebx                                             ;
  2133 0000049F 58                                              pop     eax                                             ;
  2134 000004A0 CF                                              iretd                                                   ;return
  2135                                  ;-----------------------------------------------------------------------------------------------------------------------
  2136                                  ;       Scan-Code to ASCII Translation Tables
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138 000004A1 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2139 000004A9 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2140 000004B1 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2141 000004B9 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2142 000004C1 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2143 000004C9 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2144 000004D1 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2145 000004D9 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2146 000004E1 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2147 000004E9 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2148 000004F1 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2149 000004F9 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2150 00000501 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2151 00000509 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2152 00000511 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2153 00000519 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2154 00000521 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2155 00000529 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2156 00000531 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2157 00000539 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2158 00000541 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2159 00000549 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2160 00000551 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2161 00000559 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2162 00000561 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2163 00000569 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2164 00000571 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2165 00000579 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2166 00000581 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2167 00000589 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2168 00000591 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2169 00000599 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2170                                  ;-----------------------------------------------------------------------------------------------------------------------
  2171                                  ;
  2172                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2173                                  ;
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                                          menter  iochannel                                       ;secondary 8259A cascade
  2175                              <1> ?%1 equ ($-$$)
  2176 000005A1 50                                              push    eax                                             ;save modified regs
  2177 000005A2 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2178                                  ;-----------------------------------------------------------------------------------------------------------------------
  2179                                  ;
  2180                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2181                                  ;
  2182                                  ;-----------------------------------------------------------------------------------------------------------------------
  2183                                                          menter  com2                                            ;serial port 2 interrupt
  2183                              <1> ?%1 equ ($-$$)
  2184 000005A4 50                                              push    eax                                             ;save modified regs
  2185 000005A5 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2186                                  ;-----------------------------------------------------------------------------------------------------------------------
  2187                                  ;
  2188                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2189                                  ;
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                                          menter  com1                                            ;serial port 1 interrupt
  2191                              <1> ?%1 equ ($-$$)
  2192 000005A7 50                                              push    eax                                             ;save modified regs
  2193 000005A8 EB39                                            jmp     hwint                                           ;end interrupt and return
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2197                                  ;
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2199                              <1> ?%1 equ ($-$$)
  2200 000005AA 50                                              push    eax                                             ;save modified regs
  2201 000005AB EB36                                            jmp     hwint                                           ;end interrupt and return
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                  ;
  2204                                  ;       IRQ6    Diskette Hardware Interrupt
  2205                                  ;
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                                          menter  diskette                                        ;floppy disk interrupt
  2207                              <1> ?%1 equ ($-$$)
  2208 000005AD 50                                              push    eax                                             ;save non-volatile regs
  2209 000005AE 1E                                              push    ds                                              ;
  2210 000005AF 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2211 000005B1 1F                                              pop     ds                                              ;... into DS register
  2212 000005B2 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2213 000005B7 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2214 000005B9 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2215 000005BE 1F                                              pop     ds                                              ;restore non-volatile regs
  2216 000005BF EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2222                              <1> ?%1 equ ($-$$)
  2223 000005C1 50                                              push    eax                                             ;save modified regs
  2224 000005C2 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2225                                  ;-----------------------------------------------------------------------------------------------------------------------
  2226                                  ;
  2227                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2228                                  ;
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230                                                          menter  rtclock                                         ;real-time clock interrupt
  2230                              <1> ?%1 equ ($-$$)
  2231 000005C4 50                                              push    eax                                             ;save modified regs
  2232 000005C5 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2233                                  ;-----------------------------------------------------------------------------------------------------------------------
  2234                                  ;
  2235                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2236                                  ;
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2238                              <1> ?%1 equ ($-$$)
  2239 000005C7 50                                              push    eax                                             ;save modified regs
  2240 000005C8 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  ;
  2243                                  ;       IRQ10   Reserved Hardware Interrupt
  2244                                  ;
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                                          menter  irq10                                           ;reserved
  2246                              <1> ?%1 equ ($-$$)
  2247 000005CA 50                                              push    eax                                             ;save modified regs
  2248 000005CB EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  ;
  2251                                  ;       IRQ11   Reserved Hardware Interrupt
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                                          menter  irq11                                           ;reserved
  2254                              <1> ?%1 equ ($-$$)
  2255 000005CD 50                                              push    eax                                             ;save modified regs
  2256 000005CE EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                  ;
  2259                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2260                                  ;
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2262                              <1> ?%1 equ ($-$$)
  2263 000005D0 50                                              push    eax                                             ;save modified regs
  2264 000005D1 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2265                                  ;-----------------------------------------------------------------------------------------------------------------------
  2266                                  ;
  2267                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2268                                  ;
  2269                                  ;-----------------------------------------------------------------------------------------------------------------------
  2270                                                          menter  coprocessor                                     ;coprocessor interrupt
  2270                              <1> ?%1 equ ($-$$)
  2271 000005D3 50                                              push    eax                                             ;save modified regs
  2272 000005D4 EB06                                            jmp     hwwint                                          ;end interrupt and return
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  ;
  2275                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2276                                  ;
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2278                              <1> ?%1 equ ($-$$)
  2279 000005D6 50                                              push    eax                                             ;save modified regs
  2280 000005D7 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2281                                  ;-----------------------------------------------------------------------------------------------------------------------
  2282                                  ;
  2283                                  ;       IRQ15   Reserved Hardware Interrupt
  2284                                  ;
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                                          menter  irq15                                           ;reserved
  2286                              <1> ?%1 equ ($-$$)
  2287 000005D9 50                                              push    eax                                             ;save modified regs
  2288 000005DA EB00                                            jmp     hwwint                                          ;end interrupt and return
  2289                                  ;-----------------------------------------------------------------------------------------------------------------------
  2290                                  ;
  2291                                  ;       Exit from hardware interrupt
  2292                                  ;
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294 000005DC E877020000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2295 000005E1 EB05                                            jmp     hwint90                                         ;skip ahead
  2296 000005E3 E86A020000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2297 000005E8 58                      hwint90                 pop     eax                                             ;restore modified regs
  2298 000005E9 CF                                              iretd                                                   ;return from interrupt
  2299                                  ;-----------------------------------------------------------------------------------------------------------------------
  2300                                  ;
  2301                                  ;       INT 30h Operating System Software Service Interrupt
  2302                                  ;
  2303                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2304                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2305                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2306                                  ;       the entry address of the specific function from a table.
  2307                                  ;
  2308                                  ;-----------------------------------------------------------------------------------------------------------------------
  2309                                                          menter  svc
  2309                              <1> ?%1 equ ($-$$)
  2310 000005EA 3C03                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2311 000005EC 730D                                            jae     svc90                                           ;yes, skip ahead
  2312 000005EE 0FB6C0                                          movzx   eax,al                                          ;function
  2313 000005F1 C1E002                                          shl     eax,2                                           ;offset into table
  2314 000005F4 2EFF90[FC050000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2315 000005FB CF                      svc90                   iretd                                                   ;return from interrupt
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                  ;
  2318                                  ;       Service Request Table
  2319                                  ;
  2320                                  ;
  2321                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2322                                  ;
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2324                              <1> tsvc :
  2324                              <1> e%1 equ ($-tsvc)/4
  2324 000005FC [AB070000]          <1>  dd %1
  2325                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2325                              <1> e%1 equ ($-tsvc)/4
  2325 00000600 [28080000]          <1>  dd %1
  2326                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2326                              <1> e%1 equ ($-tsvc)/4
  2326 00000604 [7E070000]          <1>  dd %1
  2327                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2328                                  ;-----------------------------------------------------------------------------------------------------------------------
  2329                                  ;
  2330                                  ;       Service Request Macros
  2331                                  ;
  2332                                  ;       These macros provide positional parameterization of service request calls.
  2333                                  ;
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  %macro                  clearConsoleScreen 0
  2336                                                          mov     al,eClearConsoleScreen                          ;function code
  2337                                                          int     _svc                                            ;invoke OS service
  2338                                  %endmacro
  2339                                  %macro                  placeCursor 0
  2340                                                          mov     al,ePlaceCursor                                 ;function code
  2341                                                          int     _svc                                            ;invoke OS service
  2342                                  %endmacro
  2343                                  %macro                  putConsoleString 1
  2344                                                          mov     edx,%1                                          ;string address
  2345                                                          mov     al,ePutConsoleString                            ;function code
  2346                                                          int     _svc                                            ;invoke OS service
  2347                                  %endmacro
  2348                                  ;=======================================================================================================================
  2349                                  ;
  2350                                  ;       Kernel Function Library
  2351                                  ;
  2352                                  ;=======================================================================================================================
  2353                                  ;=======================================================================================================================
  2354                                  ;
  2355                                  ;       Console Helper Routines
  2356                                  ;
  2357                                  ;       FirstConsoleColumn
  2358                                  ;       NextConsoleColumn
  2359                                  ;       NextConsoleRow
  2360                                  ;       PutConsoleChar
  2361                                  ;       PutConsoleHexByte
  2362                                  ;       PutConsoleOIAChar
  2363                                  ;       PutConsoleOIAShift
  2364                                  ;       PutConsoleString
  2365                                  ;
  2366                                  ;=======================================================================================================================
  2367                                  ;-----------------------------------------------------------------------------------------------------------------------
  2368                                  ;
  2369                                  ;       Routine:        FirstConsoleColumn
  2370                                  ;
  2371                                  ;       Description:    This routine resets the console column to start of the row.
  2372                                  ;
  2373                                  ;       In:             DS      OS data selector
  2374                                  ;
  2375                                  ;-----------------------------------------------------------------------------------------------------------------------
  2376 00000608 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2377 0000060A A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2378 0000060F C3                                              ret                                                     ;return
  2379                                  ;-----------------------------------------------------------------------------------------------------------------------
  2380                                  ;
  2381                                  ;       Routine:        NextConsoleColumn
  2382                                  ;
  2383                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2384                                  ;                       incremented if the end of the current row is reached.
  2385                                  ;
  2386                                  ;       In:             DS      OS data selector
  2387                                  ;
  2388                                  ;-----------------------------------------------------------------------------------------------------------------------
  2389 00000610 A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2390 00000615 FEC0                                            inc     al                                              ;increment column
  2391 00000617 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2392 0000061C 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2393 0000061E 720A                                            jb      .10                                             ;no, skip ahead
  2394 00000620 E8E3FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2395 00000625 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2396 0000062A C3                      .10                     ret                                                     ;return
  2397                                  ;-----------------------------------------------------------------------------------------------------------------------
  2398                                  ;
  2399                                  ;       Routine:        NextConsoleRow
  2400                                  ;
  2401                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2402                                  ;
  2403                                  ;       In:             DS      OS data selector
  2404                                  ;
  2405                                  ;-----------------------------------------------------------------------------------------------------------------------
  2406 0000062B A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2407 00000630 FEC0                                            inc     al                                              ;increment row
  2408 00000632 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2409 00000637 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2410 00000639 7211                                            jb      .10                                             ;no, skip ahead
  2411 0000063B E8A6010000                                      call    ScrollConsoleRow                                ;scroll up one row
  2412 00000640 A001080000                                      mov     al,[wbConsoleRow]                               ;row
  2413 00000645 FEC8                                            dec     al                                              ;decrement row
  2414 00000647 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2415 0000064C C3                      .10                     ret                                                     ;return
  2416                                  ;-----------------------------------------------------------------------------------------------------------------------
  2417                                  ;
  2418                                  ;       Routine:        PutConsoleChar
  2419                                  ;
  2420                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2421                                  ;
  2422                                  ;       In:             AL      ASCII character
  2423                                  ;                       DS      OS data selector
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426 0000064D 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2427 0000064E 06                                              push    es                                              ;
  2428 0000064F 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2429 00000651 07                                              pop     es                                              ;... into extra segment reg
  2430 00000652 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2431 00000658 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  2432 0000065E E8AF010000                                      call    SetConsoleChar                                  ;put character at row, column
  2433 00000663 07                                              pop     es                                              ;restore non-volatile regs
  2434 00000664 59                                              pop     ecx                                             ;
  2435 00000665 C3                                              ret                                                     ;return
  2436                                  ;-----------------------------------------------------------------------------------------------------------------------
  2437                                  ;
  2438                                  ;       Routine:        PutConsoleHexByte
  2439                                  ;
  2440                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2441                                  ;
  2442                                  ;       In:             AL      byte value
  2443                                  ;                       CL      column
  2444                                  ;                       CH      row
  2445                                  ;                       DS      OS data selector
  2446                                  ;                       ES      CGA selector
  2447                                  ;
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449 00000666 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2450 00000667 88C3                                            mov     bl,al                                           ;save byte value
  2451 00000669 C0E804                                          shr     al,4                                            ;hi-order nybble
  2452 0000066C 0C30                                            or      al,030h                                         ;apply ASCII zone
  2453 0000066E 3C3A                                            cmp     al,03ah                                         ;numeric?
  2454 00000670 7202                                            jb      .10                                             ;yes, skip ahead
  2455 00000672 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2456 00000674 E899010000              .10                     call    SetConsoleChar                                  ;display ASCII character
  2457 00000679 88D8                                            mov     al,bl                                           ;byte value
  2458 0000067B 240F                                            and     al,0fh                                          ;lo-order nybble
  2459 0000067D 0C30                                            or      al,30h                                          ;apply ASCII zone
  2460 0000067F 3C3A                                            cmp     al,03ah                                         ;numeric?
  2461 00000681 7202                                            jb      .20                                             ;yes, skip ahead
  2462 00000683 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2463 00000685 E888010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2464 0000068A 5B                                              pop     ebx                                             ;restore non-volatile regs
  2465 0000068B C3                                              ret                                                     ;return
  2466                                  ;-----------------------------------------------------------------------------------------------------------------------
  2467                                  ;
  2468                                  ;       Routine:        PutConsoleOIAChar
  2469                                  ;
  2470                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2471                                  ;
  2472                                  ;       In:             DS      OS data selector
  2473                                  ;
  2474                                  ;-----------------------------------------------------------------------------------------------------------------------
  2475 0000068C 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2476 0000068D 51                                              push    ecx                                             ;
  2477 0000068E 56                                              push    esi                                             ;
  2478 0000068F 1E                                              push    ds                                              ;
  2479 00000690 06                                              push    es                                              ;
  2480 00000691 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2481 00000693 1F                                              pop     ds                                              ;... into data segment register
  2482 00000694 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2483 00000696 07                                              pop     es                                              ;... into extra segment register
  2484 00000697 BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2485 0000069C B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2486 0000069E B300                                            mov     bl,0                                            ;starting column
  2487 000006A0 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2488 000006A5 51                      .10                     push    ecx                                             ;save remaining count
  2489 000006A6 89D9                                            mov     ecx,ebx                                         ;row, column
  2490 000006A8 AC                                              lodsb                                                   ;read scan code
  2491 000006A9 08C0                                            or      al,al                                           ;scan code present?
  2492 000006AB 7407                                            jz      .20                                             ;no, skip ahead
  2493 000006AD E8B4FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2494 000006B2 EB0E                                            jmp     .30                                             ;continue
  2495 000006B4 B020                    .20                     mov     al,' '                                          ;ASCII space
  2496 000006B6 E857010000                                      call    SetConsoleChar                                  ;display space
  2497 000006BB B020                                            mov     al,' '                                          ;ASCII space
  2498 000006BD E850010000                                      call    SetConsoleChar                                  ;display space
  2499 000006C2 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2500 000006C5 59                                              pop     ecx                                             ;restore remaining
  2501 000006C6 E2DD                                            loop    .10                                             ;next code
  2502 000006C8 A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2503 000006CD 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2504 000006CF 720D                                            jb      .40                                             ;no, skip ahead
  2505 000006D1 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2506 000006D3 7709                                            ja      .40                                             ;no, skip ahead
  2507 000006D5 88FD                                            mov     ch,bh                                           ;OIA row
  2508 000006D7 B128                                            mov     cl,40                                           ;character display column
  2509 000006D9 E834010000                                      call    SetConsoleChar                                  ;display ASCII character
  2510 000006DE 07                      .40                     pop     es                                              ;restore non-volatile regs
  2511 000006DF 1F                                              pop     ds                                              ;
  2512 000006E0 5E                                              pop     esi                                             ;
  2513 000006E1 59                                              pop     ecx                                             ;
  2514 000006E2 5B                                              pop     ebx                                             ;
  2515 000006E3 C3                                              ret                                                     ;return
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  ;
  2518                                  ;       Routine:        PutConsoleOIAShift
  2519                                  ;
  2520                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2521                                  ;
  2522                                  ;       In:             BL      shift flags
  2523                                  ;                       BH      lock flags
  2524                                  ;                       DS      OS data selector
  2525                                  ;
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527 000006E4 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2528 000006E5 06                                              push    es                                              ;
  2529 000006E6 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2530 000006E8 07                                              pop     es                                              ;... into ES register
  2531 000006E9 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2532 000006EB B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2533 000006ED F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2534 000006F0 7402                                            jz      .10                                             ;no, skip ahead
  2535 000006F2 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2536 000006F4 B10E                    .10                     mov     cl,14                                           ;indicator column
  2537 000006F6 E817010000                                      call    SetConsoleChar                                  ;display ASCII character
  2538 000006FB B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2539 000006FD F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2540 00000700 7402                                            jz      .20                                             ;no, skip ahead
  2541 00000702 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2542 00000704 B140                    .20                     mov     cl,64                                           ;indicator column
  2543 00000706 E807010000                                      call    SetConsoleChar                                  ;display ASCII character
  2544 0000070B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2545 0000070D F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2546 00000710 7402                                            jz      .30                                             ;no, skip ahead
  2547 00000712 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2548 00000714 B10F                    .30                     mov     cl,15                                           ;indicator column
  2549 00000716 E8F7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2550 0000071B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2551 0000071D F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2552 00000720 7402                                            jz      .40                                             ;no, skip ahead
  2553 00000722 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2554 00000724 B13F                    .40                     mov     cl,63                                           ;indicator column
  2555 00000726 E8E7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2556 0000072B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2557 0000072D F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2558 00000730 7402                                            jz      .50                                             ;no, skip ahead
  2559 00000732 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2560 00000734 B110                    .50                     mov     cl,16                                           ;indicator column
  2561 00000736 E8D7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2562 0000073B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2563 0000073D F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2564 00000740 7402                                            jz      .60                                             ;no, skip ahead
  2565 00000742 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2566 00000744 B13E                    .60                     mov     cl,62                                           ;indicator column
  2567 00000746 E8C7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2568 0000074B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2569 0000074D F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2570 00000750 7402                                            jz      .70                                             ;no, skip ahead
  2571 00000752 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2572 00000754 B14E                    .70                     mov     cl,78                                           ;indicator column
  2573 00000756 E8B7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2574 0000075B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2575 0000075D F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2576 00000760 7402                                            jz      .80                                             ;no, skip ahead
  2577 00000762 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2578 00000764 B14D                    .80                     mov     cl,77                                           ;indicator column
  2579 00000766 E8A7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2580 0000076B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2581 0000076D F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2582 00000770 7402                                            jz      .90                                             ;no, skip ahead
  2583 00000772 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2584 00000774 B14C                    .90                     mov     cl,76                                           ;indicator column
  2585 00000776 E897000000                                      call    SetConsoleChar                                  ;display ASCII character
  2586 0000077B 07                                              pop     es                                              ;restore non-volatile regs
  2587 0000077C 59                                              pop     ecx                                             ;
  2588 0000077D C3                                              ret                                                     ;return
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                  ;
  2591                                  ;       Routine:        PutConsoleString
  2592                                  ;
  2593                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2594                                  ;                       console position as needed.
  2595                                  ;
  2596                                  ;       In:             EDX     source address
  2597                                  ;                       DS      OS data selector
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600 0000077E 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  2601 0000077F 89D6                                            mov     esi,edx                                         ;source address
  2602 00000781 FC                                              cld                                                     ;forward strings
  2603 00000782 AC                      .10                     lodsb                                                   ;ASCII character
  2604 00000783 08C0                                            or      al,al                                           ;end of string?
  2605 00000785 7422                                            jz      .40                                             ;yes, skip ahead
  2606 00000787 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  2607 00000789 7507                                            jne     .20                                             ;no, skip ahead
  2608 0000078B E878FEFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  2609 00000790 EBF0                                            jmp     .10                                             ;next character
  2610 00000792 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2611 00000794 7507                                            jne     .30                                             ;no, skip ahead
  2612 00000796 E890FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  2613 0000079B EBE5                                            jmp     .10                                             ;next character
  2614 0000079D E8ABFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  2615 000007A2 E869FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  2616 000007A7 EBD9                                            jmp     .10                                             ;next character
  2617 000007A9 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  2618 000007AA C3                                              ret                                                     ;return
  2619                                  ;=======================================================================================================================
  2620                                  ;
  2621                                  ;       Memory-Mapped Video Routines
  2622                                  ;
  2623                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2624                                  ;
  2625                                  ;       ClearConsoleScreen
  2626                                  ;       ScrollConsoleRow
  2627                                  ;       SetConsoleChar
  2628                                  ;
  2629                                  ;=======================================================================================================================
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  ;
  2632                                  ;       Routine:        ClearConsoleScreen
  2633                                  ;
  2634                                  ;       Description:    This routine clears the console (CGA) screen.
  2635                                  ;
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637 000007AB 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2638 000007AC 57                                              push    edi                                             ;
  2639 000007AD 1E                                              push    ds                                              ;
  2640 000007AE 06                                              push    es                                              ;
  2641 000007AF 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  2642 000007B1 1F                                              pop     ds                                              ;... into DS register
  2643 000007B2 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2644 000007B4 07                                              pop     es                                              ;... into ES register
  2645 000007B5 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  2646 000007BA B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2647 000007BF 31FF                                            xor     edi,edi                                         ;target offset
  2648 000007C1 FC                                              cld                                                     ;forward strings
  2649 000007C2 F3AB                                            rep     stosd                                           ;reset screen body
  2650 000007C4 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2651 000007C9 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2652 000007CE F3AB                                            rep     stosd                                           ;reset OIA line
  2653 000007D0 30C0                                            xor     al,al                                           ;zero register
  2654 000007D2 A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  2655 000007D7 A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  2656 000007DC E847000000                                      call    PlaceCursor                                     ;place cursor at current position
  2657 000007E1 07                                              pop     es                                              ;restore non-volatile regs
  2658 000007E2 1F                                              pop     ds                                              ;
  2659 000007E3 5F                                              pop     edi                                             ;
  2660 000007E4 59                                              pop     ecx                                             ;
  2661 000007E5 C3                                              ret                                                     ;return
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                  ;
  2664                                  ;       Routine:        ScrollConsoleRow
  2665                                  ;
  2666                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669 000007E6 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2670 000007E7 56                                              push    esi                                             ;
  2671 000007E8 57                                              push    edi                                             ;
  2672 000007E9 1E                                              push    ds                                              ;
  2673 000007EA 06                                              push    es                                              ;
  2674 000007EB 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2675 000007ED 1F                                              pop     ds                                              ;... into DS
  2676 000007EE 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2677 000007F0 07                                              pop     es                                              ;... into ES
  2678 000007F1 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2679 000007F6 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2680 000007FB 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  2681 000007FD FC                                              cld                                                     ;forward strings
  2682 000007FE F3A5                                            rep     movsd                                           ;move 24 lines up
  2683 00000800 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2684 00000805 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2685 0000080A F3AB                                            rep     stosd                                           ;clear bottom row
  2686 0000080C 07                                              pop     es                                              ;restore non-volatile regs
  2687 0000080D 1F                                              pop     ds                                              ;
  2688 0000080E 5F                                              pop     edi                                             ;
  2689 0000080F 5E                                              pop     esi                                             ;
  2690 00000810 59                                              pop     ecx                                             ;
  2691 00000811 C3                                              ret                                                     ;return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       Routine:        SetConsoleChar
  2695                                  ;
  2696                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2697                                  ;
  2698                                  ;       In:             AL      ASCII character
  2699                                  ;                       CL      column
  2700                                  ;                       CH      row
  2701                                  ;                       ES      CGA selector
  2702                                  ;
  2703                                  ;       Out:            EAX     last target address written (ES:)
  2704                                  ;                       CL      column + 1
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707 00000812 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  2708 00000814 0FB6C5                                          movzx   eax,ch                                          ;row
  2709 00000817 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  2710 00000819 F6E4                                            mul     ah                                              ;row * cols/row
  2711 0000081B 00C8                                            add     al,cl                                           ;add column
  2712 0000081D 80D400                                          adc     ah,0                                            ;handle carry
  2713 00000820 D1E0                                            shl     eax,1                                           ;screen offset
  2714 00000822 268810                                          mov     [es:eax],dl                                     ;store character
  2715 00000825 FEC1                                            inc     cl                                              ;next column
  2716 00000827 C3                                              ret                                                     ;return
  2717                                  ;=======================================================================================================================
  2718                                  ;
  2719                                  ;       Input/Output Routines
  2720                                  ;
  2721                                  ;       These routines read and/or write directly to ports.
  2722                                  ;
  2723                                  ;       PlaceCursor
  2724                                  ;       PutPrimaryEndOfInt
  2725                                  ;       PutSecondaryEndOfInt
  2726                                  ;       SetKeyboardLamps
  2727                                  ;       WaitForKeyInBuffer
  2728                                  ;       WaitForKeyOutBuffer
  2729                                  ;
  2730                                  ;=======================================================================================================================
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;
  2733                                  ;       Routine:        PlaceCursor
  2734                                  ;
  2735                                  ;       Description:    This routine positions the cursor on the console.
  2736                                  ;
  2737                                  ;       In:             DS      OS data selector
  2738                                  ;
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740 00000828 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2741 00000829 A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2742 0000082E B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2743 00000830 F6E4                                            mul     ah                                              ;row offset
  2744 00000832 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  2745 00000838 80D400                                          adc     ah,0                                            ;add overflow
  2746 0000083B 89C1                                            mov     ecx,eax                                         ;screen offset
  2747 0000083D B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2748 0000083F B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2749 00000841 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2750 00000843 EE                                              out     dx,al                                           ;select register
  2751 00000844 42                                              inc     edx                                             ;data port
  2752 00000845 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2753 00000847 EE                                              out     dx,al                                           ;store hi-order loc
  2754 00000848 4A                                              dec     edx                                             ;register select port
  2755 00000849 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2756 0000084B EE                                              out     dx,al                                           ;select register
  2757 0000084C 42                                              inc     edx                                             ;data port
  2758 0000084D 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2759 0000084F EE                                              out     dx,al                                           ;store lo-order loc
  2760 00000850 59                                              pop     ecx                                             ;restore non-volatile regs
  2761 00000851 C3                                              ret                                                     ;return
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  ;
  2764                                  ;       Routine:        PutPrimaryEndOfInt
  2765                                  ;
  2766                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2767                                  ;
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769 00000852 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2770 00000853 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2771 00000855 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2772 00000857 C3                                              ret                                                     ;return
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                  ;
  2775                                  ;       Routine:        PutSecondaryEndOfInt
  2776                                  ;
  2777                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2778                                  ;
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780 00000858 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2781 00000859 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2782 0000085B E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2783 0000085D C3                                              ret                                                     ;return
  2784                                  ;-----------------------------------------------------------------------------------------------------------------------
  2785                                  ;
  2786                                  ;       Routine:        SetKeyboardLamps
  2787                                  ;
  2788                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2789                                  ;
  2790                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2791                                  ;
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793 0000085E E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2794 00000863 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2795 00000865 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  2796 00000867 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2797 0000086C E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2798 0000086E E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2799 00000873 88F8                                            mov     al,bh                                           ;set/reset lamps value
  2800 00000875 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  2801 00000877 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2802 0000087C E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2803 0000087E C3                                              ret                                                     ;return
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                  ;
  2806                                  ;       Routine:        WaitForKeyInBuffer
  2807                                  ;
  2808                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2809                                  ;
  2810                                  ;       Out:            ZF      1 = Input buffer ready
  2811                                  ;                               0 = Input buffer not ready after timeout
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814 0000087F 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2815 00000880 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2816 00000885 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2817 00000887 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  2818 00000889 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  2819 0000088B 59                                              pop     ecx                                             ;restore non-volatile regs
  2820 0000088C C3                                              ret                                                     ;return
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  ;
  2823                                  ;       Routine:        WaitForKeyOutBuffer
  2824                                  ;
  2825                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2826                                  ;
  2827                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2828                                  ;                               0 = Output buffer empty after timeout
  2829                                  ;
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831 0000088D 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2832 0000088E B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2833 00000893 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2834 00000895 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  2835 00000897 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  2836 00000899 59                                              pop     ecx                                             ;restore non-volatile regs
  2837 0000089A C3                                              ret                                                     ;return
  2838                                  ;-----------------------------------------------------------------------------------------------------------------------
  2839                                  ;
  2840                                  ;       End of the Kernel Function Library
  2841                                  ;
  2842                                  ;-----------------------------------------------------------------------------------------------------------------------
  2843 0000089B 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2844                                  ;=======================================================================================================================
  2845                                  ;
  2846                                  ;       Console Task
  2847                                  ;
  2848                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2849                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2850                                  ;       screen and responds to user commands.
  2851                                  ;
  2852                                  ;=======================================================================================================================
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  ;
  2855                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2856                                  ;
  2857                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2858                                  ;
  2859                                  ;-----------------------------------------------------------------------------------------------------------------------
  2860                                  section                 constack                                                ;console task stack
  2861 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2862                                  ;-----------------------------------------------------------------------------------------------------------------------
  2863                                  ;
  2864                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2865                                  ;
  2866                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2867                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2868                                  ;       16 descriptors. Six are initially defined.
  2869                                  ;
  2870                                  ;-----------------------------------------------------------------------------------------------------------------------
  2871                                  section                 conldt                                                  ;console local descriptors
  2872 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2873 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2874 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2875 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2876 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  2877 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  2878 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880                                  ;
  2881                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2882                                  ;
  2883                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2884                                  ;       segment. CS to console code.
  2885                                  ;
  2886                                  ;-----------------------------------------------------------------------------------------------------------------------
  2887                                  section                 contss                                                  ;console task state segment
  2888 00000000 00000000                                        dd      0                                               ;00 back-link tss
  2889 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  2890 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  2891 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  2892 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  2893 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  2894 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  2895 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  2896 00000020 00000000                                        dd      0                                               ;20 eip
  2897 00000024 00020000                                        dd      0200h                                           ;24 eflags
  2898 00000028 00000000                                        dd      0                                               ;28 eax
  2899 0000002C 00000000                                        dd      0                                               ;2c ecx
  2900 00000030 00000000                                        dd      0                                               ;30 edx
  2901 00000034 00000000                                        dd      0                                               ;34 ebx
  2902 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  2903 0000003C 00000000                                        dd      0                                               ;3c ebp
  2904 00000040 00000000                                        dd      0                                               ;40 esi
  2905 00000044 00000000                                        dd      0                                               ;44 edi
  2906 00000048 1C000000                                        dd      001Ch                                           ;48 es
  2907 0000004C 24000000                                        dd      0024h                                           ;4c cs
  2908 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  2909 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  2910 00000058 00000000                                        dd      0                                               ;58 fs
  2911 0000005C 00000000                                        dd      0                                               ;5c gs
  2912 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2913 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                  ;
  2916                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2917                                  ;
  2918                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2919                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2920                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2921                                  ;       event.
  2922                                  ;
  2923                                  ;-----------------------------------------------------------------------------------------------------------------------
  2924                                  section                 conmque                                                 ;console message queue
  2925 00000000 08000000                                        dd      8                                               ;head pointer
  2926 00000004 08000000                                        dd      8                                               ;tail pointer
  2927 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  2928                                  ;-----------------------------------------------------------------------------------------------------------------------
  2929                                  ;
  2930                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2931                                  ;
  2932                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2933                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2934                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2935                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2936                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2937                                  ;       board input, echoing to the console screen and responding to user commands.
  2938                                  ;
  2939                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2940                                  ;
  2941                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2942                                  ;                               |  Real Mode Interrupt Vectors                  |
  2943                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2944                                  ;                               |  Reserved BIOS Memory Area                    |
  2945                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2946                                  ;                               |  Shared Kernel Memory Area                    |
  2947                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2948                                  ;                               |  Global Descriptor Table (GDT)                |
  2949                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2950                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2951                                  ;                       002000  +-----------------------------------------------+
  2952                                  ;                               |  Interrupt Handlers                           |
  2953                                  ;                               |  Kernel Function Library                      |
  2954                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2955                                  ;                               |  Console Task Stack Area                      |
  2956                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2957                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2958                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2959                                  ;                               |  Console Task Task State Segment (TSS)        |
  2960                                  ;                       004800  +-----------------------------------------------+
  2961                                  ;                               |  Console Task Message Queue                   |
  2962                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2963                                  ;                               |  Console Task Code                            |
  2964                                  ;                               |  Console Task Constants                       |
  2965                                  ;                       006000  +===============================================+
  2966                                  ;
  2967                                  ;-----------------------------------------------------------------------------------------------------------------------
  2968                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2969 00000000 E81E000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  2970                                  
  2971                                                          clearConsoleScreen                                      ;clear the console screen
  2971 00000005 B000                <1>  mov al,eClearConsoleScreen
  2971 00000007 CD30                <1>  int _svc
  2972                                                          putConsoleString czTitle                                ;display startup message
  2972 00000009 BA[41000000]        <1>  mov edx,%1
  2972 0000000E B002                <1>  mov al,ePutConsoleString
  2972 00000010 CD30                <1>  int _svc
  2973                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2973                              <1> .10 :
  2973 00000012 BA[3F000000]        <1>  mov edx,%1
  2973 00000017 B002                <1>  mov al,ePutConsoleString
  2973 00000019 CD30                <1>  int _svc
  2974                                                          placeCursor                                             ;set CRT cursor location
  2974 0000001B B001                <1>  mov al,ePlaceCursor
  2974 0000001D CD30                <1>  int _svc
  2975                                  
  2976 0000001F FB                      .20                     sti                                                     ;enable interrupts
  2977 00000020 F4                                              hlt                                                     ;halt until interrupt
  2978 00000021 EBFC                                            jmp     .20                                             ;continue halt loop
  2979                                  ;-----------------------------------------------------------------------------------------------------------------------
  2980                                  ;
  2981                                  ;       Routine:        ConInitializeData
  2982                                  ;
  2983                                  ;       Description:    This routine initializes console task variables.
  2984                                  ;
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986 00000023 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  2987 00000024 57                                              push    edi                                             ;
  2988 00000025 06                                              push    es                                              ;
  2989                                  ;
  2990                                  ;       Initialize console work areas.
  2991                                  ;
  2992 00000026 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2993 00000028 07                                              pop     es                                              ;... into extra segment register
  2994 00000029 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  2995 0000002E 30C0                                            xor     al,al                                           ;initialization value
  2996 00000030 B90C000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  2997 00000035 FC                                              cld                                                     ;forward strings
  2998 00000036 F3AA                                            rep     stosb                                           ;initialize data
  2999                                  ;
  3000                                  ;       Restore and return.
  3001                                  ;
  3002 00000038 07                                              pop     es                                              ;restore non-volatile regs
  3003 00000039 5F                                              pop     edi                                             ;
  3004 0000003A 59                                              pop     ecx                                             ;
  3005 0000003B C3                                              ret                                                     ;return
  3006                                  ;-----------------------------------------------------------------------------------------------------------------------
  3007                                  ;
  3008                                  ;       Constants
  3009                                  ;
  3010                                  ;-----------------------------------------------------------------------------------------------------------------------
  3011 0000003C 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  3012 0000003F 3A00                    czPrompt                db      ":",0                                           ;prompt string
  3013 00000041 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3013 0000004A 65726174696E672053-
  3013 00000053 797374656D20312E30-
  3013 0000005C 0D0A00             
  3014 0000005F 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  3015                                  %endif
  3016                                  %ifdef BUILDDISK
  3017                                  ;-----------------------------------------------------------------------------------------------------------------------
  3018                                  ;
  3019                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3020                                  ;
  3021                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3022                                  ;
  3023                                  ;-----------------------------------------------------------------------------------------------------------------------
  3024                                  section                 unused                                                  ;unused disk space
  3025                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3026                                  %endif
  3027                                  ;=======================================================================================================================
  3028                                  ;
  3029                                  ;       End of Program Code
  3030                                  ;
  3031                                  ;=======================================================================================================================
