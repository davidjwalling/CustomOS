     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.005
     6                                  ;
     7                                  ;	Description:	In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;			updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	x86 Descriptor Access Codes						EACC...
   190                                  ;
   191                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   192                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   193                                  ;
   194                                  ;	0.......	Segment is not present in memory (triggers int 11)
   195                                  ;	1.......	Segment is present in memory
   196                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   197                                  ;	...0....	Segment is a system segment
   198                                  ;	...00010		Local Descriptor Table
   199                                  ;	...00101		Task Gate
   200                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   201                                  ;	...01100		Call Gate (386)
   202                                  ;	...01110		Interrupt Gate (386)
   203                                  ;	...01111		Trap Gate (386)
   204                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   205                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   206                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EACCLDT			equ	10000010b					;local descriptor table
   210                                  EACCTASK		equ	10000101b					;task gate
   211                                  EACCTSS			equ	10001001b					;task-state segment
   212                                  EACCGATE		equ	10001100b					;call gate
   213                                  EACCINT			equ	10001110b					;interrupt gate
   214                                  EACCTRAP		equ	10001111b					;trap gate
   215                                  EACCDATA		equ	10010011b					;upward writable data
   216                                  EACCCODE		equ	10011011b					;non-conforming readable code
   217                                  ;-----------------------------------------------------------------------------------------------------------------------
   218                                  ;
   219                                  ;	BIOS Interrupts and Functions						EBIOS...
   220                                  ;
   221                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   222                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   226                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   227                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   228                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   229                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   230                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   231                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	ASCII									EASCII...
   235                                  ;
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  EASCIILINEFEED		equ	10						;ASCII line feed
   238                                  EASCIIRETURN		equ	13						;ASCII carriage return
   239                                  EASCIIESCAPE		equ	27						;ASCII escape
   240                                  EASCIISPACE		equ	32						;ASCII space
   241                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   242                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   243                                  EASCIICASE		equ	00100000b					;ASCII case bit
   244                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  ;
   247                                  ;	Boot Sector and Loader Constants
   248                                  ;
   249                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   250                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   251                                  ;
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   254                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   255                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   256                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   257                                  EMAXTRIES		equ	5						;max read retries
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ESELDAT			equ	18h						;kernel data selector
   262                                  ESELCGA			equ	20h						;cga video selector
   263                                  ESELOSCODE		equ	48h						;os kernel selector
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;	Kernel Constants							EKRN...
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EKRNDESLEN		equ	8						;size of descriptor
   268                                  EKRNADR			equ	1000h						;kernel base address
   269                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ;	Keyboard Flags								EKEY...
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EKEYCTRLLEFT		equ	00000001b					;left control
   274                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   275                                  EKEYALTLEFT		equ	00000100b					;left alt
   276                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   277                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   278                                  EKEYSHIFT		equ	00010010b					;left or right shift
   279                                  EKEYALTRIGHT		equ	00100000b					;right alt
   280                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   281                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   282                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   283                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   284                                  ;-----------------------------------------------------------------------------------------------------------------------
   285                                  ;	Console Constants							ECON...
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ECONCOLS		equ	80						;columns per row
   288                                  ECONROWS		equ	24						;console rows
   289                                  ECONOIAROW		equ	24						;operator information area row
   290                                  ECONCOLBYTES		equ	2						;bytes per column
   291                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   292                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   293                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   294                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  ;
   297                                  ;	Structures
   298                                  ;
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;	OSDATA
   303                                  ;
   304                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   305                                  ;	used by the BIOS.
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  struc			OSDATA
   309 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   310 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   311 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   312 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   313 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   314 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   315 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   316 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   317 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   318 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   319 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   320 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   321 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   322 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   323 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   324 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   325 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   326 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   327 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   328 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   329 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   330 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   331 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   332 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   333 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   334 00000449 <res 00000001>          			resb	1						;449 current video mode
   335 0000044A <res 00000002>          			resw	1						;44A screen columns
   336 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   337 0000044E <res 00000002>          			resw	1						;44E current video page offset
   338 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   339 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   340 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   341 00000462 <res 00000001>          			resb	1						;462 active display page number
   342 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   343 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   344 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   345 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   346 00000469 <res 00000003>          			resb	3						;469 vague
   347 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   348 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   349 00000471 <res 00000001>          			resb	1						;471 bios break flag
   350 00000472 <res 00000002>          			resw	1						;472 soft reset
   351 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   352 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   353 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   354 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   355 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   356 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   357 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   358 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   359 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   360 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   361 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   362 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   363 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   364 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   365 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   366 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   367 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   368 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   369 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   370 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   371 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   372 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   373 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   374 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   375 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   376 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   377 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   378 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   379 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   380 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   381 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   382 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   383 000004AC <res 00000008>          			resb	8						;4AC reserved
   384 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   385 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   386 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   387 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   388 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   389 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   390 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   391 000004CD <res 00000001>          			resb	1						;4CD unknown
   392 000004CE <res 00000002>          			resw	1						;4CE day counter
   393 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   394 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   395 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   396 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   397 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   398 00000505 <res 0000000A>          			resb	10						;505 POST work area
   399 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   400 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   401 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   402 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   403 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   404 0000051E <res 00000002>          			resw	1						;51E unknown
   405 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   406 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   407 00000530 <res 00000004>          			resb	4						;530 MODE command
   408 00000534 <res 000001CC>          			resb	460						;534 unused
   409 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;
   412                                  ;	OS Variables								@disk: N/A	@mem: 000800
   413                                  ;
   414                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   415                                  ;	accessible by any kernel task or interrupt.
   416                                  ;
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ECONDATA		equ	($)
   419 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   420 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   421 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   422 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   423 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   424 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   425 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   426 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   427 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   428 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   429 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   430 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   431                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   432                                  endstruc
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;
   435                                  ;	Macros
   436                                  ;
   437                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   438                                  ;
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  %macro			mint	1
   441                                  _%1			equ	($-$$) / EKRNDESLEN
   442                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   443                                  %endmacro
   444                                  %macro			mtrap	1
   445                                  _%1			equ	($-$$) / EKRNDESLEN
   446                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   447                                  %endmacro
   448                                  %macro			menter	1
   449                                  ?%1			equ	($-$$)
   450                                  %endmacro
   451                                  %macro			tsvce	1
   452                                  e%1			equ	($-tsvc)/4
   453                                  			dd	%1
   454                                  %endmacro
   455                                  %ifdef BUILDBOOT
   456                                  ;-----------------------------------------------------------------------------------------------------------------------
   457                                  ;
   458                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   459                                  ;
   460                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   461                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   462                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   463                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   464                                  ;
   465                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   466                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   467                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   468                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   469                                  ;	immediately followed by a disk parameter table.
   470                                  ;
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  			cpu	8086						;assume minimal CPU
   473                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   474                                  			bits	16						;16-bit code at power-up
   475                                  %ifdef BUILDPREP
   476                                  Boot			jmp	word Prep					;jump to preparation code
   477                                  %else
   478                                  Boot			jmp	word Boot.10					;jump over parameter table
   479                                  %endif
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  ;
   482                                  ;	Disk Parameter Table
   483                                  ;
   484                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   485                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   486                                  ;
   487                                  ;-----------------------------------------------------------------------------------------------------------------------
   488                                  			db	"CustomOS"					;eight-byte label
   489                                  cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   490                                  cbClusterSectors	db	1						;sectors per cluster
   491                                  cwReservedSectors	dw	1						;reserved sectors
   492                                  cbFatCount		db	2						;file allocation table copies
   493                                  cwDirEntries		dw	224						;max directory entries
   494                                  cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   495                                  cbDiskType		db	0F0h						;1.44MB
   496                                  cwFatSectors		dw	9						;sectors per FAT copy
   497                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   498                                  cwTrackSectors		dw	18						;sectors per track (as word)
   499                                  cwDiskSides		dw	2						;sides per disk
   500                                  cwSpecialSectors	dw	0						;special sectors
   501                                  ;
   502                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   503                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   504                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   505                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   506                                  ;	given several possible starting values for CS:IP.
   507                                  ;
   508                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   509                                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   510                                  .@20			equ	$-$$						;.@20 = 021h
   511                                  .20			pop	ax						;AX =	   7c21     c21    21
   512                                  			sub	ax,.@20						;BX =	   7c00     c00     0
   513                                  			mov	cl,4						;shift count
   514                                  			shr	ax,cl						;AX =	    7c0      c0     0
   515                                  			mov	bx,cs						;BX =	      0     700   7c0
   516                                  			add	bx,ax						;BX =	    7c0     7c0   7c0
   517                                  ;
   518                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   519                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   520                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   521                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   522                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   523                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   524                                  ;
   525                                  			sub	bx,16						;BX = 07b0
   526                                  			mov	ds,bx						;DS = 07b0 = psp
   527                                  			mov	es,bx						;ES = 07b0 = psp
   528                                  			mov	ss,bx						;SS = 07b0 = psp
   529                                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   530                                  ;
   531                                  ;	Our boot addressability is now set up according to the following diagram.
   532                                  ;
   533                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   534                                  ;				|  Unused (DOS Program Segment Prefix)		|
   535                                  ;			007c00	+-----------------------------------------------+ DS:0100
   536                                  ;				|  Boot Sector Code (vstart=100h)		|
   537                                  ;				|						|
   538                                  ;			007e00	+-----------------------------------------------+ DS:0300
   539                                  ;				|  Boot Stack					|
   540                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   541                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   542                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   543                                  ;				|						|
   544                                  ;			009100	+-----------------------------------------------+ DS:1600
   545                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   546                                  ;				|						|
   547                                  ;			009300	+-----------------------------------------------+ DS:1800
   548                                  ;
   549                                  ;	On entry, DL indicates the drive being booted from.
   550                                  ;
   551                                  			mov	[wbDrive],dl					;[drive] = drive being booted from
   552                                  ;
   553                                  ;	Compute directory i/o buffer address.
   554                                  ;
   555                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   556                                  			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   557                                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   558                                  			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   559                                  ;
   560                                  ;	Compute segment where os.com will be loaded.
   561                                  ;
   562                                  			shr	ax,cl						;AX = 0160
   563                                  			add	ax,bx						;AX = 0160 + 07b0 = 0910
   564                                  			sub	ax,16						;AX = 0900
   565                                  			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   566                                  ;
   567                                  ;	Write a message to the console so we know we have our addressability established.
   568                                  ;
   569                                  			mov	si,czLoadMsg					;loading message
   570                                  			call	BootPrint					;display loader message
   571                                  ;
   572                                  ;	Initialize the number of directory sectors to search.
   573                                  ;
   574                                  			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   575                                  			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   576                                  ;
   577                                  ;	Compute number of directory sectors and initialize overhead count.
   578                                  ;
   579                                  			mov	cx,ax						;CX = 00e0 = 224 entries
   580                                  			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   581                                  			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   582                                  			mov	[wwOverhead],ax					;[overhead] = 000e
   583                                  ;
   584                                  ;	Compute directory entries per sector.
   585                                  ;
   586                                  			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   587                                  			div	cx						;AX = 0010 = entries per dir sector
   588                                  			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   589                                  ;
   590                                  ;	Compute first logical directory sector and update overhead count.
   591                                  ;
   592                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   593                                  			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   594                                  			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   595                                  			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   596                                  			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   597                                  			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   598                                  ;
   599                                  ;	Read directory sector.
   600                                  ;
   601                                  .30			mov	al,1						;sector count
   602                                  			mov	[wbReadCount],al				;[readcount] = 01
   603                                  			mov	bx,[wwDirBuffer]				;BX = 1600
   604                                  			call	ReadSector					;read sector into es:bx
   605                                  ;
   606                                  ;	Setup variables to search this directory sector.
   607                                  ;
   608                                  			mov	ax,[wwEntriesLeft]				;directory entries to search
   609                                  			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   610                                  			jna	.40						;no, continue
   611                                  			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   612                                  .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   613                                  			mov	si,cbKernelProgram				;program name
   614                                  			mov	di,[wwDirBuffer]				;DI = 1600
   615                                  ;
   616                                  ;	Loop through directory sectors searching for kernel program.
   617                                  ;
   618                                  .50			push	si						;save kernel name address
   619                                  			push	di						;save dir i/o buffer address
   620                                  			mov	cx,11						;length of 8+3 name
   621                                  			cld							;forward strings
   622                                  			repe	cmpsb						;compare entry name
   623                                  			pop	di						;restore dir i/o buffer address
   624                                  			pop	si						;restore kernel name address
   625                                  			je	.60						;exit loop if found
   626                                  			add	di,[cwEntryLen]					;point to next dir entry
   627                                  			dec	ax						;decrement remaining entries
   628                                  			jnz	.50						;next entry
   629                                  ;
   630                                  ;	Repeat search if we are not at the end of the directory.
   631                                  ;
   632                                  			inc	word [wwLogicalSector]				;increment logical sector
   633                                  			cmp	word [wwEntriesLeft],0				;done with directory?
   634                                  			jne	.30						;no, get next sector
   635                                  			mov	si,czNoKernel					;missing kernel message
   636                                  			jmp	BootExit					;display message and exit
   637                                  ;
   638                                  ;	If we find the kernel program in the directory, read the FAT.
   639                                  ;
   640                                  .60			mov	ax,[cwReservedSectors]				;AX = 0001
   641                                  			mov	[wwLogicalSector],ax				;start past boot sector
   642                                  			mov	ax,[cwFatSectors]				;AX = 0009
   643                                  			mov	[wbReadCount],al				;[readcount] = 09
   644                                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   645                                  			call	ReadSector					;read FAT into buffer
   646                                  ;
   647                                  ;	Get the starting cluster of the kernel program and target address.
   648                                  ;
   649                                  			mov	ax,[di+26]					;AX = starting cluster of file
   650                                  			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   651                                  ;
   652                                  ;	Read each program cluster into RAM.
   653                                  ;
   654                                  .70			push	ax						;save cluster nbr
   655                                  			sub	ax,2						;AX = cluster nbr base 0
   656                                  			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   657                                  			mov	[wbReadCount],cl				;save sectors to read
   658                                  			xor	ch,ch						;CX = sectors per cluster
   659                                  			mul	cx						;DX:AX = logical cluster sector
   660                                  			add	ax,[wwOverhead]					;AX = kernel sector nbr
   661                                  			mov	[wwLogicalSector],ax				;save logical sector nbr
   662                                  			call	ReadSector					;read sectors into es:bx
   663                                  ;
   664                                  ;	Update buffer pointer for next cluster.
   665                                  ;
   666                                  			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   667                                  			xor	ah,ah						;AX = sectors per cluster
   668                                  			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   669                                  			add	bx,ax						;BX = next cluster target address
   670                                  			pop	ax						;AX = restore cluster nbr
   671                                  ;
   672                                  ;	Compute next cluster number.
   673                                  ;
   674                                  			mov	cx,ax						;CX = cluster nbr
   675                                  			mov	di,ax						;DI = cluster nbr
   676                                  			shr	ax,1						;AX = cluster/2
   677                                  			mov	dx,ax						;DX = cluster/2
   678                                  			add	ax,dx						;AX = 2*(cluster/2)
   679                                  			add	ax,dx						;AX = 3*(cluster/2)
   680                                  			and	di,1						;get low bit
   681                                  			add	di,ax						;add one if cluster is odd
   682                                  			add	di,EBOOTSTACKTOP				;add FAT buffer address
   683                                  			mov	ax,[di]						;get cluster bytes
   684                                  ;
   685                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   686                                  ;
   687                                  			test	cl,1						;is cluster odd?
   688                                  			jz	.80						;no, skip ahead
   689                                  			mov	cl,4						;shift count
   690                                  			shr	ax,cl						;shift nybble low
   691                                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   692                                  			cmp	ax,0FFFh					;end of chain?
   693                                  			jne	.70						;no, continue
   694                                  ;
   695                                  ;	Transfer control to the operating system program.
   696                                  ;
   697                                  			db	0EAh						;jmp seg:offset
   698                                  wwLoadOffset		dw	0100h						;kernel entry offset
   699                                  wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   700                                  ;
   701                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   702                                  ;
   703                                  ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   704                                  			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   705                                  			mov	cx,ax						;CX = sectors per cylinder
   706                                  			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   707                                  			div	cx						;AX = cylinder; DX = cyl sector
   708                                  			mov	[wbTrack],al					;[track] = cylinder
   709                                  			mov	ax,dx						;AX = cyl sector
   710                                  			div	byte [cbTrackSectors]				;AH = sector, AL = head
   711                                  			inc	ah						;AH = sector (1,2,3,...)
   712                                  			mov	[wbHead],ax					;[head]= head, [sector]= sector
   713                                  ;
   714                                  ;	Try maxtries times to read sector.
   715                                  ;
   716                                  			mov	cx,EMAXTRIES					;CX = 0005
   717                                  .10			push	bx						;save buffer address
   718                                  			push	cx						;save retry count
   719                                  			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   720                                  			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   721                                  			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   722                                  			int	EBIOSINTDISKETTE				;read sector
   723                                  			pop	cx						;restore retry count
   724                                  			pop	bx						;restore buffer address
   725                                  			jnc	BootReturn					;skip ahead if done
   726                                  			loop	.10						;retry
   727                                  ;
   728                                  ;	Handle disk error: convert to ASCII and store in error string.
   729                                  ;
   730                                  			mov	al,ah						;AL = bios error code
   731                                  			xor	ah,ah						;AX = bios error code
   732                                  			mov	dl,16						;divisor for base 16
   733                                  			div	dl						;AL = hi order, AH = lo order
   734                                  			or	ax,3030h					;apply ASCII zone bits
   735                                  			cmp	ah,3Ah						;range test ASCII numeral
   736                                  			jb	.20						;continue if numeral
   737                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   738                                  .20			cmp	al,3Ah						;range test ASCII numeral
   739                                  			jb	.30						;continue if numeral
   740                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   741                                  .30			mov	[wzErrorCode],ax				;store ASCII error code
   742                                  			mov	si,czErrorMsg					;error message address
   743                                  BootExit		call	BootPrint					;display messge to console
   744                                  .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   745                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   746                                  			jnz	.20						;continue if key pressed
   747                                  			sti							;enable maskable interrupts
   748                                  			hlt							;wait for interrupt
   749                                  			jmp	.10						;repeat
   750                                  .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   751                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
   752                                  .30			sti							;enable maskable interrupts
   753                                  			hlt							;stop until reset, int, nmi
   754                                  			jmp	.30						;loop until restart kicks in
   755                                  ;
   756                                  ;	Display text message.
   757                                  ;
   758                                  BootPrint		cld							;forward strings
   759                                  			lodsb							;load next byte at DS:SI in AL
   760                                  			test	al,al						;end of string?
   761                                  			jz	BootReturn					;... yes, exit our loop
   762                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   763                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
   764                                  			jmp	BootPrint					;repeat until done
   765                                  BootReturn		ret							;return
   766                                  ;-----------------------------------------------------------------------------------------------------------------------
   767                                  ;
   768                                  ;	Constants
   769                                  ;
   770                                  ;-----------------------------------------------------------------------------------------------------------------------
   771                                  			align	2
   772                                  cwEntryLen		dw	32						;length of directory entry
   773                                  cbKernelProgram		db	"OS      COM"					;kernel program name
   774                                  czLoadMsg		db	"Loading ...",13,10,0				;loading message
   775                                  czErrorMsg		db	"Disk error "					;error message
   776                                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   777                                  czNoKernel		db	"OS.COM missing",0				;missing kernel message
   778                                  ;-----------------------------------------------------------------------------------------------------------------------
   779                                  ;
   780                                  ;	Work Areas
   781                                  ;
   782                                  ;-----------------------------------------------------------------------------------------------------------------------
   783                                  			align	2
   784                                  wwDirBuffer		dw	0						;directory i/o buffer address
   785                                  wwEntriesLeft		dw	0						;directory entries to search
   786                                  wwOverhead		dw	0						;overhead sectors
   787                                  wwSectorEntries		dw	0						;directory entries per sector
   788                                  wwLogicalSector		dw	0						;current logical sector
   789                                  wwReadCountCommand	equ	$						;read count and command
   790                                  wbReadCount		db	0						;sectors to read
   791                                  cbReadCommand		db	2						;BIOS read disk fn code
   792                                  wwDriveHead		equ	$						;drive, head (word)
   793                                  wbDrive			db	0						;drive
   794                                  wbHead			db	0						;head
   795                                  wwSectorTrack		equ	$						;sector, track (word)
   796                                  			db	0						;sector
   797                                  wbTrack			db	0						;track
   798                                  			times	510-($-$$) db 0h				;zero fill to end of sector
   799                                  			db	055h,0AAh					;end of sector signature
   800                                  %endif
   801                                  %ifdef BUILDPREP
   802                                  ;-----------------------------------------------------------------------------------------------------------------------
   803                                  ;
   804                                  ;	Diskette Preparation Code
   805                                  ;
   806                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   807                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   808                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   809                                  ;
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811                                  ;
   812                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   813                                  ;
   814                                  Prep			mov	si,czPrepMsg10					;starting message address
   815                                  			call	BootPrint					;display message
   816                                  ;
   817                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   818                                  ;
   819                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   820                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   821                                  			jnz	.12						;continue if key pressed
   822                                  			sti							;enable interrupts
   823                                  			hlt							;wait for interrupt
   824                                  			jmp	.10						;repeat
   825                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   826                                  			je	.15						;yes, branch
   827                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   828                                  			jne	.10						;no, repeat
   829                                  			jmp	.90						;yes, exit program
   830                                  ;
   831                                  ;	Display writing-sector message and patch the JMP instruction.
   832                                  ;
   833                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   834                                  			call	BootPrint					;display message
   835                                  			mov	bx,Boot+1					;address of JMP instruction operand
   836                                  			mov	ax,01Bh						;address past disk parameter table
   837                                  			mov	[bx],ax						;update the JMP instruction
   838                                  ;
   839                                  ;	Try to read the boot sector.
   840                                  ;
   841                                  			mov	cx,EMAXTRIES					;try up to five times
   842                                  .20			push	cx						;save remaining tries
   843                                  			mov	bx,wcPrepInBuf					;input buffer address
   844                                  			mov	dx,0						;head zero, drive zero
   845                                  			mov	cx,1						;track zero, sector one
   846                                  			mov	ax,0201h					;read one sector
   847                                  			int	EBIOSINTDISKETTE				;attempt the read
   848                                  			pop	cx						;restore remaining retries
   849                                  			jnc	.30						;skip ahead if successful
   850                                  			loop	.20						;try again
   851                                  			mov	si,czPrepMsg20					;read-error message address
   852                                  			jmp	.50						;branch to error routine
   853                                  ;
   854                                  ;	Copy diskette parms from input buffer to output buffer.
   855                                  ;
   856                                  .30			mov	si,wcPrepInBuf					;input buffer address
   857                                  			add	si,11						;skip over JMP and system ID
   858                                  			mov	di,Boot						;output buffer address
   859                                  			add	di,11						;skip over JMP and system ID
   860                                  			mov	cx,19						;length of diskette parameters
   861                                  			cld							;forward string copies
   862                                  			rep	movsb						;copy diskette parameters
   863                                  ;
   864                                  ;	Try to write boot sector to diskette.
   865                                  ;
   866                                  			mov	cx,EMAXTRIES					;try up to five times
   867                                  .40			push	cx						;save remaining tries
   868                                  			mov	bx,Boot						;output buffer address
   869                                  			mov	dx,0						;head zero, drive zero
   870                                  			mov	cx,1						;track zero, sector one
   871                                  			mov	ax,0301h					;write one sector
   872                                  			int	EBIOSINTDISKETTE				;attempt the write
   873                                  			pop	cx						;restore remaining retries
   874                                  			jnc	.80						;skip ahead if successful
   875                                  			loop	.40						;try again
   876                                  			mov	si,czPrepMsg30					;write-error message address
   877                                  ;
   878                                  ;	Convert the error code to ASCII and display the error message.
   879                                  ;
   880                                  .50			push	ax						;save error code
   881                                  			mov	al,ah						;copy error code
   882                                  			mov	ah,0						;AX = error code
   883                                  			mov	dl,10h						;hexadecimal divisor
   884                                  			idiv	dl						;AL = hi-order, AH = lo-order
   885                                  			or	ax,3030h					;add ASCII zone digits
   886                                  			cmp	ah,3Ah						;AH ASCII numeral?
   887                                  			jb	.60						;yes, continue
   888                                  			add	ah,7						;no, make ASCII 'A'-'F'
   889                                  .60			cmp	al,3Ah						;al ASCII numeral?
   890                                  			jb	.70						;yes, continue
   891                                  			add	al,7						;no, make ASCII
   892                                  .70			mov	[si+17],ax					;put ASCII error code in message
   893                                  			call	BootPrint					;write error message
   894                                  			pop	ax						;restore error code
   895                                  ;
   896                                  ;	Display the completion message.
   897                                  ;
   898                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   899                                  			mov	al,ah						;BIOS return code
   900                                  			cmp	al,0						;success?
   901                                  			je	.85						;yes, continue
   902                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   903                                  			cmp	al,1						;disk parameter error?
   904                                  			je	.85						;yes, continue
   905                                  			mov	si,czPrepMsgErr2				;address mark not found message
   906                                  			cmp	al,2						;address mark not found?
   907                                  			je	.85						;yes, continue
   908                                  			mov	si,czPrepMsgErr3				;protected disk message
   909                                  			cmp	al,3						;protected disk?
   910                                  			je	.85						;yes, continue
   911                                  			mov	si,czPrepMsgErr6				;diskette removed message
   912                                  			cmp	al,6						;diskette removed?
   913                                  			je	.85						;yes, continue
   914                                  			mov	si,czPrepMsgErr80				;drive timed out message
   915                                  			cmp	al,80H						;drive timed out?
   916                                  			je	.85						;yes, continue
   917                                  			mov	si,czPrepMsgErrXX				;unknown error message
   918                                  .85			call	BootPrint					;display result message
   919                                  .90			mov	ax,4C00H					;terminate with zero result code
   920                                  			int	21h						;terminate DOS program
   921                                  			ret							;return (should not execute)
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923                                  ;
   924                                  ;	Diskette Preparation Messages
   925                                  ;
   926                                  ;-----------------------------------------------------------------------------------------------------------------------
   927                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   928                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   929                                  			db	13,10
   930                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   931                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   932                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   933                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   934                                  			db	13,10,0
   935                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   936                                  			db	13,10,0
   937                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   938                                  			db	13,10,0
   939                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   940                                  			db	13,10,0
   941                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   942                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   943                                  			db	13,10,0
   944                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   945                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   946                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   947                                  			db	13,10,"and retry."
   948                                  			db	13,10,0
   949                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   950                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   951                                  			db	13,10,"using another diskette."
   952                                  			db	13,10,0
   953                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   954                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   955                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   956                                  			db	13,10,0
   957                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   958                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   959                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   960                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   961                                  			db	13,10,"is properly inserted in the diskette drive."
   962                                  			db	13,10,0
   963                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   964                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   965                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   966                                  			db	13,10,0
   967                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   968                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   969                                  			db	13,10,"your computer's technical reference for a description of this error code."
   970                                  			db	13,10,0
   971                                  wcPrepInBuf		equ	$
   972                                  %endif
   973                                  %ifdef BUILDDISK
   974                                  ;-----------------------------------------------------------------------------------------------------------------------
   975                                  ;
   976                                  ;	File Allocation Tables
   977                                  ;
   978                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
   979                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
   980                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
   981                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
   982                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
   983                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
   984                                  ;	the last cluster in the chain.
   985                                  ;
   986                                  ;	Every three bytes encode two FAT entries as follows:
   987                                  ;
   988                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
   989                                  ;
   990                                  ;-----------------------------------------------------------------------------------------------------------------------
   991                                  ;-----------------------------------------------------------------------------------------------------------------------
   992                                  ;
   993                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
   994                                  ;
   995                                  ;-----------------------------------------------------------------------------------------------------------------------
   996                                  section			fat1							;first copy of FAT
   997                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
   998                                  			db	005h,060h,000h,	007h,080h,000h
   999                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1000                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1001                                  			db	011h,020h,001h,	013h,040h,001h
  1002                                  			db	015h,060h,001h,	017h,080h,001h
  1003                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1004                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1005                                  			db	021h,020h,002h,	023h,040h,002h
  1006                                  			db	025h,060h,002h,	027h,080h,002h
  1007                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1008                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1009                                  ;-----------------------------------------------------------------------------------------------------------------------
  1010                                  ;
  1011                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1012                                  ;
  1013                                  ;-----------------------------------------------------------------------------------------------------------------------
  1014                                  section			fat2							;second copy of FAT
  1015                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1016                                  			db	005h,060h,000h,	007h,080h,000h
  1017                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1018                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1019                                  			db	011h,020h,001h,	013h,040h,001h
  1020                                  			db	015h,060h,001h,	017h,080h,001h
  1021                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1022                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1023                                  			db	021h,020h,002h,	023h,040h,002h
  1024                                  			db	025h,060h,002h,	027h,080h,002h
  1025                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1026                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1027                                  ;-----------------------------------------------------------------------------------------------------------------------
  1028                                  ;
  1029                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1030                                  ;
  1031                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1032                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1033                                  ;	copy.
  1034                                  ;
  1035                                  ;-----------------------------------------------------------------------------------------------------------------------
  1036                                  section			dir							;diskette directory
  1037                                  			db	"OS      COM"					;file name (must contain spaces)
  1038                                  			db	20h						;attribute (archive bit set)
  1039                                  			times	10 db 0;					;unused
  1040                                  			dw	0h						;time
  1041                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1042                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1043                                  			dw	2						;first cluster
  1044                                  			dd	5200h						;file size
  1045                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1046                                  %endif
  1047                                  %ifdef BUILDCOM
  1048                                  ;-----------------------------------------------------------------------------------------------------------------------
  1049                                  ;
  1050                                  ;	OS.COM
  1051                                  ;
  1052                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1053                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1054                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1055                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1056                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1057                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1058                                  ;
  1059                                  ;	Our loader addressability is set up according to the following diagram.
  1060                                  ;
  1061                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1062                                  ;				|  Boot Sector & Loader Stack Area		|
  1063                                  ;				|						|
  1064                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1065                                  ;
  1066                                  ;
  1067                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1068                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1069                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1070                                  ;				|  Loader Code					|
  1071                                  ;				|						|
  1072                                  ;			009300	+-----------------------------------------------+ CS:0200
  1073                                  ;
  1074                                  ;-----------------------------------------------------------------------------------------------------------------------
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076                                  ;
  1077                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1078                                  ;
  1079                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1080                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1081                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1082                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1083                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1084                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1085                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1086                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1087                                  ;	registers.
  1088                                  ;
  1089                                  ;-----------------------------------------------------------------------------------------------------------------------
  1090                                  			cpu	8086						;assume minimal CPU
  1091                                  section			loader	vstart=100h					;use .COM compatible addressing
  1092                                  			bits	16						;this is 16-bit code
  1093 00000000 0E                      Loader			push	cs						;use the code segment
  1094 00000001 1F                      			pop	ds						;...as our data segment
  1095 00000002 0E                      			push	cs						;use the code segment
  1096 00000003 07                      			pop	es						;...as our extra segment
  1097                                  ;
  1098                                  ;	Write a message to the console so we know we have our addressability established.
  1099                                  ;
  1100 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1101 00000007 E8A600                  			call	PutTTYString					;display loader message
  1102                                  ;
  1103                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1104                                  ;
  1105 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1106 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1107 00000010 3C03                    			cmp	al,3						;80386+?
  1108 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1109                                  			cpu	386						;allow 80386 instructions
  1110 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1111 00000017 E89600                  			call	PutTTYString					;display message
  1112                                  ;
  1113                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1114                                  ;
  1115 0000001A BE0003                  			mov	si,300h						;GDT offset
  1116 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1117 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1118 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1119 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1120 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1121 00000029 894432                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1122 0000002C 884C34                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1123 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1124 00000032 E87B00                  			call	PutTTYString					;display message
  1125                                  ;
  1126                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1127                                  ;
  1128 00000035 680001                  			push	EKRNSEG						;use kernel segment ...
  1129 00000038 07                      			pop	es						;... as target segment
  1130 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1131 0000003B BE0003                  			mov	si,300h						;DS:SI = source address
  1132 0000003E B90050                  			mov	cx,5000h					;CX = kernel size
  1133 00000041 FC                      			cld							;forward strings
  1134 00000042 F3A4                    			rep	movsb						;copy kernel image
  1135 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1136 00000047 E86600                  			call	PutTTYString					;display message
  1137                                  ;
  1138                                  ;	Switch to protected mode.
  1139                                  ;
  1140 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1141 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1142 0000004E BC0010                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1143 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1144 00000053 BB2820                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1145 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1146 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1147 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1148 0000005E 4A                      			dec	dx						;restore outer loop count
  1149 0000005F 75F8                    			jnz	.10						;continue outer loop
  1150 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1151                                  ;
  1152                                  ;	Enable hardware and maskable interrupts
  1153                                  ;
  1154 00000063 30C0                    			xor	al,al						;enable all registers code
  1155 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1156 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1157 00000069 FB                      			sti							;enable maskable interrupts
  1158                                  ;
  1159                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1160                                  ;
  1161 0000006A 2E0F001E[BE00]          			ltr	[cs:cwLoaderTSS]				;load task register
  1162 00000070 2E0F0016[C000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1163 00000076 EA00005800              			jmp	0058h:0						;jump to task state segment selector
  1164                                  ;-----------------------------------------------------------------------------------------------------------------------
  1165                                  ;
  1166                                  ;	Routine:	LoaderExit
  1167                                  ;
  1168                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1169                                  ;
  1170                                  ;	In:		DS:SI	string address
  1171                                  ;
  1172                                  ;-----------------------------------------------------------------------------------------------------------------------
  1173 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1174                                  ;
  1175                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1176                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1177                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1178                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1179                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1180                                  ;
  1181 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1182 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1183 00000082 7504                    			jnz	.40						;exit if key pressed
  1184 00000084 FB                      			sti							;enable maskable interrupts
  1185 00000085 F4                      			hlt							;wait for interrupt
  1186 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1187                                  ;
  1188                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1189                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1190                                  ;	HLT until the system resets.
  1191                                  ;
  1192 00000088 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1193 0000008A E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1194 0000008C FB                      .50			sti							;enable maskable interrupts
  1195 0000008D F4                      			hlt							;stop until reset, int, nmi
  1196 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1197                                  ;-----------------------------------------------------------------------------------------------------------------------
  1198                                  ;
  1199                                  ;	Routine:	GetCPUType
  1200                                  ;
  1201                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1202                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1203                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1204                                  ;
  1205                                  ;	Output:		AX	0 = 808x, v20, etc.
  1206                                  ;				1 = 80186
  1207                                  ;				2 = 80286
  1208                                  ;				3 = 80386
  1209                                  ;
  1210                                  ;-----------------------------------------------------------------------------------------------------------------------
  1211 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1212 00000092 B120                    			mov	cl,32						;shift count
  1213 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1214 00000096 08C0                    			or	al,al						;did the shift happen?
  1215 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1216                                  			cpu	186
  1217 0000009A 54                      			push	sp						;save stack pointer
  1218 0000009B 59                      			pop	cx						;...into cx
  1219 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1220 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1221                                  			cpu	286
  1222 000000A0 40                      			inc	ax						;AX = 2
  1223 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1224 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1225 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1226 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1227 000000AE 40                      			inc	ax						;AX = 3
  1228 000000AF C3                      .10			ret							;return
  1229                                  ;-----------------------------------------------------------------------------------------------------------------------
  1230                                  ;
  1231                                  ;	Routine:	PutTTYString
  1232                                  ;
  1233                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1234                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1235                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1236                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1237                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1238                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1239                                  ;			registers and flags unless used to indicate return status.
  1240                                  ;
  1241                                  ;	In:		DS:SI	address of string
  1242                                  ;
  1243                                  ;-----------------------------------------------------------------------------------------------------------------------
  1244 000000B0 FC                      PutTTYString		cld							;forward strings
  1245 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1246 000000B2 84C0                    			test	al,al						;end of string?
  1247 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1248 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1249 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1250 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1251 000000BC C3                      .10			ret							;return
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  ;
  1254                                  ;	Loader Data
  1255                                  ;
  1256                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1257                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1258                                  ;
  1259                                  ;-----------------------------------------------------------------------------------------------------------------------
  1260 000000BD 90                      			align	2
  1261 000000BE 6800                    cwLoaderTSS		dw	0068h						;TSS selector
  1262 000000C0 6000                    cwLoaderLDT		dw	0060h						;LDT selector
  1263 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1264 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1265 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 "
  1265 000000D1 74696E672073797374-
  1265 000000DA 656D20726571756972-
  1265 000000E3 657320616E20693338-
  1265 000000EC 3620               
  1266 000000EE 6F72206C6174657220-     			db	"or later processor.",13,10,
  1266 000000F7 70726F636573736F72-
  1266 00000100 2E0D0A             
  1267 00000103 506C65617365207072-     			db	"Please press any key to restart the "
  1267 0000010C 65737320616E79206B-
  1267 00000115 657920746F20726573-
  1267 0000011E 746172742074686520 
  1268 00000127 636F6D70757465722E-     			db	"computer.",13,10,0
  1268 00000130 0D0A00             
  1269 00000133 435055206F6B0D0A00      czCPUOKMsg		db	"CPU ok",13,10,0
  1270 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1270 00000145 7265640D0A00       
  1271 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1271 00000154 616465640D0A00     
  1272 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1272 00000164 2E2E2E0D0A00       
  1273 0000016A 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1274 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1275                                  ;-----------------------------------------------------------------------------------------------------------------------
  1276                                  ;
  1277                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1278                                  ;
  1279                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1280                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1281                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1282                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1283                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1284                                  ;
  1285                                  ;-----------------------------------------------------------------------------------------------------------------------
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  ;
  1288                                  ;	Tables
  1289                                  ;
  1290                                  ;-----------------------------------------------------------------------------------------------------------------------
  1291                                  ;-----------------------------------------------------------------------------------------------------------------------
  1292                                  ;
  1293                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1294                                  ;
  1295                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1296                                  ;	first descriptor must be all nulls.
  1297                                  ;
  1298                                  ;	6   5         4         3         2         1         0
  1299                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1300                                  ;	----------------------------------------------------------------
  1301                                  ;	h......hffffmmmma......ab......................bn..............n
  1302                                  ;	00000000			all areas have base addresses below 2^24
  1303                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1304                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1305                                  ;	            1001		present, ring-0, selector
  1306                                  ;
  1307                                  ;	h...h	hi-order base address (bits 24-31)
  1308                                  ;	ffff	flags
  1309                                  ;	mmmm	hi-order limit (bits 16-19)
  1310                                  ;	a...a	access
  1311                                  ;	b...b	lo-order base address (bits 0-23)
  1312                                  ;	n...n	lo-order limit (bits 0-15)
  1313                                  ;
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  section			gdt							;global descriptor table
  1316 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1317 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1318 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1319 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1320 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1321 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1322 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1323 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1324 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1325 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1326 00000050 7F00004700824000        			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1327 00000058 7F00804700894000        			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1328 00000060 7F00000F00824000        			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1329 00000068 7F00800F00894000        			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1330 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1331                                  ;-----------------------------------------------------------------------------------------------------------------------
  1332                                  ;
  1333                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1334                                  ;
  1335                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1336                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1337                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1338                                  ;
  1339                                  ;	6   5         4         3         2         1         0
  1340                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1341                                  ;	----------------------------------------------------------------
  1342                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1343                                  ;
  1344                                  ;	h...h	high-order offset (bits 16-31)
  1345                                  ;	P	present (0=unused interrupt)
  1346                                  ;	zz	descriptor privilege level
  1347                                  ;	S	storage segment (must be zero for IDT)
  1348                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1349                                  ;	S...S	handling code selector in GDT
  1350                                  ;	l...l	lo-order offset (bits 0-15)
  1351                                  ;
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  section			idt							;interrupt descriptor table
  1354                                  			mint	dividebyzero					;00 divide by zero
  1354                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1354 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1355                                  			mint	singlestep					;01 single step
  1355                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1355 00000008 04004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1356                                  			mint	nmi						;02 non-maskable
  1356                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1356 00000010 08004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1357                                  			mint	break						;03 break
  1357                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1357 00000018 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1358                                  			mint	into						;04 into
  1358                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1358 00000020 10004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1359                                  			mint	bounds						;05 bounds
  1359                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1359 00000028 14004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1360                                  			mint	badopcode					;06 bad op code
  1360                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1360 00000030 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1361                                  			mint	nocoproc					;07 no coprocessor
  1361                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1361 00000038 1C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1362                                  			mint	doublefault					;08 double-fault
  1362                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1362 00000040 20004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1363                                  			mint	operand						;09 operand
  1363                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1363 00000048 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1364                                  			mint	badtss						;0A bad TSS
  1364                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1364 00000050 28004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1365                                  			mint	notpresent					;0B not-present
  1365                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1365 00000058 2C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1366                                  			mint	stacklimit					;0C stack limit
  1366                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1366 00000060 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1367                                  			mint	protection					;0D general protection fault
  1367                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1367 00000068 34004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1368                                  			mint	int14						;0E (reserved)
  1368                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1368 00000070 38004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1369                                  			mint	int15						;0F (reserved)
  1369                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1369 00000078 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1370                                  			mint	coproccalc					;10 (reserved)
  1370                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1370 00000080 40004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1371                                  			mint	int17						;11 (reserved)
  1371                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1371 00000088 44004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1372                                  			mint	int18						;12 (reserved)
  1372                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1372 00000090 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1373                                  			mint	int19						;13 (reserved)
  1373                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1373 00000098 4C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1374                                  			mint	int20						;14 (reserved)
  1374                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1374 000000A0 50004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1375                                  			mint	int21						;15 (reserved)
  1375                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1375 000000A8 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1376                                  			mint	int22						;16 (reserved)
  1376                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1376 000000B0 58004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1377                                  			mint	int23						;17 (reserved)
  1377                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1377 000000B8 5C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1378                                  			mint	int24						;18 (reserved)
  1378                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1378 000000C0 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1379                                  			mint	int25						;19 (reserved)
  1379                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1379 000000C8 64004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1380                                  			mint	int26						;1A (reserved)
  1380                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1380 000000D0 68004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1381                                  			mint	int27						;1B (reserved)
  1381                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1381 000000D8 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1382                                  			mint	int28						;1C (reserved)
  1382                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1382 000000E0 70004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1383                                  			mint	int29						;1D (reserved)
  1383                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1383 000000E8 74004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1384                                  			mint	int30						;1E (reserved)
  1384                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1384 000000F0 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1385                                  			mint	int31						;1F (reserved)
  1385                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1385 000000F8 7C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1386                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1386                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1386 00000100 80004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1387                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1387                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1387 00000108 D0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1388                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1388                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1388 00000110 E5034800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1389                                  			mtrap	com2						;23 IRQ3 com2
  1389                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1389 00000118 E8034800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1390                                  			mtrap	com1						;24 IRQ4 com1
  1390                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1390 00000120 EB034800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1391                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1391                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1391 00000128 EE034800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1392                                  			mtrap	diskette					;26 IRQ6 diskette
  1392                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1392 00000130 F1034800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1393                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1393                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1393 00000138 05044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1394                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1394                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1394 00000140 08044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1395                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1395                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1395 00000148 0B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1396                                  			mtrap	irq10						;2A IRQA (reserved)
  1396                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1396 00000150 0E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1397                                  			mtrap	irq11						;2B IRQB (reserved)
  1397                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1397 00000158 11044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1398                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1398                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1398 00000160 14044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1399                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1399                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1399 00000168 17044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1400                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1400                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1400 00000170 1A044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1401                                  			mtrap	irq15						;2F IRQF (reserved)
  1401                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1401 00000178 1D044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1402                                  			mtrap	svc						;30 OS services
  1402                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1402 00000180 2C044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1403 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1404                                  ;-----------------------------------------------------------------------------------------------------------------------
  1405                                  ;
  1406                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1407                                  ;
  1408                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1409                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1410                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1411                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1412                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1413                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1414                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1415                                  ;
  1416                                  ;-----------------------------------------------------------------------------------------------------------------------
  1417                                  section			kernel	vstart=0h					;data offsets relative to 0
  1418                                  			cpu	386						;allow 80386 instructions
  1419                                  			bits	32						;this is 32-bit code
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;	CPU Interrupt Handlers
  1423                                  ;
  1424                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                  			menter	dividebyzero					;divide by zero
  1427                              <1> ?%1 equ ($-$$)
  1428 00000000 6A00                    			push	0						;
  1429 00000002 EB7A                    			jmp	intcpu						;
  1430                                  			menter	singlestep					;single step
  1430                              <1> ?%1 equ ($-$$)
  1431 00000004 6A01                    			push	1						;
  1432 00000006 EB76                    			jmp	intcpu						;
  1433                                  			menter	nmi						;non-maskable
  1433                              <1> ?%1 equ ($-$$)
  1434 00000008 6A02                    			push	2						;
  1435 0000000A EB72                    			jmp	intcpu						;
  1436                                  			menter	break						;break
  1436                              <1> ?%1 equ ($-$$)
  1437 0000000C 6A03                    			push	3						;
  1438 0000000E EB6E                    			jmp	intcpu						;
  1439                                  			menter	into						;into
  1439                              <1> ?%1 equ ($-$$)
  1440 00000010 6A04                    			push	4						;
  1441 00000012 EB6A                    			jmp	intcpu						;
  1442                                  			menter	bounds						;bounds
  1442                              <1> ?%1 equ ($-$$)
  1443 00000014 6A05                    			push	5						;
  1444 00000016 EB66                    			jmp	intcpu						;
  1445                                  			menter	badopcode					;bad opcode interrupt
  1445                              <1> ?%1 equ ($-$$)
  1446 00000018 6A06                    			push	6						;
  1447 0000001A EB62                    			jmp	intcpu						;
  1448                                  			menter	nocoproc					;no coprocessor interrupt
  1448                              <1> ?%1 equ ($-$$)
  1449 0000001C 6A07                    			push	7						;
  1450 0000001E EB5E                    			jmp	intcpu						;
  1451                                  			menter	doublefault					;doublefault interrupt
  1451                              <1> ?%1 equ ($-$$)
  1452 00000020 6A08                    			push	8						;
  1453 00000022 EB5A                    			jmp	intcpu						;
  1454                                  			menter	operand						;operand interrupt
  1454                              <1> ?%1 equ ($-$$)
  1455 00000024 6A09                    			push	9						;
  1456 00000026 EB56                    			jmp	intcpu						;
  1457                                  			menter	badtss						;bad tss interrupt
  1457                              <1> ?%1 equ ($-$$)
  1458 00000028 6A0A                    			push	10						;
  1459 0000002A EB52                    			jmp	intcpu						;
  1460                                  			menter	notpresent					;not present interrupt
  1460                              <1> ?%1 equ ($-$$)
  1461 0000002C 6A0B                    			push	11						;
  1462 0000002E EB4E                    			jmp	intcpu						;
  1463                                  			menter	stacklimit					;stack limit interrupt
  1463                              <1> ?%1 equ ($-$$)
  1464 00000030 6A0C                    			push	12						;
  1465 00000032 EB4A                    			jmp	intcpu						;
  1466                                  			menter	protection					;protection fault interrupt
  1466                              <1> ?%1 equ ($-$$)
  1467 00000034 6A0D                    			push	13						;
  1468 00000036 EB46                    			jmp	intcpu						;
  1469                                  			menter	int14						;(reserved)
  1469                              <1> ?%1 equ ($-$$)
  1470 00000038 6A0E                    			push	14						;
  1471 0000003A EB42                    			jmp	intcpu						;
  1472                                  			menter	int15						;(reserved)
  1472                              <1> ?%1 equ ($-$$)
  1473 0000003C 6A0F                    			push	15						;
  1474 0000003E EB3E                    			jmp	intcpu						;
  1475                                  			menter	coproccalc					;coprocessor calculation
  1475                              <1> ?%1 equ ($-$$)
  1476 00000040 6A10                    			push	16						;
  1477 00000042 EB3A                    			jmp	intcpu						;
  1478                                  			menter	int17						;(reserved)
  1478                              <1> ?%1 equ ($-$$)
  1479 00000044 6A11                    			push	17						;
  1480 00000046 EB36                    			jmp	intcpu						;
  1481                                  			menter	int18						;(reserved)
  1481                              <1> ?%1 equ ($-$$)
  1482 00000048 6A12                    			push	18						;
  1483 0000004A EB32                    			jmp	intcpu						;
  1484                                  			menter	int19						;(reserved)
  1484                              <1> ?%1 equ ($-$$)
  1485 0000004C 6A13                    			push	19						;
  1486 0000004E EB2E                    			jmp	intcpu						;
  1487                                  			menter	int20						;(reserved)
  1487                              <1> ?%1 equ ($-$$)
  1488 00000050 6A14                    			push	20						;
  1489 00000052 EB2A                    			jmp	intcpu						;
  1490                                  			menter	int21						;(reserved)
  1490                              <1> ?%1 equ ($-$$)
  1491 00000054 6A15                    			push	21						;
  1492 00000056 EB26                    			jmp	intcpu						;
  1493                                  			menter	int22						;(reserved)
  1493                              <1> ?%1 equ ($-$$)
  1494 00000058 6A16                    			push	22						;
  1495 0000005A EB22                    			jmp	intcpu						;
  1496                                  			menter	int23						;(reserved)
  1496                              <1> ?%1 equ ($-$$)
  1497 0000005C 6A17                    			push	23						;
  1498 0000005E EB1E                    			jmp	intcpu						;
  1499                                  			menter	int24						;(reserved)
  1499                              <1> ?%1 equ ($-$$)
  1500 00000060 6A18                    			push	24						;
  1501 00000062 EB1A                    			jmp	intcpu						;
  1502                                  			menter	int25						;(reserved)
  1502                              <1> ?%1 equ ($-$$)
  1503 00000064 6A19                    			push	25						;
  1504 00000066 EB16                    			jmp	intcpu						;
  1505                                  			menter	int26						;(reserved)
  1505                              <1> ?%1 equ ($-$$)
  1506 00000068 6A1A                    			push	26						;
  1507 0000006A EB12                    			jmp	intcpu						;
  1508                                  			menter	int27						;(reserved)
  1508                              <1> ?%1 equ ($-$$)
  1509 0000006C 6A1B                    			push	27						;
  1510 0000006E EB0E                    			jmp	intcpu						;
  1511                                  			menter	int28						;(reserved)
  1511                              <1> ?%1 equ ($-$$)
  1512 00000070 6A1C                    			push	28						;
  1513 00000072 EB0A                    			jmp	intcpu						;
  1514                                  			menter	int29						;(reserved)
  1514                              <1> ?%1 equ ($-$$)
  1515 00000074 6A1D                    			push	29						;
  1516 00000076 EB06                    			jmp	intcpu						;
  1517                                  			menter	int30						;(reserved)
  1517                              <1> ?%1 equ ($-$$)
  1518 00000078 6A1E                    			push	30						;
  1519 0000007A EB02                    			jmp	intcpu						;
  1520                                  			menter	int31						;(reserved)
  1520                              <1> ?%1 equ ($-$$)
  1521 0000007C 6A1F                    			push	31						;
  1522 0000007E 58                      intcpu			pop	eax						;
  1523 0000007F CF                      			iretd							;return
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;	Hardware Device Interupts
  1527                                  ;
  1528                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1529                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1530                                  ;	(BX=2028h).
  1531                                  ;
  1532                                  ;-----------------------------------------------------------------------------------------------------------------------
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  ;
  1535                                  ;	IRQ0	Clock Tick Interrupt
  1536                                  ;
  1537                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1538                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1539                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1540                                  ;
  1541                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1542                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1543                                  ;
  1544                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1545                                  ;	zero, the floppy disk motors are turned off.
  1546                                  ;
  1547                                  ;-----------------------------------------------------------------------------------------------------------------------
  1548                                  			menter	clocktick					;clock tick interrupt
  1548                              <1> ?%1 equ ($-$$)
  1549 00000080 50                      			push	eax						;save modified regs
  1550 00000081 52                      			push	edx						;
  1551 00000082 1E                      			push	ds						;
  1552 00000083 6A18                    			push	ESELDAT						;load OS data selector ...
  1553 00000085 1F                      			pop	ds						;... into data segment register
  1554 00000086 A16C040000              			mov	eax,[wfClockTicks]				;eax = clock ticks
  1555 0000008B 40                      			inc	eax						;increment clock ticks
  1556 0000008C 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1557 00000091 7208                    			jb	irq0.10						;no, skip ahead
  1558 00000093 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1559 00000099 31C0                    			xor	eax,eax						;reset clock ticks
  1560 0000009B A36C040000              irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1561 000000A0 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1562 000000A7 741E                    			je	irq0.20						;yes, skip ahead
  1563 000000A9 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1564 000000AF 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1565 000000B1 FB                      			sti							;enable maskable interrupts
  1566 000000B2 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1567 000000B4 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1568 000000B6 EC                      			in	al,dx						;FDC main status byte
  1569 000000B7 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1570 000000B9 75F7                    			jnz	irq0.15						;wait while busy
  1571 000000BB B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1572 000000BD A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1573 000000C2 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1574 000000C4 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1575 000000C6 EE                      			out	dx,al						;turn motor off
  1576 000000C7 E8CA050000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1577 000000CC 1F                      			pop	ds						;restore modified regs
  1578 000000CD 5A                      			pop	edx						;
  1579 000000CE 58                      			pop	eax						;
  1580 000000CF CF                      			iretd							;return
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  ;
  1583                                  ;	IRQ1	Keyboard Interrupt
  1584                                  ;
  1585                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1586                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1587                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1588                                  ;	ALL modified registers upon return.
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  			menter	keyboard					;keyboard interrrupt
  1591                              <1> ?%1 equ ($-$$)
  1592 000000D0 50                      			push	eax						;save non-volatile regs
  1593 000000D1 53                      			push	ebx						;
  1594 000000D2 51                      			push	ecx						;
  1595 000000D3 56                      			push	esi						;
  1596 000000D4 1E                      			push	ds						;
  1597 000000D5 6A18                    			push	ESELDAT						;load OS data selector ...
  1598 000000D7 1F                      			pop	ds						;... into data segment register
  1599 000000D8 30C0                    			xor	al,al						;zero
  1600 000000DA A205080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1601 000000DF A206080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1602 000000E4 A207080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1603 000000E9 A208080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1604 000000EE A209080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1605 000000F3 A20A080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1606 000000F8 B020                    			mov	al,' '						;space
  1607 000000FA A20B080000              			mov	[wbConsoleChar],al				;set character to space
  1608 000000FF B080                    			mov	al,EKEYTIMEOUT					;controller timeout flag
  1609 00000101 F6D0                    			not	al						;controller timeout mask
  1610 00000103 200504080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1611 00000109 8A1D02080000            			mov	bl,[wbConsoleShift]				;shift flags
  1612 0000010F 8A3D03080000            			mov	bh,[wbConsoleLock]				;lock flags
  1613 00000115 E8B7050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1614 0000011A 0F84AD010000            			jz	irq1.140					;yes, skip ahead
  1615 00000120 E460                    			in	al,EKEYPORTDATA					;read scan code 0
  1616 00000122 A205080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1617 00000127 88C4                    			mov	ah,al						;copy scan code 0
  1618 00000129 B002                    			mov	al,EKEYSHIFTLEFT				;left shift flag
  1619 0000012B 80FC2A                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1620 0000012E 0F84E0000000            			je	irq1.30						;yes, set flag
  1621 00000134 80FCAA                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1622 00000137 0F84DB000000            			je	irq1.40						;yes, reset flag
  1623 0000013D B010                    			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1624 0000013F 80FC36                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1625 00000142 0F84CC000000            			je	irq1.30						;yes, set flag
  1626 00000148 80FCB6                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1627 0000014B 0F84C7000000            			je	irq1.40						;yes, reset flag
  1628 00000151 B001                    			mov	al,EKEYCTRLLEFT					;left control flag
  1629 00000153 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1630 00000156 0F84B8000000            			je	irq1.30						;yes, set flag
  1631 0000015C 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1632 0000015F 0F84B3000000            			je	irq1.40						;yes, reset flag
  1633 00000165 B004                    			mov	al,EKEYALTLEFT					;left alt flag
  1634 00000167 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1635 0000016A 0F84A4000000            			je	irq1.30						;yes, set flag
  1636 00000170 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1637 00000173 0F849F000000            			je	irq1.40						;yes, reset flag
  1638 00000179 B004                    			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1639 0000017B 80FC3A                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1640 0000017E 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1641 00000184 B002                    			mov	al,EKEYLOCKNUM					;num-lock flag
  1642 00000186 80FC45                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1643 00000189 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1644 0000018F B001                    			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1645 00000191 80FC46                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1646 00000194 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1647 0000019A 80FCE0                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1648 0000019D 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1649 000001A3 E829050000              			call	WaitForKeyOutBuffer				;controller timeout?
  1650 000001A8 0F841F010000            			jz	irq1.140					;yes, skip ahead
  1651 000001AE E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1652 000001B0 A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1653 000001B5 88C4                    			mov	ah,al						;copy scan code 1
  1654 000001B7 B008                    			mov	al,EKEYCTRLRIGHT				;right control flag
  1655 000001B9 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1656 000001BC 7456                    			je	irq1.30						;yes, set flag
  1657 000001BE 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1658 000001C1 7455                    			je	irq1.40						;yes, reset flag
  1659 000001C3 B020                    			mov	al,EKEYALTRIGHT					;right alt flag
  1660 000001C5 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1661 000001C8 744A                    			je	irq1.30						;yes, set flag
  1662 000001CA 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1663 000001CD 7449                    			je	irq1.40						;yes, reset flag
  1664 000001CF 80FC35                  			cmp	ah,EKEYSLASH					;slash down code?
  1665 000001D2 0F84BB000000            			je	irq1.80						;yes, skip ahead
  1666 000001D8 80FCB5                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1667 000001DB 0F84B2000000            			je	irq1.80						;yes, skip ahead
  1668 000001E1 80FC2A                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1669 000001E4 7405                    			je	irq1.10						;yes, continue
  1670 000001E6 80FCB7                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1671 000001E9 7524                    			jne	irq1.20						;no, skip ahead
  1672 000001EB E8E1040000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1673 000001F0 0F84D7000000            			jz	irq1.140					;yes, skip ahead
  1674 000001F6 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1675 000001F8 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1676 000001FD E8CF040000              			call	WaitForKeyOutBuffer				;controller timeout?
  1677 00000202 0F84C5000000            			jz	irq1.140					;yes, skip ahead
  1678 00000208 E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1679 0000020A A208080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1680 0000020F E9C1000000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1681 00000214 08C3                    irq1.30			or	bl,al						;set shift flag
  1682 00000216 EB0D                    			jmp	irq1.60						;skip ahead
  1683 00000218 F6D0                    irq1.40			not	al						;convert flag to mask
  1684 0000021A 20C3                    			and	bl,al						;reset shift flag
  1685 0000021C EB07                    			jmp	irq1.60						;skip ahead
  1686 0000021E 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1687 00000220 E87D040000              			call	SetKeyboardLamps				;update keyboard lamps
  1688 00000225 881D02080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1689 0000022B 883D03080000            			mov	[wbConsoleLock],bh				;save lock flags
  1690 00000231 E89F020000              			call	PutConsoleOIAShift				;update OIA indicators
  1691 00000236 E99A000000              			jmp	irq1.150					;finish keyboard handling
  1692 0000023B 80FCE1                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1693 0000023E 7553                    			jne	irq1.80						;no continue
  1694 00000240 E88C040000              			call	WaitForKeyOutBuffer				;controller timeout?
  1695 00000245 0F8482000000            			jz	irq1.140					;yes, skip ahead
  1696 0000024B E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1697 0000024D A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1698 00000252 88C4                    			mov	ah,al						;copy scan code 1
  1699 00000254 80FC1D                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1700 00000257 757C                    			jne	irq1.150					;no, finish keyboard handling
  1701 00000259 E873040000              			call	WaitForKeyOutBuffer				;controller timeout?
  1702 0000025E 746D                    			jz	irq1.140					;yes, skip ahead
  1703 00000260 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1704 00000262 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1705 00000267 E865040000              			call	WaitForKeyOutBuffer				;controller timeout?
  1706 0000026C 745F                    			jz	irq1.140					;yes, skip ahead
  1707 0000026E E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1708 00000270 A208080000              			mov	[wbConsoleScan3],al				;save scan code 3
  1709 00000275 E857040000              			call	WaitForKeyOutBuffer				;controller timeout?
  1710 0000027A 7451                    			jz	irq1.140					;yes, skip ahead
  1711 0000027C E460                    			in	al,EKEYPORTDATA					;read scan code 4
  1712 0000027E A209080000              			mov	[wbConsoleScan4],al				;save scan code 4
  1713 00000283 E849040000              			call	WaitForKeyOutBuffer				;controller timeout?
  1714 00000288 7443                    			jz	irq1.140					;yes, skip ahead
  1715 0000028A E460                    			in	al,EKEYPORTDATA					;read scan code 5
  1716 0000028C A20A080000              			mov	[wbConsoleScan5],al				;save scan code 5
  1717 00000291 EB42                    			jmp	irq1.150					;continue
  1718 00000293 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  1719 00000295 F6C480                  			test	ah,EKEYUP					;release code?
  1720 00000298 7531                    			jnz	irq1.130					;yes, skip ahead
  1721 0000029A BE[E5020000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  1722 0000029F F6C312                  			test	bl,EKEYSHIFT					;either shift key down?
  1723 000002A2 7405                    			jz	irq1.90						;no, skip ahead
  1724 000002A4 BE[65030000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  1725 000002A9 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  1726 000002AC 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  1727 000002B0 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1728 000002B3 7411                    			jz	irq1.100					;no skip ahead
  1729 000002B5 88C1                    			mov	cl,al						;copy ASCII code
  1730 000002B7 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1731 000002BA 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1732 000002BD 7207                    			jb	irq1.100					;yes, skip ahead
  1733 000002BF 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1734 000002C2 7702                    			ja	irq1.100					;yes, skip ahead
  1735 000002C4 3420                    			xor	al,EASCIICASE					;switch case
  1736 000002C6 A20B080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1737 000002CB EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  1738 000002CD B080                    irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1739 000002CF 080504080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  1740 000002D5 E895020000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  1741 000002DA E8B7030000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1742 000002DF 1F                      			pop	ds						;restore non-volatile regs
  1743 000002E0 5E                      			pop	esi						;
  1744 000002E1 59                      			pop	ecx						;
  1745 000002E2 5B                      			pop	ebx						;
  1746 000002E3 58                      			pop	eax						;
  1747 000002E4 CF                      			iretd							;return
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;	Scan-Code to ASCII Translation Tables
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751 000002E5 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1752 000002ED 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1753 000002F5 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1754 000002FD 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1755 00000305 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1756 0000030D 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1757 00000315 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1758 0000031D 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1759 00000325 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1760 0000032D 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1761 00000335 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1762 0000033D 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1763 00000345 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1764 0000034D 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1765 00000355 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1766 0000035D 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1767 00000365 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1768 0000036D 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1769 00000375 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1770 0000037D 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1771 00000385 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1772 0000038D 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1773 00000395 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1774 0000039D 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1775 000003A5 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1776 000003AD 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1777 000003B5 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1778 000003BD 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1779 000003C5 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1780 000003CD 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1781 000003D5 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1782 000003DD 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  			menter	iochannel					;secondary 8259A cascade
  1788                              <1> ?%1 equ ($-$$)
  1789 000003E5 50                      			push	eax						;
  1790 000003E6 EB3D                    			jmp	hwint						;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  			menter	com2						;serial port 2 interrupt
  1796                              <1> ?%1 equ ($-$$)
  1797 000003E8 50                      			push	eax						;
  1798 000003E9 EB3A                    			jmp	hwint						;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  ;
  1801                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1802                                  ;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  			menter	com1						;serial port 1 interrupt
  1804                              <1> ?%1 equ ($-$$)
  1805 000003EB 50                      			push	eax						;
  1806 000003EC EB37                    			jmp	hwint						;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  			menter	lpt2						;parallel port 2 interrupt
  1812                              <1> ?%1 equ ($-$$)
  1813 000003EE 50                      			push	eax						;
  1814 000003EF EB34                    			jmp	hwint						;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  ;
  1817                                  ;	IRQ6	Diskette Hardware Interrupt
  1818                                  ;
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  			menter	diskette					;floppy disk interrupt
  1820                              <1> ?%1 equ ($-$$)
  1821 000003F1 50                      			push	eax						;save non-volatile regs
  1822 000003F2 1E                      			push	ds						;
  1823 000003F3 6A18                    			push	ESELDAT						;load OS data selector ...
  1824 000003F5 1F                      			pop	ds						;... into DS register
  1825 000003F6 A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1826 000003FB 0C80                    			or	al,10000000b					;set IRQ flag
  1827 000003FD A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  1828 00000402 1F                      			pop	ds						;restore non-volatile regs
  1829 00000403 EB20                    			jmp	hwint						;end primary PIC interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  			menter	lpt1						;parallel port 1 interrupt
  1835                              <1> ?%1 equ ($-$$)
  1836 00000405 50                      			push	eax						;
  1837 00000406 EB1D                    			jmp	hwint						;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                  ;
  1840                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1841                                  ;
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                  			menter	rtclock						;real-time clock interrupt
  1843                              <1> ?%1 equ ($-$$)
  1844 00000408 50                      			push	eax						;
  1845 00000409 EB13                    			jmp	hwwint						;
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  			menter	retrace						;CGA vertical retrace interrupt
  1851                              <1> ?%1 equ ($-$$)
  1852 0000040B 50                      			push	eax						;
  1853 0000040C EB10                    			jmp	hwwint						;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;	IRQ10	Reserved Hardware Interrupt
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  			menter	irq10						;reserved
  1859                              <1> ?%1 equ ($-$$)
  1860 0000040E 50                      			push	eax						;
  1861 0000040F EB0D                    			jmp	hwwint						;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;	IRQ11	Reserved Hardware Interrupt
  1865                                  ;
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  			menter	irq11						;reserved
  1867                              <1> ?%1 equ ($-$$)
  1868 00000411 50                      			push	eax						;
  1869 00000412 EB0A                    			jmp	hwwint						;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  ;
  1872                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1873                                  ;
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1875                              <1> ?%1 equ ($-$$)
  1876 00000414 50                      			push	eax						;
  1877 00000415 EB07                    			jmp	hwwint						;
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                  ;
  1880                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1881                                  ;
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  			menter	coprocessor					;coprocessor interrupt
  1883                              <1> ?%1 equ ($-$$)
  1884 00000417 50                      			push	eax						;
  1885 00000418 EB04                    			jmp	hwwint						;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  			menter	fixeddisk					;fixed disk interrupt
  1891                              <1> ?%1 equ ($-$$)
  1892 0000041A 50                      			push	eax						;
  1893 0000041B EB01                    			jmp	hwwint						;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;	IRQ15	Reserved Hardware Interrupt
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  			menter	irq15						;reserved
  1899                              <1> ?%1 equ ($-$$)
  1900 0000041D 50                      			push	eax						;save modified regs
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                  ;
  1903                                  ;	Exit from hardware interrupt
  1904                                  ;
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906 0000041E E879020000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1907 00000423 EB05                    			jmp	hwint90						;skip ahead
  1908 00000425 E86C020000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1909 0000042A 58                      hwint90			pop	eax						;restore modified regs
  1910 0000042B CF                      			iretd							;return from interrupt
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  ;
  1913                                  ;	INT 30h Operating System Software Service Interrupt
  1914                                  ;
  1915                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1916                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1917                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1918                                  ;	the entry address of the specific function from a table.
  1919                                  ;
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  			menter	svc
  1921                              <1> ?%1 equ ($-$$)
  1922 0000042C 3C03                    			cmp	al,maxtsvc					;is our function out of range?
  1923 0000042E 730D                    			jae	svc90						;yes, skip ahead
  1924 00000430 0FB6C0                  			movzx	eax,al						;function
  1925 00000433 C1E002                  			shl	eax,2						;offset into table
  1926 00000436 2EFF90[3E040000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  1927 0000043D CF                      svc90			iretd							;return from interrupt
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                  ;
  1930                                  ;	Service Request Table
  1931                                  ;
  1932                                  ;
  1933                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1936                              <1> tsvc :
  1936                              <1> e%1 equ ($-tsvc)/4
  1936 0000043E [4A040000]          <1>  dd %1
  1937                                  			tsvce	ClearConsoleScreen				;clear console screen
  1937                              <1> e%1 equ ($-tsvc)/4
  1937 00000442 [F1050000]          <1>  dd %1
  1938                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1938                              <1> e%1 equ ($-tsvc)/4
  1938 00000446 [6C060000]          <1>  dd %1
  1939                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                  ;
  1942                                  ;	Service Request Macros
  1943                                  ;
  1944                                  ;	These macros provide positional parameterization of service request calls.
  1945                                  ;
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  %macro			putConsoleString 1
  1948                                  			mov	edx,%1						;EDX = string address
  1949                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1950                                  			int	_svc						;invoke OS service
  1951                                  %endmacro
  1952                                  %macro			clearConsoleScreen 0
  1953                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  1954                                  			int	_svc						;invoke OS service
  1955                                  %endmacro
  1956                                  %macro			placeCursor 0
  1957                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  1958                                  			int	_svc						;invoke OS service
  1959                                  %endmacro
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                  ;
  1962                                  ;	Kernel Function Library
  1963                                  ;
  1964                                  ;-----------------------------------------------------------------------------------------------------------------------
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;	Console Helper Routines
  1968                                  ;
  1969                                  ;	PutConsoleString
  1970                                  ;	NextConsoleColumn
  1971                                  ;	FirstConsoleColumn
  1972                                  ;	NextConsoleRow
  1973                                  ;	PutConsoleChar
  1974                                  ;	PutConsoleOIAShift
  1975                                  ;	PutConsoleOIAChar
  1976                                  ;	PutConsoleHexByte
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ;
  1981                                  ;	Routine:	PutConsoleString
  1982                                  ;
  1983                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  1984                                  ;			console position as needed.
  1985                                  ;
  1986                                  ;	In:		EDX	source address
  1987                                  ;			DS	OS data selector
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990 0000044A 56                      PutConsoleString	push	esi						;save non-volatile regs
  1991 0000044B 89D6                    			mov	esi,edx						;source address
  1992 0000044D FC                      			cld							;forward strings
  1993 0000044E AC                      .10			lodsb							;ASCII character
  1994 0000044F 08C0                    			or	al,al						;end of string?
  1995 00000451 7422                    			jz	.40						;yes, skip ahead
  1996 00000453 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  1997 00000455 7507                    			jne	.20						;no, skip ahead
  1998 00000457 E836000000              			call	FirstConsoleColumn				;move to start of row
  1999 0000045C EBF0                    			jmp	.10						;next character
  2000 0000045E 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2001 00000460 7507                    			jne	.30						;no, skip ahead
  2002 00000462 E833000000              			call	NextConsoleRow					;move to next row
  2003 00000467 EBE5                    			jmp	.10						;next character
  2004 00000469 E84E000000              .30			call	PutConsoleChar					;output character to console
  2005 0000046E E804000000              			call	NextConsoleColumn				;advance to next column
  2006 00000473 EBD9                    			jmp	.10						;next character
  2007 00000475 5E                      .40			pop	esi						;restore non-volatile regs
  2008 00000476 C3                      			ret							;return
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010                                  ;
  2011                                  ;	Routine:	NextConsoleColumn
  2012                                  ;
  2013                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2014                                  ;			incremented if the end of the current row is reached.
  2015                                  ;
  2016                                  ;	In:		DS	OS data selector
  2017                                  ;
  2018                                  ;-----------------------------------------------------------------------------------------------------------------------
  2019 00000477 A000080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2020 0000047C FEC0                    			inc	al						;increment column
  2021 0000047E A200080000              			mov	[wbConsoleColumn],al				;save column
  2022 00000483 3C50                    			cmp	al,ECONCOLS					;end of row?
  2023 00000485 720A                    			jb	.10						;no, skip ahead
  2024 00000487 E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2025 0000048C E809000000              			call	NextConsoleRow					;line feed to next row
  2026 00000491 C3                      .10			ret							;return
  2027                                  ;-----------------------------------------------------------------------------------------------------------------------
  2028                                  ;
  2029                                  ;	Routine:	FirstConsoleColumn
  2030                                  ;
  2031                                  ;	Description:	This routine resets the console column to start of the row.
  2032                                  ;
  2033                                  ;	In:		DS	OS data selector
  2034                                  ;
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036 00000492 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2037 00000494 A200080000              			mov	[wbConsoleColumn],al				;save column
  2038 00000499 C3                      			ret							;return
  2039                                  ;-----------------------------------------------------------------------------------------------------------------------
  2040                                  ;
  2041                                  ;	Routine:	NextConsoleRow
  2042                                  ;
  2043                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2044                                  ;
  2045                                  ;	In:		DS	OS data selector
  2046                                  ;
  2047                                  ;-----------------------------------------------------------------------------------------------------------------------
  2048 0000049A A001080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2049 0000049F FEC0                    			inc	al						;increment row
  2050 000004A1 A201080000              			mov	[wbConsoleRow],al				;save row
  2051 000004A6 3C18                    			cmp	al,ECONROWS					;end of screen?
  2052 000004A8 7211                    			jb	.10						;no, skip ahead
  2053 000004AA E87D010000              			call	ScrollConsoleRow				;scroll up one row
  2054 000004AF A001080000              			mov	al,[wbConsoleRow]				;row
  2055 000004B4 FEC8                    			dec	al						;decrement row
  2056 000004B6 A201080000              			mov	[wbConsoleRow],al				;save row
  2057 000004BB C3                      .10			ret							;return
  2058                                  ;-----------------------------------------------------------------------------------------------------------------------
  2059                                  ;
  2060                                  ;	Routine:	PutConsoleChar
  2061                                  ;
  2062                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2063                                  ;
  2064                                  ;	In:		AL	ASCII character
  2065                                  ;			DS	OS data selector
  2066                                  ;
  2067                                  ;-----------------------------------------------------------------------------------------------------------------------
  2068 000004BC 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  2069 000004BD 06                      			push	es						;
  2070 000004BE 6A20                    			push	ESELCGA						;load CGA selector ...
  2071 000004C0 07                      			pop	es						;... into extra segment reg
  2072 000004C1 8A0D00080000            			mov	cl,[wbConsoleColumn]				;column
  2073 000004C7 8A2D01080000            			mov	ch,[wbConsoleRow]				;row
  2074 000004CD E886010000              			call	SetConsoleChar					;put character at row, column
  2075 000004D2 07                      			pop	es						;restore non-volatile regs
  2076 000004D3 59                      			pop	ecx						;
  2077 000004D4 C3                      			ret							;return
  2078                                  ;-----------------------------------------------------------------------------------------------------------------------
  2079                                  ;
  2080                                  ;	Routine:	PutConsoleOIAShift
  2081                                  ;
  2082                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2083                                  ;
  2084                                  ;	In:		BL	shift flags
  2085                                  ;			BH	lock flags
  2086                                  ;			DS	OS data selector
  2087                                  ;
  2088                                  ;-----------------------------------------------------------------------------------------------------------------------
  2089 000004D5 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2090 000004D6 06                      			push	es						;
  2091 000004D7 6A20                    			push	ESELCGA						;load CGA selector ...
  2092 000004D9 07                      			pop	es						;... into ES register
  2093 000004DA B518                    			mov	ch,ECONOIAROW					;OIA row
  2094 000004DC B020                    			mov	al,EASCIISPACE					;space is default character
  2095 000004DE F6C302                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2096 000004E1 7402                    			jz	.10						;no, skip ahead
  2097 000004E3 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2098 000004E5 B10E                    .10			mov	cl,14						;indicator column
  2099 000004E7 E86C010000              			call	SetConsoleChar					;display ASCII character
  2100 000004EC B020                    			mov	al,EASCIISPACE					;ASCII space
  2101 000004EE F6C310                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2102 000004F1 7402                    			jz	.20						;no, skip ahead
  2103 000004F3 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2104 000004F5 B140                    .20			mov	cl,64						;indicator column
  2105 000004F7 E85C010000              			call	SetConsoleChar					;display ASCII character
  2106 000004FC B020                    			mov	al,EASCIISPACE					;ASCII space
  2107 000004FE F6C301                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2108 00000501 7402                    			jz	.30						;no, skip ahead
  2109 00000503 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2110 00000505 B10F                    .30			mov	cl,15						;indicator column
  2111 00000507 E84C010000              			call	SetConsoleChar					;display ASCII character
  2112 0000050C B020                    			mov	al,EASCIISPACE					;ASCII space
  2113 0000050E F6C308                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2114 00000511 7402                    			jz	.40						;no, skip ahead
  2115 00000513 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2116 00000515 B13F                    .40			mov	cl,63						;indicator column
  2117 00000517 E83C010000              			call	SetConsoleChar					;display ASCII character
  2118 0000051C B020                    			mov	al,EASCIISPACE					;ASCII space
  2119 0000051E F6C304                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2120 00000521 7402                    			jz	.50						;no, skip ahead
  2121 00000523 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2122 00000525 B110                    .50			mov	cl,16						;indicator column
  2123 00000527 E82C010000              			call	SetConsoleChar					;display ASCII character
  2124 0000052C B020                    			mov	al,EASCIISPACE					;ASCII space
  2125 0000052E F6C320                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2126 00000531 7402                    			jz	.60						;no, skip ahead
  2127 00000533 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2128 00000535 B13E                    .60			mov	cl,62						;indicator column
  2129 00000537 E81C010000              			call	SetConsoleChar					;display ASCII character
  2130 0000053C B020                    			mov	al,EASCIISPACE					;ASCII space
  2131 0000053E F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2132 00000541 7402                    			jz	.70						;no, skip ahead
  2133 00000543 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2134 00000545 B14E                    .70			mov	cl,78						;indicator column
  2135 00000547 E80C010000              			call	SetConsoleChar					;display ASCII character
  2136 0000054C B020                    			mov	al,EASCIISPACE					;ASCII space
  2137 0000054E F6C702                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2138 00000551 7402                    			jz	.80						;no, skip ahead
  2139 00000553 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2140 00000555 B14D                    .80			mov	cl,77						;indicator column
  2141 00000557 E8FC000000              			call	SetConsoleChar					;display ASCII character
  2142 0000055C B020                    			mov	al,EASCIISPACE					;ASCII space
  2143 0000055E F6C701                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2144 00000561 7402                    			jz	.90						;no, skip ahead
  2145 00000563 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2146 00000565 B14C                    .90			mov	cl,76						;indicator column
  2147 00000567 E8EC000000              			call	SetConsoleChar					;display ASCII character
  2148 0000056C 07                      			pop	es						;restore non-volatile regs
  2149 0000056D 59                      			pop	ecx						;
  2150 0000056E C3                      			ret							;return
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  ;
  2153                                  ;	Routine:	PutConsoleOIAChar
  2154                                  ;
  2155                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2156                                  ;
  2157                                  ;	In:		DS	OS data selector
  2158                                  ;
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160 0000056F 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2161 00000570 51                      			push	ecx						;
  2162 00000571 56                      			push	esi						;
  2163 00000572 1E                      			push	ds						;
  2164 00000573 06                      			push	es						;
  2165 00000574 6A18                    			push	ESELDAT						;load OS data selector ...
  2166 00000576 1F                      			pop	ds						;... into data segment register
  2167 00000577 6A20                    			push	ESELCGA						;load CGA selector ...
  2168 00000579 07                      			pop	es						;... into extra segment register
  2169 0000057A BE05080000              			mov	esi,wbConsoleScan0				;scan codes address
  2170 0000057F B718                    			mov	bh,ECONOIAROW					;OIA row
  2171 00000581 B300                    			mov	bl,0						;starting column
  2172 00000583 B906000000              			mov	ecx,6						;maximum scan codes
  2173 00000588 51                      .10			push	ecx						;save remaining count
  2174 00000589 89D9                    			mov	ecx,ebx						;row, column
  2175 0000058B AC                      			lodsb							;read scan code
  2176 0000058C 08C0                    			or	al,al						;scan code present?
  2177 0000058E 7407                    			jz	.20						;no, skip ahead
  2178 00000590 E834000000              			call	PutConsoleHexByte				;display scan code
  2179 00000595 EB10                    			jmp	.30						;continue
  2180 00000597 B020                    .20			mov	al,' '						;ASCII space
  2181 00000599 E8BA000000              			call	SetConsoleChar					;display space
  2182 0000059E FEC1                    			inc	cl
  2183 000005A0 B020                    			mov	al,' '						;ASCII space
  2184 000005A2 E8B1000000              			call	SetConsoleChar					;display space
  2185 000005A7 80C302                  .30			add	bl,2						;next column (+2)
  2186 000005AA 59                      			pop	ecx						;restore remaining
  2187 000005AB E2DB                    			loop	.10						;next code
  2188 000005AD A00B080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2189 000005B2 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2190 000005B4 720D                    			jb	.40						;no, skip ahead
  2191 000005B6 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2192 000005B8 7709                    			ja	.40						;no, skip ahead
  2193 000005BA 88FD                    			mov	ch,bh						;OIA row
  2194 000005BC B128                    			mov	cl,40						;character display column
  2195 000005BE E895000000              			call	SetConsoleChar					;display ASCII character
  2196 000005C3 07                      .40			pop	es						;restore non-volatile regs
  2197 000005C4 1F                      			pop	ds						;
  2198 000005C5 5E                      			pop	esi						;
  2199 000005C6 59                      			pop	ecx						;
  2200 000005C7 5B                      			pop	ebx						;
  2201 000005C8 C3                      			ret							;return
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                  ;
  2204                                  ;	Routine:	PutConsoleHexByte
  2205                                  ;
  2206                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2207                                  ;
  2208                                  ;	In:		AL	byte value
  2209                                  ;			CH	row
  2210                                  ;			CL	column
  2211                                  ;			DS	OS data selector
  2212                                  ;			ES	CGA selector
  2213                                  ;
  2214                                  ;-----------------------------------------------------------------------------------------------------------------------
  2215 000005C9 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  2216 000005CA 88C3                    			mov	bl,al						;save byte value
  2217 000005CC C0E804                  			shr	al,4						;hi-order nybble
  2218 000005CF 0C30                    			or	al,030h						;apply ASCII zone
  2219 000005D1 3C3A                    			cmp	al,03ah						;numeric?
  2220 000005D3 7202                    			jb	.10						;yes, skip ahead
  2221 000005D5 0407                    			add	al,7						;add ASCII offset for alpha
  2222 000005D7 E87C000000              .10			call	SetConsoleChar					;display ASCII character
  2223 000005DC FEC1                    			inc	cl						;increment column
  2224 000005DE 88D8                    			mov	al,bl						;byte value
  2225 000005E0 240F                    			and	al,0fh						;lo-order nybble
  2226 000005E2 0C30                    			or	al,30h						;apply ASCII zone
  2227 000005E4 3C3A                    			cmp	al,03ah						;numeric?
  2228 000005E6 7202                    			jb	.20						;yes, skip ahead
  2229 000005E8 0407                    			add	al,7						;add ASCII offset for alpha
  2230 000005EA E869000000              .20			call	SetConsoleChar					;display ASCII character
  2231 000005EF 5B                      			pop	ebx						;restore non-volatile regs
  2232 000005F0 C3                      			ret							;return
  2233                                  ;-----------------------------------------------------------------------------------------------------------------------
  2234                                  ;
  2235                                  ;	Memory-Mapped Video Routines
  2236                                  ;
  2237                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2238                                  ;
  2239                                  ;	ClearConsoleScreen
  2240                                  ;	ScrollConsoleRow
  2241                                  ;	SetConsoleChar
  2242                                  ;
  2243                                  ;-----------------------------------------------------------------------------------------------------------------------
  2244                                  ;-----------------------------------------------------------------------------------------------------------------------
  2245                                  ;
  2246                                  ;	Routine:	ClearConsoleScreen
  2247                                  ;
  2248                                  ;	Description:	This routine clears the console (CGA) screen.
  2249                                  ;
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251 000005F1 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  2252 000005F2 57                      			push	edi						;
  2253 000005F3 1E                      			push	ds						;
  2254 000005F4 06                      			push	es						;
  2255 000005F5 6A18                    			push	ESELDAT						;load OS Data selector ...
  2256 000005F7 1F                      			pop	ds						;... into DS register
  2257 000005F8 6A20                    			push	ESELCGA						;load CGA selector ...
  2258 000005FA 07                      			pop	es						;... into ES register
  2259 000005FB B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  2260 00000600 B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2261 00000605 31FF                    			xor	edi,edi						;target offset
  2262 00000607 FC                      			cld							;forward strings
  2263 00000608 F3AB                    			rep	stosd						;reset screen body
  2264 0000060A B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  2265 0000060F B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2266 00000614 F3AB                    			rep	stosd						;reset OIA line
  2267 00000616 30C0                    			xor	al,al						;zero register
  2268 00000618 A201080000              			mov	[wbConsoleRow],al				;reset console row
  2269 0000061D A200080000              			mov	[wbConsoleColumn],al				;reset console column
  2270 00000622 E845000000              			call	PlaceCursor					;place cursor at current position
  2271 00000627 07                      			pop	es						;restore non-volatile regs
  2272 00000628 1F                      			pop	ds						;
  2273 00000629 5F                      			pop	edi						;
  2274 0000062A 59                      			pop	ecx						;
  2275 0000062B C3                      			ret							;return
  2276                                  ;-----------------------------------------------------------------------------------------------------------------------
  2277                                  ;
  2278                                  ;	Routine:	ScrollConsoleRow
  2279                                  ;
  2280                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2281                                  ;
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283 0000062C 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  2284 0000062D 56                      			push	esi						;
  2285 0000062E 57                      			push	edi						;
  2286 0000062F 1E                      			push	ds						;
  2287 00000630 06                      			push	es						;
  2288 00000631 6A20                    			push	ESELCGA						;load CGA video selector ...
  2289 00000633 1F                      			pop	ds						;... into DS
  2290 00000634 6A20                    			push	ESELCGA						;load CGA video selector ...
  2291 00000636 07                      			pop	es						;... into ES
  2292 00000637 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2293 0000063C BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2294 00000641 31FF                    			xor	edi,edi						;edi = target (line 1)
  2295 00000643 FC                      			cld							;forward strings
  2296 00000644 F3A5                    			rep	movsd						;move 24 lines up
  2297 00000646 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2298 0000064B B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2299 00000650 F3AB                    			rep	stosd						;clear bottom row
  2300 00000652 07                      			pop	es						;restore non-volatile regs
  2301 00000653 1F                      			pop	ds						;
  2302 00000654 5F                      			pop	edi						;
  2303 00000655 5E                      			pop	esi						;
  2304 00000656 59                      			pop	ecx						;
  2305 00000657 C3                      			ret							;return
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307                                  ;
  2308                                  ;	Routine:	SetConsoleChar
  2309                                  ;
  2310                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2311                                  ;
  2312                                  ;	In:		AL	ASCII character
  2313                                  ;			CL	column
  2314                                  ;			CH	row
  2315                                  ;			ES	CGA selector
  2316                                  ;
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318 00000658 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  2319 0000065A 0FB6C5                  			movzx	eax,ch						;row
  2320 0000065D B450                    			mov	ah,ECONCOLS					;cols/row
  2321 0000065F F6E4                    			mul	ah						;row * cols/row
  2322 00000661 00C8                    			add	al,cl						;add column
  2323 00000663 80D400                  			adc	ah,0						;handle carry
  2324 00000666 D1E0                    			shl	eax,1						;screen offset
  2325 00000668 268810                  			mov	[es:eax],dl					;store character
  2326 0000066B C3                      			ret							;return
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                  ;
  2329                                  ;	Input/Output Routines
  2330                                  ;
  2331                                  ;	These routines read and/or write directly to ports.
  2332                                  ;
  2333                                  ;	PlaceCursor
  2334                                  ;	PutPrimaryEndOfInt
  2335                                  ;	PutSecondaryEndOfInt
  2336                                  ;	SetKeyboardLamps
  2337                                  ;	WaitForKeyInBuffer
  2338                                  ;	WaitForKeyOutBuffer
  2339                                  ;
  2340                                  ;-----------------------------------------------------------------------------------------------------------------------
  2341                                  ;-----------------------------------------------------------------------------------------------------------------------
  2342                                  ;
  2343                                  ;	Routine:	PlaceCursor
  2344                                  ;
  2345                                  ;	Description:	This routine positions the cursor on the console.
  2346                                  ;
  2347                                  ;	In:		DS	OS data selector
  2348                                  ;
  2349                                  ;-----------------------------------------------------------------------------------------------------------------------
  2350 0000066C 51                      PlaceCursor		push	ecx						;save non-volatile regs
  2351 0000066D A001080000              			mov	al,[wbConsoleRow]				;al = row
  2352 00000672 B450                    			mov	ah,ECONCOLS					;ah = cols/row
  2353 00000674 F6E4                    			mul	ah						;row offset
  2354 00000676 020500080000            			add	al,[wbConsoleColumn]				;add column
  2355 0000067C 80D400                  			adc	ah,0						;add overflow
  2356 0000067F 89C1                    			mov	ecx,eax						;screen offset
  2357 00000681 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  2358 00000683 B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  2359 00000685 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2360 00000687 EE                      			out	dx,al						;select register
  2361 00000688 42                      			inc	edx						;data port
  2362 00000689 88E8                    			mov	al,ch						;hi-order cursor loc
  2363 0000068B EE                      			out	dx,al						;store hi-order loc
  2364 0000068C 4A                      			dec	edx						;register select port
  2365 0000068D B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2366 0000068F EE                      			out	dx,al						;select register
  2367 00000690 42                      			inc	edx						;data port
  2368 00000691 88C8                    			mov	al,cl						;lo-order cursor loc
  2369 00000693 EE                      			out	dx,al						;store lo-order loc
  2370 00000694 59                      			pop	ecx						;restore non-volatile regs
  2371 00000695 C3                      			ret							;return
  2372                                  ;-----------------------------------------------------------------------------------------------------------------------
  2373                                  ;
  2374                                  ;	Routine:	PutPrimaryEndOfInt
  2375                                  ;
  2376                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2377                                  ;
  2378                                  ;-----------------------------------------------------------------------------------------------------------------------
  2379 00000696 FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2380 00000697 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2381 00000699 E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  2382 0000069B C3                      			ret							;return
  2383                                  ;-----------------------------------------------------------------------------------------------------------------------
  2384                                  ;
  2385                                  ;	Routine:	PutSecondaryEndOfInt
  2386                                  ;
  2387                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2388                                  ;
  2389                                  ;-----------------------------------------------------------------------------------------------------------------------
  2390 0000069C FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2391 0000069D B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2392 0000069F E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2393 000006A1 C3                      			ret							;return
  2394                                  ;-----------------------------------------------------------------------------------------------------------------------
  2395                                  ;
  2396                                  ;	Routine:	SetKeyboardLamps
  2397                                  ;
  2398                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2399                                  ;
  2400                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2401                                  ;
  2402                                  ;-----------------------------------------------------------------------------------------------------------------------
  2403 000006A2 E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2404 000006A7 B0ED                    			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2405 000006A9 E660                    			out	EKEYPORTDATA,al					;send command to 8042
  2406 000006AB E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2407 000006B0 E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2408 000006B2 E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  2409 000006B7 88F8                    			mov	al,bh						;set/reset lamps value
  2410 000006B9 E660                    			out	EKEYPORTDATA,al					;send lamps value
  2411 000006BB E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2412 000006C0 E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2413 000006C2 C3                      			ret							;return
  2414                                  ;-----------------------------------------------------------------------------------------------------------------------
  2415                                  ;
  2416                                  ;	Routine:	WaitForKeyInBuffer
  2417                                  ;
  2418                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2419                                  ;
  2420                                  ;	Out:		ZF	1 = Input buffer ready
  2421                                  ;				0 = Input buffer not ready after timeout
  2422                                  ;
  2423                                  ;-----------------------------------------------------------------------------------------------------------------------
  2424 000006C3 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2425 000006C4 B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2426 000006C9 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2427 000006CB A802                    			test	al,EKEYBITIN					;is input buffer still full?
  2428 000006CD E0FA                    			loopnz	.10						;yes, repeat till timeout
  2429 000006CF 59                      			pop	ecx						;restore non-volatile regs
  2430 000006D0 C3                      			ret							;return
  2431                                  ;-----------------------------------------------------------------------------------------------------------------------
  2432                                  ;
  2433                                  ;	Routine:	WaitForKeyOutBuffer
  2434                                  ;
  2435                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2436                                  ;
  2437                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2438                                  ;				1 = Output buffer empty after timeout
  2439                                  ;
  2440                                  ;-----------------------------------------------------------------------------------------------------------------------
  2441 000006D1 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2442 000006D2 B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2443 000006D7 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2444 000006D9 A801                    			test	al,EKEYBITOUT					;output buffer status bit
  2445 000006DB E1FA                    			loopz	.10						;loop until output buffer bit
  2446 000006DD 59                      			pop	ecx						;restore non-volatile regs
  2447 000006DE C3                      			ret							;return
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449                                  ;
  2450                                  ;	End of the Kernel Function Library
  2451                                  ;
  2452                                  ;-----------------------------------------------------------------------------------------------------------------------
  2453 000006DF 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  2454 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456                                  ;
  2457                                  ;	Console Task
  2458                                  ;
  2459                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2460                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2461                                  ;	screen and responds to user commands.
  2462                                  ;
  2463                                  ;-----------------------------------------------------------------------------------------------------------------------
  2464                                  ;-----------------------------------------------------------------------------------------------------------------------
  2465                                  ;
  2466                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2467                                  ;
  2468                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2469                                  ;
  2470                                  ;-----------------------------------------------------------------------------------------------------------------------
  2471                                  section			constack						;console task stack
  2472 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  2473                                  ;-----------------------------------------------------------------------------------------------------------------------
  2474                                  ;
  2475                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2476                                  ;
  2477                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2478                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2479                                  ;	16 descriptors. Six are initially defined.
  2480                                  ;
  2481                                  ;-----------------------------------------------------------------------------------------------------------------------
  2482                                  section			conldt							;console local descriptors
  2483 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  2484 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  2485 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  2486 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  2487 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  2488 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  2489 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2490                                  ;-----------------------------------------------------------------------------------------------------------------------
  2491                                  ;
  2492                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2493                                  ;
  2494                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2495                                  ;	segment. CS to console code.
  2496                                  ;
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498                                  section			contss							;console task state segment
  2499 00000000 00000000                			dd	0						;00 back-link tss
  2500 00000004 00070000                			dd	0700h						;04 esp ring 0
  2501 00000008 14000000                			dd	0014h						;08 ss ring 0
  2502 0000000C 00070000                			dd	0700h						;0C esp ring 1
  2503 00000010 14000000                			dd	0014h						;10 es ring 1
  2504 00000014 00070000                			dd	0700h						;14 esp ring 2
  2505 00000018 14000000                			dd	0014h						;18 ss ring 2
  2506 0000001C 00000000                			dd	0						;1C cr ring 3
  2507 00000020 00000000                			dd	0						;20 eip
  2508 00000024 00020000                			dd	0200h						;24 eflags
  2509 00000028 00000000                			dd	0						;28 eax
  2510 0000002C 00000000                			dd	0						;2C ecx
  2511 00000030 00000000                			dd	0						;30 edx
  2512 00000034 00000000                			dd	0						;34 ebx
  2513 00000038 00070000                			dd	0700h						;38 esp ring 3
  2514 0000003C 00000000                			dd	0						;3C ebp
  2515 00000040 00000000                			dd	0						;40 esi
  2516 00000044 00000000                			dd	0						;44 edi
  2517 00000048 1C000000                			dd	001Ch						;48 es
  2518 0000004C 24000000                			dd	0024h						;4C cs
  2519 00000050 14000000                			dd	0014h						;50 ss ring 3
  2520 00000054 1C000000                			dd	001Ch						;54 ds
  2521 00000058 00000000                			dd	0						;58 fs
  2522 0000005C 00000000                			dd	0						;5c gs
  2523 00000060 50000000                			dd	0050h						;60 ldt selector in gdt
  2524 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  2525                                  ;-----------------------------------------------------------------------------------------------------------------------
  2526                                  ;
  2527                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2528                                  ;
  2529                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2530                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2531                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2532                                  ;	event.
  2533                                  ;
  2534                                  ;-----------------------------------------------------------------------------------------------------------------------
  2535                                  section			conmque							;console message queue
  2536 00000000 08000000                			dd	8						;head pointer
  2537 00000004 08000000                			dd	8						;tail pointer
  2538 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  ;
  2541                                  ;	Console Code								@disk: 008400	@mem: 005000
  2542                                  ;
  2543                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2544                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2545                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2546                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2547                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2548                                  ;	board input, echoing to the console screen and responding to user commands.
  2549                                  ;
  2550                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2551                                  ;
  2552                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2553                                  ;				|  Real Mode Interrupt Vectors			|
  2554                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2555                                  ;				|  Reserved BIOS Memory Area			|
  2556                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2557                                  ;				|  Shared Kernel Memory Area			|
  2558                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2559                                  ;				|  Global Descriptor Table (GDT)		|
  2560                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2561                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2562                                  ;			002000	+-----------------------------------------------+
  2563                                  ;				|  Interrupt Handlers				|
  2564                                  ;				|  Kernel Function Library			|
  2565                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2566                                  ;				|  Console Task Stack Area			|
  2567                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2568                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2569                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2570                                  ;				|  Console Task Task State Segment (TSS)	|
  2571                                  ;			004800	+-----------------------------------------------+
  2572                                  ;				|  Console Task Message Queue			|
  2573                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2574                                  ;				|  Console Task Code				|
  2575                                  ;				|  Console Task Constants			|
  2576                                  ;			006000	+===============================================+
  2577                                  ;
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  section			concode	vstart=5000h					;labels relative to 5000h
  2580 00000000 E81E000000              ConCode			call	ConInitializeData				;initialize console variables
  2581                                  
  2582                                  			clearConsoleScreen					;clear the console screen
  2582 00000005 B001                <1>  mov al,eClearConsoleScreen
  2582 00000007 CD30                <1>  int _svc
  2583                                  			putConsoleString czTitle				;display startup message
  2583 00000009 BA[3C000000]        <1>  mov edx,%1
  2583 0000000E B000                <1>  mov al,ePutConsoleString
  2583 00000010 CD30                <1>  int _svc
  2584                                  .10			putConsoleString czPrompt				;display input prompt
  2584                              <1> .10 :
  2584 00000012 BA[5A000000]        <1>  mov edx,%1
  2584 00000017 B000                <1>  mov al,ePutConsoleString
  2584 00000019 CD30                <1>  int _svc
  2585                                  			placeCursor						;set CRT cursor location
  2585 0000001B B002                <1>  mov al,ePlaceCursor
  2585 0000001D CD30                <1>  int _svc
  2586                                  
  2587 0000001F FB                      .20			sti							;enable interrupts
  2588 00000020 F4                      			hlt							;halt until interrupt
  2589 00000021 EBFC                    			jmp	.20						;continue halt loop
  2590                                  ;-----------------------------------------------------------------------------------------------------------------------
  2591                                  ;
  2592                                  ;	Routine:	ConInitializeData
  2593                                  ;
  2594                                  ;	Description:	This routine initializes console task variables.
  2595                                  ;
  2596                                  ;-----------------------------------------------------------------------------------------------------------------------
  2597 00000023 51                      ConInitializeData	push	ecx						;save non-volatile regs
  2598 00000024 57                      			push	edi						;
  2599 00000025 06                      			push	es						;
  2600 00000026 6A18                    			push	ESELDAT						;load OS data selector ...
  2601 00000028 07                      			pop	es						;... into extra segment register
  2602 00000029 BF00080000              			mov	edi,ECONDATA					;OS console data address
  2603 0000002E 30C0                    			xor	al,al						;initialization value
  2604 00000030 B90C000000              			mov	ecx,ECONDATALEN					;size of OS console data
  2605 00000035 FC                      			cld							;forward strings
  2606 00000036 F3AA                    			rep	stosb						;initialize data
  2607 00000038 07                      			pop	es						;restore non-volatile regs
  2608 00000039 5F                      			pop	edi						;
  2609 0000003A 59                      			pop	ecx						;
  2610 0000003B C3                      			ret							;return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;	Constants
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616 0000003C 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  2616 00000045 65726174696E672053-
  2616 0000004E 797374656D20312E30-
  2616 00000057 0D0A00             
  2617 0000005A 3A00                    czPrompt		db	":",0						;prompt string
  2618 0000005C 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  2619 00000FFE 55AA                    			db	055h,0AAh					;end of section
  2620                                  %endif
  2621                                  %ifdef BUILDDISK
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                  ;
  2624                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  2625                                  ;
  2626                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2627                                  ;
  2628                                  ;-----------------------------------------------------------------------------------------------------------------------
  2629                                  section			unused							;unused disk space
  2630                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  2631                                  %endif
