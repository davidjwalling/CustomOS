     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   272                                  ;
   273                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   274                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   275                                  ;
   276                                  ;       0.......        Segment is not present in memory (triggers int 11)
   277                                  ;       1.......        Segment is present in memory
   278                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   279                                  ;       ...0....        Segment is a system segment
   280                                  ;       ...00010                Local Descriptor Table
   281                                  ;       ...00101                Task Gate
   282                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   283                                  ;       ...01100                Call Gate (386)
   284                                  ;       ...01110                Interrupt Gate (386)
   285                                  ;       ...01111                Trap Gate (386)
   286                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   287                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   288                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   292                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   293                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   294                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   295                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   296                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   297                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   298                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;
   301                                  ;       Firmware-Defined Values
   302                                  ;
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;
   306                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   307                                  ;
   308                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   309                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   310                                  ;
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   313                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   314                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   315                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   316                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   317                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   318                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   319                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   320                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   321                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   322                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       Standards-Based Values
   326                                  ;
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;       ASCII                                                                   EASCII...
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   334                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   335                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   336                                  EASCIISPACE             equ     020h                                            ;space
   337                                  EASCIIUPPERA            equ     041h                                            ;'A'
   338                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   339                                  EASCIICASE              equ     00100000b                                       ;case bit
   340                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;
   343                                  ;       Operating System Values
   344                                  ;
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   349                                  ;
   350                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   351                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   352                                  ;
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   355                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   356                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   357                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   358                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   359                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   360                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  ;       Console Constants                                                       ECON...
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ECONCOLS                equ     80                                              ;columns per row
   365                                  ECONROWS                equ     24                                              ;console rows
   366                                  ECONOIAROW              equ     24                                              ;operator information area row
   367                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   368                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   369                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   370                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   371                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   376                                  EGDTCGA                 equ     020h                                            ;cga video selector
   377                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   378                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   379                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   380                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   381                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   382                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;       Keyboard Flags                                                          EKEYF...
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   387                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   388                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   389                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   390                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   391                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   392                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   393                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   394                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   395                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   396                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;       Kernel Constants                                                        EKRN...
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   401                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   402                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   403                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   404                                  ;=======================================================================================================================
   405                                  ;
   406                                  ;       Structures
   407                                  ;
   408                                  ;=======================================================================================================================
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;
   411                                  ;       OSDATA
   412                                  ;
   413                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   414                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   415                                  ;
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  struc                   OSDATA
   418 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   419 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   420 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   421 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   422 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   423 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   424 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   425 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   426 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   427 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   428 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   429 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   430 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   431 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   432 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   433 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   434 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   435 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   436 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   437 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   438 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   439 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   440 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   441 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   442 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   443 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   444 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   445 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   446 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   447 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   448 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   449 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   450 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   451 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   452 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   453 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   454 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   455 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   456 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   457 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   458 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   459 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   460 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   461 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   462 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   463 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   464 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   465 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   466 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   467 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   468 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   469 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   470 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   471 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   472 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   473 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   474 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   475 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   476 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   477 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   478 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   479 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   480 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   481 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   482 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   483 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   484 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   485 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   486 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   487 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   488 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   489 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   490 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   491 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   492 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   493 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   494 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   495 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   496 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   497 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   498 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   499 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   500 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   501 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   502 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   503 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   504 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   505 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   506 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   507 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   508 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   509 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   510 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   511 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   512 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   513 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   514 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   515 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   516 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   517 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   518 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  ;
   521                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   522                                  ;
   523                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   524                                  ;
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  ECONDATA                equ     ($)
   527 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   528 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   529 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   530 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   531 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   532 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   533 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   534 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   535 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   536 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   537 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   538 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   539                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   540                                  ;-----------------------------------------------------------------------------------------------------------------------
   541                                  ;
   542                                  ;       End of OS Variables
   543                                  ;
   544                                  ;-----------------------------------------------------------------------------------------------------------------------
   545                                  endstruc
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  ;
   548                                  ;       Macros
   549                                  ;
   550                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   551                                  ;
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  %macro                  mint    1
   554                                  _%1                     equ     ($-$$) / EX86DESCLEN
   555                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   556                                  %endmacro
   557                                  %macro                  mtrap   1
   558                                  _%1                     equ     ($-$$) / EX86DESCLEN
   559                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   560                                  %endmacro
   561                                  %macro                  menter  1
   562                                  ?%1                     equ     ($-$$)
   563                                  %endmacro
   564                                  %macro                  tsvce   1
   565                                  e%1                     equ     ($-tsvc)/4
   566                                                          dd      %1
   567                                  %endmacro
   568                                  %ifdef BUILDBOOT
   569                                  ;=======================================================================================================================
   570                                  ;
   571                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   572                                  ;
   573                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   574                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   575                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   576                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   577                                  ;
   578                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   579                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   580                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   581                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   582                                  ;       immediately followed by a disk parameter table.
   583                                  ;
   584                                  ;=======================================================================================================================
   585                                                          cpu     8086                                            ;assume minimal CPU
   586                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   587                                                          bits    16                                              ;16-bit code at power-up
   588                                  %ifdef BUILDPREP
   589                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   590                                  %else
   591 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   592                                  %endif
   593                                  ;-----------------------------------------------------------------------------------------------------------------------
   594                                  ;
   595                                  ;       Disk Parameter Table
   596                                  ;
   597                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   598                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   599                                  ;
   600                                  ;-----------------------------------------------------------------------------------------------------------------------
   601 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   602 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   603 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   604 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   605 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   606 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   607 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   608 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   609 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   610                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   611 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   612 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   613 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   614                                  ;
   615                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   616                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   617                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   618                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   619                                  ;       given several possible starting values for CS:IP.
   620                                  ;
   621                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   622 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   623                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   624 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   625 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   626 00000025 B104                                            mov     cl,4                                            ;shift count
   627 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   628 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   629 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   630                                  ;
   631                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   632                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   633                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   634                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   635                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   636                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   637                                  ;
   638 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   639 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   640 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   641 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   642 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   643                                  ;
   644                                  ;       Our boot addressability is now set up according to the following diagram.
   645                                  ;
   646                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   647                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   648                                  ;                               |  256 = 100h bytes                             |
   649                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   650                                  ;                               |  Boot Sector (vstart=0100h)                   |
   651                                  ;                               |  1 sector = 512 = 200h bytes                  |
   652                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   653                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   654                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   655                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   656                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   657                                  ;                               |  2 sectors = 1024 = 400h bytes
   658                                  ;                       009400  +-----------------------------------------------+ DS:1900
   659                                  ;
   660                                  ;       On entry, DL indicates the drive being booted from.
   661                                  ;
   662 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   663                                  ;
   664                                  ;       Compute directory i/o buffer address.
   665                                  ;
   666 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   667 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   668 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   669 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   670                                  ;
   671                                  ;       Compute segment where os.com will be loaded.
   672                                  ;
   673 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   674 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   675 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   676 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   677                                  ;
   678                                  ;       Set the video mode to 80 column, 25 row, text.
   679                                  ;
   680 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   681 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   682                                  ;
   683                                  ;       Write a message to the console so we know we have our addressability established.
   684                                  ;
   685 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   686 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   687                                  ;
   688                                  ;       Initialize the number of directory sectors to search.
   689                                  ;
   690 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   691 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   692                                  ;
   693                                  ;       Compute number of directory sectors and initialize overhead count.
   694                                  ;
   695 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   696 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   697 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   698 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   699                                  ;
   700                                  ;       Compute directory entries per sector.
   701                                  ;
   702 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   703 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   704 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   705                                  ;
   706                                  ;       Compute first logical directory sector and update overhead count.
   707                                  ;
   708 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   709 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   710 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   711 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   712 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   713 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   714                                  ;
   715                                  ;       Read directory sector.
   716                                  ;
   717 0000008E B001                    .30                     mov     al,1                                            ;sector count
   718 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   719 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   720 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   721                                  ;
   722                                  ;       Setup variables to search this directory sector.
   723                                  ;
   724 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   725 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   726 000000A1 7603                                            jna     .40                                             ;no, continue
   727 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   728 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   729 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   730 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   731                                  ;
   732                                  ;       Loop through directory sectors searching for kernel program.
   733                                  ;
   734 000000B1 56                      .50                     push    si                                              ;save kernel name address
   735 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   736 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   737 000000B6 FC                                              cld                                                     ;forward strings
   738 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   739 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   740 000000BA 5E                                              pop     si                                              ;restore kernel name address
   741 000000BB 7418                                            je      .60                                             ;exit loop if found
   742 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   743 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   744 000000C2 75ED                                            jnz     .50                                             ;next entry
   745                                  ;
   746                                  ;       Repeat search if we are not at the end of the directory.
   747                                  ;
   748 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   749 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   750 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   751 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   752 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   753                                  ;
   754                                  ;       If we find the kernel program in the directory, read the FAT.
   755                                  ;
   756 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   757 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   758 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   759 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   760 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   761 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   762                                  ;
   763                                  ;       Get the starting cluster of the kernel program and target address.
   764                                  ;
   765 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   766 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   767                                  ;
   768                                  ;       Read each program cluster into RAM.
   769                                  ;
   770 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   771 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   772 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   773 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   774 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   775 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   776 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   777 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   778 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   779                                  ;
   780                                  ;       Update buffer pointer for next cluster.
   781                                  ;
   782 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   783 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   784 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   785 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   786 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   787                                  ;
   788                                  ;       Compute next cluster number.
   789                                  ;
   790 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   791 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   792 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   793 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   794 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   795 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   796 00000120 83E701                                          and     di,1                                            ;get low bit
   797 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   798 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   799 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   800                                  ;
   801                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   802                                  ;
   803 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   804 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   805 00000130 B104                                            mov     cl,4                                            ;shift count
   806 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   807 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   808 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   809 0000013A 75B2                                            jne     .70                                             ;no, continue
   810                                  ;
   811                                  ;       Transfer control to the operating system program.
   812                                  ;
   813 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   814 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   815 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   816                                  ;
   817                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   818                                  ;
   819 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   820 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   821 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   822 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   823 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   824 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   825 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   826 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   827 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   828 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   829                                  ;
   830                                  ;       Try maxtries times to read sector.
   831                                  ;
   832 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   833 00000160 53                      .10                     push    bx                                              ;save buffer address
   834 00000161 51                                              push    cx                                              ;save retry count
   835 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   836 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   837 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   838 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   839 0000016F 59                                              pop     cx                                              ;restore retry count
   840 00000170 5B                                              pop     bx                                              ;restore buffer address
   841 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   842 00000173 E2EB                                            loop    .10                                             ;retry
   843                                  ;
   844                                  ;       Handle disk error: convert to ASCII and store in error string.
   845                                  ;
   846 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   847 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   848 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   849 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   850 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   851 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   852 00000183 7203                                            jb      .20                                             ;continue if numeral
   853 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   854 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   855 0000018A 7203                                            jb      .30                                             ;continue if numeral
   856 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   857 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   858 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   859 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   860                                  ;
   861                                  ;       Wait for a key press.
   862                                  ;
   863 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   864 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   865 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   866 0000019E FB                                              sti                                                     ;enable maskable interrupts
   867 0000019F F4                                              hlt                                                     ;wait for interrupt
   868 000001A0 EBF6                                            jmp     .10                                             ;repeat
   869                                  ;
   870                                  ;       Reset the system.
   871                                  ;
   872 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   873 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   874 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   875 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   876 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   877                                  ;
   878                                  ;       Display text message.
   879                                  ;
   880 000001AA FC                      BootPrint               cld                                                     ;forward strings
   881 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   882 000001AC 84C0                                            test    al,al                                           ;end of string?
   883 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   884 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   885 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   886 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   887 000001B6 C3                      BootReturn              ret                                                     ;return
   888                                  ;-----------------------------------------------------------------------------------------------------------------------
   889                                  ;
   890                                  ;       Constants
   891                                  ;
   892                                  ;-----------------------------------------------------------------------------------------------------------------------
   893 000001B7 90                                              align   2
   894 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   895 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   895 000001C3 4F4D               
   896 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   896 000001CE 530D0A00           
   897 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   897 000001DB 7220               
   898 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   899 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   899 000001E9 6700               
   900                                  ;-----------------------------------------------------------------------------------------------------------------------
   901                                  ;
   902                                  ;       Work Areas
   903                                  ;
   904                                  ;-----------------------------------------------------------------------------------------------------------------------
   905 000001EB 90                                              align   2
   906 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   907 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   908 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   909 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   910 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   911                                  wwReadCountCommand      equ     $                                               ;read count and command
   912 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   913 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   914                                  wwDriveHead             equ     $                                               ;drive, head (word)
   915 000001F8 00                      wbDrive                 db      0                                               ;drive
   916 000001F9 00                      wbHead                  db      0                                               ;head
   917                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   918 000001FA 00                                              db      0                                               ;sector
   919 000001FB 00                      wbTrack                 db      0                                               ;track
   920 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   921 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   922                                  %endif
   923                                  %ifdef BUILDPREP
   924                                  ;=======================================================================================================================
   925                                  ;
   926                                  ;       Diskette Preparation Code
   927                                  ;
   928                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   929                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   930                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   931                                  ;
   932                                  ;=======================================================================================================================
   933                                  ;
   934                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   935                                  ;
   936                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   937                                                          call    BootPrint                                       ;display message
   938                                  ;
   939                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   940                                  ;
   941                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   942                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   943                                                          jnz     .20                                             ;continue if key pressed
   944                                                          sti                                                     ;enable interrupts
   945                                                          hlt                                                     ;wait for interrupt
   946                                                          jmp     .10                                             ;repeat
   947                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   948                                                          je      .30                                             ;yes, branch
   949                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   950                                                          jne     .10                                             ;no, repeat
   951                                                          jmp     .120                                            ;yes, exit program
   952                                  ;
   953                                  ;       Display writing-sector message and patch the JMP instruction.
   954                                  ;
   955                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   956                                                          call    BootPrint                                       ;display message
   957                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   958                                                          mov     ax,01Bh                                         ;address past disk parameter table
   959                                                          mov     [bx],ax                                         ;update the JMP instruction
   960                                  ;
   961                                  ;       Try to read the boot sector.
   962                                  ;
   963                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   964                                  .40                     push    cx                                              ;save remaining tries
   965                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   966                                                          mov     dx,0                                            ;head zero, drive zero
   967                                                          mov     cx,1                                            ;track zero, sector one
   968                                                          mov     al,1                                            ;one sector
   969                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   970                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   971                                                          pop     cx                                              ;restore remaining retries
   972                                                          jnc     .50                                             ;skip ahead if successful
   973                                                          loop    .40                                             ;try again
   974                                                          mov     si,czPrepMsg20                                  ;read-error message address
   975                                                          jmp     .70                                             ;branch to error routine
   976                                  ;
   977                                  ;       Copy diskette parms from input buffer to output buffer.
   978                                  ;
   979                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   980                                                          add     si,11                                           ;skip over JMP and system ID
   981                                                          mov     di,Boot                                         ;output buffer address
   982                                                          add     di,11                                           ;skip over JMP and system ID
   983                                                          mov     cx,19                                           ;length of diskette parameters
   984                                                          cld                                                     ;forward string copies
   985                                                          rep     movsb                                           ;copy diskette parameters
   986                                  ;
   987                                  ;       Try to write boot sector to diskette.
   988                                  ;
   989                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   990                                  .60                     push    cx                                              ;save remaining tries
   991                                                          mov     bx,Boot                                         ;output buffer address
   992                                                          mov     dx,0                                            ;head zero, drive zero
   993                                                          mov     cx,1                                            ;track zero, sector one
   994                                                          mov     al,1                                            ;one sector
   995                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   996                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   997                                                          pop     cx                                              ;restore remaining retries
   998                                                          jnc     .100                                            ;skip ahead if successful
   999                                                          loop    .60                                             ;try again
  1000                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1001                                  ;
  1002                                  ;       Convert the error code to ASCII and display the error message.
  1003                                  ;
  1004                                  .70                     push    ax                                              ;save error code
  1005                                                          mov     al,ah                                           ;copy error code
  1006                                                          mov     ah,0                                            ;AX = error code
  1007                                                          mov     dl,10h                                          ;hexadecimal divisor
  1008                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1009                                                          or      ax,03030h                                       ;add ASCII zone digits
  1010                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1011                                                          jb      .80                                             ;yes, continue
  1012                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1013                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1014                                                          jb      .90                                             ;yes, continue
  1015                                                          add     al,7                                            ;no, make ASCII
  1016                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1017                                                          call    BootPrint                                       ;write error message
  1018                                                          pop     ax                                              ;restore error code
  1019                                  ;
  1020                                  ;       Display the completion message.
  1021                                  ;
  1022                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1023                                                          mov     al,ah                                           ;BIOS return code
  1024                                                          cmp     al,0                                            ;success?
  1025                                                          je      .110                                            ;yes, continue
  1026                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1027                                                          cmp     al,1                                            ;disk parameter error?
  1028                                                          je      .110                                            ;yes, continue
  1029                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1030                                                          cmp     al,2                                            ;address mark not found?
  1031                                                          je      .110                                            ;yes, continue
  1032                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1033                                                          cmp     al,3                                            ;protected disk?
  1034                                                          je      .110                                            ;yes, continue
  1035                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1036                                                          cmp     al,6                                            ;diskette removed?
  1037                                                          je      .110                                            ;yes, continue
  1038                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1039                                                          cmp     al,80H                                          ;drive timed out?
  1040                                                          je      .110                                            ;yes, continue
  1041                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1042                                  .110                    call    BootPrint                                       ;display result message
  1043                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1044                                                          int     021h                                            ;terminate DOS program
  1045                                                          ret                                                     ;return (should not execute)
  1046                                  ;-----------------------------------------------------------------------------------------------------------------------
  1047                                  ;
  1048                                  ;       Diskette Preparation Messages
  1049                                  ;
  1050                                  ;-----------------------------------------------------------------------------------------------------------------------
  1051                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1052                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1053                                                          db      13,10
  1054                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1055                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1056                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1057                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1058                                                          db      13,10,0
  1059                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1060                                                          db      13,10,0
  1061                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1062                                                          db      13,10,0
  1063                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1064                                                          db      13,10,0
  1065                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1066                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1067                                                          db      13,10,0
  1068                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1069                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1070                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1071                                                          db      13,10,"and retry."
  1072                                                          db      13,10,0
  1073                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1074                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1075                                                          db      13,10,"using another diskette."
  1076                                                          db      13,10,0
  1077                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1078                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1079                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1080                                                          db      13,10,0
  1081                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1082                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1083                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1084                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1085                                                          db      13,10,"is properly inserted in the diskette drive."
  1086                                                          db      13,10,0
  1087                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1088                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1089                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1090                                                          db      13,10,0
  1091                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1092                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1093                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1094                                                          db      13,10,0
  1095                                  wcPrepInBuf             equ     $
  1096                                  %endif
  1097                                  %ifdef BUILDDISK
  1098                                  ;=======================================================================================================================
  1099                                  ;
  1100                                  ;       File Allocation Tables
  1101                                  ;
  1102                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1103                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1104                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1105                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1106                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1107                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1108                                  ;       the last cluster in the chain.
  1109                                  ;
  1110                                  ;       Every three bytes encode two FAT entries as follows:
  1111                                  ;
  1112                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1113                                  ;
  1114                                  ;=======================================================================================================================
  1115                                  ;-----------------------------------------------------------------------------------------------------------------------
  1116                                  ;
  1117                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1118                                  ;
  1119                                  ;-----------------------------------------------------------------------------------------------------------------------
  1120                                  section                 fat1                                                    ;first copy of FAT
  1121                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1122                                                          db      005h,060h,000h, 007h,080h,000h
  1123                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1124                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1125                                                          db      011h,020h,001h, 013h,040h,001h
  1126                                                          db      015h,060h,001h, 017h,080h,001h
  1127                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1128                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1129                                                          db      021h,020h,002h, 023h,040h,002h
  1130                                                          db      025h,060h,002h, 027h,080h,002h
  1131                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1132                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1133                                  ;-----------------------------------------------------------------------------------------------------------------------
  1134                                  ;
  1135                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1136                                  ;
  1137                                  ;-----------------------------------------------------------------------------------------------------------------------
  1138                                  section                 fat2                                                    ;second copy of FAT
  1139                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1140                                                          db      005h,060h,000h, 007h,080h,000h
  1141                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1142                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1143                                                          db      011h,020h,001h, 013h,040h,001h
  1144                                                          db      015h,060h,001h, 017h,080h,001h
  1145                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1146                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1147                                                          db      021h,020h,002h, 023h,040h,002h
  1148                                                          db      025h,060h,002h, 027h,080h,002h
  1149                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1150                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1151                                  ;-----------------------------------------------------------------------------------------------------------------------
  1152                                  ;
  1153                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1154                                  ;
  1155                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1156                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1157                                  ;       copy.
  1158                                  ;
  1159                                  ;-----------------------------------------------------------------------------------------------------------------------
  1160                                  section                 dir                                                     ;diskette directory
  1161                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1162                                                          db      020h                                            ;attribute (archive bit set)
  1163                                                          times   10 db 0                                         ;unused
  1164                                                          dw      0h                                              ;time
  1165                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1166                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1167                                                          dw      2                                               ;first cluster
  1168                                                          dd      05400h                                          ;file size
  1169                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1170                                  %endif
  1171                                  %ifdef BUILDCOM
  1172                                  ;=======================================================================================================================
  1173                                  ;
  1174                                  ;       OS.COM
  1175                                  ;
  1176                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1177                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1178                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1179                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1180                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1181                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1182                                  ;
  1183                                  ;       Our loader addressability is set up according to the following diagram.
  1184                                  ;
  1185                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1186                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1187                                  ;                               |  256 = 100h bytes                             |
  1188                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1189                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1190                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1191                                  ;                       007e00  +-----------------------------------------------+
  1192                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1193                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1194                                  ;                               |                                               |
  1195                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1196                                  ;                               |                                               |
  1197                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1198                                  ;                               |  Loader Code                                  |
  1199                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1200                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1201                                  ;
  1202                                  ;=======================================================================================================================
  1203                                  ;-----------------------------------------------------------------------------------------------------------------------
  1204                                  ;
  1205                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1206                                  ;
  1207                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1208                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1209                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1210                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1211                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1212                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1213                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1214                                  ;       registers.
  1215                                  ;
  1216                                  ;-----------------------------------------------------------------------------------------------------------------------
  1217                                                          cpu     8086                                            ;assume minimal CPU
  1218                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1219                                                          bits    16                                              ;this is 16-bit code
  1220                                  Loader                  push    cs                                              ;use the code segment
  1221                                                          pop     ds                                              ;...as our data segment
  1222                                                          push    cs                                              ;use the code segment
  1223                                                          pop     es                                              ;...as our extra segment
  1224                                  ;
  1225                                  ;       Write a message to the console so we know we have our addressability established.
  1226                                  ;
  1227                                                          mov     si,czStartingMsg                                ;starting message
  1228                                                          call    PutTTYString                                    ;display loader message
  1229                                  ;
  1230                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1231                                  ;
  1232                                                          call    GetCPUType                                      ;AL = cpu type
  1233                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1234                                                          cmp     al,3                                            ;80386+?
  1235                                                          jb      LoaderExit                                      ;no, exit with error message
  1236                                                          cpu     386                                             ;allow 80386 instructions
  1237                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1238                                                          call    PutTTYString                                    ;display message
  1239                                  ;
  1240                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1241                                  ;
  1242                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1243                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1244                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1245                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1246                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1247                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1248                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1249                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1250                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1251                                                          call    PutTTYString                                    ;display message
  1252                                  ;
  1253                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1254                                  ;
  1255                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1256                                                          pop     es                                              ;... as target segment
  1257                                                          xor     di,di                                           ;ES:DI = target address
  1258                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1259                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1260                                                          cld                                                     ;forward strings
  1261                                                          rep     movsb                                           ;copy kernel image
  1262                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1263                                                          call    PutTTYString                                    ;display message
  1264                                  ;
  1265                                  ;       Switch to protected mode.
  1266                                  ;
  1267                                                          xor     si,si                                           ;ES:SI = gdt addr
  1268                                                          mov     ss,si                                           ;protected mode ss
  1269                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1270                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1271                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1272                                                          mov     dx,001Fh                                        ;outer delay loop count
  1273                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1274                                                          loop    $                                               ;wait out pending interrupts
  1275                                                          dec     dx                                              ;restore outer loop count
  1276                                                          jnz     .10                                             ;continue outer loop
  1277                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1278                                  ;
  1279                                  ;       Enable hardware and maskable interrupts.
  1280                                  ;
  1281                                                          xor     al,al                                           ;enable all registers code
  1282                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1283                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1284                                                          sti                                                     ;enable maskable interrupts
  1285                                  ;
  1286                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1287                                  ;
  1288                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1289                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1290                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1291                                  ;-----------------------------------------------------------------------------------------------------------------------
  1292                                  ;
  1293                                  ;       Routine:        LoaderExit
  1294                                  ;
  1295                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1296                                  ;
  1297                                  ;       In:             DS:SI   string address
  1298                                  ;
  1299                                  ;-----------------------------------------------------------------------------------------------------------------------
  1300                                  LoaderExit              call    PutTTYString                                    ;display error message
  1301                                  ;
  1302                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1303                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1304                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1305                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1306                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1307                                  ;
  1308                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1309                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1310                                                          jnz     .40                                             ;exit if key pressed
  1311                                                          sti                                                     ;enable maskable interrupts
  1312                                                          hlt                                                     ;wait for interrupt
  1313                                                          jmp     .30                                             ;repeat until keypress
  1314                                  ;
  1315                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1316                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1317                                  ;       HLT until the system resets.
  1318                                  ;
  1319                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1320                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1321                                  .50                     sti                                                     ;enable maskable interrupts
  1322                                                          hlt                                                     ;stop until reset, int, nmi
  1323                                                          jmp     .50                                             ;loop until restart kicks in
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  ;
  1326                                  ;       Routine:        GetCPUType
  1327                                  ;
  1328                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1329                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1330                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1331                                  ;
  1332                                  ;       Out:            AX      0 = 808x, v20, etc.
  1333                                  ;                               1 = 80186
  1334                                  ;                               2 = 80286
  1335                                  ;                               3 = 80386
  1336                                  ;
  1337                                  ;-----------------------------------------------------------------------------------------------------------------------
  1338                                  GetCPUType              mov     al,1                                            ;AL = 1
  1339                                                          mov     cl,32                                           ;shift count
  1340                                                          shr     al,cl                                           ;try a 32-bit shift
  1341                                                          or      al,al                                           ;did the shift happen?
  1342                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1343                                                          cpu     186
  1344                                                          push    sp                                              ;save stack pointer
  1345                                                          pop     cx                                              ;...into cx
  1346                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1347                                                          jne     .10                                             ;yes, cpu is 80186
  1348                                                          cpu     286
  1349                                                          inc     ax                                              ;AX = 2
  1350                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1351                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1352                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1353                                                          jz      .10                                             ;yes, cpu is 80286
  1354                                                          inc     ax                                              ;AX = 3
  1355                                  .10                     ret                                                     ;return
  1356                                  ;-----------------------------------------------------------------------------------------------------------------------
  1357                                  ;
  1358                                  ;       Routine:        PutTTYString
  1359                                  ;
  1360                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1361                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1362                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1363                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1364                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1365                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1366                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1367                                  ;                       to LODSB is not needed.
  1368                                  ;
  1369                                  ;       In:             DS:SI   address of string
  1370                                  ;
  1371                                  ;       Out:            DF      0
  1372                                  ;                       ZF      1
  1373                                  ;                       AL      0
  1374                                  ;
  1375                                  ;-----------------------------------------------------------------------------------------------------------------------
  1376                                  PutTTYString            cld                                                     ;forward strings
  1377                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1378                                                          test    al,al                                           ;end of string?
  1379                                                          jz      .20                                             ;... yes, exit our loop
  1380                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1381                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1382                                                          jmp     .10                                             ;repeat until done
  1383                                  .20                     ret                                                     ;return
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  ;
  1386                                  ;       Loader Data
  1387                                  ;
  1388                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1389                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1390                                  ;
  1391                                  ;-----------------------------------------------------------------------------------------------------------------------
  1392                                                          align   2
  1393                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1394                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1395                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1396                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1397                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1398                                                          db      "Please press any key to restart the computer.",13,10,0
  1399                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1400                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1401                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1402                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1403                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1404                                  ;=======================================================================================================================
  1405                                  ;
  1406                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1407                                  ;
  1408                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1409                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1410                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1411                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1412                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1413                                  ;
  1414                                  ;=======================================================================================================================
  1415                                  ;=======================================================================================================================
  1416                                  ;
  1417                                  ;       Kernel Tables
  1418                                  ;
  1419                                  ;=======================================================================================================================
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1423                                  ;
  1424                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1425                                  ;       first descriptor must be all nulls.
  1426                                  ;
  1427                                  ;       6   5         4         3         2         1         0
  1428                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1429                                  ;       ----------------------------------------------------------------
  1430                                  ;       h......hffffmmmma......ab......................bn..............n
  1431                                  ;
  1432                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1433                                  ;               ffff                                                            flags
  1434                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1435                                  ;                       a......a                                                access
  1436                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1437                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1438                                  ;
  1439                                  ;       00000000                                                                all areas have base addresses below 2^24
  1440                                  ;               0...                                                            single-byte size granularity
  1441                                  ;               1...                                                            4-kilobyte size granularity
  1442                                  ;               .0..                                                            16-bit default for code segments
  1443                                  ;               .1..                                                            32-bit default for code segments
  1444                                  ;               ..0.                                                            intel-reserved; should be zero
  1445                                  ;               ...0                                                            available for operating system use
  1446                                  ;                   0000                                                        segment is less than 2^16 in size
  1447                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1448                                  ;                       1.......                                                segment is present in memory
  1449                                  ;                       .00.....                                                segment is of privilege level 0
  1450                                  ;                       ...0....                                                segment is of system or gate type
  1451                                  ;                       ...00010                                                local decriptor table (LDT)
  1452                                  ;                       ...01001                                                task state segment (TSS) available
  1453                                  ;                       ...01011                                                task state segment (TSS) busy
  1454                                  ;                       ...10...                                                data segment
  1455                                  ;                       ...10011                                                writable data (accessed)
  1456                                  ;                       ...11...                                                code segment
  1457                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1458                                  ;
  1459                                  ;-----------------------------------------------------------------------------------------------------------------------
  1460                                  section                 gdt                                                     ;global descriptor table
  1461                                                          dq      0000000000000000h                               ;00 required null selector
  1462                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1463                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1464                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1465                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1466                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1467                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1468                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1469                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1470                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1471                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1472                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1473                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1474                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1475                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1476                                  ;-----------------------------------------------------------------------------------------------------------------------
  1477                                  ;
  1478                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1479                                  ;
  1480                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1481                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1482                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1483                                  ;
  1484                                  ;       6   5         4         3         2         1         0
  1485                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1486                                  ;       ----------------------------------------------------------------
  1487                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1488                                  ;
  1489                                  ;       h...h   high-order offset (bits 16-31)
  1490                                  ;       P       present (0=unused interrupt)
  1491                                  ;       zz      descriptor privilege level
  1492                                  ;       S       storage segment (must be zero for IDT)
  1493                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1494                                  ;       S...S   handling code selector in GDT
  1495                                  ;       l...l   lo-order offset (bits 0-15)
  1496                                  ;
  1497                                  ;-----------------------------------------------------------------------------------------------------------------------
  1498                                  section                 idt                                                     ;interrupt descriptor table
  1499                                                          mint    dividebyzero                                    ;00 divide by zero
  1500                                                          mint    singlestep                                      ;01 single step
  1501                                                          mint    nmi                                             ;02 non-maskable
  1502                                                          mint    break                                           ;03 break
  1503                                                          mint    into                                            ;04 into
  1504                                                          mint    bounds                                          ;05 bounds
  1505                                                          mint    badopcode                                       ;06 bad op code
  1506                                                          mint    nocoproc                                        ;07 no coprocessor
  1507                                                          mint    doublefault                                     ;08 double-fault
  1508                                                          mint    operand                                         ;09 operand
  1509                                                          mint    badtss                                          ;0a bad TSS
  1510                                                          mint    notpresent                                      ;0b not-present
  1511                                                          mint    stacklimit                                      ;0c stack limit
  1512                                                          mint    protection                                      ;0d general protection fault
  1513                                                          mint    int14                                           ;0e (reserved)
  1514                                                          mint    int15                                           ;0f (reserved)
  1515                                                          mint    coproccalc                                      ;10 (reserved)
  1516                                                          mint    int17                                           ;11 (reserved)
  1517                                                          mint    int18                                           ;12 (reserved)
  1518                                                          mint    int19                                           ;13 (reserved)
  1519                                                          mint    int20                                           ;14 (reserved)
  1520                                                          mint    int21                                           ;15 (reserved)
  1521                                                          mint    int22                                           ;16 (reserved)
  1522                                                          mint    int23                                           ;17 (reserved)
  1523                                                          mint    int24                                           ;18 (reserved)
  1524                                                          mint    int25                                           ;19 (reserved)
  1525                                                          mint    int26                                           ;1a (reserved)
  1526                                                          mint    int27                                           ;1b (reserved)
  1527                                                          mint    int28                                           ;1c (reserved)
  1528                                                          mint    int29                                           ;1d (reserved)
  1529                                                          mint    int30                                           ;1e (reserved)
  1530                                                          mint    int31                                           ;1f (reserved)
  1531                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1532                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1533                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1534                                                          mtrap   com2                                            ;23 IRQ3 com2
  1535                                                          mtrap   com1                                            ;24 IRQ4 com1
  1536                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1537                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1538                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1539                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1540                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1541                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1542                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1543                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1544                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1545                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1546                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1547                                                          mtrap   svc                                             ;30 OS services
  1548                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1549                                  ;=======================================================================================================================
  1550                                  ;
  1551                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1552                                  ;
  1553                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1554                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1555                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1556                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1557                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1558                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1559                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1560                                  ;
  1561                                  ;=======================================================================================================================
  1562                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1563                                                          cpu     386                                             ;allow 80386 instructions
  1564                                                          bits    32                                              ;this is 32-bit code
  1565                                  ;=======================================================================================================================
  1566                                  ;
  1567                                  ;       CPU Interrupt Handlers
  1568                                  ;
  1569                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1570                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1571                                  ;
  1572                                  ;=======================================================================================================================
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                  ;
  1575                                  ;       INT0    Divide By Zero
  1576                                  ;
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                                          menter  dividebyzero                                    ;divide by zero
  1579                                                          push    0                                               ;store interrupt nbr
  1580                                                          push    czIntDivideByZero                               ;store message offset
  1581                                                          jmp     ReportInterrupt                                 ;report interrupt
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                  ;
  1584                                  ;       INT1    Single Step
  1585                                  ;
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                                          menter  singlestep                                      ;single step
  1588                                                          push    1                                               ;store interrupt nbr
  1589                                                          push    czIntSingleStep                                 ;store message offset
  1590                                                          jmp     ReportInterrupt                                 ;report interrupt
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT2    Non-Maskable Interrupt
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  nmi                                             ;non-maskable
  1597                                                          push    2                                               ;store interrupt nbr
  1598                                                          push    czIntNonMaskable                                ;store message offset
  1599                                                          jmp     ReportInterrupt                                 ;report interrupt
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;
  1602                                  ;       INT3    Break
  1603                                  ;
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                                          menter  break                                           ;break
  1606                                                          push    3                                               ;store interrupt nbr
  1607                                                          push    czIntBreak                                      ;store message offset
  1608                                                          jmp     ReportInterrupt                                 ;report interrupt
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT4    Into
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  into                                            ;into
  1615                                                          push    4                                               ;store interrupt nbr
  1616                                                          push    czIntInto                                       ;store message offset
  1617                                                          jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT5    Bounds
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  bounds                                          ;bounds
  1624                                                          push    5                                               ;store interrupt nbr
  1625                                                          push    czIntBounds                                     ;store message offset
  1626                                                          jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT6    Bad Operation Code
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  badopcode                                       ;bad opcode interrupt
  1633                                                          push    6                                               ;store interrupt nbr
  1634                                                          push    czIntBadOpCode                                  ;store message offset
  1635                                                          jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT7    No Coprocessor
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1642                                                          push    7                                               ;store interrupt nbr
  1643                                                          push    czIntNoCoprocessor                              ;store message offset
  1644                                                          jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT8    Double Fault
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  doublefault                                     ;doublefault interrupt
  1651                                                          push    8                                               ;store interrupt nbr
  1652                                                          push    czIntDoubleFault                                ;store message offset
  1653                                                          jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT9    Operand
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  operand                                         ;operand interrupt
  1660                                                          push    9                                               ;store interrupt nbr
  1661                                                          push    czIntOperand                                    ;store message offset
  1662                                                          jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT10   Bad Task State Segment
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  badtss                                          ;bad TSS interrupt
  1669                                                          push    10                                              ;store interrupt nbr
  1670                                                          push    czIntBadTSS                                     ;store message offset
  1671                                                          jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT11   Not Present
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  notpresent                                      ;not present interrupt
  1678                                                          push    11                                              ;store interrupt nbr
  1679                                                          push    czIntNotPresent                                 ;store message offset
  1680                                                          jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT12   Stack Limit
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  stacklimit                                      ;stack limit interrupt
  1687                                                          push    12                                              ;store interrupt nbr
  1688                                                          push    czIntStackLimit                                 ;store message offset
  1689                                                          jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT13   General Protection Fault
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  protection                                      ;protection fault interrupt
  1696                                                          push    13                                              ;store interrupt nbr
  1697                                                          push    czIntProtection                                 ;store message offset
  1698                                                          jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT14   Reserved
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  int14                                           ;(reserved)
  1705                                                          push    14                                              ;store interrupt nbr
  1706                                                          push    czIntReserved                                   ;store message offset
  1707                                                          jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT15   Reserved
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  int15                                           ;(reserved)
  1714                                                          push    15                                              ;store interrupt nbr
  1715                                                          push    czIntReserved                                   ;store message offset
  1716                                                          jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT16   Coprocessor Calculation
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  coproccalc                                      ;coprocessor calculation
  1723                                                          push    16                                              ;store interrupt nbr
  1724                                                          push    czIntCoprocessorCalc                            ;store message offset
  1725                                                          jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT17   Reserved
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  int17                                           ;(reserved)
  1732                                                          push    17                                              ;store interrupt nbr
  1733                                                          push    czIntReserved                                   ;store message offset
  1734                                                          jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT18   Reserved
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  int18                                           ;(reserved)
  1741                                                          push    18                                              ;store interrupt nbr
  1742                                                          push    czIntReserved                                   ;store message offset
  1743                                                          jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT19   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int19                                           ;(reserved)
  1750                                                          push    19                                              ;store interrupt nbr
  1751                                                          push    czIntReserved                                   ;store message offset
  1752                                                          jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT20   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int20                                           ;(reserved)
  1759                                                          push    20                                              ;store interrupt nbr
  1760                                                          push    czIntReserved                                   ;store message offset
  1761                                                          jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT21   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int21                                           ;(reserved)
  1768                                                          push    21                                              ;store interrupt nbr
  1769                                                          push    czIntReserved                                   ;store message offset
  1770                                                          jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT22   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int22                                           ;(reserved)
  1777                                                          push    22                                              ;store interrupt nbr
  1778                                                          push    czIntReserved                                   ;store message offset
  1779                                                          jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT23   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int23                                           ;(reserved)
  1786                                                          push    23                                              ;store interrupt nbr
  1787                                                          push    czIntReserved                                   ;store message offset
  1788                                                          jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT24   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int24                                           ;(reserved)
  1795                                                          push    24                                              ;store interrupt nbr
  1796                                                          push    czIntReserved                                   ;store message offset
  1797                                                          jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       INT25   Reserved
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                                          menter  int25                                           ;(reserved)
  1804                                                          push    25                                              ;store interrupt nbr
  1805                                                          push    czIntReserved                                   ;store message offset
  1806                                                          jmp     ReportInterrupt                                 ;report interrupt
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT26   Reserved
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  int26                                           ;(reserved)
  1813                                                          push    26                                              ;store interrupt nbr
  1814                                                          push    czIntReserved                                   ;store message offset
  1815                                                          jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT27   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int27                                           ;(reserved)
  1822                                                          push    27                                              ;store interrupt nbr
  1823                                                          push    czIntReserved                                   ;store message offset
  1824                                                          jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT28   Reserved
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  int28                                           ;(reserved)
  1831                                                          push    28                                              ;store interrupt nbr
  1832                                                          push    czIntReserved                                   ;store message offset
  1833                                                          jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT29   Reserved
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  int29                                           ;(reserved)
  1840                                                          push    29                                              ;store interrupt nbr
  1841                                                          push    czIntReserved                                   ;store message offset
  1842                                                          jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT30   Reserved
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  int30                                           ;(reserved)
  1849                                                          push    30                                              ;store interrupt nbr
  1850                                                          push    czIntReserved                                   ;store message offset
  1851                                                          jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT31   Reserved
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  int31                                           ;(reserved)
  1858                                                          push    31                                              ;store interrupt nbr
  1859                                                          push    czIntReserved                                   ;store message offset
  1860                                                          jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       Routine:        ReportInterrupt
  1864                                  ;
  1865                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1866                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1867                                  ;
  1868                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1869                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  ReportInterrupt         pop     eax                                             ;error message address
  1873                                                          pop     eax                                             ;interrupt number
  1874                                                          iretd                                                   ;return
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       Processor Interrupt Name Strings
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  czIntDivideByZero       db      "Division by zero",0
  1881                                  czIntSingleStep         db      "Single step",0
  1882                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1883                                  czIntBreak              db      "Break",0
  1884                                  czIntInto               db      "Into",0
  1885                                  czIntBounds             db      "Bounds",0
  1886                                  czIntBadOpCode          db      "Bad Operation Code",0
  1887                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1888                                  czIntDoubleFault        db      "Double Fault",0
  1889                                  czIntOperand            db      "Operand",0
  1890                                  czIntBadTSS             db      "Bad Task State Segment",0
  1891                                  czIntNotPresent         db      "Not Present",0
  1892                                  czIntStackLimit         db      "Stack Limit",0
  1893                                  czIntProtection         db      "General Protection Fault",0
  1894                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1895                                  czIntReserved           db      "Reserved",0
  1896                                  ;=======================================================================================================================
  1897                                  ;
  1898                                  ;       Hardware Device Interupts
  1899                                  ;
  1900                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1901                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1902                                  ;       (BX=2028h).
  1903                                  ;
  1904                                  ;=======================================================================================================================
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;       IRQ0    Clock Tick Interrupt
  1908                                  ;
  1909                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1910                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1911                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1912                                  ;
  1913                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1914                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1915                                  ;
  1916                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1917                                  ;       zero, the floppy disk motors are turned off.
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                                          menter  clocktick                                       ;clock tick interrupt
  1921                                                          push    eax                                             ;save non-volatile regs
  1922                                                          push    edx                                             ;
  1923                                                          push    ds                                              ;
  1924                                  ;
  1925                                  ;       Update the clock tick count and the elapsed days as needed.
  1926                                  ;
  1927                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1928                                                          pop     ds                                              ;... into data segment register
  1929                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1930                                                          inc     eax                                             ;increment clock ticks
  1931                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1932                                                          jb      irq0.10                                         ;no, skip ahead
  1933                                                          inc     byte [wbClockDays]                              ;increment clock days
  1934                                                          xor     eax,eax                                         ;reset clock ticks
  1935                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1936                                  ;
  1937                                  ;       Decrement floppy disk motor timeout.
  1938                                  ;
  1939                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1940                                                          je      irq0.20                                         ;yes, skip ahead
  1941                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1942                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1943                                  ;
  1944                                  ;       Turn off the floppy disk motor if appropriate.
  1945                                  ;
  1946                                                          sti                                                     ;enable maskable interrupts
  1947                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1948                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1949                                                          in      al,dx                                           ;FDC main status byte
  1950                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1951                                                          jnz     irq0.15                                         ;wait while busy
  1952                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1953                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1954                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1955                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1956                                                          out     dx,al                                           ;turn motor off
  1957                                  ;
  1958                                  ;       Signal the end of the hardware interrupt.
  1959                                  ;
  1960                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1961                                  ;
  1962                                  ;       Restore and return.
  1963                                  ;
  1964                                                          pop     ds                                              ;restore modified regs
  1965                                                          pop     edx                                             ;
  1966                                                          pop     eax                                             ;
  1967                                                          iretd                                                   ;return
  1968                                  ;-----------------------------------------------------------------------------------------------------------------------
  1969                                  ;
  1970                                  ;       IRQ1    Keyboard Interrupt
  1971                                  ;
  1972                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1973                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1974                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1975                                  ;       ALL modified registers upon return.
  1976                                  ;
  1977                                  ;-----------------------------------------------------------------------------------------------------------------------
  1978                                                          menter  keyboard                                        ;keyboard interrrupt
  1979                                                          push    eax                                             ;save non-volatile regs
  1980                                                          push    ebx                                             ;
  1981                                                          push    ecx                                             ;
  1982                                                          push    esi                                             ;
  1983                                                          push    ds                                              ;
  1984                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1985                                                          pop     ds                                              ;... into data segment register
  1986                                                          xor     al,al                                           ;zero
  1987                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1988                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1989                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1990                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  1991                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  1992                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  1993                                                          mov     al,' '                                          ;space
  1994                                                          mov     [wbConsoleChar],al                              ;set character to space
  1995                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1996                                                          not     al                                              ;controller timeout mask
  1997                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1998                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  1999                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2000                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2001                                                          jz      irq1.140                                        ;yes, skip ahead
  2002                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2003                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2004                                                          mov     ah,al                                           ;copy scan code 0
  2005                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2006                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2007                                                          je      irq1.30                                         ;yes, set flag
  2008                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2009                                                          je      irq1.40                                         ;yes, reset flag
  2010                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2011                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2012                                                          je      irq1.30                                         ;yes, set flag
  2013                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2014                                                          je      irq1.40                                         ;yes, reset flag
  2015                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2016                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2017                                                          je      irq1.30                                         ;yes, set flag
  2018                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2019                                                          je      irq1.40                                         ;yes, reset flag
  2020                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2021                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2022                                                          je      irq1.30                                         ;yes, set flag
  2023                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2024                                                          je      irq1.40                                         ;yes, reset flag
  2025                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2026                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2027                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2028                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2029                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2030                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2031                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2032                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2033                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2034                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2035                                                          jne     irq1.70                                         ;no, skip ahead
  2036                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2037                                                          jz      irq1.140                                        ;yes, skip ahead
  2038                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2039                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2040                                                          mov     ah,al                                           ;copy scan code 1
  2041                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2042                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2043                                                          je      irq1.30                                         ;yes, set flag
  2044                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2045                                                          je      irq1.40                                         ;yes, reset flag
  2046                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2047                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2048                                                          je      irq1.30                                         ;yes, set flag
  2049                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2050                                                          je      irq1.40                                         ;yes, reset flag
  2051                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2052                                                          je      irq1.80                                         ;yes, skip ahead
  2053                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2054                                                          je      irq1.80                                         ;yes, skip ahead
  2055                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2056                                                          je      irq1.10                                         ;yes, continue
  2057                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2058                                                          jne     irq1.20                                         ;no, skip ahead
  2059                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2060                                                          jz      irq1.140                                        ;yes, skip ahead
  2061                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2062                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2063                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2064                                                          jz      irq1.140                                        ;yes, skip ahead
  2065                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2066                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2067                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2068                                  irq1.30                 or      bl,al                                           ;set shift flag
  2069                                                          jmp     irq1.60                                         ;skip ahead
  2070                                  irq1.40                 not     al                                              ;convert flag to mask
  2071                                                          and     bl,al                                           ;reset shift flag
  2072                                                          jmp     irq1.60                                         ;skip ahead
  2073                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2074                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2075                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2076                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2077                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2078                                                          jmp     irq1.150                                        ;finish keyboard handling
  2079                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2080                                                          jne     irq1.80                                         ;no continue
  2081                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2082                                                          jz      irq1.140                                        ;yes, skip ahead
  2083                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2084                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2085                                                          mov     ah,al                                           ;copy scan code 1
  2086                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2087                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2088                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2089                                                          jz      irq1.140                                        ;yes, skip ahead
  2090                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2091                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2092                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2093                                                          jz      irq1.140                                        ;yes, skip ahead
  2094                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2095                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2096                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2097                                                          jz      irq1.140                                        ;yes, skip ahead
  2098                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2099                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2100                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2101                                                          jz      irq1.140                                        ;yes, skip ahead
  2102                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2103                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2104                                                          jmp     irq1.150                                        ;continue
  2105                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2106                                                          test    ah,EKEYBUP                                      ;release code?
  2107                                                          jnz     irq1.130                                        ;yes, skip ahead
  2108                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2109                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2110                                                          jz      irq1.90                                         ;no, skip ahead
  2111                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2112                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2113                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2114                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2115                                                          jz      irq1.100                                        ;no skip ahead
  2116                                                          mov     cl,al                                           ;copy ASCII code
  2117                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2118                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2119                                                          jb      irq1.100                                        ;yes, skip ahead
  2120                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2121                                                          ja      irq1.100                                        ;yes, skip ahead
  2122                                                          xor     al,EASCIICASE                                   ;switch case
  2123                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2124                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2125                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2126                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2127                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2128                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2129                                                          pop     ds                                              ;restore non-volatile regs
  2130                                                          pop     esi                                             ;
  2131                                                          pop     ecx                                             ;
  2132                                                          pop     ebx                                             ;
  2133                                                          pop     eax                                             ;
  2134                                                          iretd                                                   ;return
  2135                                  ;-----------------------------------------------------------------------------------------------------------------------
  2136                                  ;       Scan-Code to ASCII Translation Tables
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2139                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2140                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2141                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2142                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2143                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2144                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2145                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2146                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2147                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2148                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2149                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2150                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2151                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2152                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2153                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2154                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2155                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2156                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2157                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2158                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2159                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2160                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2161                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2162                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2163                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2164                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2165                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2166                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2167                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2168                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2169                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2170                                  ;-----------------------------------------------------------------------------------------------------------------------
  2171                                  ;
  2172                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2173                                  ;
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                                          menter  iochannel                                       ;secondary 8259A cascade
  2176                                                          push    eax                                             ;save modified regs
  2177                                                          jmp     hwint                                           ;end interrupt and return
  2178                                  ;-----------------------------------------------------------------------------------------------------------------------
  2179                                  ;
  2180                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2181                                  ;
  2182                                  ;-----------------------------------------------------------------------------------------------------------------------
  2183                                                          menter  com2                                            ;serial port 2 interrupt
  2184                                                          push    eax                                             ;save modified regs
  2185                                                          jmp     hwint                                           ;end interrupt and return
  2186                                  ;-----------------------------------------------------------------------------------------------------------------------
  2187                                  ;
  2188                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2189                                  ;
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                                          menter  com1                                            ;serial port 1 interrupt
  2192                                                          push    eax                                             ;save modified regs
  2193                                                          jmp     hwint                                           ;end interrupt and return
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2197                                  ;
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2200                                                          push    eax                                             ;save modified regs
  2201                                                          jmp     hwint                                           ;end interrupt and return
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                  ;
  2204                                  ;       IRQ6    Diskette Hardware Interrupt
  2205                                  ;
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                                          menter  diskette                                        ;floppy disk interrupt
  2208                                                          push    eax                                             ;save non-volatile regs
  2209                                                          push    ds                                              ;
  2210                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2211                                                          pop     ds                                              ;... into DS register
  2212                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2213                                                          or      al,10000000b                                    ;set IRQ flag
  2214                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2215                                                          pop     ds                                              ;restore non-volatile regs
  2216                                                          jmp     hwint                                           ;end primary PIC interrupt
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2223                                                          push    eax                                             ;save modified regs
  2224                                                          jmp     hwint                                           ;end interrupt and return
  2225                                  ;-----------------------------------------------------------------------------------------------------------------------
  2226                                  ;
  2227                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2228                                  ;
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230                                                          menter  rtclock                                         ;real-time clock interrupt
  2231                                                          push    eax                                             ;save modified regs
  2232                                                          jmp     hwwint                                          ;end interrupt and return
  2233                                  ;-----------------------------------------------------------------------------------------------------------------------
  2234                                  ;
  2235                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2236                                  ;
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2239                                                          push    eax                                             ;save modified regs
  2240                                                          jmp     hwwint                                          ;end interrupt and return
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  ;
  2243                                  ;       IRQ10   Reserved Hardware Interrupt
  2244                                  ;
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                                          menter  irq10                                           ;reserved
  2247                                                          push    eax                                             ;save modified regs
  2248                                                          jmp     hwwint                                          ;end interrupt and return
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  ;
  2251                                  ;       IRQ11   Reserved Hardware Interrupt
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                                          menter  irq11                                           ;reserved
  2255                                                          push    eax                                             ;save modified regs
  2256                                                          jmp     hwwint                                          ;end interrupt and return
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                  ;
  2259                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2260                                  ;
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2263                                                          push    eax                                             ;save modified regs
  2264                                                          jmp     hwwint                                          ;end interrupt and return
  2265                                  ;-----------------------------------------------------------------------------------------------------------------------
  2266                                  ;
  2267                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2268                                  ;
  2269                                  ;-----------------------------------------------------------------------------------------------------------------------
  2270                                                          menter  coprocessor                                     ;coprocessor interrupt
  2271                                                          push    eax                                             ;save modified regs
  2272                                                          jmp     hwwint                                          ;end interrupt and return
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  ;
  2275                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2276                                  ;
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2279                                                          push    eax                                             ;save modified regs
  2280                                                          jmp     hwwint                                          ;end interrupt and return
  2281                                  ;-----------------------------------------------------------------------------------------------------------------------
  2282                                  ;
  2283                                  ;       IRQ15   Reserved Hardware Interrupt
  2284                                  ;
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                                          menter  irq15                                           ;reserved
  2287                                                          push    eax                                             ;save modified regs
  2288                                                          jmp     hwwint                                          ;end interrupt and return
  2289                                  ;-----------------------------------------------------------------------------------------------------------------------
  2290                                  ;
  2291                                  ;       Exit from hardware interrupt
  2292                                  ;
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2295                                                          jmp     hwint90                                         ;skip ahead
  2296                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2297                                  hwint90                 pop     eax                                             ;restore modified regs
  2298                                                          iretd                                                   ;return from interrupt
  2299                                  ;-----------------------------------------------------------------------------------------------------------------------
  2300                                  ;
  2301                                  ;       INT 30h Operating System Software Service Interrupt
  2302                                  ;
  2303                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2304                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2305                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2306                                  ;       the entry address of the specific function from a table.
  2307                                  ;
  2308                                  ;-----------------------------------------------------------------------------------------------------------------------
  2309                                                          menter  svc
  2310                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2311                                                          jae     svc90                                           ;yes, skip ahead
  2312                                                          movzx   eax,al                                          ;function
  2313                                                          shl     eax,2                                           ;offset into table
  2314                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2315                                  svc90                   iretd                                                   ;return from interrupt
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                  ;
  2318                                  ;       Service Request Table
  2319                                  ;
  2320                                  ;
  2321                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2322                                  ;
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2325                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2326                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2327                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2328                                  ;-----------------------------------------------------------------------------------------------------------------------
  2329                                  ;
  2330                                  ;       Service Request Macros
  2331                                  ;
  2332                                  ;       These macros provide positional parameterization of service request calls.
  2333                                  ;
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  %macro                  clearConsoleScreen 0
  2336                                                          mov     al,eClearConsoleScreen                          ;function code
  2337                                                          int     _svc                                            ;invoke OS service
  2338                                  %endmacro
  2339                                  %macro                  placeCursor 0
  2340                                                          mov     al,ePlaceCursor                                 ;function code
  2341                                                          int     _svc                                            ;invoke OS service
  2342                                  %endmacro
  2343                                  %macro                  putConsoleString 1
  2344                                                          mov     edx,%1                                          ;string address
  2345                                                          mov     al,ePutConsoleString                            ;function code
  2346                                                          int     _svc                                            ;invoke OS service
  2347                                  %endmacro
  2348                                  ;=======================================================================================================================
  2349                                  ;
  2350                                  ;       Kernel Function Library
  2351                                  ;
  2352                                  ;=======================================================================================================================
  2353                                  ;=======================================================================================================================
  2354                                  ;
  2355                                  ;       Console Helper Routines
  2356                                  ;
  2357                                  ;       FirstConsoleColumn
  2358                                  ;       NextConsoleColumn
  2359                                  ;       NextConsoleRow
  2360                                  ;       PutConsoleChar
  2361                                  ;       PutConsoleHexByte
  2362                                  ;       PutConsoleOIAChar
  2363                                  ;       PutConsoleOIAShift
  2364                                  ;       PutConsoleString
  2365                                  ;
  2366                                  ;=======================================================================================================================
  2367                                  ;-----------------------------------------------------------------------------------------------------------------------
  2368                                  ;
  2369                                  ;       Routine:        FirstConsoleColumn
  2370                                  ;
  2371                                  ;       Description:    This routine resets the console column to start of the row.
  2372                                  ;
  2373                                  ;       In:             DS      OS data selector
  2374                                  ;
  2375                                  ;-----------------------------------------------------------------------------------------------------------------------
  2376                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2377                                                          mov     [wbConsoleColumn],al                            ;save column
  2378                                                          ret                                                     ;return
  2379                                  ;-----------------------------------------------------------------------------------------------------------------------
  2380                                  ;
  2381                                  ;       Routine:        NextConsoleColumn
  2382                                  ;
  2383                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2384                                  ;                       incremented if the end of the current row is reached.
  2385                                  ;
  2386                                  ;       In:             DS      OS data selector
  2387                                  ;
  2388                                  ;-----------------------------------------------------------------------------------------------------------------------
  2389                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2390                                                          inc     al                                              ;increment column
  2391                                                          mov     [wbConsoleColumn],al                            ;save column
  2392                                                          cmp     al,ECONCOLS                                     ;end of row?
  2393                                                          jb      .10                                             ;no, skip ahead
  2394                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2395                                                          call    NextConsoleRow                                  ;line feed to next row
  2396                                  .10                     ret                                                     ;return
  2397                                  ;-----------------------------------------------------------------------------------------------------------------------
  2398                                  ;
  2399                                  ;       Routine:        NextConsoleRow
  2400                                  ;
  2401                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2402                                  ;
  2403                                  ;       In:             DS      OS data selector
  2404                                  ;
  2405                                  ;-----------------------------------------------------------------------------------------------------------------------
  2406                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2407                                                          inc     al                                              ;increment row
  2408                                                          mov     [wbConsoleRow],al                               ;save row
  2409                                                          cmp     al,ECONROWS                                     ;end of screen?
  2410                                                          jb      .10                                             ;no, skip ahead
  2411                                                          call    ScrollConsoleRow                                ;scroll up one row
  2412                                                          mov     al,[wbConsoleRow]                               ;row
  2413                                                          dec     al                                              ;decrement row
  2414                                                          mov     [wbConsoleRow],al                               ;save row
  2415                                  .10                     ret                                                     ;return
  2416                                  ;-----------------------------------------------------------------------------------------------------------------------
  2417                                  ;
  2418                                  ;       Routine:        PutConsoleChar
  2419                                  ;
  2420                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2421                                  ;
  2422                                  ;       In:             AL      ASCII character
  2423                                  ;                       DS      OS data selector
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2427                                                          push    es                                              ;
  2428                                                          push    EGDTCGA                                         ;load CGA selector ...
  2429                                                          pop     es                                              ;... into extra segment reg
  2430                                                          mov     cl,[wbConsoleColumn]                            ;column
  2431                                                          mov     ch,[wbConsoleRow]                               ;row
  2432                                                          call    SetConsoleChar                                  ;put character at row, column
  2433                                                          pop     es                                              ;restore non-volatile regs
  2434                                                          pop     ecx                                             ;
  2435                                                          ret                                                     ;return
  2436                                  ;-----------------------------------------------------------------------------------------------------------------------
  2437                                  ;
  2438                                  ;       Routine:        PutConsoleHexByte
  2439                                  ;
  2440                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2441                                  ;
  2442                                  ;       In:             AL      byte value
  2443                                  ;                       CL      column
  2444                                  ;                       CH      row
  2445                                  ;                       DS      OS data selector
  2446                                  ;                       ES      CGA selector
  2447                                  ;
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2450                                                          mov     bl,al                                           ;save byte value
  2451                                                          shr     al,4                                            ;hi-order nybble
  2452                                                          or      al,030h                                         ;apply ASCII zone
  2453                                                          cmp     al,03ah                                         ;numeric?
  2454                                                          jb      .10                                             ;yes, skip ahead
  2455                                                          add     al,7                                            ;add ASCII offset for alpha
  2456                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  2457                                                          mov     al,bl                                           ;byte value
  2458                                                          and     al,0fh                                          ;lo-order nybble
  2459                                                          or      al,30h                                          ;apply ASCII zone
  2460                                                          cmp     al,03ah                                         ;numeric?
  2461                                                          jb      .20                                             ;yes, skip ahead
  2462                                                          add     al,7                                            ;add ASCII offset for alpha
  2463                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2464                                                          pop     ebx                                             ;restore non-volatile regs
  2465                                                          ret                                                     ;return
  2466                                  ;-----------------------------------------------------------------------------------------------------------------------
  2467                                  ;
  2468                                  ;       Routine:        PutConsoleOIAChar
  2469                                  ;
  2470                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2471                                  ;
  2472                                  ;       In:             DS      OS data selector
  2473                                  ;
  2474                                  ;-----------------------------------------------------------------------------------------------------------------------
  2475                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2476                                                          push    ecx                                             ;
  2477                                                          push    esi                                             ;
  2478                                                          push    ds                                              ;
  2479                                                          push    es                                              ;
  2480                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2481                                                          pop     ds                                              ;... into data segment register
  2482                                                          push    EGDTCGA                                         ;load CGA selector ...
  2483                                                          pop     es                                              ;... into extra segment register
  2484                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2485                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2486                                                          mov     bl,0                                            ;starting column
  2487                                                          mov     ecx,6                                           ;maximum scan codes
  2488                                  .10                     push    ecx                                             ;save remaining count
  2489                                                          mov     ecx,ebx                                         ;row, column
  2490                                                          lodsb                                                   ;read scan code
  2491                                                          or      al,al                                           ;scan code present?
  2492                                                          jz      .20                                             ;no, skip ahead
  2493                                                          call    PutConsoleHexByte                               ;display scan code
  2494                                                          jmp     .30                                             ;continue
  2495                                  .20                     mov     al,' '                                          ;ASCII space
  2496                                                          call    SetConsoleChar                                  ;display space
  2497                                                          mov     al,' '                                          ;ASCII space
  2498                                                          call    SetConsoleChar                                  ;display space
  2499                                  .30                     add     bl,2                                            ;next column (+2)
  2500                                                          pop     ecx                                             ;restore remaining
  2501                                                          loop    .10                                             ;next code
  2502                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2503                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2504                                                          jb      .40                                             ;no, skip ahead
  2505                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2506                                                          ja      .40                                             ;no, skip ahead
  2507                                                          mov     ch,bh                                           ;OIA row
  2508                                                          mov     cl,40                                           ;character display column
  2509                                                          call    SetConsoleChar                                  ;display ASCII character
  2510                                  .40                     pop     es                                              ;restore non-volatile regs
  2511                                                          pop     ds                                              ;
  2512                                                          pop     esi                                             ;
  2513                                                          pop     ecx                                             ;
  2514                                                          pop     ebx                                             ;
  2515                                                          ret                                                     ;return
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  ;
  2518                                  ;       Routine:        PutConsoleOIAShift
  2519                                  ;
  2520                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2521                                  ;
  2522                                  ;       In:             BL      shift flags
  2523                                  ;                       BH      lock flags
  2524                                  ;                       DS      OS data selector
  2525                                  ;
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2528                                                          push    es                                              ;
  2529                                                          push    EGDTCGA                                         ;load CGA selector ...
  2530                                                          pop     es                                              ;... into ES register
  2531                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2532                                                          mov     al,EASCIISPACE                                  ;space is default character
  2533                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2534                                                          jz      .10                                             ;no, skip ahead
  2535                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2536                                  .10                     mov     cl,14                                           ;indicator column
  2537                                                          call    SetConsoleChar                                  ;display ASCII character
  2538                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2539                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2540                                                          jz      .20                                             ;no, skip ahead
  2541                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2542                                  .20                     mov     cl,64                                           ;indicator column
  2543                                                          call    SetConsoleChar                                  ;display ASCII character
  2544                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2545                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2546                                                          jz      .30                                             ;no, skip ahead
  2547                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2548                                  .30                     mov     cl,15                                           ;indicator column
  2549                                                          call    SetConsoleChar                                  ;display ASCII character
  2550                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2551                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2552                                                          jz      .40                                             ;no, skip ahead
  2553                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2554                                  .40                     mov     cl,63                                           ;indicator column
  2555                                                          call    SetConsoleChar                                  ;display ASCII character
  2556                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2557                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2558                                                          jz      .50                                             ;no, skip ahead
  2559                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2560                                  .50                     mov     cl,16                                           ;indicator column
  2561                                                          call    SetConsoleChar                                  ;display ASCII character
  2562                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2563                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2564                                                          jz      .60                                             ;no, skip ahead
  2565                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2566                                  .60                     mov     cl,62                                           ;indicator column
  2567                                                          call    SetConsoleChar                                  ;display ASCII character
  2568                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2569                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2570                                                          jz      .70                                             ;no, skip ahead
  2571                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2572                                  .70                     mov     cl,78                                           ;indicator column
  2573                                                          call    SetConsoleChar                                  ;display ASCII character
  2574                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2575                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2576                                                          jz      .80                                             ;no, skip ahead
  2577                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2578                                  .80                     mov     cl,77                                           ;indicator column
  2579                                                          call    SetConsoleChar                                  ;display ASCII character
  2580                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2581                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2582                                                          jz      .90                                             ;no, skip ahead
  2583                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2584                                  .90                     mov     cl,76                                           ;indicator column
  2585                                                          call    SetConsoleChar                                  ;display ASCII character
  2586                                                          pop     es                                              ;restore non-volatile regs
  2587                                                          pop     ecx                                             ;
  2588                                                          ret                                                     ;return
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                  ;
  2591                                  ;       Routine:        PutConsoleString
  2592                                  ;
  2593                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2594                                  ;                       console position as needed.
  2595                                  ;
  2596                                  ;       In:             EDX     source address
  2597                                  ;                       DS      OS data selector
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2601                                                          mov     esi,edx                                         ;source address
  2602                                                          cld                                                     ;forward strings
  2603                                  .10                     lodsb                                                   ;ASCII character
  2604                                                          or      al,al                                           ;end of string?
  2605                                                          jz      .40                                             ;yes, skip ahead
  2606                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2607                                                          jne     .20                                             ;no, skip ahead
  2608                                                          call    FirstConsoleColumn                              ;move to start of row
  2609                                                          jmp     .10                                             ;next character
  2610                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2611                                                          jne     .30                                             ;no, skip ahead
  2612                                                          call    NextConsoleRow                                  ;move to next row
  2613                                                          jmp     .10                                             ;next character
  2614                                  .30                     call    PutConsoleChar                                  ;output character to console
  2615                                                          call    NextConsoleColumn                               ;advance to next column
  2616                                                          jmp     .10                                             ;next character
  2617                                  .40                     pop     esi                                             ;restore non-volatile regs
  2618                                                          ret                                                     ;return
  2619                                  ;=======================================================================================================================
  2620                                  ;
  2621                                  ;       Memory-Mapped Video Routines
  2622                                  ;
  2623                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2624                                  ;
  2625                                  ;       ClearConsoleScreen
  2626                                  ;       ScrollConsoleRow
  2627                                  ;       SetConsoleChar
  2628                                  ;
  2629                                  ;=======================================================================================================================
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  ;
  2632                                  ;       Routine:        ClearConsoleScreen
  2633                                  ;
  2634                                  ;       Description:    This routine clears the console (CGA) screen.
  2635                                  ;
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2638                                                          push    edi                                             ;
  2639                                                          push    ds                                              ;
  2640                                                          push    es                                              ;
  2641                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2642                                                          pop     ds                                              ;... into DS register
  2643                                                          push    EGDTCGA                                         ;load CGA selector ...
  2644                                                          pop     es                                              ;... into ES register
  2645                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2646                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2647                                                          xor     edi,edi                                         ;target offset
  2648                                                          cld                                                     ;forward strings
  2649                                                          rep     stosd                                           ;reset screen body
  2650                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2651                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2652                                                          rep     stosd                                           ;reset OIA line
  2653                                                          xor     al,al                                           ;zero register
  2654                                                          mov     [wbConsoleRow],al                               ;reset console row
  2655                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2656                                                          call    PlaceCursor                                     ;place cursor at current position
  2657                                                          pop     es                                              ;restore non-volatile regs
  2658                                                          pop     ds                                              ;
  2659                                                          pop     edi                                             ;
  2660                                                          pop     ecx                                             ;
  2661                                                          ret                                                     ;return
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                  ;
  2664                                  ;       Routine:        ScrollConsoleRow
  2665                                  ;
  2666                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2670                                                          push    esi                                             ;
  2671                                                          push    edi                                             ;
  2672                                                          push    ds                                              ;
  2673                                                          push    es                                              ;
  2674                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2675                                                          pop     ds                                              ;... into DS
  2676                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2677                                                          pop     es                                              ;... into ES
  2678                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2679                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2680                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2681                                                          cld                                                     ;forward strings
  2682                                                          rep     movsd                                           ;move 24 lines up
  2683                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2684                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2685                                                          rep     stosd                                           ;clear bottom row
  2686                                                          pop     es                                              ;restore non-volatile regs
  2687                                                          pop     ds                                              ;
  2688                                                          pop     edi                                             ;
  2689                                                          pop     esi                                             ;
  2690                                                          pop     ecx                                             ;
  2691                                                          ret                                                     ;return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       Routine:        SetConsoleChar
  2695                                  ;
  2696                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2697                                  ;
  2698                                  ;       In:             AL      ASCII character
  2699                                  ;                       CL      column
  2700                                  ;                       CH      row
  2701                                  ;                       ES      CGA selector
  2702                                  ;
  2703                                  ;       Out:            EAX     last target address written (ES:)
  2704                                  ;                       CL      column + 1
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2708                                                          movzx   eax,ch                                          ;row
  2709                                                          mov     ah,ECONCOLS                                     ;cols/row
  2710                                                          mul     ah                                              ;row * cols/row
  2711                                                          add     al,cl                                           ;add column
  2712                                                          adc     ah,0                                            ;handle carry
  2713                                                          shl     eax,1                                           ;screen offset
  2714                                                          mov     [es:eax],dl                                     ;store character
  2715                                                          inc     cl                                              ;next column
  2716                                                          ret                                                     ;return
  2717                                  ;=======================================================================================================================
  2718                                  ;
  2719                                  ;       Input/Output Routines
  2720                                  ;
  2721                                  ;       These routines read and/or write directly to ports.
  2722                                  ;
  2723                                  ;       PlaceCursor
  2724                                  ;       PutPrimaryEndOfInt
  2725                                  ;       PutSecondaryEndOfInt
  2726                                  ;       SetKeyboardLamps
  2727                                  ;       WaitForKeyInBuffer
  2728                                  ;       WaitForKeyOutBuffer
  2729                                  ;
  2730                                  ;=======================================================================================================================
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;
  2733                                  ;       Routine:        PlaceCursor
  2734                                  ;
  2735                                  ;       Description:    This routine positions the cursor on the console.
  2736                                  ;
  2737                                  ;       In:             DS      OS data selector
  2738                                  ;
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2741                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2742                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2743                                                          mul     ah                                              ;row offset
  2744                                                          add     al,[wbConsoleColumn]                            ;add column
  2745                                                          adc     ah,0                                            ;add overflow
  2746                                                          mov     ecx,eax                                         ;screen offset
  2747                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2748                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2749                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2750                                                          out     dx,al                                           ;select register
  2751                                                          inc     edx                                             ;data port
  2752                                                          mov     al,ch                                           ;hi-order cursor loc
  2753                                                          out     dx,al                                           ;store hi-order loc
  2754                                                          dec     edx                                             ;register select port
  2755                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2756                                                          out     dx,al                                           ;select register
  2757                                                          inc     edx                                             ;data port
  2758                                                          mov     al,cl                                           ;lo-order cursor loc
  2759                                                          out     dx,al                                           ;store lo-order loc
  2760                                                          pop     ecx                                             ;restore non-volatile regs
  2761                                                          ret                                                     ;return
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  ;
  2764                                  ;       Routine:        PutPrimaryEndOfInt
  2765                                  ;
  2766                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2767                                  ;
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2770                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2771                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2772                                                          ret                                                     ;return
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                  ;
  2775                                  ;       Routine:        PutSecondaryEndOfInt
  2776                                  ;
  2777                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2778                                  ;
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2781                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2782                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2783                                                          ret                                                     ;return
  2784                                  ;-----------------------------------------------------------------------------------------------------------------------
  2785                                  ;
  2786                                  ;       Routine:        SetKeyboardLamps
  2787                                  ;
  2788                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2789                                  ;
  2790                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2791                                  ;
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2794                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2795                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  2796                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2797                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2798                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2799                                                          mov     al,bh                                           ;set/reset lamps value
  2800                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  2801                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2802                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2803                                                          ret                                                     ;return
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                  ;
  2806                                  ;       Routine:        WaitForKeyInBuffer
  2807                                  ;
  2808                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2809                                  ;
  2810                                  ;       Out:            ZF      1 = Input buffer ready
  2811                                  ;                               0 = Input buffer not ready after timeout
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2815                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2816                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2817                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  2818                                                          loopnz  .10                                             ;yes, repeat till timeout
  2819                                                          pop     ecx                                             ;restore non-volatile regs
  2820                                                          ret                                                     ;return
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  ;
  2823                                  ;       Routine:        WaitForKeyOutBuffer
  2824                                  ;
  2825                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2826                                  ;
  2827                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2828                                  ;                               0 = Output buffer empty after timeout
  2829                                  ;
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2832                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2833                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2834                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  2835                                                          loopz   .10                                             ;loop until output buffer bit
  2836                                                          pop     ecx                                             ;restore non-volatile regs
  2837                                                          ret                                                     ;return
  2838                                  ;-----------------------------------------------------------------------------------------------------------------------
  2839                                  ;
  2840                                  ;       End of the Kernel Function Library
  2841                                  ;
  2842                                  ;-----------------------------------------------------------------------------------------------------------------------
  2843                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2844                                  ;=======================================================================================================================
  2845                                  ;
  2846                                  ;       Console Task
  2847                                  ;
  2848                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2849                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2850                                  ;       screen and responds to user commands.
  2851                                  ;
  2852                                  ;=======================================================================================================================
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  ;
  2855                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2856                                  ;
  2857                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2858                                  ;
  2859                                  ;-----------------------------------------------------------------------------------------------------------------------
  2860                                  section                 constack                                                ;console task stack
  2861                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2862                                  ;-----------------------------------------------------------------------------------------------------------------------
  2863                                  ;
  2864                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2865                                  ;
  2866                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2867                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2868                                  ;       16 descriptors. Six are initially defined.
  2869                                  ;
  2870                                  ;-----------------------------------------------------------------------------------------------------------------------
  2871                                  section                 conldt                                                  ;console local descriptors
  2872                                                          dq      004093004780007Fh                               ;04 TSS alias
  2873                                                          dq      004093004700007Fh                               ;0c LDT alias
  2874                                                          dq      00409300400006FFh                               ;14 stack
  2875                                                          dq      00CF93000000FFFFh                               ;1c data
  2876                                                          dq      00409B0050000FFFh                               ;24 code
  2877                                                          dq      00409300480007FFh                               ;2c message queue
  2878                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880                                  ;
  2881                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2882                                  ;
  2883                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2884                                  ;       segment. CS to console code.
  2885                                  ;
  2886                                  ;-----------------------------------------------------------------------------------------------------------------------
  2887                                  section                 contss                                                  ;console task state segment
  2888                                                          dd      0                                               ;00 back-link tss
  2889                                                          dd      0700h                                           ;04 esp ring 0
  2890                                                          dd      0014h                                           ;08 ss ring 0
  2891                                                          dd      0700h                                           ;0c esp ring 1
  2892                                                          dd      0014h                                           ;10 es ring 1
  2893                                                          dd      0700h                                           ;14 esp ring 2
  2894                                                          dd      0014h                                           ;18 ss ring 2
  2895                                                          dd      0                                               ;1c cr ring 3
  2896                                                          dd      0                                               ;20 eip
  2897                                                          dd      0200h                                           ;24 eflags
  2898                                                          dd      0                                               ;28 eax
  2899                                                          dd      0                                               ;2c ecx
  2900                                                          dd      0                                               ;30 edx
  2901                                                          dd      0                                               ;34 ebx
  2902                                                          dd      0700h                                           ;38 esp ring 3
  2903                                                          dd      0                                               ;3c ebp
  2904                                                          dd      0                                               ;40 esi
  2905                                                          dd      0                                               ;44 edi
  2906                                                          dd      001Ch                                           ;48 es
  2907                                                          dd      0024h                                           ;4c cs
  2908                                                          dd      0014h                                           ;50 ss ring 3
  2909                                                          dd      001Ch                                           ;54 ds
  2910                                                          dd      0                                               ;58 fs
  2911                                                          dd      0                                               ;5c gs
  2912                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2913                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                  ;
  2916                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2917                                  ;
  2918                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2919                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2920                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2921                                  ;       event.
  2922                                  ;
  2923                                  ;-----------------------------------------------------------------------------------------------------------------------
  2924                                  section                 conmque                                                 ;console message queue
  2925                                                          dd      8                                               ;head pointer
  2926                                                          dd      8                                               ;tail pointer
  2927                                                          times   510 dd 0                                        ;queue elements
  2928                                  ;-----------------------------------------------------------------------------------------------------------------------
  2929                                  ;
  2930                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2931                                  ;
  2932                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2933                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2934                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2935                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2936                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2937                                  ;       board input, echoing to the console screen and responding to user commands.
  2938                                  ;
  2939                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2940                                  ;
  2941                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2942                                  ;                               |  Real Mode Interrupt Vectors                  |
  2943                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2944                                  ;                               |  Reserved BIOS Memory Area                    |
  2945                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2946                                  ;                               |  Shared Kernel Memory Area                    |
  2947                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2948                                  ;                               |  Global Descriptor Table (GDT)                |
  2949                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2950                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2951                                  ;                       002000  +-----------------------------------------------+
  2952                                  ;                               |  Interrupt Handlers                           |
  2953                                  ;                               |  Kernel Function Library                      |
  2954                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2955                                  ;                               |  Console Task Stack Area                      |
  2956                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2957                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2958                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2959                                  ;                               |  Console Task Task State Segment (TSS)        |
  2960                                  ;                       004800  +-----------------------------------------------+
  2961                                  ;                               |  Console Task Message Queue                   |
  2962                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2963                                  ;                               |  Console Task Code                            |
  2964                                  ;                               |  Console Task Constants                       |
  2965                                  ;                       006000  +===============================================+
  2966                                  ;
  2967                                  ;-----------------------------------------------------------------------------------------------------------------------
  2968                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2969                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  2970                                  
  2971                                                          clearConsoleScreen                                      ;clear the console screen
  2972                                                          putConsoleString czTitle                                ;display startup message
  2973                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2974                                                          placeCursor                                             ;set CRT cursor location
  2975                                  
  2976                                  .20                     sti                                                     ;enable interrupts
  2977                                                          hlt                                                     ;halt until interrupt
  2978                                                          jmp     .20                                             ;continue halt loop
  2979                                  ;-----------------------------------------------------------------------------------------------------------------------
  2980                                  ;
  2981                                  ;       Routine:        ConInitializeData
  2982                                  ;
  2983                                  ;       Description:    This routine initializes console task variables.
  2984                                  ;
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  2987                                                          push    edi                                             ;
  2988                                                          push    es                                              ;
  2989                                  ;
  2990                                  ;       Initialize console work areas.
  2991                                  ;
  2992                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2993                                                          pop     es                                              ;... into extra segment register
  2994                                                          mov     edi,ECONDATA                                    ;OS console data address
  2995                                                          xor     al,al                                           ;initialization value
  2996                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2997                                                          cld                                                     ;forward strings
  2998                                                          rep     stosb                                           ;initialize data
  2999                                  ;
  3000                                  ;       Restore and return.
  3001                                  ;
  3002                                                          pop     es                                              ;restore non-volatile regs
  3003                                                          pop     edi                                             ;
  3004                                                          pop     ecx                                             ;
  3005                                                          ret                                                     ;return
  3006                                  ;-----------------------------------------------------------------------------------------------------------------------
  3007                                  ;
  3008                                  ;       Constants
  3009                                  ;
  3010                                  ;-----------------------------------------------------------------------------------------------------------------------
  3011                                  czNewLine               db      13,10,0                                         ;new line string
  3012                                  czPrompt                db      ":",0                                           ;prompt string
  3013                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3014                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3015                                  %endif
  3016                                  %ifdef BUILDDISK
  3017                                  ;-----------------------------------------------------------------------------------------------------------------------
  3018                                  ;
  3019                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3020                                  ;
  3021                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3022                                  ;
  3023                                  ;-----------------------------------------------------------------------------------------------------------------------
  3024                                  section                 unused                                                  ;unused disk space
  3025                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3026                                  %endif
  3027                                  ;=======================================================================================================================
  3028                                  ;
  3029                                  ;       End of Program Code
  3030                                  ;
  3031                                  ;=======================================================================================================================
