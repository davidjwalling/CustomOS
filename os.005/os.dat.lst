     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   272                                  ;
   273                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   274                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   275                                  ;
   276                                  ;       0.......        Segment is not present in memory (triggers int 11)
   277                                  ;       1.......        Segment is present in memory
   278                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   279                                  ;       ...0....        Segment is a system segment
   280                                  ;       ...00010                Local Descriptor Table
   281                                  ;       ...00101                Task Gate
   282                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   283                                  ;       ...01100                Call Gate (386)
   284                                  ;       ...01110                Interrupt Gate (386)
   285                                  ;       ...01111                Trap Gate (386)
   286                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   287                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   288                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   292                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  ;
   295                                  ;       Firmware-Defined Values
   296                                  ;
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   301                                  ;
   302                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   303                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   307                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   308                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   309                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   310                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   311                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   312                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   313                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   314                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   315                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   316                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  ;
   319                                  ;       Standards-Based Values
   320                                  ;
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       ASCII                                                                   EASCII...
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   328                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   329                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   330                                  EASCIISPACE             equ     020h                                            ;space
   331                                  EASCIIUPPERA            equ     041h                                            ;'A'
   332                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   333                                  EASCIICASE              equ     00100000b                                       ;case bit
   334                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ;
   337                                  ;       Operating System Values
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;
   342                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   343                                  ;
   344                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   345                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   346                                  ;
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   349                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   350                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   351                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   352                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   353                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   354                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;       Console Constants                                                       ECON...
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ECONCOLS                equ     80                                              ;columns per row
   359                                  ECONROWS                equ     24                                              ;console rows
   360                                  ECONOIAROW              equ     24                                              ;operator information area row
   361                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   362                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   363                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   364                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   365                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   370                                  EGDTCGA                 equ     020h                                            ;cga video selector
   371                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   372                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   373                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   374                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   375                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   376                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  ;       Keyboard Flags                                                          EKEYF...
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   381                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   382                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   383                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   384                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   385                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   386                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   387                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   388                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   389                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   390                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  ;       Kernel Constants                                                        EKRN...
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   395                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   396                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   397                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   398                                  ;=======================================================================================================================
   399                                  ;
   400                                  ;       Structures
   401                                  ;
   402                                  ;=======================================================================================================================
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;
   405                                  ;       OSDATA
   406                                  ;
   407                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   408                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   409                                  ;
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  struc                   OSDATA
   412 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   413 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   414 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   415 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   416 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   417 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   418 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   419 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   420 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   421 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   422 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   423 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   424 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   425 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   426 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   427 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   428 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   429 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   430 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   431 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   432 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   433 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   434 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   435 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   436 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   437 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   438 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   439 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   440 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   441 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   442 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   443 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   444 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   445 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   446 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   447 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   448 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   449 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   450 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   451 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   452 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   453 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   454 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   455 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   456 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   457 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   458 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   459 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   460 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   461 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   462 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   463 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   464 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   465 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   466 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   467 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   468 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   469 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   470 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   471 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   472 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   473 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   474 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   475 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   476 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   477 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   478 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   479 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   480 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   481 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   482 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   483 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   484 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   485 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   486 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   487 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   488 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   489 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   490 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   491 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   492 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   493 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   494 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   495 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   496 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   497 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   498 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   499 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   500 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   501 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   502 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   503 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   504 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   505 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   506 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   507 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   508 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   509 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   510 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   511 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   512 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514                                  ;
   515                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   516                                  ;
   517                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   518                                  ;
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  ECONDATA                equ     ($)
   521 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   522 00000804 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   523 00000808 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   524 00000858 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   525 00000859 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   526 0000085A <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   527 0000085B <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   528 0000085C <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   529 0000085D <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   530 0000085E <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   531 0000085F <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   532 00000860 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   533 00000861 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   534 00000862 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   535 00000863 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   536                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538                                  ;
   539                                  ;       End of OS Variables
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  endstruc
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;       Macros
   546                                  ;
   547                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   548                                  ;
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  %macro                  mint    1
   551                                  _%1                     equ     ($-$$) / EX86DESCLEN
   552                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   553                                  %endmacro
   554                                  %macro                  mtrap   1
   555                                  _%1                     equ     ($-$$) / EX86DESCLEN
   556                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   557                                  %endmacro
   558                                  %macro                  menter  1
   559                                  ?%1                     equ     ($-$$)
   560                                  %endmacro
   561                                  %macro                  tsvce   1
   562                                  e%1                     equ     ($-tsvc)/4
   563                                                          dd      %1
   564                                  %endmacro
   565                                  %ifdef BUILDBOOT
   566                                  ;=======================================================================================================================
   567                                  ;
   568                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   569                                  ;
   570                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   571                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   572                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   573                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   574                                  ;
   575                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   576                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   577                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   578                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   579                                  ;       immediately followed by a disk parameter table.
   580                                  ;
   581                                  ;=======================================================================================================================
   582                                                          cpu     8086                                            ;assume minimal CPU
   583                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   584                                                          bits    16                                              ;16-bit code at power-up
   585                                  %ifdef BUILDPREP
   586                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   587                                  %else
   588 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   589                                  %endif
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ;
   592                                  ;       Disk Parameter Table
   593                                  ;
   594                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   595                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   596                                  ;
   597                                  ;-----------------------------------------------------------------------------------------------------------------------
   598 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   599 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   600 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   601 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   602 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   603 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   604 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   605 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   606 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   607                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   608 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   609 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   610 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   611                                  ;
   612                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   613                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   614                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   615                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   616                                  ;       given several possible starting values for CS:IP.
   617                                  ;
   618                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   619 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   620                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   621 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   622 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   623 00000025 B104                                            mov     cl,4                                            ;shift count
   624 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   625 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   626 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   627                                  ;
   628                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   629                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   630                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   631                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   632                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   633                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   634                                  ;
   635 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   636 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   637 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   638 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   639 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   640                                  ;
   641                                  ;       Our boot addressability is now set up according to the following diagram.
   642                                  ;
   643                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   644                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   645                                  ;                               |  256 = 100h bytes                             |
   646                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   647                                  ;                               |  Boot Sector (vstart=0100h)                   |
   648                                  ;                               |  1 sector = 512 = 200h bytes                  |
   649                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   650                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   651                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   652                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   653                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   654                                  ;                               |  2 sectors = 1024 = 400h bytes
   655                                  ;                       009400  +-----------------------------------------------+ DS:1900
   656                                  ;
   657                                  ;       On entry, DL indicates the drive being booted from.
   658                                  ;
   659 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   660                                  ;
   661                                  ;       Compute directory i/o buffer address.
   662                                  ;
   663 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   664 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   665 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   666 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   667                                  ;
   668                                  ;       Compute segment where os.com will be loaded.
   669                                  ;
   670 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   671 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   672 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   673 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   674                                  ;
   675                                  ;       Set the video mode to 80 column, 25 row, text.
   676                                  ;
   677 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   678 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   679                                  ;
   680                                  ;       Write a message to the console so we know we have our addressability established.
   681                                  ;
   682 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   683 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   684                                  ;
   685                                  ;       Initialize the number of directory sectors to search.
   686                                  ;
   687 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   688 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   689                                  ;
   690                                  ;       Compute number of directory sectors and initialize overhead count.
   691                                  ;
   692 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   693 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   694 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   695 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   696                                  ;
   697                                  ;       Compute directory entries per sector.
   698                                  ;
   699 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   700 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   701 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   702                                  ;
   703                                  ;       Compute first logical directory sector and update overhead count.
   704                                  ;
   705 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   706 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   707 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   708 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   709 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   710 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   711                                  ;
   712                                  ;       Read directory sector.
   713                                  ;
   714 0000008E B001                    .30                     mov     al,1                                            ;sector count
   715 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   716 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   717 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   718                                  ;
   719                                  ;       Setup variables to search this directory sector.
   720                                  ;
   721 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   722 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   723 000000A1 7603                                            jna     .40                                             ;no, continue
   724 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   725 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   726 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   727 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   728                                  ;
   729                                  ;       Loop through directory sectors searching for kernel program.
   730                                  ;
   731 000000B1 56                      .50                     push    si                                              ;save kernel name address
   732 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   733 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   734 000000B6 FC                                              cld                                                     ;forward strings
   735 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   736 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   737 000000BA 5E                                              pop     si                                              ;restore kernel name address
   738 000000BB 7418                                            je      .60                                             ;exit loop if found
   739 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   740 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   741 000000C2 75ED                                            jnz     .50                                             ;next entry
   742                                  ;
   743                                  ;       Repeat search if we are not at the end of the directory.
   744                                  ;
   745 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   746 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   747 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   748 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   749 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   750                                  ;
   751                                  ;       If we find the kernel program in the directory, read the FAT.
   752                                  ;
   753 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   754 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   755 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   756 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   757 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   758 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   759                                  ;
   760                                  ;       Get the starting cluster of the kernel program and target address.
   761                                  ;
   762 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   763 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   764                                  ;
   765                                  ;       Read each program cluster into RAM.
   766                                  ;
   767 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   768 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   769 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   770 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   771 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   772 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   773 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   774 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   775 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   776                                  ;
   777                                  ;       Update buffer pointer for next cluster.
   778                                  ;
   779 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   780 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   781 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   782 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   783 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   784                                  ;
   785                                  ;       Compute next cluster number.
   786                                  ;
   787 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   788 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   789 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   790 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   791 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   792 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   793 00000120 83E701                                          and     di,1                                            ;get low bit
   794 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   795 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   796 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   797                                  ;
   798                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   799                                  ;
   800 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   801 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   802 00000130 B104                                            mov     cl,4                                            ;shift count
   803 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   804 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   805 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   806 0000013A 75B2                                            jne     .70                                             ;no, continue
   807                                  ;
   808                                  ;       Transfer control to the operating system program.
   809                                  ;
   810 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   811 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   812 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   813                                  ;
   814                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   815                                  ;
   816 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   817 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   818 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   819 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   820 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   821 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   822 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   823 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   824 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   825 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   826                                  ;
   827                                  ;       Try maxtries times to read sector.
   828                                  ;
   829 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   830 00000160 53                      .10                     push    bx                                              ;save buffer address
   831 00000161 51                                              push    cx                                              ;save retry count
   832 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   833 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   834 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   835 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   836 0000016F 59                                              pop     cx                                              ;restore retry count
   837 00000170 5B                                              pop     bx                                              ;restore buffer address
   838 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   839 00000173 E2EB                                            loop    .10                                             ;retry
   840                                  ;
   841                                  ;       Handle disk error: convert to ASCII and store in error string.
   842                                  ;
   843 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   844 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   845 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   846 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   847 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   848 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   849 00000183 7203                                            jb      .20                                             ;continue if numeral
   850 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   851 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   852 0000018A 7203                                            jb      .30                                             ;continue if numeral
   853 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   854 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   855 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   856 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   857                                  ;
   858                                  ;       Wait for a key press.
   859                                  ;
   860 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   861 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   862 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   863 0000019E FB                                              sti                                                     ;enable maskable interrupts
   864 0000019F F4                                              hlt                                                     ;wait for interrupt
   865 000001A0 EBF6                                            jmp     .10                                             ;repeat
   866                                  ;
   867                                  ;       Reset the system.
   868                                  ;
   869 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   870 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   871 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   872 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   873 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   874                                  ;
   875                                  ;       Display text message.
   876                                  ;
   877 000001AA FC                      BootPrint               cld                                                     ;forward strings
   878 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   879 000001AC 84C0                                            test    al,al                                           ;end of string?
   880 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   881 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   882 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   883 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   884 000001B6 C3                      BootReturn              ret                                                     ;return
   885                                  ;-----------------------------------------------------------------------------------------------------------------------
   886                                  ;
   887                                  ;       Constants
   888                                  ;
   889                                  ;-----------------------------------------------------------------------------------------------------------------------
   890 000001B7 90                                              align   2
   891 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   892 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   892 000001C3 4F4D               
   893 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   893 000001CE 530D0A00           
   894 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   894 000001DB 7220               
   895 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   896 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   896 000001E9 6700               
   897                                  ;-----------------------------------------------------------------------------------------------------------------------
   898                                  ;
   899                                  ;       Work Areas
   900                                  ;
   901                                  ;-----------------------------------------------------------------------------------------------------------------------
   902 000001EB 90                                              align   2
   903 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   904 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   905 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   906 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   907 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   908                                  wwReadCountCommand      equ     $                                               ;read count and command
   909 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   910 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   911                                  wwDriveHead             equ     $                                               ;drive, head (word)
   912 000001F8 00                      wbDrive                 db      0                                               ;drive
   913 000001F9 00                      wbHead                  db      0                                               ;head
   914                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   915 000001FA 00                                              db      0                                               ;sector
   916 000001FB 00                      wbTrack                 db      0                                               ;track
   917 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   918 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   919                                  %endif
   920                                  %ifdef BUILDPREP
   921                                  ;=======================================================================================================================
   922                                  ;
   923                                  ;       Diskette Preparation Code
   924                                  ;
   925                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   926                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   927                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   928                                  ;
   929                                  ;=======================================================================================================================
   930                                  ;
   931                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   932                                  ;
   933                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   934                                                          call    BootPrint                                       ;display message
   935                                  ;
   936                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   937                                  ;
   938                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   939                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   940                                                          jnz     .20                                             ;continue if key pressed
   941                                                          sti                                                     ;enable interrupts
   942                                                          hlt                                                     ;wait for interrupt
   943                                                          jmp     .10                                             ;repeat
   944                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   945                                                          je      .30                                             ;yes, branch
   946                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   947                                                          jne     .10                                             ;no, repeat
   948                                                          jmp     .120                                            ;yes, exit program
   949                                  ;
   950                                  ;       Display writing-sector message and patch the JMP instruction.
   951                                  ;
   952                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   953                                                          call    BootPrint                                       ;display message
   954                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   955                                                          mov     ax,01Bh                                         ;address past disk parameter table
   956                                                          mov     [bx],ax                                         ;update the JMP instruction
   957                                  ;
   958                                  ;       Try to read the boot sector.
   959                                  ;
   960                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   961                                  .40                     push    cx                                              ;save remaining tries
   962                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   963                                                          mov     dx,0                                            ;head zero, drive zero
   964                                                          mov     cx,1                                            ;track zero, sector one
   965                                                          mov     al,1                                            ;one sector
   966                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   967                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   968                                                          pop     cx                                              ;restore remaining retries
   969                                                          jnc     .50                                             ;skip ahead if successful
   970                                                          loop    .40                                             ;try again
   971                                                          mov     si,czPrepMsg20                                  ;read-error message address
   972                                                          jmp     .70                                             ;branch to error routine
   973                                  ;
   974                                  ;       Copy diskette parms from input buffer to output buffer.
   975                                  ;
   976                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   977                                                          add     si,11                                           ;skip over JMP and system ID
   978                                                          mov     di,Boot                                         ;output buffer address
   979                                                          add     di,11                                           ;skip over JMP and system ID
   980                                                          mov     cx,19                                           ;length of diskette parameters
   981                                                          cld                                                     ;forward string copies
   982                                                          rep     movsb                                           ;copy diskette parameters
   983                                  ;
   984                                  ;       Try to write boot sector to diskette.
   985                                  ;
   986                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   987                                  .60                     push    cx                                              ;save remaining tries
   988                                                          mov     bx,Boot                                         ;output buffer address
   989                                                          mov     dx,0                                            ;head zero, drive zero
   990                                                          mov     cx,1                                            ;track zero, sector one
   991                                                          mov     al,1                                            ;one sector
   992                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   993                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   994                                                          pop     cx                                              ;restore remaining retries
   995                                                          jnc     .100                                            ;skip ahead if successful
   996                                                          loop    .60                                             ;try again
   997                                                          mov     si,czPrepMsg30                                  ;write-error message address
   998                                  ;
   999                                  ;       Convert the error code to ASCII and display the error message.
  1000                                  ;
  1001                                  .70                     push    ax                                              ;save error code
  1002                                                          mov     al,ah                                           ;copy error code
  1003                                                          mov     ah,0                                            ;AX = error code
  1004                                                          mov     dl,10h                                          ;hexadecimal divisor
  1005                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1006                                                          or      ax,03030h                                       ;add ASCII zone digits
  1007                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1008                                                          jb      .80                                             ;yes, continue
  1009                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1010                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1011                                                          jb      .90                                             ;yes, continue
  1012                                                          add     al,7                                            ;no, make ASCII
  1013                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1014                                                          call    BootPrint                                       ;write error message
  1015                                                          pop     ax                                              ;restore error code
  1016                                  ;
  1017                                  ;       Display the completion message.
  1018                                  ;
  1019                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1020                                                          mov     al,ah                                           ;BIOS return code
  1021                                                          cmp     al,0                                            ;success?
  1022                                                          je      .110                                            ;yes, continue
  1023                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1024                                                          cmp     al,1                                            ;disk parameter error?
  1025                                                          je      .110                                            ;yes, continue
  1026                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1027                                                          cmp     al,2                                            ;address mark not found?
  1028                                                          je      .110                                            ;yes, continue
  1029                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1030                                                          cmp     al,3                                            ;protected disk?
  1031                                                          je      .110                                            ;yes, continue
  1032                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1033                                                          cmp     al,6                                            ;diskette removed?
  1034                                                          je      .110                                            ;yes, continue
  1035                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1036                                                          cmp     al,80H                                          ;drive timed out?
  1037                                                          je      .110                                            ;yes, continue
  1038                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1039                                  .110                    call    BootPrint                                       ;display result message
  1040                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1041                                                          int     021h                                            ;terminate DOS program
  1042                                                          ret                                                     ;return (should not execute)
  1043                                  ;-----------------------------------------------------------------------------------------------------------------------
  1044                                  ;
  1045                                  ;       Diskette Preparation Messages
  1046                                  ;
  1047                                  ;-----------------------------------------------------------------------------------------------------------------------
  1048                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1049                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1050                                                          db      13,10
  1051                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1052                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1053                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1054                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1055                                                          db      13,10,0
  1056                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1057                                                          db      13,10,0
  1058                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1059                                                          db      13,10,0
  1060                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1061                                                          db      13,10,0
  1062                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1063                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1064                                                          db      13,10,0
  1065                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1066                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1067                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1068                                                          db      13,10,"and retry."
  1069                                                          db      13,10,0
  1070                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1071                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1072                                                          db      13,10,"using another diskette."
  1073                                                          db      13,10,0
  1074                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1075                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1076                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1077                                                          db      13,10,0
  1078                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1079                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1080                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1081                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1082                                                          db      13,10,"is properly inserted in the diskette drive."
  1083                                                          db      13,10,0
  1084                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1085                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1086                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1087                                                          db      13,10,0
  1088                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1089                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1090                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1091                                                          db      13,10,0
  1092                                  wcPrepInBuf             equ     $
  1093                                  %endif
  1094                                  %ifdef BUILDDISK
  1095                                  ;=======================================================================================================================
  1096                                  ;
  1097                                  ;       File Allocation Tables
  1098                                  ;
  1099                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1100                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1101                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1102                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1103                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1104                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1105                                  ;       the last cluster in the chain.
  1106                                  ;
  1107                                  ;       Every three bytes encode two FAT entries as follows:
  1108                                  ;
  1109                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1110                                  ;
  1111                                  ;=======================================================================================================================
  1112                                  ;-----------------------------------------------------------------------------------------------------------------------
  1113                                  ;
  1114                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1115                                  ;
  1116                                  ;-----------------------------------------------------------------------------------------------------------------------
  1117                                  section                 fat1                                                    ;first copy of FAT
  1118                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1119                                                          db      005h,060h,000h, 007h,080h,000h
  1120                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1121                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1122                                                          db      011h,020h,001h, 013h,040h,001h
  1123                                                          db      015h,060h,001h, 017h,080h,001h
  1124                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1125                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1126                                                          db      021h,020h,002h, 023h,040h,002h
  1127                                                          db      025h,060h,002h, 027h,080h,002h
  1128                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1129                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1130                                  ;-----------------------------------------------------------------------------------------------------------------------
  1131                                  ;
  1132                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1133                                  ;
  1134                                  ;-----------------------------------------------------------------------------------------------------------------------
  1135                                  section                 fat2                                                    ;second copy of FAT
  1136                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1137                                                          db      005h,060h,000h, 007h,080h,000h
  1138                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1139                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1140                                                          db      011h,020h,001h, 013h,040h,001h
  1141                                                          db      015h,060h,001h, 017h,080h,001h
  1142                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1143                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1144                                                          db      021h,020h,002h, 023h,040h,002h
  1145                                                          db      025h,060h,002h, 027h,080h,002h
  1146                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1147                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1148                                  ;-----------------------------------------------------------------------------------------------------------------------
  1149                                  ;
  1150                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1151                                  ;
  1152                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1153                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1154                                  ;       copy.
  1155                                  ;
  1156                                  ;-----------------------------------------------------------------------------------------------------------------------
  1157                                  section                 dir                                                     ;diskette directory
  1158                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1159                                                          db      020h                                            ;attribute (archive bit set)
  1160                                                          times   10 db 0                                         ;unused
  1161                                                          dw      0h                                              ;time
  1162                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1163                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1164                                                          dw      2                                               ;first cluster
  1165                                                          dd      05400h                                          ;file size
  1166                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1167                                  %endif
  1168                                  %ifdef BUILDCOM
  1169                                  ;=======================================================================================================================
  1170                                  ;
  1171                                  ;       OS.COM
  1172                                  ;
  1173                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1174                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1175                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1176                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1177                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1178                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1179                                  ;
  1180                                  ;       Our loader addressability is set up according to the following diagram.
  1181                                  ;
  1182                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1183                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1184                                  ;                               |  256 = 100h bytes                             |
  1185                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1186                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1187                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1188                                  ;                       007e00  +-----------------------------------------------+
  1189                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1190                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1191                                  ;                               |                                               |
  1192                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1193                                  ;                               |                                               |
  1194                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1195                                  ;                               |  Loader Code                                  |
  1196                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1197                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1198                                  ;
  1199                                  ;=======================================================================================================================
  1200                                  ;-----------------------------------------------------------------------------------------------------------------------
  1201                                  ;
  1202                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1203                                  ;
  1204                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1205                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1206                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1207                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1208                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1209                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1210                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1211                                  ;       registers.
  1212                                  ;
  1213                                  ;-----------------------------------------------------------------------------------------------------------------------
  1214                                                          cpu     8086                                            ;assume minimal CPU
  1215                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1216                                                          bits    16                                              ;this is 16-bit code
  1217                                  Loader                  push    cs                                              ;use the code segment
  1218                                                          pop     ds                                              ;...as our data segment
  1219                                                          push    cs                                              ;use the code segment
  1220                                                          pop     es                                              ;...as our extra segment
  1221                                  ;
  1222                                  ;       Write a message to the console so we know we have our addressability established.
  1223                                  ;
  1224                                                          mov     si,czStartingMsg                                ;starting message
  1225                                                          call    PutTTYString                                    ;display loader message
  1226                                  ;
  1227                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1228                                  ;
  1229                                                          call    GetCPUType                                      ;AL = cpu type
  1230                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1231                                                          cmp     al,3                                            ;80386+?
  1232                                                          jb      LoaderExit                                      ;no, exit with error message
  1233                                                          cpu     386                                             ;allow 80386 instructions
  1234                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1235                                                          call    PutTTYString                                    ;display message
  1236                                  ;
  1237                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1238                                  ;
  1239                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1240                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1241                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1242                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1243                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1244                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1245                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1246                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1247                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1248                                                          call    PutTTYString                                    ;display message
  1249                                  ;
  1250                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1251                                  ;
  1252                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1253                                                          pop     es                                              ;... as target segment
  1254                                                          xor     di,di                                           ;ES:DI = target address
  1255                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1256                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1257                                                          cld                                                     ;forward strings
  1258                                                          rep     movsb                                           ;copy kernel image
  1259                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1260                                                          call    PutTTYString                                    ;display message
  1261                                  ;
  1262                                  ;       Switch to protected mode.
  1263                                  ;
  1264                                                          xor     si,si                                           ;ES:SI = gdt addr
  1265                                                          mov     ss,si                                           ;protected mode ss
  1266                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1267                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1268                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1269                                                          mov     dx,001Fh                                        ;outer delay loop count
  1270                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1271                                                          loop    $                                               ;wait out pending interrupts
  1272                                                          dec     dx                                              ;restore outer loop count
  1273                                                          jnz     .10                                             ;continue outer loop
  1274                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1275                                  ;
  1276                                  ;       Enable hardware and maskable interrupts.
  1277                                  ;
  1278                                                          xor     al,al                                           ;enable all registers code
  1279                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1280                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1281                                                          sti                                                     ;enable maskable interrupts
  1282                                  ;
  1283                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1284                                  ;
  1285                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1286                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1287                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1288                                  ;-----------------------------------------------------------------------------------------------------------------------
  1289                                  ;
  1290                                  ;       Routine:        LoaderExit
  1291                                  ;
  1292                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1293                                  ;
  1294                                  ;       In:             DS:SI   string address
  1295                                  ;
  1296                                  ;-----------------------------------------------------------------------------------------------------------------------
  1297                                  LoaderExit              call    PutTTYString                                    ;display error message
  1298                                  ;
  1299                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1300                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1301                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1302                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1303                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1304                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1305                                  ;
  1306                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1307                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1308                                                          jnz     .40                                             ;exit if key pressed
  1309                                                          sti                                                     ;enable maskable interrupts
  1310                                                          hlt                                                     ;wait for interrupt
  1311                                                          jmp     .30                                             ;repeat until keypress
  1312                                  ;
  1313                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1314                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1315                                  ;       HLT until the system resets.
  1316                                  ;
  1317                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1318                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1319                                  .50                     sti                                                     ;enable maskable interrupts
  1320                                                          hlt                                                     ;stop until reset, int, nmi
  1321                                                          jmp     .50                                             ;loop until restart kicks in
  1322                                  ;-----------------------------------------------------------------------------------------------------------------------
  1323                                  ;
  1324                                  ;       Routine:        GetCPUType
  1325                                  ;
  1326                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1327                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1328                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1329                                  ;
  1330                                  ;       Out:            AX      0 = 808x, v20, etc.
  1331                                  ;                               1 = 80186
  1332                                  ;                               2 = 80286
  1333                                  ;                               3 = 80386
  1334                                  ;
  1335                                  ;-----------------------------------------------------------------------------------------------------------------------
  1336                                  GetCPUType              mov     al,1                                            ;AL = 1
  1337                                                          mov     cl,32                                           ;shift count
  1338                                                          shr     al,cl                                           ;try a 32-bit shift
  1339                                                          or      al,al                                           ;did the shift happen?
  1340                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1341                                                          cpu     186
  1342                                                          push    sp                                              ;save stack pointer
  1343                                                          pop     cx                                              ;...into cx
  1344                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1345                                                          jne     .10                                             ;yes, cpu is 80186
  1346                                                          cpu     286
  1347                                                          inc     ax                                              ;AX = 2
  1348                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1349                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1350                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1351                                                          jz      .10                                             ;yes, cpu is 80286
  1352                                                          inc     ax                                              ;AX = 3
  1353                                  .10                     ret                                                     ;return
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;       Routine:        PutTTYString
  1357                                  ;
  1358                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1359                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1360                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1361                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1362                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1363                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1364                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1365                                  ;                       to LODSB is not needed.
  1366                                  ;
  1367                                  ;       In:             DS:SI   address of string
  1368                                  ;
  1369                                  ;       Out:            DF      0
  1370                                  ;                       ZF      1
  1371                                  ;                       AL      0
  1372                                  ;
  1373                                  ;-----------------------------------------------------------------------------------------------------------------------
  1374                                  PutTTYString            cld                                                     ;forward strings
  1375                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1376                                                          test    al,al                                           ;end of string?
  1377                                                          jz      .20                                             ;... yes, exit our loop
  1378                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1379                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1380                                                          jmp     .10                                             ;repeat until done
  1381                                  .20                     ret                                                     ;return
  1382                                  ;-----------------------------------------------------------------------------------------------------------------------
  1383                                  ;
  1384                                  ;       Loader Data
  1385                                  ;
  1386                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1387                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1388                                  ;
  1389                                  ;-----------------------------------------------------------------------------------------------------------------------
  1390                                                          align   2
  1391                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1392                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1393                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1394                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1395                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1396                                                          db      "Please press any key to restart the computer.",13,10,0
  1397                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1398                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1399                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1400                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1401                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1402                                  ;=======================================================================================================================
  1403                                  ;
  1404                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1405                                  ;
  1406                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1407                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1408                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1409                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1410                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1411                                  ;
  1412                                  ;=======================================================================================================================
  1413                                  ;=======================================================================================================================
  1414                                  ;
  1415                                  ;       Kernel Tables
  1416                                  ;
  1417                                  ;=======================================================================================================================
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  ;
  1420                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1421                                  ;
  1422                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1423                                  ;       first descriptor must be all nulls.
  1424                                  ;
  1425                                  ;       6   5         4         3         2         1         0
  1426                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1427                                  ;       ----------------------------------------------------------------
  1428                                  ;       h......hffffmmmma......ab......................bn..............n
  1429                                  ;
  1430                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1431                                  ;               ffff                                                            flags
  1432                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1433                                  ;                       a......a                                                access
  1434                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1435                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1436                                  ;
  1437                                  ;       00000000                                                                all areas have base addresses below 2^24
  1438                                  ;               0...                                                            single-byte size granularity
  1439                                  ;               1...                                                            4-kilobyte size granularity
  1440                                  ;               .0..                                                            16-bit default for code segments
  1441                                  ;               .1..                                                            32-bit default for code segments
  1442                                  ;               ..0.                                                            intel-reserved; should be zero
  1443                                  ;               ...0                                                            available for operating system use
  1444                                  ;                   0000                                                        segment is less than 2^16 in size
  1445                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1446                                  ;                       1.......                                                segment is present in memory
  1447                                  ;                       .00.....                                                segment is of privilege level 0
  1448                                  ;                       ...0....                                                segment is of system or gate type
  1449                                  ;                       ...00010                                                local decriptor table (LDT)
  1450                                  ;                       ...01001                                                task state segment (TSS) available
  1451                                  ;                       ...01011                                                task state segment (TSS) busy
  1452                                  ;                       ...10...                                                data segment
  1453                                  ;                       ...10011                                                writable data (accessed)
  1454                                  ;                       ...11...                                                code segment
  1455                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1456                                  ;
  1457                                  ;-----------------------------------------------------------------------------------------------------------------------
  1458                                  section                 gdt                                                     ;global descriptor table
  1459                                                          dq      0000000000000000h                               ;00 required null selector
  1460                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1461                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1462                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1463                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1464                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1465                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1466                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1467                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1468                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1469                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1470                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1471                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1472                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1473                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                  ;
  1476                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1477                                  ;
  1478                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1479                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1480                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1481                                  ;
  1482                                  ;       6   5         4         3         2         1         0
  1483                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1484                                  ;       ----------------------------------------------------------------
  1485                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1486                                  ;
  1487                                  ;       h...h   high-order offset (bits 16-31)
  1488                                  ;       P       present (0=unused interrupt)
  1489                                  ;       zz      descriptor privilege level
  1490                                  ;       S       storage segment (must be zero for IDT)
  1491                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1492                                  ;       S...S   handling code selector in GDT
  1493                                  ;       l...l   lo-order offset (bits 0-15)
  1494                                  ;
  1495                                  ;-----------------------------------------------------------------------------------------------------------------------
  1496                                  section                 idt                                                     ;interrupt descriptor table
  1497                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1498                                                          mtrap   singlestep                                      ;01 single step
  1499                                                          mtrap   nmi                                             ;02 non-maskable
  1500                                                          mtrap   break                                           ;03 break
  1501                                                          mtrap   into                                            ;04 into
  1502                                                          mtrap   bounds                                          ;05 bounds
  1503                                                          mtrap   badopcode                                       ;06 bad op code
  1504                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1505                                                          mtrap   doublefault                                     ;08 double-fault
  1506                                                          mtrap   operand                                         ;09 operand
  1507                                                          mtrap   badtss                                          ;0a bad TSS
  1508                                                          mtrap   notpresent                                      ;0b not-present
  1509                                                          mtrap   stacklimit                                      ;0c stack limit
  1510                                                          mtrap   protection                                      ;0d general protection fault
  1511                                                          mtrap   int14                                           ;0e (reserved)
  1512                                                          mtrap   int15                                           ;0f (reserved)
  1513                                                          mtrap   coproccalc                                      ;10 (reserved)
  1514                                                          mtrap   int17                                           ;11 (reserved)
  1515                                                          mtrap   int18                                           ;12 (reserved)
  1516                                                          mtrap   int19                                           ;13 (reserved)
  1517                                                          mtrap   int20                                           ;14 (reserved)
  1518                                                          mtrap   int21                                           ;15 (reserved)
  1519                                                          mtrap   int22                                           ;16 (reserved)
  1520                                                          mtrap   int23                                           ;17 (reserved)
  1521                                                          mtrap   int24                                           ;18 (reserved)
  1522                                                          mtrap   int25                                           ;19 (reserved)
  1523                                                          mtrap   int26                                           ;1a (reserved)
  1524                                                          mtrap   int27                                           ;1b (reserved)
  1525                                                          mtrap   int28                                           ;1c (reserved)
  1526                                                          mtrap   int29                                           ;1d (reserved)
  1527                                                          mtrap   int30                                           ;1e (reserved)
  1528                                                          mtrap   int31                                           ;1f (reserved)
  1529                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1530                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1531                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1532                                                          mint    com2                                            ;23 IRQ3 com2
  1533                                                          mint    com1                                            ;24 IRQ4 com1
  1534                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1535                                                          mint    diskette                                        ;26 IRQ6 diskette
  1536                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1537                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1538                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1539                                                          mint    irq10                                           ;2a IRQA (reserved)
  1540                                                          mint    irq11                                           ;2b IRQB (reserved)
  1541                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1542                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1543                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1544                                                          mint    irq15                                           ;2f IRQF (reserved)
  1545                                                          mtrap   svc                                             ;30 OS services
  1546                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1547                                  ;=======================================================================================================================
  1548                                  ;
  1549                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1550                                  ;
  1551                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1552                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1553                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1554                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1555                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1556                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1557                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1558                                  ;
  1559                                  ;=======================================================================================================================
  1560                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1561                                                          cpu     386                                             ;allow 80386 instructions
  1562                                                          bits    32                                              ;this is 32-bit code
  1563                                  ;=======================================================================================================================
  1564                                  ;
  1565                                  ;       CPU Interrupt Handlers
  1566                                  ;
  1567                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1568                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1569                                  ;
  1570                                  ;=======================================================================================================================
  1571                                  ;-----------------------------------------------------------------------------------------------------------------------
  1572                                  ;
  1573                                  ;       INT0    Divide By Zero
  1574                                  ;
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                                          menter  dividebyzero                                    ;divide by zero
  1577                                                          jmp     ReportInterrupt                                 ;report interrupt
  1578                                  ;-----------------------------------------------------------------------------------------------------------------------
  1579                                  ;
  1580                                  ;       INT1    Single Step
  1581                                  ;
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                                          menter  singlestep                                      ;single step
  1584                                                          jmp     ReportInterrupt                                 ;report interrupt
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586                                  ;
  1587                                  ;       INT2    Non-Maskable Interrupt
  1588                                  ;
  1589                                  ;-----------------------------------------------------------------------------------------------------------------------
  1590                                                          menter  nmi                                             ;non-maskable
  1591                                                          jmp     ReportInterrupt                                 ;report interrupt
  1592                                  ;-----------------------------------------------------------------------------------------------------------------------
  1593                                  ;
  1594                                  ;       INT3    Break
  1595                                  ;
  1596                                  ;-----------------------------------------------------------------------------------------------------------------------
  1597                                                          menter  break                                           ;break
  1598                                                          jmp     ReportInterrupt                                 ;report interrupt
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  ;
  1601                                  ;       INT4    Into
  1602                                  ;
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                                          menter  into                                            ;into
  1605                                                          jmp     ReportInterrupt                                 ;report interrupt
  1606                                  ;-----------------------------------------------------------------------------------------------------------------------
  1607                                  ;
  1608                                  ;       INT5    Bounds
  1609                                  ;
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                                          menter  bounds                                          ;bounds
  1612                                                          jmp     ReportInterrupt                                 ;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;       INT6    Bad Operation Code
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                                          menter  badopcode                                       ;bad opcode interrupt
  1619                                                          jmp     ReportInterrupt                                 ;report interrupt
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                  ;
  1622                                  ;       INT7    No Coprocessor
  1623                                  ;
  1624                                  ;-----------------------------------------------------------------------------------------------------------------------
  1625                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1626                                                          jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT8    Double Fault
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  doublefault                                     ;doublefault interrupt
  1633                                                          jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT9    Operand
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  operand                                         ;operand interrupt
  1640                                                          jmp     ReportInterrupt                                 ;report interrupt
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  ;
  1643                                  ;       INT10   Bad Task State Segment
  1644                                  ;
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                                          menter  badtss                                          ;bad TSS interrupt
  1647                                                          jmp     ReportInterrupt                                 ;report interrupt
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                  ;
  1650                                  ;       INT11   Not Present
  1651                                  ;
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                                          menter  notpresent                                      ;not present interrupt
  1654                                                          jmp     ReportInterrupt                                 ;report interrupt
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                  ;
  1657                                  ;       INT12   Stack Limit
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                                          menter  stacklimit                                      ;stack limit interrupt
  1661                                                          jmp     ReportInterrupt                                 ;report interrupt
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  ;
  1664                                  ;       INT13   General Protection Fault
  1665                                  ;
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                                          menter  protection                                      ;protection fault interrupt
  1668                                                          jmp     ReportInterrupt                                 ;report interrupt
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  ;
  1671                                  ;       INT14   Reserved
  1672                                  ;
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                                          menter  int14                                           ;(reserved)
  1675                                                          jmp     ReportInterrupt                                 ;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       INT15   Reserved
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                                          menter  int15                                           ;(reserved)
  1682                                                          jmp     ReportInterrupt                                 ;report interrupt
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                  ;
  1685                                  ;       INT16   Coprocessor Calculation
  1686                                  ;
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                                          menter  coproccalc                                      ;coprocessor calculation
  1689                                                          jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT17   Reserved
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  int17                                           ;(reserved)
  1696                                                          jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT18   Reserved
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  int18                                           ;(reserved)
  1703                                                          jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT19   Reserved
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  int19                                           ;(reserved)
  1710                                                          jmp     ReportInterrupt                                 ;report interrupt
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                  ;
  1713                                  ;       INT20   Reserved
  1714                                  ;
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                                          menter  int20                                           ;(reserved)
  1717                                                          jmp     ReportInterrupt                                 ;report interrupt
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  ;
  1720                                  ;       INT21   Reserved
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                                          menter  int21                                           ;(reserved)
  1724                                                          jmp     ReportInterrupt                                 ;report interrupt
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  ;
  1727                                  ;       INT22   Reserved
  1728                                  ;
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                                          menter  int22                                           ;(reserved)
  1731                                                          jmp     ReportInterrupt                                 ;report interrupt
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;       INT23   Reserved
  1735                                  ;
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                                          menter  int23                                           ;(reserved)
  1738                                                          jmp     ReportInterrupt                                 ;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;       INT24   Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                                          menter  int24                                           ;(reserved)
  1745                                                          jmp     ReportInterrupt                                 ;report interrupt
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                  ;
  1748                                  ;       INT25   Reserved
  1749                                  ;
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                                          menter  int25                                           ;(reserved)
  1752                                                          jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT26   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int26                                           ;(reserved)
  1759                                                          jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT27   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int27                                           ;(reserved)
  1766                                                          jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT28   Reserved
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  int28                                           ;(reserved)
  1773                                                          jmp     ReportInterrupt                                 ;report interrupt
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                  ;
  1776                                  ;       INT29   Reserved
  1777                                  ;
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                                          menter  int29                                           ;(reserved)
  1780                                                          jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT30   Reserved
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  int30                                           ;(reserved)
  1787                                                          jmp     ReportInterrupt                                 ;report interrupt
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                  ;
  1790                                  ;       INT31   Reserved
  1791                                  ;
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                                          menter  int31                                           ;(reserved)
  1794                                                          jmp     ReportInterrupt                                 ;report interrupt
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;       Routine:        ReportInterrupt
  1798                                  ;
  1799                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1800                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ReportInterrupt         iretd                                                   ;return
  1804                                  ;=======================================================================================================================
  1805                                  ;
  1806                                  ;       Hardware Device Interupts
  1807                                  ;
  1808                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1809                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1810                                  ;       (BX=2028h).
  1811                                  ;
  1812                                  ;=======================================================================================================================
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                  ;
  1815                                  ;       IRQ0    Clock Tick Interrupt
  1816                                  ;
  1817                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1818                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1819                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1820                                  ;
  1821                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1822                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1823                                  ;
  1824                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1825                                  ;       zero, the floppy disk motors are turned off.
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  clocktick                                       ;clock tick interrupt
  1829                                                          push    eax                                             ;save non-volatile regs
  1830                                                          push    edx                                             ;
  1831                                                          push    ds                                              ;
  1832                                  ;
  1833                                  ;       End the interrupt.
  1834                                  ;
  1835                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1836                                  ;
  1837                                  ;       Update the clock tick count and the elapsed days as needed.
  1838                                  ;
  1839                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1840                                                          pop     ds                                              ;... into data segment register
  1841                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1842                                                          inc     eax                                             ;increment clock ticks
  1843                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1844                                                          jb      irq0.10                                         ;no, skip ahead
  1845                                                          inc     byte [wbClockDays]                              ;increment clock days
  1846                                                          xor     eax,eax                                         ;reset clock ticks
  1847                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1848                                  ;
  1849                                  ;       Decrement floppy disk motor timeout.
  1850                                  ;
  1851                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1852                                                          je      irq0.20                                         ;yes, skip ahead
  1853                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1854                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1855                                  ;
  1856                                  ;       Turn off the floppy disk motor if appropriate.
  1857                                  ;
  1858                                                          sti                                                     ;enable maskable interrupts
  1859                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1860                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1861                                                          in      al,dx                                           ;FDC main status byte
  1862                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1863                                                          jnz     irq0.15                                         ;wait while busy
  1864                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1865                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1866                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1867                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1868                                                          out     dx,al                                           ;turn motor off
  1869                                  ;
  1870                                  ;       Enable maskable interrupts.
  1871                                  ;
  1872                                  irq0.20                 sti                                                     ;enable maskable interrupts
  1873                                  ;
  1874                                  ;       Restore and return.
  1875                                  ;
  1876                                                          pop     ds                                              ;restore modified regs
  1877                                                          pop     edx                                             ;
  1878                                                          pop     eax                                             ;
  1879                                                          iretd                                                   ;return
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       IRQ1    Keyboard Interrupt
  1883                                  ;
  1884                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1885                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1886                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1887                                  ;       ALL modified registers upon return.
  1888                                  ;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                                          menter  keyboard                                        ;keyboard interrrupt
  1891                                                          push    eax                                             ;save non-volatile regs
  1892                                                          push    ebx                                             ;
  1893                                                          push    ecx                                             ;
  1894                                                          push    esi                                             ;
  1895                                                          push    ds                                              ;
  1896                                  ;
  1897                                  ;       End the interrupt.
  1898                                  ;
  1899                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1900                                  ;
  1901                                  ;       Handle keyboard scan-codes.
  1902                                  ;
  1903                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1904                                                          pop     ds                                              ;... into data segment register
  1905                                                          xor     al,al                                           ;zero
  1906                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1907                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1908                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1909                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  1910                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  1911                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  1912                                                          mov     al,' '                                          ;space
  1913                                                          mov     [wbConsoleChar],al                              ;set character to space
  1914                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1915                                                          not     al                                              ;controller timeout mask
  1916                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1917                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  1918                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  1919                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1920                                                          jz      irq1.140                                        ;yes, skip ahead
  1921                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  1922                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  1923                                                          mov     ah,al                                           ;copy scan code 0
  1924                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1925                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1926                                                          je      irq1.30                                         ;yes, set flag
  1927                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1928                                                          je      irq1.40                                         ;yes, reset flag
  1929                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1930                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1931                                                          je      irq1.30                                         ;yes, set flag
  1932                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1933                                                          je      irq1.40                                         ;yes, reset flag
  1934                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  1935                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1936                                                          je      irq1.30                                         ;yes, set flag
  1937                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1938                                                          je      irq1.40                                         ;yes, reset flag
  1939                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  1940                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1941                                                          je      irq1.30                                         ;yes, set flag
  1942                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1943                                                          je      irq1.40                                         ;yes, reset flag
  1944                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  1945                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  1946                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1947                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  1948                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  1949                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1950                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  1951                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  1952                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1953                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  1954                                                          jne     irq1.70                                         ;no, skip ahead
  1955                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1956                                                          jz      irq1.140                                        ;yes, skip ahead
  1957                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  1958                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  1959                                                          mov     ah,al                                           ;copy scan code 1
  1960                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  1961                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1962                                                          je      irq1.30                                         ;yes, set flag
  1963                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1964                                                          je      irq1.40                                         ;yes, reset flag
  1965                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  1966                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1967                                                          je      irq1.30                                         ;yes, set flag
  1968                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1969                                                          je      irq1.40                                         ;yes, reset flag
  1970                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  1971                                                          je      irq1.80                                         ;yes, skip ahead
  1972                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  1973                                                          je      irq1.80                                         ;yes, skip ahead
  1974                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  1975                                                          je      irq1.10                                         ;yes, continue
  1976                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  1977                                                          jne     irq1.20                                         ;no, skip ahead
  1978                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  1979                                                          jz      irq1.140                                        ;yes, skip ahead
  1980                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  1981                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  1982                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1983                                                          jz      irq1.140                                        ;yes, skip ahead
  1984                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  1985                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  1986                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  1987                                  irq1.30                 or      bl,al                                           ;set shift flag
  1988                                                          jmp     irq1.60                                         ;skip ahead
  1989                                  irq1.40                 not     al                                              ;convert flag to mask
  1990                                                          and     bl,al                                           ;reset shift flag
  1991                                                          jmp     irq1.60                                         ;skip ahead
  1992                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  1993                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  1994                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  1995                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  1996                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  1997                                                          jmp     irq1.150                                        ;finish keyboard handling
  1998                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  1999                                                          jne     irq1.80                                         ;no continue
  2000                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2001                                                          jz      irq1.140                                        ;yes, skip ahead
  2002                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2003                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2004                                                          mov     ah,al                                           ;copy scan code 1
  2005                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2006                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2007                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2008                                                          jz      irq1.140                                        ;yes, skip ahead
  2009                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2010                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2011                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2012                                                          jz      irq1.140                                        ;yes, skip ahead
  2013                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2014                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2015                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2016                                                          jz      irq1.140                                        ;yes, skip ahead
  2017                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2018                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2019                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2020                                                          jz      irq1.140                                        ;yes, skip ahead
  2021                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2022                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2023                                                          jmp     irq1.150                                        ;continue
  2024                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2025                                                          test    ah,EKEYBUP                                      ;release code?
  2026                                                          jnz     irq1.130                                        ;yes, skip ahead
  2027                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2028                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2029                                                          jz      irq1.90                                         ;no, skip ahead
  2030                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2031                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2032                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2033                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2034                                                          jz      irq1.100                                        ;no skip ahead
  2035                                                          mov     cl,al                                           ;copy ASCII code
  2036                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2037                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2038                                                          jb      irq1.100                                        ;yes, skip ahead
  2039                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2040                                                          ja      irq1.100                                        ;yes, skip ahead
  2041                                                          xor     al,EASCIICASE                                   ;switch case
  2042                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2043                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2044                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2045                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2046                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2047                                  ;
  2048                                  ;       Enable maskable interrupts.
  2049                                  ;
  2050                                                          sti                                                     ;enable maskable interrupts
  2051                                  ;
  2052                                  ;       Restore and return.
  2053                                  ;
  2054                                                          pop     ds                                              ;restore non-volatile regs
  2055                                                          pop     esi                                             ;
  2056                                                          pop     ecx                                             ;
  2057                                                          pop     ebx                                             ;
  2058                                                          pop     eax                                             ;
  2059                                                          iretd                                                   ;return
  2060                                  ;-----------------------------------------------------------------------------------------------------------------------
  2061                                  ;       Scan-Code to ASCII Translation Tables
  2062                                  ;-----------------------------------------------------------------------------------------------------------------------
  2063                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2064                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2065                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2066                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2067                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2068                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2069                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2070                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2071                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2072                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2073                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2074                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2075                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2076                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2077                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2078                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2079                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2080                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2081                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2082                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2083                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2084                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2085                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2086                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2087                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2088                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2089                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2090                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2091                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2092                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2093                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2094                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2095                                  ;-----------------------------------------------------------------------------------------------------------------------
  2096                                  ;
  2097                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2098                                  ;
  2099                                  ;-----------------------------------------------------------------------------------------------------------------------
  2100                                                          menter  iochannel                                       ;secondary 8259A cascade
  2101                                                          push    eax                                             ;save modified regs
  2102                                                          jmp     hwint                                           ;end interrupt and return
  2103                                  ;-----------------------------------------------------------------------------------------------------------------------
  2104                                  ;
  2105                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2106                                  ;
  2107                                  ;-----------------------------------------------------------------------------------------------------------------------
  2108                                                          menter  com2                                            ;serial port 2 interrupt
  2109                                                          push    eax                                             ;save modified regs
  2110                                                          jmp     hwint                                           ;end interrupt and return
  2111                                  ;-----------------------------------------------------------------------------------------------------------------------
  2112                                  ;
  2113                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2114                                  ;
  2115                                  ;-----------------------------------------------------------------------------------------------------------------------
  2116                                                          menter  com1                                            ;serial port 1 interrupt
  2117                                                          push    eax                                             ;save modified regs
  2118                                                          jmp     hwint                                           ;end interrupt and return
  2119                                  ;-----------------------------------------------------------------------------------------------------------------------
  2120                                  ;
  2121                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2122                                  ;
  2123                                  ;-----------------------------------------------------------------------------------------------------------------------
  2124                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2125                                                          push    eax                                             ;save modified regs
  2126                                                          jmp     hwint                                           ;end interrupt and return
  2127                                  ;-----------------------------------------------------------------------------------------------------------------------
  2128                                  ;
  2129                                  ;       IRQ6    Diskette Hardware Interrupt
  2130                                  ;
  2131                                  ;-----------------------------------------------------------------------------------------------------------------------
  2132                                                          menter  diskette                                        ;floppy disk interrupt
  2133                                                          push    eax                                             ;save non-volatile regs
  2134                                                          push    ds                                              ;
  2135                                                          call    PutPrimaryEndOfInt                              ;end the interrupt
  2136                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2137                                                          pop     ds                                              ;... into DS register
  2138                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2139                                                          or      al,10000000b                                    ;set IRQ flag
  2140                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2141                                                          sti                                                     ;enable maskable interrupts
  2142                                                          pop     ds                                              ;restore non-volatile regs
  2143                                                          pop     eax                                             ;
  2144                                                          iretd                                                   ;return from interrupt
  2145                                  ;-----------------------------------------------------------------------------------------------------------------------
  2146                                  ;
  2147                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2148                                  ;
  2149                                  ;-----------------------------------------------------------------------------------------------------------------------
  2150                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2151                                                          push    eax                                             ;save modified regs
  2152                                                          jmp     hwint                                           ;end interrupt and return
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                  ;
  2155                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2156                                  ;
  2157                                  ;-----------------------------------------------------------------------------------------------------------------------
  2158                                                          menter  rtclock                                         ;real-time clock interrupt
  2159                                                          push    eax                                             ;save modified regs
  2160                                                          jmp     hwwint                                          ;end interrupt and return
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162                                  ;
  2163                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2164                                  ;
  2165                                  ;-----------------------------------------------------------------------------------------------------------------------
  2166                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2167                                                          push    eax                                             ;save modified regs
  2168                                                          jmp     hwwint                                          ;end interrupt and return
  2169                                  ;-----------------------------------------------------------------------------------------------------------------------
  2170                                  ;
  2171                                  ;       IRQ10   Reserved Hardware Interrupt
  2172                                  ;
  2173                                  ;-----------------------------------------------------------------------------------------------------------------------
  2174                                                          menter  irq10                                           ;reserved
  2175                                                          push    eax                                             ;save modified regs
  2176                                                          jmp     hwwint                                          ;end interrupt and return
  2177                                  ;-----------------------------------------------------------------------------------------------------------------------
  2178                                  ;
  2179                                  ;       IRQ11   Reserved Hardware Interrupt
  2180                                  ;
  2181                                  ;-----------------------------------------------------------------------------------------------------------------------
  2182                                                          menter  irq11                                           ;reserved
  2183                                                          push    eax                                             ;save modified regs
  2184                                                          jmp     hwwint                                          ;end interrupt and return
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  ;
  2187                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2188                                  ;
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2191                                                          push    eax                                             ;save modified regs
  2192                                                          jmp     hwwint                                          ;end interrupt and return
  2193                                  ;-----------------------------------------------------------------------------------------------------------------------
  2194                                  ;
  2195                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2196                                  ;
  2197                                  ;-----------------------------------------------------------------------------------------------------------------------
  2198                                                          menter  coprocessor                                     ;coprocessor interrupt
  2199                                                          push    eax                                             ;save modified regs
  2200                                                          jmp     hwwint                                          ;end interrupt and return
  2201                                  ;-----------------------------------------------------------------------------------------------------------------------
  2202                                  ;
  2203                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2204                                  ;
  2205                                  ;-----------------------------------------------------------------------------------------------------------------------
  2206                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2207                                                          push    eax                                             ;save modified regs
  2208                                                          jmp     hwwint                                          ;end interrupt and return
  2209                                  ;-----------------------------------------------------------------------------------------------------------------------
  2210                                  ;
  2211                                  ;       IRQ15   Reserved Hardware Interrupt
  2212                                  ;
  2213                                  ;-----------------------------------------------------------------------------------------------------------------------
  2214                                                          menter  irq15                                           ;reserved
  2215                                                          push    eax                                             ;save modified regs
  2216                                                          jmp     hwwint                                          ;end interrupt and return
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       Exit from hardware interrupt
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2223                                                          jmp     hwint90                                         ;skip ahead
  2224                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2225                                  hwint90                 sti                                                     ;enable maskable interrupts
  2226                                                          pop     eax                                             ;restore modified regs
  2227                                                          iretd                                                   ;return from interrupt
  2228                                  ;-----------------------------------------------------------------------------------------------------------------------
  2229                                  ;
  2230                                  ;       INT 30h Operating System Software Service Interrupt
  2231                                  ;
  2232                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2233                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2234                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2235                                  ;       the entry address of the specific function from a table.
  2236                                  ;
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                                          menter  svc
  2239                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2240                                                          jae     svc90                                           ;yes, skip ahead
  2241                                                          movzx   eax,al                                          ;function
  2242                                                          shl     eax,2                                           ;offset into table
  2243                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2244                                  svc90                   iretd                                                   ;return from interrupt
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                  ;
  2247                                  ;       Service Request Table
  2248                                  ;
  2249                                  ;
  2250                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2251                                  ;
  2252                                  ;-----------------------------------------------------------------------------------------------------------------------
  2253                                  tsvc                    tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2254                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2255                                  ;-----------------------------------------------------------------------------------------------------------------------
  2256                                  ;
  2257                                  ;       Service Request Macros
  2258                                  ;
  2259                                  ;       These macros provide positional parameterization of service request calls.
  2260                                  ;
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                  %macro                  placeCursor 0
  2263                                                          mov     al,ePlaceCursor                                 ;function code
  2264                                                          int     _svc                                            ;invoke OS service
  2265                                  %endmacro
  2266                                  ;=======================================================================================================================
  2267                                  ;
  2268                                  ;       Kernel Function Library
  2269                                  ;
  2270                                  ;=======================================================================================================================
  2271                                  ;=======================================================================================================================
  2272                                  ;
  2273                                  ;       Console Helper Routines
  2274                                  ;
  2275                                  ;       PutConsoleHexByte
  2276                                  ;       PutConsoleOIAChar
  2277                                  ;       PutConsoleOIAShift
  2278                                  ;
  2279                                  ;=======================================================================================================================
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281                                  ;
  2282                                  ;       Routine:        PutConsoleHexByte
  2283                                  ;
  2284                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2285                                  ;
  2286                                  ;       In:             AL      byte value
  2287                                  ;                       CL      column
  2288                                  ;                       CH      row
  2289                                  ;                       DS      OS data selector
  2290                                  ;                       ES      CGA selector
  2291                                  ;
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2294                                                          shr     al,4                                            ;hi-order nybble
  2295                                                          call    .10                                             ;make ASCII and store
  2296                                                          pop     eax                                             ;byte value
  2297                                                          and     al,0Fh                                          ;lo-order nybble
  2298                                  .10                     or      al,030h                                         ;apply ASCII zone
  2299                                                          cmp     al,03Ah                                         ;numeric?
  2300                                                          jb      .20                                             ;yes, skip ahead
  2301                                                          add     al,7                                            ;add ASCII offset for alpha
  2302                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2303                                                          ret                                                     ;return
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  ;
  2306                                  ;       Routine:        PutConsoleOIAChar
  2307                                  ;
  2308                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2309                                  ;
  2310                                  ;       In:             DS      OS data selector
  2311                                  ;
  2312                                  ;-----------------------------------------------------------------------------------------------------------------------
  2313                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2314                                                          push    ecx                                             ;
  2315                                                          push    esi                                             ;
  2316                                                          push    ds                                              ;
  2317                                                          push    es                                              ;
  2318                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2319                                                          pop     ds                                              ;... into data segment register
  2320                                                          push    EGDTCGA                                         ;load CGA selector ...
  2321                                                          pop     es                                              ;... into extra segment register
  2322                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2323                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2324                                                          mov     bl,0                                            ;starting column
  2325                                                          mov     ecx,6                                           ;maximum scan codes
  2326                                  .10                     push    ecx                                             ;save remaining count
  2327                                                          mov     ecx,ebx                                         ;row, column
  2328                                                          lodsb                                                   ;read scan code
  2329                                                          or      al,al                                           ;scan code present?
  2330                                                          jz      .20                                             ;no, skip ahead
  2331                                                          call    PutConsoleHexByte                               ;display scan code
  2332                                                          jmp     .30                                             ;continue
  2333                                  .20                     mov     al,' '                                          ;ASCII space
  2334                                                          call    SetConsoleChar                                  ;display space
  2335                                                          mov     al,' '                                          ;ASCII space
  2336                                                          call    SetConsoleChar                                  ;display space
  2337                                  .30                     add     bl,2                                            ;next column (+2)
  2338                                                          pop     ecx                                             ;restore remaining
  2339                                                          loop    .10                                             ;next code
  2340                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2341                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2342                                                          jb      .40                                             ;no, skip ahead
  2343                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2344                                                          ja      .40                                             ;no, skip ahead
  2345                                                          mov     ch,bh                                           ;OIA row
  2346                                                          mov     cl,40                                           ;character display column
  2347                                                          call    SetConsoleChar                                  ;display ASCII character
  2348                                  .40                     pop     es                                              ;restore non-volatile regs
  2349                                                          pop     ds                                              ;
  2350                                                          pop     esi                                             ;
  2351                                                          pop     ecx                                             ;
  2352                                                          pop     ebx                                             ;
  2353                                                          ret                                                     ;return
  2354                                  ;-----------------------------------------------------------------------------------------------------------------------
  2355                                  ;
  2356                                  ;       Routine:        PutConsoleOIAShift
  2357                                  ;
  2358                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2359                                  ;
  2360                                  ;       In:             BL      shift flags
  2361                                  ;                       BH      lock flags
  2362                                  ;                       DS      OS data selector
  2363                                  ;
  2364                                  ;-----------------------------------------------------------------------------------------------------------------------
  2365                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2366                                                          push    es                                              ;
  2367                                                          push    EGDTCGA                                         ;load CGA selector ...
  2368                                                          pop     es                                              ;... into ES register
  2369                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2370                                                          mov     al,EASCIISPACE                                  ;space is default character
  2371                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2372                                                          jz      .10                                             ;no, skip ahead
  2373                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2374                                  .10                     mov     cl,14                                           ;indicator column
  2375                                                          call    SetConsoleChar                                  ;display ASCII character
  2376                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2377                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2378                                                          jz      .20                                             ;no, skip ahead
  2379                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2380                                  .20                     mov     cl,64                                           ;indicator column
  2381                                                          call    SetConsoleChar                                  ;display ASCII character
  2382                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2383                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2384                                                          jz      .30                                             ;no, skip ahead
  2385                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2386                                  .30                     mov     cl,15                                           ;indicator column
  2387                                                          call    SetConsoleChar                                  ;display ASCII character
  2388                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2389                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2390                                                          jz      .40                                             ;no, skip ahead
  2391                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2392                                  .40                     mov     cl,63                                           ;indicator column
  2393                                                          call    SetConsoleChar                                  ;display ASCII character
  2394                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2395                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2396                                                          jz      .50                                             ;no, skip ahead
  2397                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2398                                  .50                     mov     cl,16                                           ;indicator column
  2399                                                          call    SetConsoleChar                                  ;display ASCII character
  2400                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2401                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2402                                                          jz      .60                                             ;no, skip ahead
  2403                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2404                                  .60                     mov     cl,62                                           ;indicator column
  2405                                                          call    SetConsoleChar                                  ;display ASCII character
  2406                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2407                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2408                                                          jz      .70                                             ;no, skip ahead
  2409                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2410                                  .70                     mov     cl,78                                           ;indicator column
  2411                                                          call    SetConsoleChar                                  ;display ASCII character
  2412                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2413                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2414                                                          jz      .80                                             ;no, skip ahead
  2415                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2416                                  .80                     mov     cl,77                                           ;indicator column
  2417                                                          call    SetConsoleChar                                  ;display ASCII character
  2418                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2419                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2420                                                          jz      .90                                             ;no, skip ahead
  2421                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2422                                  .90                     mov     cl,76                                           ;indicator column
  2423                                                          call    SetConsoleChar                                  ;display ASCII character
  2424                                                          pop     es                                              ;restore non-volatile regs
  2425                                                          pop     ecx                                             ;
  2426                                                          ret                                                     ;return
  2427                                  ;=======================================================================================================================
  2428                                  ;
  2429                                  ;       Memory-Mapped Video Routines
  2430                                  ;
  2431                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2432                                  ;
  2433                                  ;       SetConsoleChar
  2434                                  ;
  2435                                  ;=======================================================================================================================
  2436                                  ;-----------------------------------------------------------------------------------------------------------------------
  2437                                  ;
  2438                                  ;       Routine:        SetConsoleChar
  2439                                  ;
  2440                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2441                                  ;
  2442                                  ;       In:             AL      ASCII character
  2443                                  ;                       CL      column
  2444                                  ;                       CH      row
  2445                                  ;                       ES      CGA selector
  2446                                  ;
  2447                                  ;       Out:            EAX     last target address written (ES:)
  2448                                  ;                       CL      column + 1
  2449                                  ;
  2450                                  ;-----------------------------------------------------------------------------------------------------------------------
  2451                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2452                                                          movzx   eax,ch                                          ;row
  2453                                                          mov     ah,ECONCOLS                                     ;cols/row
  2454                                                          mul     ah                                              ;row * cols/row
  2455                                                          add     al,cl                                           ;add column
  2456                                                          adc     ah,0                                            ;handle carry
  2457                                                          shl     eax,1                                           ;screen offset
  2458                                                          mov     [es:eax],dl                                     ;store character
  2459                                                          inc     cl                                              ;next column
  2460                                                          ret                                                     ;return
  2461                                  ;=======================================================================================================================
  2462                                  ;
  2463                                  ;       Input/Output Routines
  2464                                  ;
  2465                                  ;       These routines read and/or write directly to ports.
  2466                                  ;
  2467                                  ;       PlaceCursor
  2468                                  ;       PutPrimaryEndOfInt
  2469                                  ;       PutSecondaryEndOfInt
  2470                                  ;       SetKeyboardLamps
  2471                                  ;       WaitForKeyInBuffer
  2472                                  ;       WaitForKeyOutBuffer
  2473                                  ;
  2474                                  ;=======================================================================================================================
  2475                                  ;-----------------------------------------------------------------------------------------------------------------------
  2476                                  ;
  2477                                  ;       Routine:        PlaceCursor
  2478                                  ;
  2479                                  ;       Description:    This routine positions the cursor on the console.
  2480                                  ;
  2481                                  ;       In:             DS      OS data selector
  2482                                  ;
  2483                                  ;-----------------------------------------------------------------------------------------------------------------------
  2484                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2485                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2486                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2487                                                          mul     ah                                              ;row offset
  2488                                                          add     al,[wbConsoleColumn]                            ;add column
  2489                                                          adc     ah,0                                            ;add overflow
  2490                                                          mov     ecx,eax                                         ;screen offset
  2491                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2492                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2493                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2494                                                          out     dx,al                                           ;select register
  2495                                                          inc     edx                                             ;data port
  2496                                                          mov     al,ch                                           ;hi-order cursor loc
  2497                                                          out     dx,al                                           ;store hi-order loc
  2498                                                          dec     edx                                             ;register select port
  2499                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2500                                                          out     dx,al                                           ;select register
  2501                                                          inc     edx                                             ;data port
  2502                                                          mov     al,cl                                           ;lo-order cursor loc
  2503                                                          out     dx,al                                           ;store lo-order loc
  2504                                                          pop     ecx                                             ;restore non-volatile regs
  2505                                                          ret                                                     ;return
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                  ;
  2508                                  ;       Routine:        PutPrimaryEndOfInt
  2509                                  ;
  2510                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2511                                  ;
  2512                                  ;-----------------------------------------------------------------------------------------------------------------------
  2513                                  PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2514                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2515                                                          ret                                                     ;return
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  ;
  2518                                  ;       Routine:        PutSecondaryEndOfInt
  2519                                  ;
  2520                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2521                                  ;
  2522                                  ;-----------------------------------------------------------------------------------------------------------------------
  2523                                  PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2524                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2525                                                          ret                                                     ;return
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  ;
  2528                                  ;       Routine:        SetKeyboardLamps
  2529                                  ;
  2530                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2531                                  ;
  2532                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2533                                  ;
  2534                                  ;-----------------------------------------------------------------------------------------------------------------------
  2535                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2536                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2537                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  2538                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2539                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2540                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2541                                                          mov     al,bh                                           ;set/reset lamps value
  2542                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  2543                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2544                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2545                                                          ret                                                     ;return
  2546                                  ;-----------------------------------------------------------------------------------------------------------------------
  2547                                  ;
  2548                                  ;       Routine:        WaitForKeyInBuffer
  2549                                  ;
  2550                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2551                                  ;
  2552                                  ;       Out:            ZF      1 = Input buffer ready
  2553                                  ;                               0 = Input buffer not ready after timeout
  2554                                  ;
  2555                                  ;-----------------------------------------------------------------------------------------------------------------------
  2556                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2557                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2558                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2559                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  2560                                                          loopnz  .10                                             ;yes, repeat till timeout
  2561                                                          pop     ecx                                             ;restore non-volatile regs
  2562                                                          ret                                                     ;return
  2563                                  ;-----------------------------------------------------------------------------------------------------------------------
  2564                                  ;
  2565                                  ;       Routine:        WaitForKeyOutBuffer
  2566                                  ;
  2567                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2568                                  ;
  2569                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2570                                  ;                               0 = Output buffer empty after timeout
  2571                                  ;
  2572                                  ;-----------------------------------------------------------------------------------------------------------------------
  2573                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2574                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2575                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2576                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  2577                                                          loopz   .10                                             ;loop until output buffer bit
  2578                                                          pop     ecx                                             ;restore non-volatile regs
  2579                                                          ret                                                     ;return
  2580                                  ;-----------------------------------------------------------------------------------------------------------------------
  2581                                  ;
  2582                                  ;       End of the Kernel Function Library
  2583                                  ;
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2586                                  ;=======================================================================================================================
  2587                                  ;
  2588                                  ;       Console Task
  2589                                  ;
  2590                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2591                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2592                                  ;       screen and responds to user commands.
  2593                                  ;
  2594                                  ;=======================================================================================================================
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2598                                  ;
  2599                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2600                                  ;
  2601                                  ;-----------------------------------------------------------------------------------------------------------------------
  2602                                  section                 constack                                                ;console task stack
  2603                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;
  2606                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2607                                  ;
  2608                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2609                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2610                                  ;       16 descriptors. Six are initially defined.
  2611                                  ;
  2612                                  ;-----------------------------------------------------------------------------------------------------------------------
  2613                                  section                 conldt                                                  ;console local descriptors
  2614                                                          dq      004093004780007Fh                               ;04 TSS alias
  2615                                                          dq      004093004700007Fh                               ;0c LDT alias
  2616                                                          dq      00409300400006FFh                               ;14 stack
  2617                                                          dq      00CF93000000FFFFh                               ;1c data
  2618                                                          dq      00409B0050000FFFh                               ;24 code
  2619                                                          dq      00409300480007FFh                               ;2c message queue
  2620                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2621                                  ;-----------------------------------------------------------------------------------------------------------------------
  2622                                  ;
  2623                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2624                                  ;
  2625                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2626                                  ;       segment. CS to console code.
  2627                                  ;
  2628                                  ;-----------------------------------------------------------------------------------------------------------------------
  2629                                  section                 contss                                                  ;console task state segment
  2630                                                          dd      0                                               ;00 back-link tss
  2631                                                          dd      0700h                                           ;04 esp ring 0
  2632                                                          dd      0014h                                           ;08 ss ring 0
  2633                                                          dd      0700h                                           ;0c esp ring 1
  2634                                                          dd      0014h                                           ;10 es ring 1
  2635                                                          dd      0700h                                           ;14 esp ring 2
  2636                                                          dd      0014h                                           ;18 ss ring 2
  2637                                                          dd      0                                               ;1c cr ring 3
  2638                                                          dd      0                                               ;20 eip
  2639                                                          dd      0200h                                           ;24 eflags
  2640                                                          dd      0                                               ;28 eax
  2641                                                          dd      0                                               ;2c ecx
  2642                                                          dd      0                                               ;30 edx
  2643                                                          dd      0                                               ;34 ebx
  2644                                                          dd      0700h                                           ;38 esp ring 3
  2645                                                          dd      0                                               ;3c ebp
  2646                                                          dd      0                                               ;40 esi
  2647                                                          dd      0                                               ;44 edi
  2648                                                          dd      001Ch                                           ;48 es
  2649                                                          dd      0024h                                           ;4c cs
  2650                                                          dd      0014h                                           ;50 ss ring 3
  2651                                                          dd      001Ch                                           ;54 ds
  2652                                                          dd      0                                               ;58 fs
  2653                                                          dd      0                                               ;5c gs
  2654                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2655                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2659                                  ;
  2660                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2661                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2662                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2663                                  ;       event.
  2664                                  ;
  2665                                  ;-----------------------------------------------------------------------------------------------------------------------
  2666                                  section                 conmque                                                 ;console message queue
  2667                                                          dd      8                                               ;head pointer
  2668                                                          dd      8                                               ;tail pointer
  2669                                                          times   510 dd 0                                        ;queue elements
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                  ;
  2672                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2673                                  ;
  2674                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2675                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2676                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2677                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2678                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2679                                  ;       board input, echoing to the console screen and responding to user commands.
  2680                                  ;
  2681                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2682                                  ;
  2683                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2684                                  ;                               |  Real Mode Interrupt Vectors                  |
  2685                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2686                                  ;                               |  Reserved BIOS Memory Area                    |
  2687                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2688                                  ;                               |  Shared Kernel Memory Area                    |
  2689                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2690                                  ;                               |  Global Descriptor Table (GDT)                |
  2691                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2692                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2693                                  ;                       002000  +-----------------------------------------------+
  2694                                  ;                               |  Interrupt Handlers                           |
  2695                                  ;                               |  Kernel Function Library                      |
  2696                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2697                                  ;                               |  Console Task Stack Area                      |
  2698                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2699                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2700                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2701                                  ;                               |  Console Task Task State Segment (TSS)        |
  2702                                  ;                       004800  +-----------------------------------------------+
  2703                                  ;                               |  Console Task Message Queue                   |
  2704                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2705                                  ;                               |  Console Task Code                            |
  2706                                  ;                               |  Console Task Constants                       |
  2707                                  ;                       006000  +===============================================+
  2708                                  ;
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2711                                  ;
  2712                                  ;       Initialize console work areas to low values.
  2713                                  ;
  2714                                  ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  2715                                                          xor     al,al                                           ;initialization value
  2716                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2717                                                          cld                                                     ;forward strings
  2718                                                          rep     stosb                                           ;initialize data
  2719                                  ;
  2720                                  ;       Initialize the active panel variables.
  2721                                  ;
  2722                                                          mov     eax,czPnlCon001                                 ;initial console panel
  2723                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  2724                                  ;
  2725                                  ;       Address the console screen memory.
  2726                                  ;
  2727                                                          push    EGDTCGA                                         ;load CGA video selector...
  2728                                                          pop     es                                              ;...into extra segment reg
  2729                                  ;
  2730                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  2731                                  ;
  2732                                                          mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  2733                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2734                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2735                                                          rep     stosd                                           ;reset OIA
  2736                                  ;
  2737                                  ;       Clear the console rows. (This is done after every attention key).
  2738                                  ;
  2739                                  .20                     xor     edi,edi                                         ;target offset
  2740                                                          mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  2741                                                          mov     eax,ECONCLEARDWORD                              ;initialization value
  2742                                                          rep     stosd                                           ;reset screen body
  2743                                  ;
  2744                                  ;       Reset the input field row and column. Address the panel template.
  2745                                  ;
  2746                                                          xor     eax,eax                                         ;zero register
  2747                                                          mov     [wdConsoleInput],eax                            ;zero input addr
  2748                                                          mov     [wbConsoleRow],al                               ;zero console row
  2749                                                          mov     [wbConsoleColumn],al                            ;zero console column
  2750                                  ;
  2751                                  ;       Load the field address. Exit loop if address is null.
  2752                                  ;
  2753                                                          mov     esi,[wdConsolePanel]                            ;panel template
  2754                                  .30                     lodsd                                                   ;field value addr
  2755                                                          test    eax,eax                                         ;end of panel?
  2756                                                          jz      .70                                             ;yes, exit loop
  2757                                                          mov     ebx,eax                                         ;field value addr
  2758                                  ;
  2759                                  ;       Load the field row, column, color and length.
  2760                                  ;
  2761                                                          lodsb                                                   ;attributes
  2762                                                          mov     ch,al                                           ;row
  2763                                                          lodsb                                                   ;column
  2764                                                          mov     cl,al                                           ;column
  2765                                                          lodsb                                                   ;color
  2766                                                          mov     dh,al                                           ;color
  2767                                                          lodsb                                                   ;length
  2768                                                          mov     dl,al                                           ;length
  2769                                  ;
  2770                                  ;       Test the row high-bit for input field indication
  2771                                  ;
  2772                                                          test    ch,080h                                         ;input field?
  2773                                                          jz      .40                                             ;no, branch
  2774                                                          and     ch,07Fh                                         ;clear input field indicator
  2775                                  ;
  2776                                  ;       Save the row and column if this is the first input field
  2777                                  ;
  2778                                                          mov     al,[wbConsoleRow]                               ;console row
  2779                                                          or      al,[wbConsoleColumn]                            ;already have an input field?
  2780                                                          jnz     .40                                             ;yes, branch
  2781                                                          mov     [wbConsoleRow],ch                               ;update console row
  2782                                                          mov     [wbConsoleColumn],cl                            ;update console column
  2783                                  ;
  2784                                  ;       Compute the target offset.
  2785                                  ;
  2786                                  .40                     movzx   eax,ch                                          ;row
  2787                                                          mov     ah,ECONCOLS                                     ;columns per row
  2788                                                          mul     ah                                              ;row offset
  2789                                                          add     al,cl                                           ;add column
  2790                                                          adc     ah,0                                            ;handle overflow
  2791                                                          shl     eax,1                                           ;two-bytes per column
  2792                                                          mov     edi,eax                                         ;target offset
  2793                                  ;
  2794                                  ;       Display the field contents
  2795                                  ;
  2796                                                          xchg    ebx,esi                                         ;swap panel and field addr
  2797                                                          movzx   ecx,dl                                          ;length
  2798                                                          mov     ah,dh                                           ;color
  2799                                  .50                     lodsb                                                   ;character
  2800                                                          test    al,al                                           ;end of value?
  2801                                                          jz      .60                                             ;yes, branch
  2802                                                          stosw                                                   ;store character and color
  2803                                                          loop    .50                                             ;next character
  2804                                  .60                     xchg    ebx,esi                                         ;swap panel and field addr
  2805                                                          jmp     short .30                                       ;next field
  2806                                  ;
  2807                                  ;       Place the cursor if we have an input field
  2808                                  ;
  2809                                  .70                     mov     ah,[wbConsoleRow]                               ;field row
  2810                                                          mov     al,[wbConsoleColumn]                            ;field column
  2811                                                          or      al,ah                                           ;input field?
  2812                                                          jz      .80                                             ;no, branch
  2813                                                          placeCursor                                             ;position the cursor
  2814                                  ;
  2815                                  ;       Enter halt loop
  2816                                  ;
  2817                                  .80                     sti                                                     ;enable interrupts
  2818                                                          hlt                                                     ;halt until interrupt
  2819                                                          jmp     .80                                             ;continue halt loop
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821                                  ;
  2822                                  ;       Constants
  2823                                  ;
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;-----------------------------------------------------------------------------------------------------------------------
  2826                                  ;
  2827                                  ;       Panels
  2828                                  ;
  2829                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  2830                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  2831                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  2832                                  ;
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                  czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  2835                                                          db      00,00,02h,06                                    ;flags+row, col, attr, length
  2836                                                          dd      czFldTitleCon001
  2837                                                          db      00,30,07h,20
  2838                                                          dd      czFldDatTmCon001
  2839                                                          db      00,63,02h,17
  2840                                                          dd      czFldPrmptCon001
  2841                                                          db      23,00,07h,01
  2842                                                          dd      wzConsoleInBuffer
  2843                                                          db      128+23,01,0Fh,79
  2844                                                          dd      0                                               ;end of panel
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  ;
  2847                                  ;       Strings
  2848                                  ;
  2849                                  ;-----------------------------------------------------------------------------------------------------------------------
  2850                                  czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  2851                                  czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  2852                                  czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  2853                                  czFldPrmptCon001        db      ":"                                             ;command prompt
  2854                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2855                                  %endif
  2856                                  %ifdef BUILDDISK
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  ;
  2859                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2860                                  ;
  2861                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2862                                  ;
  2863                                  ;-----------------------------------------------------------------------------------------------------------------------
  2864                                  section                 unused                                                  ;unused disk space
  2865                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2866                                  %endif
  2867                                  ;=======================================================================================================================
  2868                                  ;
  2869                                  ;       End of Program Code
  2870                                  ;
  2871                                  ;=======================================================================================================================
