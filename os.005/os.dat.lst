     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   272                                  ;
   273                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   274                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   275                                  ;
   276                                  ;       0.......        Segment is not present in memory (triggers int 11)
   277                                  ;       1.......        Segment is present in memory
   278                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   279                                  ;       ...0....        Segment is a system segment
   280                                  ;       ...00010                Local Descriptor Table
   281                                  ;       ...00101                Task Gate
   282                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   283                                  ;       ...01100                Call Gate (386)
   284                                  ;       ...01110                Interrupt Gate (386)
   285                                  ;       ...01111                Trap Gate (386)
   286                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   287                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   288                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   292                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  ;
   295                                  ;       Firmware-Defined Values
   296                                  ;
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   301                                  ;
   302                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   303                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   307                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   308                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   309                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   310                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   311                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   312                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   313                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   314                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   315                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   316                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  ;
   319                                  ;       Standards-Based Values
   320                                  ;
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       ASCII                                                                   EASCII...
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   328                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   329                                  EASCIISPACE             equ     020h                                            ;space
   330                                  EASCIIUPPERA            equ     041h                                            ;'A'
   331                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   332                                  EASCIICASE              equ     00100000b                                       ;case bit
   333                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  ;
   336                                  ;       Operating System Values
   337                                  ;
   338                                  ;-----------------------------------------------------------------------------------------------------------------------
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  ;
   341                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   342                                  ;
   343                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   344                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   345                                  ;
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   348                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   349                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   350                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   351                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   352                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   353                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;       Console Constants                                                       ECON...
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ECONCOLS                equ     80                                              ;columns per row
   358                                  ECONROWS                equ     24                                              ;console rows
   359                                  ECONOIAROW              equ     24                                              ;operator information area row
   360                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   361                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   362                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   363                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   364                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   369                                  EGDTCGA                 equ     020h                                            ;cga video selector
   370                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   371                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   372                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   373                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   374                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   375                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   376                                  ;-----------------------------------------------------------------------------------------------------------------------
   377                                  ;       Keyboard Flags                                                          EKEYF...
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   380                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   381                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   382                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   383                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   384                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   385                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   386                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   387                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   388                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   389                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ;       Kernel Constants                                                        EKRN...
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   394                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   395                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   396                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   397                                  ;=======================================================================================================================
   398                                  ;
   399                                  ;       Structures
   400                                  ;
   401                                  ;=======================================================================================================================
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;
   404                                  ;       OSDATA
   405                                  ;
   406                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   407                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   408                                  ;
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  struc                   OSDATA
   411 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   412 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   413 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   414 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   415 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   416 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   417 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   418 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   419 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   420 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   421 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   422 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   423 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   424 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   425 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   426 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   427 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   428 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   429 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   430 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   431 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   432 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   433 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   434 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   435 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   436 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   437 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   438 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   439 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   440 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   441 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   442 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   443 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   444 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   445 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   446 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   447 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   448 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   449 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   450 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   451 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   452 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   453 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   454 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   455 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   456 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   457 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   458 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   459 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   460 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   461 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   462 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   463 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   464 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   465 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   466 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   467 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   468 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   469 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   470 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   471 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   472 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   473 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   474 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   475 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   476 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   477 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   478 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   479 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   480 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   481 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   482 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   483 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   484 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   485 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   486 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   487 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   488 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   489 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   490 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   491 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   492 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   493 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   494 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   495 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   496 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   497 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   498 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   499 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   500 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   501 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   502 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   503 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   504 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   505 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   506 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   507 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   508 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   509 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   510 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   511 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   512                                  ;-----------------------------------------------------------------------------------------------------------------------
   513                                  ;
   514                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   515                                  ;
   516                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   517                                  ;
   518                                  ;-----------------------------------------------------------------------------------------------------------------------
   519                                  ECONDATA                equ     ($)
   520 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   521 00000804 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   522 00000854 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   523 00000855 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   524 00000856 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   525 00000857 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   526 00000858 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   527 00000859 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   528 0000085A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   529 0000085B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   530 0000085C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   531 0000085D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   532 0000085E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   533 0000085F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   534                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   535                                  ;-----------------------------------------------------------------------------------------------------------------------
   536                                  ;
   537                                  ;       End of OS Variables
   538                                  ;
   539                                  ;-----------------------------------------------------------------------------------------------------------------------
   540                                  endstruc
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  ;
   543                                  ;       Macros
   544                                  ;
   545                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   546                                  ;
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  %macro                  mint    1
   549                                  _%1                     equ     ($-$$) / EX86DESCLEN
   550                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   551                                  %endmacro
   552                                  %macro                  mtrap   1
   553                                  _%1                     equ     ($-$$) / EX86DESCLEN
   554                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   555                                  %endmacro
   556                                  %macro                  menter  1
   557                                  ?%1                     equ     ($-$$)
   558                                  %endmacro
   559                                  %macro                  tsvce   1
   560                                  e%1                     equ     ($-tsvc)/4
   561                                                          dd      %1
   562                                  %endmacro
   563                                  %ifdef BUILDBOOT
   564                                  ;=======================================================================================================================
   565                                  ;
   566                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   567                                  ;
   568                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   569                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   570                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   571                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   572                                  ;
   573                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   574                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   575                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   576                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   577                                  ;       immediately followed by a disk parameter table.
   578                                  ;
   579                                  ;=======================================================================================================================
   580                                                          cpu     8086                                            ;assume minimal CPU
   581                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   582                                                          bits    16                                              ;16-bit code at power-up
   583                                  %ifdef BUILDPREP
   584                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   585                                  %else
   586 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   587                                  %endif
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  ;
   590                                  ;       Disk Parameter Table
   591                                  ;
   592                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   593                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   594                                  ;
   595                                  ;-----------------------------------------------------------------------------------------------------------------------
   596 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   597 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   598 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   599 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   600 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   601 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   602 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   603 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   604 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   605                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   606 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   607 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   608 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   609                                  ;
   610                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   611                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   612                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   613                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   614                                  ;       given several possible starting values for CS:IP.
   615                                  ;
   616                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   617 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   618                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   619 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   620 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   621 00000025 B104                                            mov     cl,4                                            ;shift count
   622 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   623 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   624 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   625                                  ;
   626                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   627                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   628                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   629                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   630                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   631                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   632                                  ;
   633 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   634 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   635 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   636 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   637 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   638                                  ;
   639                                  ;       Our boot addressability is now set up according to the following diagram.
   640                                  ;
   641                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   642                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   643                                  ;                               |  256 = 100h bytes                             |
   644                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   645                                  ;                               |  Boot Sector (vstart=0100h)                   |
   646                                  ;                               |  1 sector = 512 = 200h bytes                  |
   647                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   648                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   649                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   650                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   651                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   652                                  ;                               |  2 sectors = 1024 = 400h bytes
   653                                  ;                       009400  +-----------------------------------------------+ DS:1900
   654                                  ;
   655                                  ;       On entry, DL indicates the drive being booted from.
   656                                  ;
   657 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   658                                  ;
   659                                  ;       Compute directory i/o buffer address.
   660                                  ;
   661 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   662 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   663 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   664 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   665                                  ;
   666                                  ;       Compute segment where os.com will be loaded.
   667                                  ;
   668 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   669 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   670 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   671 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   672                                  ;
   673                                  ;       Set the video mode to 80 column, 25 row, text.
   674                                  ;
   675 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   676 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   677                                  ;
   678                                  ;       Write a message to the console so we know we have our addressability established.
   679                                  ;
   680 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   681 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   682                                  ;
   683                                  ;       Initialize the number of directory sectors to search.
   684                                  ;
   685 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   686 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   687                                  ;
   688                                  ;       Compute number of directory sectors and initialize overhead count.
   689                                  ;
   690 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   691 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   692 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   693 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   694                                  ;
   695                                  ;       Compute directory entries per sector.
   696                                  ;
   697 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   698 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   699 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   700                                  ;
   701                                  ;       Compute first logical directory sector and update overhead count.
   702                                  ;
   703 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   704 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   705 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   706 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   707 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   708 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   709                                  ;
   710                                  ;       Read directory sector.
   711                                  ;
   712 0000008E B001                    .30                     mov     al,1                                            ;sector count
   713 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   714 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   715 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   716                                  ;
   717                                  ;       Setup variables to search this directory sector.
   718                                  ;
   719 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   720 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   721 000000A1 7603                                            jna     .40                                             ;no, continue
   722 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   723 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   724 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   725 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   726                                  ;
   727                                  ;       Loop through directory sectors searching for kernel program.
   728                                  ;
   729 000000B1 56                      .50                     push    si                                              ;save kernel name address
   730 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   731 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   732 000000B6 FC                                              cld                                                     ;forward strings
   733 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   734 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   735 000000BA 5E                                              pop     si                                              ;restore kernel name address
   736 000000BB 7418                                            je      .60                                             ;exit loop if found
   737 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   738 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   739 000000C2 75ED                                            jnz     .50                                             ;next entry
   740                                  ;
   741                                  ;       Repeat search if we are not at the end of the directory.
   742                                  ;
   743 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   744 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   745 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   746 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   747 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   748                                  ;
   749                                  ;       If we find the kernel program in the directory, read the FAT.
   750                                  ;
   751 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   752 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   753 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   754 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   755 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   756 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   757                                  ;
   758                                  ;       Get the starting cluster of the kernel program and target address.
   759                                  ;
   760 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   761 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   762                                  ;
   763                                  ;       Read each program cluster into RAM.
   764                                  ;
   765 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   766 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   767 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   768 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   769 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   770 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   771 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   772 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   773 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   774                                  ;
   775                                  ;       Update buffer pointer for next cluster.
   776                                  ;
   777 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   778 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   779 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   780 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   781 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   782                                  ;
   783                                  ;       Compute next cluster number.
   784                                  ;
   785 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   786 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   787 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   788 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   789 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   790 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   791 00000120 83E701                                          and     di,1                                            ;get low bit
   792 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   793 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   794 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   795                                  ;
   796                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   797                                  ;
   798 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   799 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   800 00000130 B104                                            mov     cl,4                                            ;shift count
   801 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   802 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   803 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   804 0000013A 75B2                                            jne     .70                                             ;no, continue
   805                                  ;
   806                                  ;       Transfer control to the operating system program.
   807                                  ;
   808 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   809 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   810 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   811                                  ;
   812                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   813                                  ;
   814 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   815 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   816 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   817 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   818 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   819 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   820 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   821 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   822 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   823 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   824                                  ;
   825                                  ;       Try maxtries times to read sector.
   826                                  ;
   827 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   828 00000160 53                      .10                     push    bx                                              ;save buffer address
   829 00000161 51                                              push    cx                                              ;save retry count
   830 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   831 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   832 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   833 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   834 0000016F 59                                              pop     cx                                              ;restore retry count
   835 00000170 5B                                              pop     bx                                              ;restore buffer address
   836 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   837 00000173 E2EB                                            loop    .10                                             ;retry
   838                                  ;
   839                                  ;       Handle disk error: convert to ASCII and store in error string.
   840                                  ;
   841 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   842 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   843 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   844 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   845 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   846 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   847 00000183 7203                                            jb      .20                                             ;continue if numeral
   848 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   849 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   850 0000018A 7203                                            jb      .30                                             ;continue if numeral
   851 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   852 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   853 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   854 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   855                                  ;
   856                                  ;       Wait for a key press.
   857                                  ;
   858 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   859 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   860 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   861 0000019E FB                                              sti                                                     ;enable maskable interrupts
   862 0000019F F4                                              hlt                                                     ;wait for interrupt
   863 000001A0 EBF6                                            jmp     .10                                             ;repeat
   864                                  ;
   865                                  ;       Reset the system.
   866                                  ;
   867 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   868 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   869 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   870 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   871 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   872                                  ;
   873                                  ;       Display text message.
   874                                  ;
   875 000001AA FC                      BootPrint               cld                                                     ;forward strings
   876 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   877 000001AC 84C0                                            test    al,al                                           ;end of string?
   878 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   879 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   880 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   881 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   882 000001B6 C3                      BootReturn              ret                                                     ;return
   883                                  ;-----------------------------------------------------------------------------------------------------------------------
   884                                  ;
   885                                  ;       Constants
   886                                  ;
   887                                  ;-----------------------------------------------------------------------------------------------------------------------
   888 000001B7 90                                              align   2
   889 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   890 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   890 000001C3 4F4D               
   891 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   891 000001CE 530D0A00           
   892 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   892 000001DB 7220               
   893 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   894 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   894 000001E9 6700               
   895                                  ;-----------------------------------------------------------------------------------------------------------------------
   896                                  ;
   897                                  ;       Work Areas
   898                                  ;
   899                                  ;-----------------------------------------------------------------------------------------------------------------------
   900 000001EB 90                                              align   2
   901 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   902 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   903 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   904 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   905 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   906                                  wwReadCountCommand      equ     $                                               ;read count and command
   907 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   908 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   909                                  wwDriveHead             equ     $                                               ;drive, head (word)
   910 000001F8 00                      wbDrive                 db      0                                               ;drive
   911 000001F9 00                      wbHead                  db      0                                               ;head
   912                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   913 000001FA 00                                              db      0                                               ;sector
   914 000001FB 00                      wbTrack                 db      0                                               ;track
   915 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   916 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   917                                  %endif
   918                                  %ifdef BUILDPREP
   919                                  ;=======================================================================================================================
   920                                  ;
   921                                  ;       Diskette Preparation Code
   922                                  ;
   923                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   924                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   925                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   926                                  ;
   927                                  ;=======================================================================================================================
   928                                  ;
   929                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   930                                  ;
   931                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   932                                                          call    BootPrint                                       ;display message
   933                                  ;
   934                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   935                                  ;
   936                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   937                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   938                                                          jnz     .20                                             ;continue if key pressed
   939                                                          sti                                                     ;enable interrupts
   940                                                          hlt                                                     ;wait for interrupt
   941                                                          jmp     .10                                             ;repeat
   942                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   943                                                          je      .30                                             ;yes, branch
   944                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   945                                                          jne     .10                                             ;no, repeat
   946                                                          jmp     .120                                            ;yes, exit program
   947                                  ;
   948                                  ;       Display writing-sector message and patch the JMP instruction.
   949                                  ;
   950                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   951                                                          call    BootPrint                                       ;display message
   952                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   953                                                          mov     ax,01Bh                                         ;address past disk parameter table
   954                                                          mov     [bx],ax                                         ;update the JMP instruction
   955                                  ;
   956                                  ;       Try to read the boot sector.
   957                                  ;
   958                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   959                                  .40                     push    cx                                              ;save remaining tries
   960                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   961                                                          mov     dx,0                                            ;head zero, drive zero
   962                                                          mov     cx,1                                            ;track zero, sector one
   963                                                          mov     al,1                                            ;one sector
   964                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   965                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   966                                                          pop     cx                                              ;restore remaining retries
   967                                                          jnc     .50                                             ;skip ahead if successful
   968                                                          loop    .40                                             ;try again
   969                                                          mov     si,czPrepMsg20                                  ;read-error message address
   970                                                          jmp     .70                                             ;branch to error routine
   971                                  ;
   972                                  ;       Copy diskette parms from input buffer to output buffer.
   973                                  ;
   974                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   975                                                          add     si,11                                           ;skip over JMP and system ID
   976                                                          mov     di,Boot                                         ;output buffer address
   977                                                          add     di,11                                           ;skip over JMP and system ID
   978                                                          mov     cx,19                                           ;length of diskette parameters
   979                                                          cld                                                     ;forward string copies
   980                                                          rep     movsb                                           ;copy diskette parameters
   981                                  ;
   982                                  ;       Try to write boot sector to diskette.
   983                                  ;
   984                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   985                                  .60                     push    cx                                              ;save remaining tries
   986                                                          mov     bx,Boot                                         ;output buffer address
   987                                                          mov     dx,0                                            ;head zero, drive zero
   988                                                          mov     cx,1                                            ;track zero, sector one
   989                                                          mov     al,1                                            ;one sector
   990                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   991                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   992                                                          pop     cx                                              ;restore remaining retries
   993                                                          jnc     .100                                            ;skip ahead if successful
   994                                                          loop    .60                                             ;try again
   995                                                          mov     si,czPrepMsg30                                  ;write-error message address
   996                                  ;
   997                                  ;       Convert the error code to ASCII and display the error message.
   998                                  ;
   999                                  .70                     push    ax                                              ;save error code
  1000                                                          mov     al,ah                                           ;copy error code
  1001                                                          mov     ah,0                                            ;AX = error code
  1002                                                          mov     dl,10h                                          ;hexadecimal divisor
  1003                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1004                                                          or      ax,03030h                                       ;add ASCII zone digits
  1005                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1006                                                          jb      .80                                             ;yes, continue
  1007                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1008                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1009                                                          jb      .90                                             ;yes, continue
  1010                                                          add     al,7                                            ;no, make ASCII
  1011                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1012                                                          call    BootPrint                                       ;write error message
  1013                                                          pop     ax                                              ;restore error code
  1014                                  ;
  1015                                  ;       Display the completion message.
  1016                                  ;
  1017                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1018                                                          mov     al,ah                                           ;BIOS return code
  1019                                                          cmp     al,0                                            ;success?
  1020                                                          je      .110                                            ;yes, continue
  1021                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1022                                                          cmp     al,1                                            ;disk parameter error?
  1023                                                          je      .110                                            ;yes, continue
  1024                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1025                                                          cmp     al,2                                            ;address mark not found?
  1026                                                          je      .110                                            ;yes, continue
  1027                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1028                                                          cmp     al,3                                            ;protected disk?
  1029                                                          je      .110                                            ;yes, continue
  1030                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1031                                                          cmp     al,6                                            ;diskette removed?
  1032                                                          je      .110                                            ;yes, continue
  1033                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1034                                                          cmp     al,80H                                          ;drive timed out?
  1035                                                          je      .110                                            ;yes, continue
  1036                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1037                                  .110                    call    BootPrint                                       ;display result message
  1038                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1039                                                          int     021h                                            ;terminate DOS program
  1040                                                          ret                                                     ;return (should not execute)
  1041                                  ;-----------------------------------------------------------------------------------------------------------------------
  1042                                  ;
  1043                                  ;       Diskette Preparation Messages
  1044                                  ;
  1045                                  ;-----------------------------------------------------------------------------------------------------------------------
  1046                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1047                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1048                                                          db      13,10
  1049                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1050                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1051                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1052                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1053                                                          db      13,10,0
  1054                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1055                                                          db      13,10,0
  1056                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1057                                                          db      13,10,0
  1058                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1059                                                          db      13,10,0
  1060                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1061                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1062                                                          db      13,10,0
  1063                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1064                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1065                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1066                                                          db      13,10,"and retry."
  1067                                                          db      13,10,0
  1068                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1069                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1070                                                          db      13,10,"using another diskette."
  1071                                                          db      13,10,0
  1072                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1073                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1074                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1075                                                          db      13,10,0
  1076                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1077                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1078                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1079                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1080                                                          db      13,10,"is properly inserted in the diskette drive."
  1081                                                          db      13,10,0
  1082                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1083                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1084                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1085                                                          db      13,10,0
  1086                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1087                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1088                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1089                                                          db      13,10,0
  1090                                  wcPrepInBuf             equ     $
  1091                                  %endif
  1092                                  %ifdef BUILDDISK
  1093                                  ;=======================================================================================================================
  1094                                  ;
  1095                                  ;       File Allocation Tables
  1096                                  ;
  1097                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1098                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1099                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1100                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1101                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1102                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1103                                  ;       the last cluster in the chain.
  1104                                  ;
  1105                                  ;       Every three bytes encode two FAT entries as follows:
  1106                                  ;
  1107                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1108                                  ;
  1109                                  ;=======================================================================================================================
  1110                                  ;-----------------------------------------------------------------------------------------------------------------------
  1111                                  ;
  1112                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1113                                  ;
  1114                                  ;-----------------------------------------------------------------------------------------------------------------------
  1115                                  section                 fat1                                                    ;first copy of FAT
  1116                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1117                                                          db      005h,060h,000h, 007h,080h,000h
  1118                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1119                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1120                                                          db      011h,020h,001h, 013h,040h,001h
  1121                                                          db      015h,060h,001h, 017h,080h,001h
  1122                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1123                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1124                                                          db      021h,020h,002h, 023h,040h,002h
  1125                                                          db      025h,060h,002h, 027h,080h,002h
  1126                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1127                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1128                                  ;-----------------------------------------------------------------------------------------------------------------------
  1129                                  ;
  1130                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1131                                  ;
  1132                                  ;-----------------------------------------------------------------------------------------------------------------------
  1133                                  section                 fat2                                                    ;second copy of FAT
  1134                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1135                                                          db      005h,060h,000h, 007h,080h,000h
  1136                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1137                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1138                                                          db      011h,020h,001h, 013h,040h,001h
  1139                                                          db      015h,060h,001h, 017h,080h,001h
  1140                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1141                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1142                                                          db      021h,020h,002h, 023h,040h,002h
  1143                                                          db      025h,060h,002h, 027h,080h,002h
  1144                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1145                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                  ;
  1148                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1149                                  ;
  1150                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1151                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1152                                  ;       copy.
  1153                                  ;
  1154                                  ;-----------------------------------------------------------------------------------------------------------------------
  1155                                  section                 dir                                                     ;diskette directory
  1156                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1157                                                          db      020h                                            ;attribute (archive bit set)
  1158                                                          times   10 db 0                                         ;unused
  1159                                                          dw      0h                                              ;time
  1160                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1161                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1162                                                          dw      2                                               ;first cluster
  1163                                                          dd      05400h                                          ;file size
  1164                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1165                                  %endif
  1166                                  %ifdef BUILDCOM
  1167                                  ;=======================================================================================================================
  1168                                  ;
  1169                                  ;       OS.COM
  1170                                  ;
  1171                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1172                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1173                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1174                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1175                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1176                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1177                                  ;
  1178                                  ;       Our loader addressability is set up according to the following diagram.
  1179                                  ;
  1180                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1181                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1182                                  ;                               |  256 = 100h bytes                             |
  1183                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1184                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1185                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1186                                  ;                       007e00  +-----------------------------------------------+
  1187                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1188                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1189                                  ;                               |                                               |
  1190                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1191                                  ;                               |                                               |
  1192                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1193                                  ;                               |  Loader Code                                  |
  1194                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1195                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1196                                  ;
  1197                                  ;=======================================================================================================================
  1198                                  ;-----------------------------------------------------------------------------------------------------------------------
  1199                                  ;
  1200                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1201                                  ;
  1202                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1203                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1204                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1205                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1206                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1207                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1208                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1209                                  ;       registers.
  1210                                  ;
  1211                                  ;-----------------------------------------------------------------------------------------------------------------------
  1212                                                          cpu     8086                                            ;assume minimal CPU
  1213                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1214                                                          bits    16                                              ;this is 16-bit code
  1215                                  Loader                  push    cs                                              ;use the code segment
  1216                                                          pop     ds                                              ;...as our data segment
  1217                                                          push    cs                                              ;use the code segment
  1218                                                          pop     es                                              ;...as our extra segment
  1219                                  ;
  1220                                  ;       Write a message to the console so we know we have our addressability established.
  1221                                  ;
  1222                                                          mov     si,czStartingMsg                                ;starting message
  1223                                                          call    PutTTYString                                    ;display loader message
  1224                                  ;
  1225                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1226                                  ;
  1227                                                          call    GetCPUType                                      ;AL = cpu type
  1228                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1229                                                          cmp     al,3                                            ;80386+?
  1230                                                          jb      LoaderExit                                      ;no, exit with error message
  1231                                                          cpu     386                                             ;allow 80386 instructions
  1232                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1233                                                          call    PutTTYString                                    ;display message
  1234                                  ;
  1235                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1236                                  ;
  1237                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1238                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1239                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1240                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1241                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1242                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1243                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1244                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1245                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1246                                                          call    PutTTYString                                    ;display message
  1247                                  ;
  1248                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1249                                  ;
  1250                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1251                                                          pop     es                                              ;... as target segment
  1252                                                          xor     di,di                                           ;ES:DI = target address
  1253                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1254                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1255                                                          cld                                                     ;forward strings
  1256                                                          rep     movsb                                           ;copy kernel image
  1257                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1258                                                          call    PutTTYString                                    ;display message
  1259                                  ;
  1260                                  ;       Switch to protected mode.
  1261                                  ;
  1262                                                          xor     si,si                                           ;ES:SI = gdt addr
  1263                                                          mov     ss,si                                           ;protected mode ss
  1264                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1265                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1266                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1267                                                          mov     dx,001Fh                                        ;outer delay loop count
  1268                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1269                                                          loop    $                                               ;wait out pending interrupts
  1270                                                          dec     dx                                              ;restore outer loop count
  1271                                                          jnz     .10                                             ;continue outer loop
  1272                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1273                                  ;
  1274                                  ;       Enable hardware and maskable interrupts.
  1275                                  ;
  1276                                                          xor     al,al                                           ;enable all registers code
  1277                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1278                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1279                                                          sti                                                     ;enable maskable interrupts
  1280                                  ;
  1281                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1282                                  ;
  1283                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1284                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1285                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  ;
  1288                                  ;       Routine:        LoaderExit
  1289                                  ;
  1290                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1291                                  ;
  1292                                  ;       In:             DS:SI   string address
  1293                                  ;
  1294                                  ;-----------------------------------------------------------------------------------------------------------------------
  1295                                  LoaderExit              call    PutTTYString                                    ;display error message
  1296                                  ;
  1297                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1298                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1299                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1300                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1301                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1302                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1303                                  ;
  1304                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1305                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1306                                                          jnz     .40                                             ;exit if key pressed
  1307                                                          sti                                                     ;enable maskable interrupts
  1308                                                          hlt                                                     ;wait for interrupt
  1309                                                          jmp     .30                                             ;repeat until keypress
  1310                                  ;
  1311                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1312                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1313                                  ;       HLT until the system resets.
  1314                                  ;
  1315                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1316                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1317                                  .50                     sti                                                     ;enable maskable interrupts
  1318                                                          hlt                                                     ;stop until reset, int, nmi
  1319                                                          jmp     .50                                             ;loop until restart kicks in
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  ;
  1322                                  ;       Routine:        GetCPUType
  1323                                  ;
  1324                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1325                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1326                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1327                                  ;
  1328                                  ;       Out:            AX      0 = 808x, v20, etc.
  1329                                  ;                               1 = 80186
  1330                                  ;                               2 = 80286
  1331                                  ;                               3 = 80386
  1332                                  ;
  1333                                  ;-----------------------------------------------------------------------------------------------------------------------
  1334                                  GetCPUType              mov     al,1                                            ;AL = 1
  1335                                                          mov     cl,32                                           ;shift count
  1336                                                          shr     al,cl                                           ;try a 32-bit shift
  1337                                                          or      al,al                                           ;did the shift happen?
  1338                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1339                                                          cpu     186
  1340                                                          push    sp                                              ;save stack pointer
  1341                                                          pop     cx                                              ;...into cx
  1342                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1343                                                          jne     .10                                             ;yes, cpu is 80186
  1344                                                          cpu     286
  1345                                                          inc     ax                                              ;AX = 2
  1346                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1347                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1348                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1349                                                          jz      .10                                             ;yes, cpu is 80286
  1350                                                          inc     ax                                              ;AX = 3
  1351                                  .10                     ret                                                     ;return
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  ;
  1354                                  ;       Routine:        PutTTYString
  1355                                  ;
  1356                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1357                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1358                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1359                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1360                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1361                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1362                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1363                                  ;                       to LODSB is not needed.
  1364                                  ;
  1365                                  ;       In:             DS:SI   address of string
  1366                                  ;
  1367                                  ;       Out:            DF      0
  1368                                  ;                       ZF      1
  1369                                  ;                       AL      0
  1370                                  ;
  1371                                  ;-----------------------------------------------------------------------------------------------------------------------
  1372                                  PutTTYString            cld                                                     ;forward strings
  1373                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1374                                                          test    al,al                                           ;end of string?
  1375                                                          jz      .20                                             ;... yes, exit our loop
  1376                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1377                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1378                                                          jmp     .10                                             ;repeat until done
  1379                                  .20                     ret                                                     ;return
  1380                                  ;-----------------------------------------------------------------------------------------------------------------------
  1381                                  ;
  1382                                  ;       Loader Data
  1383                                  ;
  1384                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1385                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1386                                  ;
  1387                                  ;-----------------------------------------------------------------------------------------------------------------------
  1388                                                          align   2
  1389                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1390                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1391                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1392                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1393                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1394                                                          db      "Please press any key to restart the computer.",13,10,0
  1395                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1396                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1397                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1398                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1399                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1400                                  ;=======================================================================================================================
  1401                                  ;
  1402                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1403                                  ;
  1404                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1405                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1406                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1407                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1408                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1409                                  ;
  1410                                  ;=======================================================================================================================
  1411                                  ;=======================================================================================================================
  1412                                  ;
  1413                                  ;       Kernel Tables
  1414                                  ;
  1415                                  ;=======================================================================================================================
  1416                                  ;-----------------------------------------------------------------------------------------------------------------------
  1417                                  ;
  1418                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1419                                  ;
  1420                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1421                                  ;       first descriptor must be all nulls.
  1422                                  ;
  1423                                  ;       6   5         4         3         2         1         0
  1424                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1425                                  ;       ----------------------------------------------------------------
  1426                                  ;       h......hffffmmmma......ab......................bn..............n
  1427                                  ;
  1428                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1429                                  ;               ffff                                                            flags
  1430                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1431                                  ;                       a......a                                                access
  1432                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1433                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1434                                  ;
  1435                                  ;       00000000                                                                all areas have base addresses below 2^24
  1436                                  ;               0...                                                            single-byte size granularity
  1437                                  ;               1...                                                            4-kilobyte size granularity
  1438                                  ;               .0..                                                            16-bit default for code segments
  1439                                  ;               .1..                                                            32-bit default for code segments
  1440                                  ;               ..0.                                                            intel-reserved; should be zero
  1441                                  ;               ...0                                                            available for operating system use
  1442                                  ;                   0000                                                        segment is less than 2^16 in size
  1443                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1444                                  ;                       1.......                                                segment is present in memory
  1445                                  ;                       .00.....                                                segment is of privilege level 0
  1446                                  ;                       ...0....                                                segment is of system or gate type
  1447                                  ;                       ...00010                                                local decriptor table (LDT)
  1448                                  ;                       ...01001                                                task state segment (TSS) available
  1449                                  ;                       ...01011                                                task state segment (TSS) busy
  1450                                  ;                       ...10...                                                data segment
  1451                                  ;                       ...10011                                                writable data (accessed)
  1452                                  ;                       ...11...                                                code segment
  1453                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1454                                  ;
  1455                                  ;-----------------------------------------------------------------------------------------------------------------------
  1456                                  section                 gdt                                                     ;global descriptor table
  1457                                                          dq      0000000000000000h                               ;00 required null selector
  1458                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1459                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1460                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1461                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1462                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1463                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1464                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1465                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1466                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1467                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1468                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1469                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1470                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1471                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  ;
  1474                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1475                                  ;
  1476                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1477                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1478                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1479                                  ;
  1480                                  ;       6   5         4         3         2         1         0
  1481                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1482                                  ;       ----------------------------------------------------------------
  1483                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1484                                  ;
  1485                                  ;       h...h   high-order offset (bits 16-31)
  1486                                  ;       P       present (0=unused interrupt)
  1487                                  ;       zz      descriptor privilege level
  1488                                  ;       S       storage segment (must be zero for IDT)
  1489                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1490                                  ;       S...S   handling code selector in GDT
  1491                                  ;       l...l   lo-order offset (bits 0-15)
  1492                                  ;
  1493                                  ;-----------------------------------------------------------------------------------------------------------------------
  1494                                  section                 idt                                                     ;interrupt descriptor table
  1495                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1496                                                          mtrap   singlestep                                      ;01 single step
  1497                                                          mtrap   nmi                                             ;02 non-maskable
  1498                                                          mtrap   break                                           ;03 break
  1499                                                          mtrap   into                                            ;04 into
  1500                                                          mtrap   bounds                                          ;05 bounds
  1501                                                          mtrap   badopcode                                       ;06 bad op code
  1502                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1503                                                          mtrap   doublefault                                     ;08 double-fault
  1504                                                          mtrap   operand                                         ;09 operand
  1505                                                          mtrap   badtss                                          ;0a bad TSS
  1506                                                          mtrap   notpresent                                      ;0b not-present
  1507                                                          mtrap   stacklimit                                      ;0c stack limit
  1508                                                          mtrap   protection                                      ;0d general protection fault
  1509                                                          mtrap   int14                                           ;0e (reserved)
  1510                                                          mtrap   int15                                           ;0f (reserved)
  1511                                                          mtrap   coproccalc                                      ;10 (reserved)
  1512                                                          mtrap   int17                                           ;11 (reserved)
  1513                                                          mtrap   int18                                           ;12 (reserved)
  1514                                                          mtrap   int19                                           ;13 (reserved)
  1515                                                          mtrap   int20                                           ;14 (reserved)
  1516                                                          mtrap   int21                                           ;15 (reserved)
  1517                                                          mtrap   int22                                           ;16 (reserved)
  1518                                                          mtrap   int23                                           ;17 (reserved)
  1519                                                          mtrap   int24                                           ;18 (reserved)
  1520                                                          mtrap   int25                                           ;19 (reserved)
  1521                                                          mtrap   int26                                           ;1a (reserved)
  1522                                                          mtrap   int27                                           ;1b (reserved)
  1523                                                          mtrap   int28                                           ;1c (reserved)
  1524                                                          mtrap   int29                                           ;1d (reserved)
  1525                                                          mtrap   int30                                           ;1e (reserved)
  1526                                                          mtrap   int31                                           ;1f (reserved)
  1527                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1528                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1529                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1530                                                          mint    com2                                            ;23 IRQ3 com2
  1531                                                          mint    com1                                            ;24 IRQ4 com1
  1532                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1533                                                          mint    diskette                                        ;26 IRQ6 diskette
  1534                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1535                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1536                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1537                                                          mint    irq10                                           ;2a IRQA (reserved)
  1538                                                          mint    irq11                                           ;2b IRQB (reserved)
  1539                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1540                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1541                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1542                                                          mint    irq15                                           ;2f IRQF (reserved)
  1543                                                          mtrap   svc                                             ;30 OS services
  1544                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1545                                  ;=======================================================================================================================
  1546                                  ;
  1547                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1548                                  ;
  1549                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1550                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1551                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1552                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1553                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1554                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1555                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1556                                  ;
  1557                                  ;=======================================================================================================================
  1558                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1559                                                          cpu     386                                             ;allow 80386 instructions
  1560                                                          bits    32                                              ;this is 32-bit code
  1561                                  ;=======================================================================================================================
  1562                                  ;
  1563                                  ;       CPU Interrupt Handlers
  1564                                  ;
  1565                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1566                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1567                                  ;
  1568                                  ;=======================================================================================================================
  1569                                  ;-----------------------------------------------------------------------------------------------------------------------
  1570                                  ;
  1571                                  ;       INT0    Divide By Zero
  1572                                  ;
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                                          menter  dividebyzero                                    ;divide by zero
  1575                                                          jmp     ReportInterrupt                                 ;report interrupt
  1576                                  ;-----------------------------------------------------------------------------------------------------------------------
  1577                                  ;
  1578                                  ;       INT1    Single Step
  1579                                  ;
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                                          menter  singlestep                                      ;single step
  1582                                                          jmp     ReportInterrupt                                 ;report interrupt
  1583                                  ;-----------------------------------------------------------------------------------------------------------------------
  1584                                  ;
  1585                                  ;       INT2    Non-Maskable Interrupt
  1586                                  ;
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                                          menter  nmi                                             ;non-maskable
  1589                                                          jmp     ReportInterrupt                                 ;report interrupt
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;
  1592                                  ;       INT3    Break
  1593                                  ;
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                                          menter  break                                           ;break
  1596                                                          jmp     ReportInterrupt                                 ;report interrupt
  1597                                  ;-----------------------------------------------------------------------------------------------------------------------
  1598                                  ;
  1599                                  ;       INT4    Into
  1600                                  ;
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                                          menter  into                                            ;into
  1603                                                          jmp     ReportInterrupt                                 ;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;       INT5    Bounds
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                                          menter  bounds                                          ;bounds
  1610                                                          jmp     ReportInterrupt                                 ;report interrupt
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                  ;
  1613                                  ;       INT6    Bad Operation Code
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                                          menter  badopcode                                       ;bad opcode interrupt
  1617                                                          jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT7    No Coprocessor
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1624                                                          jmp     ReportInterrupt                                 ;report interrupt
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT8    Double Fault
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  doublefault                                     ;doublefault interrupt
  1631                                                          jmp     ReportInterrupt                                 ;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;       INT9    Operand
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                                          menter  operand                                         ;operand interrupt
  1638                                                          jmp     ReportInterrupt                                 ;report interrupt
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                  ;
  1641                                  ;       INT10   Bad Task State Segment
  1642                                  ;
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                                          menter  badtss                                          ;bad TSS interrupt
  1645                                                          jmp     ReportInterrupt                                 ;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;       INT11   Not Present
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                                          menter  notpresent                                      ;not present interrupt
  1652                                                          jmp     ReportInterrupt                                 ;report interrupt
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  ;
  1655                                  ;       INT12   Stack Limit
  1656                                  ;
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                                          menter  stacklimit                                      ;stack limit interrupt
  1659                                                          jmp     ReportInterrupt                                 ;report interrupt
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;       INT13   General Protection Fault
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                                          menter  protection                                      ;protection fault interrupt
  1666                                                          jmp     ReportInterrupt                                 ;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       INT14   Reserved
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                                          menter  int14                                           ;(reserved)
  1673                                                          jmp     ReportInterrupt                                 ;report interrupt
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  ;
  1676                                  ;       INT15   Reserved
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                                          menter  int15                                           ;(reserved)
  1680                                                          jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT16   Coprocessor Calculation
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  coproccalc                                      ;coprocessor calculation
  1687                                                          jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT17   Reserved
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  int17                                           ;(reserved)
  1694                                                          jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT18   Reserved
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  int18                                           ;(reserved)
  1701                                                          jmp     ReportInterrupt                                 ;report interrupt
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;       INT19   Reserved
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                                          menter  int19                                           ;(reserved)
  1708                                                          jmp     ReportInterrupt                                 ;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;       INT20   Reserved
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                                          menter  int20                                           ;(reserved)
  1715                                                          jmp     ReportInterrupt                                 ;report interrupt
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  ;
  1718                                  ;       INT21   Reserved
  1719                                  ;
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                                          menter  int21                                           ;(reserved)
  1722                                                          jmp     ReportInterrupt                                 ;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;       INT22   Reserved
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                                          menter  int22                                           ;(reserved)
  1729                                                          jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       INT23   Reserved
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                                          menter  int23                                           ;(reserved)
  1736                                                          jmp     ReportInterrupt                                 ;report interrupt
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                  ;
  1739                                  ;       INT24   Reserved
  1740                                  ;
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                                          menter  int24                                           ;(reserved)
  1743                                                          jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT25   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int25                                           ;(reserved)
  1750                                                          jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT26   Reserved
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  int26                                           ;(reserved)
  1757                                                          jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT27   Reserved
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  int27                                           ;(reserved)
  1764                                                          jmp     ReportInterrupt                                 ;report interrupt
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                  ;
  1767                                  ;       INT28   Reserved
  1768                                  ;
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                                          menter  int28                                           ;(reserved)
  1771                                                          jmp     ReportInterrupt                                 ;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;       INT29   Reserved
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                                          menter  int29                                           ;(reserved)
  1778                                                          jmp     ReportInterrupt                                 ;report interrupt
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  ;
  1781                                  ;       INT30   Reserved
  1782                                  ;
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                                          menter  int30                                           ;(reserved)
  1785                                                          jmp     ReportInterrupt                                 ;report interrupt
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                  ;
  1788                                  ;       INT31   Reserved
  1789                                  ;
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                                          menter  int31                                           ;(reserved)
  1792                                                          jmp     ReportInterrupt                                 ;report interrupt
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;       Routine:        ReportInterrupt
  1796                                  ;
  1797                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1798                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ReportInterrupt         iretd                                                   ;return
  1802                                  ;=======================================================================================================================
  1803                                  ;
  1804                                  ;       Hardware Device Interupts
  1805                                  ;
  1806                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1807                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1808                                  ;       (BX=2028h).
  1809                                  ;
  1810                                  ;=======================================================================================================================
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;       IRQ0    Clock Tick Interrupt
  1814                                  ;
  1815                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1816                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1817                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1818                                  ;
  1819                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1820                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1821                                  ;
  1822                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1823                                  ;       zero, the floppy disk motors are turned off.
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  clocktick                                       ;clock tick interrupt
  1827                                                          push    eax                                             ;save non-volatile regs
  1828                                                          push    edx                                             ;
  1829                                                          push    ds                                              ;
  1830                                  ;
  1831                                  ;       End the interrupt.
  1832                                  ;
  1833                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1834                                  ;
  1835                                  ;       Update the clock tick count and the elapsed days as needed.
  1836                                  ;
  1837                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1838                                                          pop     ds                                              ;... into data segment register
  1839                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1840                                                          inc     eax                                             ;increment clock ticks
  1841                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1842                                                          jb      irq0.10                                         ;no, skip ahead
  1843                                                          inc     byte [wbClockDays]                              ;increment clock days
  1844                                                          xor     eax,eax                                         ;reset clock ticks
  1845                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1846                                  ;
  1847                                  ;       Decrement floppy disk motor timeout.
  1848                                  ;
  1849                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1850                                                          je      irq0.20                                         ;yes, skip ahead
  1851                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1852                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1853                                  ;
  1854                                  ;       Turn off the floppy disk motor if appropriate.
  1855                                  ;
  1856                                                          sti                                                     ;enable maskable interrupts
  1857                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1858                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1859                                                          in      al,dx                                           ;FDC main status byte
  1860                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1861                                                          jnz     irq0.15                                         ;wait while busy
  1862                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1863                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1864                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1865                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1866                                                          out     dx,al                                           ;turn motor off
  1867                                  ;
  1868                                  ;       Enable maskable interrupts.
  1869                                  ;
  1870                                  irq0.20                 sti                                                     ;enable maskable interrupts
  1871                                  ;
  1872                                  ;       Restore and return.
  1873                                  ;
  1874                                                          pop     ds                                              ;restore modified regs
  1875                                                          pop     edx                                             ;
  1876                                                          pop     eax                                             ;
  1877                                                          iretd                                                   ;return
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                  ;
  1880                                  ;       IRQ1    Keyboard Interrupt
  1881                                  ;
  1882                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1883                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1884                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1885                                  ;       ALL modified registers upon return.
  1886                                  ;
  1887                                  ;-----------------------------------------------------------------------------------------------------------------------
  1888                                                          menter  keyboard                                        ;keyboard interrrupt
  1889                                                          push    eax                                             ;save non-volatile regs
  1890                                                          push    ebx                                             ;
  1891                                                          push    ecx                                             ;
  1892                                                          push    esi                                             ;
  1893                                                          push    ds                                              ;
  1894                                  ;
  1895                                  ;       End the interrupt.
  1896                                  ;
  1897                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1898                                  ;
  1899                                  ;       Handle keyboard scan-codes.
  1900                                  ;
  1901                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1902                                                          pop     ds                                              ;... into data segment register
  1903                                                          xor     al,al                                           ;zero
  1904                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1905                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1906                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1907                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  1908                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  1909                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  1910                                                          mov     al,' '                                          ;space
  1911                                                          mov     [wbConsoleChar],al                              ;set character to space
  1912                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1913                                                          not     al                                              ;controller timeout mask
  1914                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1915                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  1916                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  1917                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1918                                                          jz      irq1.140                                        ;yes, skip ahead
  1919                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  1920                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  1921                                                          mov     ah,al                                           ;copy scan code 0
  1922                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1923                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1924                                                          je      irq1.30                                         ;yes, set flag
  1925                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1926                                                          je      irq1.40                                         ;yes, reset flag
  1927                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1928                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1929                                                          je      irq1.30                                         ;yes, set flag
  1930                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1931                                                          je      irq1.40                                         ;yes, reset flag
  1932                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  1933                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1934                                                          je      irq1.30                                         ;yes, set flag
  1935                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1936                                                          je      irq1.40                                         ;yes, reset flag
  1937                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  1938                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1939                                                          je      irq1.30                                         ;yes, set flag
  1940                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1941                                                          je      irq1.40                                         ;yes, reset flag
  1942                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  1943                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  1944                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1945                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  1946                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  1947                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1948                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  1949                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  1950                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1951                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  1952                                                          jne     irq1.70                                         ;no, skip ahead
  1953                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1954                                                          jz      irq1.140                                        ;yes, skip ahead
  1955                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  1956                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  1957                                                          mov     ah,al                                           ;copy scan code 1
  1958                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  1959                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1960                                                          je      irq1.30                                         ;yes, set flag
  1961                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1962                                                          je      irq1.40                                         ;yes, reset flag
  1963                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  1964                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1965                                                          je      irq1.30                                         ;yes, set flag
  1966                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1967                                                          je      irq1.40                                         ;yes, reset flag
  1968                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  1969                                                          je      irq1.80                                         ;yes, skip ahead
  1970                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  1971                                                          je      irq1.80                                         ;yes, skip ahead
  1972                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  1973                                                          je      irq1.10                                         ;yes, continue
  1974                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  1975                                                          jne     irq1.20                                         ;no, skip ahead
  1976                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  1977                                                          jz      irq1.140                                        ;yes, skip ahead
  1978                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  1979                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  1980                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1981                                                          jz      irq1.140                                        ;yes, skip ahead
  1982                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  1983                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  1984                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  1985                                  irq1.30                 or      bl,al                                           ;set shift flag
  1986                                                          jmp     irq1.60                                         ;skip ahead
  1987                                  irq1.40                 not     al                                              ;convert flag to mask
  1988                                                          and     bl,al                                           ;reset shift flag
  1989                                                          jmp     irq1.60                                         ;skip ahead
  1990                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  1991                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  1992                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  1993                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  1994                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  1995                                                          jmp     irq1.150                                        ;finish keyboard handling
  1996                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  1997                                                          jne     irq1.80                                         ;no continue
  1998                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1999                                                          jz      irq1.140                                        ;yes, skip ahead
  2000                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2001                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2002                                                          mov     ah,al                                           ;copy scan code 1
  2003                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2004                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2005                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2006                                                          jz      irq1.140                                        ;yes, skip ahead
  2007                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2008                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2009                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2010                                                          jz      irq1.140                                        ;yes, skip ahead
  2011                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2012                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2013                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2014                                                          jz      irq1.140                                        ;yes, skip ahead
  2015                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2016                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2017                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2018                                                          jz      irq1.140                                        ;yes, skip ahead
  2019                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2020                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2021                                                          jmp     irq1.150                                        ;continue
  2022                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2023                                                          test    ah,EKEYBUP                                      ;release code?
  2024                                                          jnz     irq1.130                                        ;yes, skip ahead
  2025                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2026                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2027                                                          jz      irq1.90                                         ;no, skip ahead
  2028                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2029                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2030                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2031                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2032                                                          jz      irq1.100                                        ;no skip ahead
  2033                                                          mov     cl,al                                           ;copy ASCII code
  2034                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2035                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2036                                                          jb      irq1.100                                        ;yes, skip ahead
  2037                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2038                                                          ja      irq1.100                                        ;yes, skip ahead
  2039                                                          xor     al,EASCIICASE                                   ;switch case
  2040                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2041                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2042                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2043                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2044                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2045                                  ;
  2046                                  ;       Enable maskable interrupts.
  2047                                  ;
  2048                                                          sti                                                     ;enable maskable interrupts
  2049                                  ;
  2050                                  ;       Restore and return.
  2051                                  ;
  2052                                                          pop     ds                                              ;restore non-volatile regs
  2053                                                          pop     esi                                             ;
  2054                                                          pop     ecx                                             ;
  2055                                                          pop     ebx                                             ;
  2056                                                          pop     eax                                             ;
  2057                                                          iretd                                                   ;return
  2058                                  ;-----------------------------------------------------------------------------------------------------------------------
  2059                                  ;       Scan-Code to ASCII Translation Tables
  2060                                  ;-----------------------------------------------------------------------------------------------------------------------
  2061                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2062                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2063                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2064                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2065                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2066                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2067                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2068                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2069                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2070                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2071                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2072                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2073                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2074                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2075                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2076                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2077                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2078                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2079                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2080                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2081                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2082                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2083                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2084                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2085                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2086                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2087                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2088                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2089                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2090                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2091                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2092                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2093                                  ;-----------------------------------------------------------------------------------------------------------------------
  2094                                  ;
  2095                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2096                                  ;
  2097                                  ;-----------------------------------------------------------------------------------------------------------------------
  2098                                                          menter  iochannel                                       ;secondary 8259A cascade
  2099                                                          push    eax                                             ;save modified regs
  2100                                                          jmp     hwint                                           ;end interrupt and return
  2101                                  ;-----------------------------------------------------------------------------------------------------------------------
  2102                                  ;
  2103                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2104                                  ;
  2105                                  ;-----------------------------------------------------------------------------------------------------------------------
  2106                                                          menter  com2                                            ;serial port 2 interrupt
  2107                                                          push    eax                                             ;save modified regs
  2108                                                          jmp     hwint                                           ;end interrupt and return
  2109                                  ;-----------------------------------------------------------------------------------------------------------------------
  2110                                  ;
  2111                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2112                                  ;
  2113                                  ;-----------------------------------------------------------------------------------------------------------------------
  2114                                                          menter  com1                                            ;serial port 1 interrupt
  2115                                                          push    eax                                             ;save modified regs
  2116                                                          jmp     hwint                                           ;end interrupt and return
  2117                                  ;-----------------------------------------------------------------------------------------------------------------------
  2118                                  ;
  2119                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2120                                  ;
  2121                                  ;-----------------------------------------------------------------------------------------------------------------------
  2122                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2123                                                          push    eax                                             ;save modified regs
  2124                                                          jmp     hwint                                           ;end interrupt and return
  2125                                  ;-----------------------------------------------------------------------------------------------------------------------
  2126                                  ;
  2127                                  ;       IRQ6    Diskette Hardware Interrupt
  2128                                  ;
  2129                                  ;-----------------------------------------------------------------------------------------------------------------------
  2130                                                          menter  diskette                                        ;floppy disk interrupt
  2131                                                          push    eax                                             ;save non-volatile regs
  2132                                                          push    ds                                              ;
  2133                                                          call    PutPrimaryEndOfInt                              ;end the interrupt
  2134                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2135                                                          pop     ds                                              ;... into DS register
  2136                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2137                                                          or      al,10000000b                                    ;set IRQ flag
  2138                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2139                                                          sti                                                     ;enable maskable interrupts
  2140                                                          pop     ds                                              ;restore non-volatile regs
  2141                                                          pop     eax                                             ;
  2142                                                          iretd                                                   ;return from interrupt
  2143                                  ;-----------------------------------------------------------------------------------------------------------------------
  2144                                  ;
  2145                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2146                                  ;
  2147                                  ;-----------------------------------------------------------------------------------------------------------------------
  2148                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2149                                                          push    eax                                             ;save modified regs
  2150                                                          jmp     hwint                                           ;end interrupt and return
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  ;
  2153                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2154                                  ;
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156                                                          menter  rtclock                                         ;real-time clock interrupt
  2157                                                          push    eax                                             ;save modified regs
  2158                                                          jmp     hwwint                                          ;end interrupt and return
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  ;
  2161                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2162                                  ;
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2165                                                          push    eax                                             ;save modified regs
  2166                                                          jmp     hwwint                                          ;end interrupt and return
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  ;
  2169                                  ;       IRQ10   Reserved Hardware Interrupt
  2170                                  ;
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                                          menter  irq10                                           ;reserved
  2173                                                          push    eax                                             ;save modified regs
  2174                                                          jmp     hwwint                                          ;end interrupt and return
  2175                                  ;-----------------------------------------------------------------------------------------------------------------------
  2176                                  ;
  2177                                  ;       IRQ11   Reserved Hardware Interrupt
  2178                                  ;
  2179                                  ;-----------------------------------------------------------------------------------------------------------------------
  2180                                                          menter  irq11                                           ;reserved
  2181                                                          push    eax                                             ;save modified regs
  2182                                                          jmp     hwwint                                          ;end interrupt and return
  2183                                  ;-----------------------------------------------------------------------------------------------------------------------
  2184                                  ;
  2185                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2186                                  ;
  2187                                  ;-----------------------------------------------------------------------------------------------------------------------
  2188                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2189                                                          push    eax                                             ;save modified regs
  2190                                                          jmp     hwwint                                          ;end interrupt and return
  2191                                  ;-----------------------------------------------------------------------------------------------------------------------
  2192                                  ;
  2193                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2194                                  ;
  2195                                  ;-----------------------------------------------------------------------------------------------------------------------
  2196                                                          menter  coprocessor                                     ;coprocessor interrupt
  2197                                                          push    eax                                             ;save modified regs
  2198                                                          jmp     hwwint                                          ;end interrupt and return
  2199                                  ;-----------------------------------------------------------------------------------------------------------------------
  2200                                  ;
  2201                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2202                                  ;
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2205                                                          push    eax                                             ;save modified regs
  2206                                                          jmp     hwwint                                          ;end interrupt and return
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  ;
  2209                                  ;       IRQ15   Reserved Hardware Interrupt
  2210                                  ;
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                                          menter  irq15                                           ;reserved
  2213                                                          push    eax                                             ;save modified regs
  2214                                                          jmp     hwwint                                          ;end interrupt and return
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;       Exit from hardware interrupt
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2221                                                          jmp     hwint90                                         ;skip ahead
  2222                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2223                                  hwint90                 sti                                                     ;enable maskable interrupts
  2224                                                          pop     eax                                             ;restore modified regs
  2225                                                          iretd                                                   ;return from interrupt
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                  ;
  2228                                  ;       INT 30h Operating System Software Service Interrupt
  2229                                  ;
  2230                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2231                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2232                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2233                                  ;       the entry address of the specific function from a table.
  2234                                  ;
  2235                                  ;-----------------------------------------------------------------------------------------------------------------------
  2236                                                          menter  svc
  2237                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2238                                                          jae     svc90                                           ;yes, skip ahead
  2239                                                          movzx   eax,al                                          ;function
  2240                                                          shl     eax,2                                           ;offset into table
  2241                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2242                                  svc90                   iretd                                                   ;return from interrupt
  2243                                  ;-----------------------------------------------------------------------------------------------------------------------
  2244                                  ;
  2245                                  ;       Service Request Table
  2246                                  ;
  2247                                  ;
  2248                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2249                                  ;
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                  tsvc                    tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2252                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                  ;
  2255                                  ;       Service Request Macros
  2256                                  ;
  2257                                  ;       These macros provide positional parameterization of service request calls.
  2258                                  ;
  2259                                  ;-----------------------------------------------------------------------------------------------------------------------
  2260                                  %macro                  placeCursor 0
  2261                                                          mov     al,ePlaceCursor                                 ;function code
  2262                                                          int     _svc                                            ;invoke OS service
  2263                                  %endmacro
  2264                                  ;=======================================================================================================================
  2265                                  ;
  2266                                  ;       Kernel Function Library
  2267                                  ;
  2268                                  ;=======================================================================================================================
  2269                                  ;=======================================================================================================================
  2270                                  ;
  2271                                  ;       Console Helper Routines
  2272                                  ;
  2273                                  ;       PutConsoleHexByte
  2274                                  ;       PutConsoleOIAChar
  2275                                  ;       PutConsoleOIAShift
  2276                                  ;
  2277                                  ;=======================================================================================================================
  2278                                  ;-----------------------------------------------------------------------------------------------------------------------
  2279                                  ;
  2280                                  ;       Routine:        PutConsoleHexByte
  2281                                  ;
  2282                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2283                                  ;
  2284                                  ;       In:             AL      byte value
  2285                                  ;                       CL      column
  2286                                  ;                       CH      row
  2287                                  ;                       DS      OS data selector
  2288                                  ;                       ES      CGA selector
  2289                                  ;
  2290                                  ;-----------------------------------------------------------------------------------------------------------------------
  2291                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2292                                                          shr     al,4                                            ;hi-order nybble
  2293                                                          call    .10                                             ;make ASCII and store
  2294                                                          pop     eax                                             ;byte value
  2295                                                          and     al,0Fh                                          ;lo-order nybble
  2296                                  .10                     or      al,030h                                         ;apply ASCII zone
  2297                                                          cmp     al,03Ah                                         ;numeric?
  2298                                                          jb      .20                                             ;yes, skip ahead
  2299                                                          add     al,7                                            ;add ASCII offset for alpha
  2300                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2301                                                          ret                                                     ;return
  2302                                  ;-----------------------------------------------------------------------------------------------------------------------
  2303                                  ;
  2304                                  ;       Routine:        PutConsoleOIAChar
  2305                                  ;
  2306                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2307                                  ;
  2308                                  ;       In:             DS      OS data selector
  2309                                  ;
  2310                                  ;-----------------------------------------------------------------------------------------------------------------------
  2311                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2312                                                          push    ecx                                             ;
  2313                                                          push    esi                                             ;
  2314                                                          push    ds                                              ;
  2315                                                          push    es                                              ;
  2316                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2317                                                          pop     ds                                              ;... into data segment register
  2318                                                          push    EGDTCGA                                         ;load CGA selector ...
  2319                                                          pop     es                                              ;... into extra segment register
  2320                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2321                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2322                                                          mov     bl,0                                            ;starting column
  2323                                                          mov     ecx,6                                           ;maximum scan codes
  2324                                  .10                     push    ecx                                             ;save remaining count
  2325                                                          mov     ecx,ebx                                         ;row, column
  2326                                                          lodsb                                                   ;read scan code
  2327                                                          or      al,al                                           ;scan code present?
  2328                                                          jz      .20                                             ;no, skip ahead
  2329                                                          call    PutConsoleHexByte                               ;display scan code
  2330                                                          jmp     .30                                             ;continue
  2331                                  .20                     mov     al,' '                                          ;ASCII space
  2332                                                          call    SetConsoleChar                                  ;display space
  2333                                                          mov     al,' '                                          ;ASCII space
  2334                                                          call    SetConsoleChar                                  ;display space
  2335                                  .30                     add     bl,2                                            ;next column (+2)
  2336                                                          pop     ecx                                             ;restore remaining
  2337                                                          loop    .10                                             ;next code
  2338                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2339                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2340                                                          jb      .40                                             ;no, skip ahead
  2341                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2342                                                          ja      .40                                             ;no, skip ahead
  2343                                                          mov     ch,bh                                           ;OIA row
  2344                                                          mov     cl,40                                           ;character display column
  2345                                                          call    SetConsoleChar                                  ;display ASCII character
  2346                                  .40                     pop     es                                              ;restore non-volatile regs
  2347                                                          pop     ds                                              ;
  2348                                                          pop     esi                                             ;
  2349                                                          pop     ecx                                             ;
  2350                                                          pop     ebx                                             ;
  2351                                                          ret                                                     ;return
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353                                  ;
  2354                                  ;       Routine:        PutConsoleOIAShift
  2355                                  ;
  2356                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2357                                  ;
  2358                                  ;       In:             BL      shift flags
  2359                                  ;                       BH      lock flags
  2360                                  ;                       DS      OS data selector
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2364                                                          push    es                                              ;
  2365                                                          push    EGDTCGA                                         ;load CGA selector ...
  2366                                                          pop     es                                              ;... into ES register
  2367                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2368                                                          mov     al,EASCIISPACE                                  ;space is default character
  2369                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2370                                                          jz      .10                                             ;no, skip ahead
  2371                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2372                                  .10                     mov     cl,14                                           ;indicator column
  2373                                                          call    SetConsoleChar                                  ;display ASCII character
  2374                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2375                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2376                                                          jz      .20                                             ;no, skip ahead
  2377                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2378                                  .20                     mov     cl,64                                           ;indicator column
  2379                                                          call    SetConsoleChar                                  ;display ASCII character
  2380                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2381                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2382                                                          jz      .30                                             ;no, skip ahead
  2383                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2384                                  .30                     mov     cl,15                                           ;indicator column
  2385                                                          call    SetConsoleChar                                  ;display ASCII character
  2386                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2387                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2388                                                          jz      .40                                             ;no, skip ahead
  2389                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2390                                  .40                     mov     cl,63                                           ;indicator column
  2391                                                          call    SetConsoleChar                                  ;display ASCII character
  2392                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2393                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2394                                                          jz      .50                                             ;no, skip ahead
  2395                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2396                                  .50                     mov     cl,16                                           ;indicator column
  2397                                                          call    SetConsoleChar                                  ;display ASCII character
  2398                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2399                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2400                                                          jz      .60                                             ;no, skip ahead
  2401                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2402                                  .60                     mov     cl,62                                           ;indicator column
  2403                                                          call    SetConsoleChar                                  ;display ASCII character
  2404                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2405                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2406                                                          jz      .70                                             ;no, skip ahead
  2407                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2408                                  .70                     mov     cl,78                                           ;indicator column
  2409                                                          call    SetConsoleChar                                  ;display ASCII character
  2410                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2411                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2412                                                          jz      .80                                             ;no, skip ahead
  2413                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2414                                  .80                     mov     cl,77                                           ;indicator column
  2415                                                          call    SetConsoleChar                                  ;display ASCII character
  2416                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2417                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2418                                                          jz      .90                                             ;no, skip ahead
  2419                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2420                                  .90                     mov     cl,76                                           ;indicator column
  2421                                                          call    SetConsoleChar                                  ;display ASCII character
  2422                                                          pop     es                                              ;restore non-volatile regs
  2423                                                          pop     ecx                                             ;
  2424                                                          ret                                                     ;return
  2425                                  ;=======================================================================================================================
  2426                                  ;
  2427                                  ;       Memory-Mapped Video Routines
  2428                                  ;
  2429                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2430                                  ;
  2431                                  ;       SetConsoleChar
  2432                                  ;
  2433                                  ;=======================================================================================================================
  2434                                  ;-----------------------------------------------------------------------------------------------------------------------
  2435                                  ;
  2436                                  ;       Routine:        SetConsoleChar
  2437                                  ;
  2438                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2439                                  ;
  2440                                  ;       In:             AL      ASCII character
  2441                                  ;                       CL      column
  2442                                  ;                       CH      row
  2443                                  ;                       ES      CGA selector
  2444                                  ;
  2445                                  ;       Out:            EAX     last target address written (ES:)
  2446                                  ;                       CL      column + 1
  2447                                  ;
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2450                                                          movzx   eax,ch                                          ;row
  2451                                                          mov     ah,ECONCOLS                                     ;cols/row
  2452                                                          mul     ah                                              ;row * cols/row
  2453                                                          add     al,cl                                           ;add column
  2454                                                          adc     ah,0                                            ;handle carry
  2455                                                          shl     eax,1                                           ;screen offset
  2456                                                          mov     [es:eax],dl                                     ;store character
  2457                                                          inc     cl                                              ;next column
  2458                                                          ret                                                     ;return
  2459                                  ;=======================================================================================================================
  2460                                  ;
  2461                                  ;       Input/Output Routines
  2462                                  ;
  2463                                  ;       These routines read and/or write directly to ports.
  2464                                  ;
  2465                                  ;       PlaceCursor
  2466                                  ;       PutPrimaryEndOfInt
  2467                                  ;       PutSecondaryEndOfInt
  2468                                  ;       SetKeyboardLamps
  2469                                  ;       WaitForKeyInBuffer
  2470                                  ;       WaitForKeyOutBuffer
  2471                                  ;
  2472                                  ;=======================================================================================================================
  2473                                  ;-----------------------------------------------------------------------------------------------------------------------
  2474                                  ;
  2475                                  ;       Routine:        PlaceCursor
  2476                                  ;
  2477                                  ;       Description:    This routine positions the cursor on the console.
  2478                                  ;
  2479                                  ;       In:             DS      OS data selector
  2480                                  ;
  2481                                  ;-----------------------------------------------------------------------------------------------------------------------
  2482                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2483                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2484                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2485                                                          mul     ah                                              ;row offset
  2486                                                          add     al,[wbConsoleColumn]                            ;add column
  2487                                                          adc     ah,0                                            ;add overflow
  2488                                                          mov     ecx,eax                                         ;screen offset
  2489                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2490                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2491                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2492                                                          out     dx,al                                           ;select register
  2493                                                          inc     edx                                             ;data port
  2494                                                          mov     al,ch                                           ;hi-order cursor loc
  2495                                                          out     dx,al                                           ;store hi-order loc
  2496                                                          dec     edx                                             ;register select port
  2497                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2498                                                          out     dx,al                                           ;select register
  2499                                                          inc     edx                                             ;data port
  2500                                                          mov     al,cl                                           ;lo-order cursor loc
  2501                                                          out     dx,al                                           ;store lo-order loc
  2502                                                          pop     ecx                                             ;restore non-volatile regs
  2503                                                          ret                                                     ;return
  2504                                  ;-----------------------------------------------------------------------------------------------------------------------
  2505                                  ;
  2506                                  ;       Routine:        PutPrimaryEndOfInt
  2507                                  ;
  2508                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2509                                  ;
  2510                                  ;-----------------------------------------------------------------------------------------------------------------------
  2511                                  PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2512                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2513                                                          ret                                                     ;return
  2514                                  ;-----------------------------------------------------------------------------------------------------------------------
  2515                                  ;
  2516                                  ;       Routine:        PutSecondaryEndOfInt
  2517                                  ;
  2518                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2519                                  ;
  2520                                  ;-----------------------------------------------------------------------------------------------------------------------
  2521                                  PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2522                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2523                                                          ret                                                     ;return
  2524                                  ;-----------------------------------------------------------------------------------------------------------------------
  2525                                  ;
  2526                                  ;       Routine:        SetKeyboardLamps
  2527                                  ;
  2528                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2529                                  ;
  2530                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2531                                  ;
  2532                                  ;-----------------------------------------------------------------------------------------------------------------------
  2533                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2534                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2535                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  2536                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2537                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2538                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2539                                                          mov     al,bh                                           ;set/reset lamps value
  2540                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  2541                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2542                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2543                                                          ret                                                     ;return
  2544                                  ;-----------------------------------------------------------------------------------------------------------------------
  2545                                  ;
  2546                                  ;       Routine:        WaitForKeyInBuffer
  2547                                  ;
  2548                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2549                                  ;
  2550                                  ;       Out:            ZF      1 = Input buffer ready
  2551                                  ;                               0 = Input buffer not ready after timeout
  2552                                  ;
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2555                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2556                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2557                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  2558                                                          loopnz  .10                                             ;yes, repeat till timeout
  2559                                                          pop     ecx                                             ;restore non-volatile regs
  2560                                                          ret                                                     ;return
  2561                                  ;-----------------------------------------------------------------------------------------------------------------------
  2562                                  ;
  2563                                  ;       Routine:        WaitForKeyOutBuffer
  2564                                  ;
  2565                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2566                                  ;
  2567                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2568                                  ;                               0 = Output buffer empty after timeout
  2569                                  ;
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2572                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2573                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2574                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  2575                                                          loopz   .10                                             ;loop until output buffer bit
  2576                                                          pop     ecx                                             ;restore non-volatile regs
  2577                                                          ret                                                     ;return
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  ;
  2580                                  ;       End of the Kernel Function Library
  2581                                  ;
  2582                                  ;-----------------------------------------------------------------------------------------------------------------------
  2583                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2584                                  ;=======================================================================================================================
  2585                                  ;
  2586                                  ;       Console Task
  2587                                  ;
  2588                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2589                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2590                                  ;       screen and responds to user commands.
  2591                                  ;
  2592                                  ;=======================================================================================================================
  2593                                  ;-----------------------------------------------------------------------------------------------------------------------
  2594                                  ;
  2595                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2596                                  ;
  2597                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                  section                 constack                                                ;console task stack
  2601                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2602                                  ;-----------------------------------------------------------------------------------------------------------------------
  2603                                  ;
  2604                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2605                                  ;
  2606                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2607                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2608                                  ;       16 descriptors. Six are initially defined.
  2609                                  ;
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  section                 conldt                                                  ;console local descriptors
  2612                                                          dq      004093004780007Fh                               ;04 TSS alias
  2613                                                          dq      004093004700007Fh                               ;0c LDT alias
  2614                                                          dq      00409300400006FFh                               ;14 stack
  2615                                                          dq      00CF93000000FFFFh                               ;1c data
  2616                                                          dq      00409B0050000FFFh                               ;24 code
  2617                                                          dq      00409300480007FFh                               ;2c message queue
  2618                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2622                                  ;
  2623                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2624                                  ;       segment. CS to console code.
  2625                                  ;
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  section                 contss                                                  ;console task state segment
  2628                                                          dd      0                                               ;00 back-link tss
  2629                                                          dd      0700h                                           ;04 esp ring 0
  2630                                                          dd      0014h                                           ;08 ss ring 0
  2631                                                          dd      0700h                                           ;0c esp ring 1
  2632                                                          dd      0014h                                           ;10 es ring 1
  2633                                                          dd      0700h                                           ;14 esp ring 2
  2634                                                          dd      0014h                                           ;18 ss ring 2
  2635                                                          dd      0                                               ;1c cr ring 3
  2636                                                          dd      0                                               ;20 eip
  2637                                                          dd      0200h                                           ;24 eflags
  2638                                                          dd      0                                               ;28 eax
  2639                                                          dd      0                                               ;2c ecx
  2640                                                          dd      0                                               ;30 edx
  2641                                                          dd      0                                               ;34 ebx
  2642                                                          dd      0700h                                           ;38 esp ring 3
  2643                                                          dd      0                                               ;3c ebp
  2644                                                          dd      0                                               ;40 esi
  2645                                                          dd      0                                               ;44 edi
  2646                                                          dd      001Ch                                           ;48 es
  2647                                                          dd      0024h                                           ;4c cs
  2648                                                          dd      0014h                                           ;50 ss ring 3
  2649                                                          dd      001Ch                                           ;54 ds
  2650                                                          dd      0                                               ;58 fs
  2651                                                          dd      0                                               ;5c gs
  2652                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2653                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                  ;
  2656                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2657                                  ;
  2658                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2659                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2660                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2661                                  ;       event.
  2662                                  ;
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                  section                 conmque                                                 ;console message queue
  2665                                                          dd      8                                               ;head pointer
  2666                                                          dd      8                                               ;tail pointer
  2667                                                          times   510 dd 0                                        ;queue elements
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2671                                  ;
  2672                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2673                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2674                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2675                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2676                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2677                                  ;       board input, echoing to the console screen and responding to user commands.
  2678                                  ;
  2679                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2680                                  ;
  2681                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2682                                  ;                               |  Real Mode Interrupt Vectors                  |
  2683                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2684                                  ;                               |  Reserved BIOS Memory Area                    |
  2685                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2686                                  ;                               |  Shared Kernel Memory Area                    |
  2687                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2688                                  ;                               |  Global Descriptor Table (GDT)                |
  2689                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2690                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2691                                  ;                       002000  +-----------------------------------------------+
  2692                                  ;                               |  Interrupt Handlers                           |
  2693                                  ;                               |  Kernel Function Library                      |
  2694                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2695                                  ;                               |  Console Task Stack Area                      |
  2696                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2697                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2698                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2699                                  ;                               |  Console Task Task State Segment (TSS)        |
  2700                                  ;                       004800  +-----------------------------------------------+
  2701                                  ;                               |  Console Task Message Queue                   |
  2702                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2703                                  ;                               |  Console Task Code                            |
  2704                                  ;                               |  Console Task Constants                       |
  2705                                  ;                       006000  +===============================================+
  2706                                  ;
  2707                                  ;-----------------------------------------------------------------------------------------------------------------------
  2708                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2709                                  ;
  2710                                  ;       Initialize console work areas to low values.
  2711                                  ;
  2712                                  ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  2713                                                          xor     al,al                                           ;initialization value
  2714                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  2715                                                          cld                                                     ;forward strings
  2716                                                          rep     stosb                                           ;initialize data
  2717                                  ;
  2718                                  ;       Initialize the active panel variables.
  2719                                  ;
  2720                                                          mov     eax,czPnlCon001                                 ;initial console panel
  2721                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  2722                                  ;
  2723                                  ;       Address the console screen memory.
  2724                                  ;
  2725                                                          push    EGDTCGA                                         ;load CGA video selector...
  2726                                                          pop     es                                              ;...into extra segment reg
  2727                                  ;
  2728                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  2729                                  ;
  2730                                                          mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  2731                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2732                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2733                                                          rep     stosd                                           ;reset OIA
  2734                                  ;
  2735                                  ;       Clear the console rows. (This is done after every attention key).
  2736                                  ;
  2737                                  .20                     xor     edi,edi                                         ;target offset
  2738                                                          mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  2739                                                          mov     eax,ECONCLEARDWORD                              ;initialization value
  2740                                                          rep     stosd                                           ;reset screen body
  2741                                  ;
  2742                                  ;       Reset the input field input address, row and column.
  2743                                  ;
  2744                                                          xor     eax,eax                                         ;zero register
  2745                                                          mov     [wbConsoleRow],al                               ;zero console row
  2746                                                          mov     [wbConsoleColumn],al                            ;zero console column
  2747                                  ;
  2748                                  ;       Load the field address from the panel. Exit loop if address is null.
  2749                                  ;
  2750                                                          mov     ebx,[wdConsolePanel]                            ;first field template addr
  2751                                  .30                     mov     esi,[ebx]                                       ;field value addr
  2752                                                          test    esi,esi                                         ;end of panel?
  2753                                                          jz      .70                                             ;yes, exit loop
  2754                                  ;
  2755                                  ;       Load the field row, column, color and length.
  2756                                  ;
  2757                                                          mov     ch,[ebx+4]                                      ;row
  2758                                                          mov     cl,[ebx+5]                                      ;column
  2759                                                          mov     dh,[ebx+6]                                      ;color
  2760                                                          mov     dl,[ebx+7]                                      ;length
  2761                                  ;
  2762                                  ;       Test the row high-bit for input field indication.
  2763                                  ;
  2764                                                          test    ch,080h                                         ;input field?
  2765                                                          jz      .40                                             ;no, branch
  2766                                                          and     ch,07Fh                                         ;clear input field indicator
  2767                                  ;
  2768                                  ;       Save the row and column if this is the first input field.
  2769                                  ;
  2770                                                          mov     al,[wbConsoleRow]                               ;console row
  2771                                                          or      al,[wbConsoleColumn]                            ;already have an input field?
  2772                                                          jnz     .40                                             ;yes, branch
  2773                                                          mov     [wbConsoleRow],ch                               ;update console row
  2774                                                          mov     [wbConsoleColumn],cl                            ;update console column
  2775                                  ;
  2776                                  ;       Compute the target offset.
  2777                                  ;
  2778                                  .40                     movzx   eax,ch                                          ;row
  2779                                                          mov     ah,ECONCOLS                                     ;columns per row
  2780                                                          mul     ah                                              ;row offset
  2781                                                          add     al,cl                                           ;add column
  2782                                                          adc     ah,0                                            ;handle overflow
  2783                                                          shl     eax,1                                           ;two-bytes per column
  2784                                                          mov     edi,eax                                         ;target offset
  2785                                  ;
  2786                                  ;       Display the field contents.
  2787                                  ;
  2788                                                          movzx   ecx,dl                                          ;length
  2789                                                          mov     ah,dh                                           ;color
  2790                                  .50                     lodsb                                                   ;field character
  2791                                                          test    al,al                                           ;end of value?
  2792                                                          jz      .60                                             ;yes, branch
  2793                                                          stosw                                                   ;store character and color
  2794                                                          loop    .50                                             ;next character
  2795                                  .60                     add     ebx,8                                           ;next field addr
  2796                                                          jmp     short .30                                       ;next field
  2797                                  ;
  2798                                  ;       Place the cursor at the input field.
  2799                                  ;
  2800                                  .70                     mov     ah,[wbConsoleRow]                               ;field row
  2801                                                          mov     al,[wbConsoleColumn]                            ;field column
  2802                                                          placeCursor                                             ;position the cursor
  2803                                  ;
  2804                                  ;       Enter halt loop
  2805                                  ;
  2806                                  .80                     sti                                                     ;enable interrupts
  2807                                                          hlt                                                     ;halt until interrupt
  2808                                                          jmp     .80                                             ;continue halt loop
  2809                                  ;-----------------------------------------------------------------------------------------------------------------------
  2810                                  ;
  2811                                  ;       Constants
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  ;
  2816                                  ;       Panels
  2817                                  ;
  2818                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  2819                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  2820                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  2821                                  ;
  2822                                  ;-----------------------------------------------------------------------------------------------------------------------
  2823                                  czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  2824                                                          db      00,00,02h,06                                    ;flags+row, col, attr, length
  2825                                                          dd      czFldTitleCon001
  2826                                                          db      00,30,07h,20
  2827                                                          dd      czFldDatTmCon001
  2828                                                          db      00,63,02h,17
  2829                                                          dd      czFldPrmptCon001
  2830                                                          db      23,00,07h,01
  2831                                                          dd      wzConsoleInBuffer
  2832                                                          db      128+23,01,07h,79
  2833                                                          dd      0                                               ;end of panel
  2834                                  ;-----------------------------------------------------------------------------------------------------------------------
  2835                                  ;
  2836                                  ;       Strings
  2837                                  ;
  2838                                  ;-----------------------------------------------------------------------------------------------------------------------
  2839                                  czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  2840                                  czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  2841                                  czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  2842                                  czFldPrmptCon001        db      ":"                                             ;command prompt
  2843                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  2844                                  %endif
  2845                                  %ifdef BUILDDISK
  2846                                  ;-----------------------------------------------------------------------------------------------------------------------
  2847                                  ;
  2848                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2849                                  ;
  2850                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2851                                  ;
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                  section                 unused                                                  ;unused disk space
  2854                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2855                                  %endif
  2856                                  ;=======================================================================================================================
  2857                                  ;
  2858                                  ;       End of Program Code
  2859                                  ;
  2860                                  ;=======================================================================================================================
