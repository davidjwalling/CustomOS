     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   272                                  ;
   273                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   274                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   275                                  ;
   276                                  ;       0.......        Segment is not present in memory (triggers int 11)
   277                                  ;       1.......        Segment is present in memory
   278                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   279                                  ;       ...0....        Segment is a system segment
   280                                  ;       ...00010                Local Descriptor Table
   281                                  ;       ...00101                Task Gate
   282                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   283                                  ;       ...01100                Call Gate (386)
   284                                  ;       ...01110                Interrupt Gate (386)
   285                                  ;       ...01111                Trap Gate (386)
   286                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   287                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   288                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   289                                  ;
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   292                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  ;
   295                                  ;       Firmware-Defined Values
   296                                  ;
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   301                                  ;
   302                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   303                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   307                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   308                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   309                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   310                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   311                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   312                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   313                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   314                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   315                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   316                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  ;
   319                                  ;       Standards-Based Values
   320                                  ;
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       ASCII                                                                   EASCII...
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   328                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   329                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   330                                  EASCIISPACE             equ     020h                                            ;space
   331                                  EASCIIUPPERA            equ     041h                                            ;'A'
   332                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   333                                  EASCIICASE              equ     00100000b                                       ;case bit
   334                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ;
   337                                  ;       Operating System Values
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ;
   342                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   343                                  ;
   344                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   345                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   346                                  ;
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   349                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   350                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   351                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   352                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   353                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   354                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;       Console Constants                                                       ECON...
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ECONCOLS                equ     80                                              ;columns per row
   359                                  ECONROWS                equ     24                                              ;console rows
   360                                  ECONOIAROW              equ     24                                              ;operator information area row
   361                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   362                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   363                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   364                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   365                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   370                                  EGDTCGA                 equ     020h                                            ;cga video selector
   371                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   372                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   373                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   374                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   375                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   376                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  ;       Keyboard Flags                                                          EKEYF...
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   381                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   382                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   383                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   384                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   385                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   386                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   387                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   388                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   389                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   390                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  ;       Kernel Constants                                                        EKRN...
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   395                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   396                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   397                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   398                                  ;=======================================================================================================================
   399                                  ;
   400                                  ;       Structures
   401                                  ;
   402                                  ;=======================================================================================================================
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;
   405                                  ;       OSDATA
   406                                  ;
   407                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   408                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   409                                  ;
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  struc                   OSDATA
   412 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   413 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   414 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   415 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   416 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   417 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   418 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   419 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   420 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   421 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   422 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   423 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   424 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   425 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   426 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   427 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   428 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   429 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   430 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   431 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   432 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   433 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   434 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   435 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   436 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   437 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   438 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   439 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   440 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   441 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   442 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   443 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   444 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   445 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   446 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   447 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   448 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   449 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   450 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   451 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   452 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   453 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   454 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   455 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   456 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   457 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   458 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   459 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   460 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   461 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   462 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   463 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   464 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   465 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   466 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   467 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   468 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   469 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   470 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   471 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   472 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   473 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   474 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   475 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   476 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   477 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   478 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   479 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   480 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   481 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   482 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   483 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   484 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   485 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   486 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   487 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   488 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   489 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   490 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   491 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   492 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   493 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   494 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   495 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   496 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   497 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   498 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   499 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   500 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   501 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   502 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   503 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   504 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   505 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   506 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   507 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   508 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   509 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   510 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   511 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   512 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   513                                  ;-----------------------------------------------------------------------------------------------------------------------
   514                                  ;
   515                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   516                                  ;
   517                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   518                                  ;
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  ECONDATA                equ     ($)
   521 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   522 00000804 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   523 00000854 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   524 00000855 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   525 00000856 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   526 00000857 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   527 00000858 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   528 00000859 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   529 0000085A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   530 0000085B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   531 0000085C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   532 0000085D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   533 0000085E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   534 0000085F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   535                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   536                                  ;-----------------------------------------------------------------------------------------------------------------------
   537                                  ;
   538                                  ;       End of OS Variables
   539                                  ;
   540                                  ;-----------------------------------------------------------------------------------------------------------------------
   541                                  endstruc
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  ;
   544                                  ;       Macros
   545                                  ;
   546                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   547                                  ;
   548                                  ;-----------------------------------------------------------------------------------------------------------------------
   549                                  %macro                  mint    1
   550                                  _%1                     equ     ($-$$) / EX86DESCLEN
   551                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   552                                  %endmacro
   553                                  %macro                  mtrap   1
   554                                  _%1                     equ     ($-$$) / EX86DESCLEN
   555                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   556                                  %endmacro
   557                                  %macro                  menter  1
   558                                  ?%1                     equ     ($-$$)
   559                                  %endmacro
   560                                  %macro                  tsvce   1
   561                                  e%1                     equ     ($-tsvc)/4
   562                                                          dd      %1
   563                                  %endmacro
   564                                  %ifdef BUILDBOOT
   565                                  ;=======================================================================================================================
   566                                  ;
   567                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   568                                  ;
   569                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   570                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   571                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   572                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   573                                  ;
   574                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   575                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   576                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   577                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   578                                  ;       immediately followed by a disk parameter table.
   579                                  ;
   580                                  ;=======================================================================================================================
   581                                                          cpu     8086                                            ;assume minimal CPU
   582                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   583                                                          bits    16                                              ;16-bit code at power-up
   584                                  %ifdef BUILDPREP
   585                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   586                                  %else
   587 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   588                                  %endif
   589                                  ;-----------------------------------------------------------------------------------------------------------------------
   590                                  ;
   591                                  ;       Disk Parameter Table
   592                                  ;
   593                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   594                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   595                                  ;
   596                                  ;-----------------------------------------------------------------------------------------------------------------------
   597 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   598 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   599 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   600 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   601 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   602 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   603 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   604 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   605 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   606                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   607 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   608 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   609 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   610                                  ;
   611                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   612                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   613                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   614                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   615                                  ;       given several possible starting values for CS:IP.
   616                                  ;
   617                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   618 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   619                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   620 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   621 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   622 00000025 B104                                            mov     cl,4                                            ;shift count
   623 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   624 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   625 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   626                                  ;
   627                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   628                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   629                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   630                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   631                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   632                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   633                                  ;
   634 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   635 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   636 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   637 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   638 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   639                                  ;
   640                                  ;       Our boot addressability is now set up according to the following diagram.
   641                                  ;
   642                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   643                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   644                                  ;                               |  256 = 100h bytes                             |
   645                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   646                                  ;                               |  Boot Sector (vstart=0100h)                   |
   647                                  ;                               |  1 sector = 512 = 200h bytes                  |
   648                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   649                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   650                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   651                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   652                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   653                                  ;                               |  2 sectors = 1024 = 400h bytes
   654                                  ;                       009400  +-----------------------------------------------+ DS:1900
   655                                  ;
   656                                  ;       On entry, DL indicates the drive being booted from.
   657                                  ;
   658 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   659                                  ;
   660                                  ;       Compute directory i/o buffer address.
   661                                  ;
   662 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   663 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   664 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   665 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   666                                  ;
   667                                  ;       Compute segment where os.com will be loaded.
   668                                  ;
   669 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   670 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   671 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   672 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   673                                  ;
   674                                  ;       Set the video mode to 80 column, 25 row, text.
   675                                  ;
   676 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   677 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   678                                  ;
   679                                  ;       Write a message to the console so we know we have our addressability established.
   680                                  ;
   681 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   682 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   683                                  ;
   684                                  ;       Initialize the number of directory sectors to search.
   685                                  ;
   686 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   687 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   688                                  ;
   689                                  ;       Compute number of directory sectors and initialize overhead count.
   690                                  ;
   691 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   692 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   693 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   694 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   695                                  ;
   696                                  ;       Compute directory entries per sector.
   697                                  ;
   698 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   699 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   700 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   701                                  ;
   702                                  ;       Compute first logical directory sector and update overhead count.
   703                                  ;
   704 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   705 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   706 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   707 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   708 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   709 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   710                                  ;
   711                                  ;       Read directory sector.
   712                                  ;
   713 0000008E B001                    .30                     mov     al,1                                            ;sector count
   714 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   715 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   716 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   717                                  ;
   718                                  ;       Setup variables to search this directory sector.
   719                                  ;
   720 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   721 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   722 000000A1 7603                                            jna     .40                                             ;no, continue
   723 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   724 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   725 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   726 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   727                                  ;
   728                                  ;       Loop through directory sectors searching for kernel program.
   729                                  ;
   730 000000B1 56                      .50                     push    si                                              ;save kernel name address
   731 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   732 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   733 000000B6 FC                                              cld                                                     ;forward strings
   734 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   735 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   736 000000BA 5E                                              pop     si                                              ;restore kernel name address
   737 000000BB 7418                                            je      .60                                             ;exit loop if found
   738 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   739 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   740 000000C2 75ED                                            jnz     .50                                             ;next entry
   741                                  ;
   742                                  ;       Repeat search if we are not at the end of the directory.
   743                                  ;
   744 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   745 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   746 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   747 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   748 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   749                                  ;
   750                                  ;       If we find the kernel program in the directory, read the FAT.
   751                                  ;
   752 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   753 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   754 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   755 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   756 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   757 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   758                                  ;
   759                                  ;       Get the starting cluster of the kernel program and target address.
   760                                  ;
   761 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   762 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   763                                  ;
   764                                  ;       Read each program cluster into RAM.
   765                                  ;
   766 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   767 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   768 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   769 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   770 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   771 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   772 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   773 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   774 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   775                                  ;
   776                                  ;       Update buffer pointer for next cluster.
   777                                  ;
   778 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   779 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   780 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   781 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   782 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   783                                  ;
   784                                  ;       Compute next cluster number.
   785                                  ;
   786 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   787 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   788 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   789 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   790 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   791 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   792 00000120 83E701                                          and     di,1                                            ;get low bit
   793 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   794 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   795 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   796                                  ;
   797                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   798                                  ;
   799 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   800 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   801 00000130 B104                                            mov     cl,4                                            ;shift count
   802 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   803 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   804 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   805 0000013A 75B2                                            jne     .70                                             ;no, continue
   806                                  ;
   807                                  ;       Transfer control to the operating system program.
   808                                  ;
   809 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   810 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   811 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   812                                  ;
   813                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   814                                  ;
   815 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   816 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   817 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   818 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   819 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   820 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   821 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   822 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   823 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   824 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   825                                  ;
   826                                  ;       Try maxtries times to read sector.
   827                                  ;
   828 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   829 00000160 53                      .10                     push    bx                                              ;save buffer address
   830 00000161 51                                              push    cx                                              ;save retry count
   831 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   832 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   833 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   834 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   835 0000016F 59                                              pop     cx                                              ;restore retry count
   836 00000170 5B                                              pop     bx                                              ;restore buffer address
   837 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   838 00000173 E2EB                                            loop    .10                                             ;retry
   839                                  ;
   840                                  ;       Handle disk error: convert to ASCII and store in error string.
   841                                  ;
   842 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   843 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   844 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   845 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   846 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   847 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   848 00000183 7203                                            jb      .20                                             ;continue if numeral
   849 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   850 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   851 0000018A 7203                                            jb      .30                                             ;continue if numeral
   852 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   853 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   854 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   855 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   856                                  ;
   857                                  ;       Wait for a key press.
   858                                  ;
   859 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   860 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   861 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   862 0000019E FB                                              sti                                                     ;enable maskable interrupts
   863 0000019F F4                                              hlt                                                     ;wait for interrupt
   864 000001A0 EBF6                                            jmp     .10                                             ;repeat
   865                                  ;
   866                                  ;       Reset the system.
   867                                  ;
   868 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   869 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   870 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   871 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   872 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   873                                  ;
   874                                  ;       Display text message.
   875                                  ;
   876 000001AA FC                      BootPrint               cld                                                     ;forward strings
   877 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   878 000001AC 84C0                                            test    al,al                                           ;end of string?
   879 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   880 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   881 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   882 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   883 000001B6 C3                      BootReturn              ret                                                     ;return
   884                                  ;-----------------------------------------------------------------------------------------------------------------------
   885                                  ;
   886                                  ;       Constants
   887                                  ;
   888                                  ;-----------------------------------------------------------------------------------------------------------------------
   889 000001B7 90                                              align   2
   890 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   891 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   891 000001C3 4F4D               
   892 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   892 000001CE 530D0A00           
   893 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   893 000001DB 7220               
   894 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   895 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   895 000001E9 6700               
   896                                  ;-----------------------------------------------------------------------------------------------------------------------
   897                                  ;
   898                                  ;       Work Areas
   899                                  ;
   900                                  ;-----------------------------------------------------------------------------------------------------------------------
   901 000001EB 90                                              align   2
   902 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   903 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   904 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   905 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   906 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   907                                  wwReadCountCommand      equ     $                                               ;read count and command
   908 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   909 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   910                                  wwDriveHead             equ     $                                               ;drive, head (word)
   911 000001F8 00                      wbDrive                 db      0                                               ;drive
   912 000001F9 00                      wbHead                  db      0                                               ;head
   913                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   914 000001FA 00                                              db      0                                               ;sector
   915 000001FB 00                      wbTrack                 db      0                                               ;track
   916 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   917 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   918                                  %endif
   919                                  %ifdef BUILDPREP
   920                                  ;=======================================================================================================================
   921                                  ;
   922                                  ;       Diskette Preparation Code
   923                                  ;
   924                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   925                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   926                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   927                                  ;
   928                                  ;=======================================================================================================================
   929                                  ;
   930                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   931                                  ;
   932                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   933                                                          call    BootPrint                                       ;display message
   934                                  ;
   935                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   936                                  ;
   937                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   938                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   939                                                          jnz     .20                                             ;continue if key pressed
   940                                                          sti                                                     ;enable interrupts
   941                                                          hlt                                                     ;wait for interrupt
   942                                                          jmp     .10                                             ;repeat
   943                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   944                                                          je      .30                                             ;yes, branch
   945                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   946                                                          jne     .10                                             ;no, repeat
   947                                                          jmp     .120                                            ;yes, exit program
   948                                  ;
   949                                  ;       Display writing-sector message and patch the JMP instruction.
   950                                  ;
   951                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   952                                                          call    BootPrint                                       ;display message
   953                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   954                                                          mov     ax,01Bh                                         ;address past disk parameter table
   955                                                          mov     [bx],ax                                         ;update the JMP instruction
   956                                  ;
   957                                  ;       Try to read the boot sector.
   958                                  ;
   959                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   960                                  .40                     push    cx                                              ;save remaining tries
   961                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   962                                                          mov     dx,0                                            ;head zero, drive zero
   963                                                          mov     cx,1                                            ;track zero, sector one
   964                                                          mov     al,1                                            ;one sector
   965                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   966                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   967                                                          pop     cx                                              ;restore remaining retries
   968                                                          jnc     .50                                             ;skip ahead if successful
   969                                                          loop    .40                                             ;try again
   970                                                          mov     si,czPrepMsg20                                  ;read-error message address
   971                                                          jmp     .70                                             ;branch to error routine
   972                                  ;
   973                                  ;       Copy diskette parms from input buffer to output buffer.
   974                                  ;
   975                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   976                                                          add     si,11                                           ;skip over JMP and system ID
   977                                                          mov     di,Boot                                         ;output buffer address
   978                                                          add     di,11                                           ;skip over JMP and system ID
   979                                                          mov     cx,19                                           ;length of diskette parameters
   980                                                          cld                                                     ;forward string copies
   981                                                          rep     movsb                                           ;copy diskette parameters
   982                                  ;
   983                                  ;       Try to write boot sector to diskette.
   984                                  ;
   985                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   986                                  .60                     push    cx                                              ;save remaining tries
   987                                                          mov     bx,Boot                                         ;output buffer address
   988                                                          mov     dx,0                                            ;head zero, drive zero
   989                                                          mov     cx,1                                            ;track zero, sector one
   990                                                          mov     al,1                                            ;one sector
   991                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   992                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   993                                                          pop     cx                                              ;restore remaining retries
   994                                                          jnc     .100                                            ;skip ahead if successful
   995                                                          loop    .60                                             ;try again
   996                                                          mov     si,czPrepMsg30                                  ;write-error message address
   997                                  ;
   998                                  ;       Convert the error code to ASCII and display the error message.
   999                                  ;
  1000                                  .70                     push    ax                                              ;save error code
  1001                                                          mov     al,ah                                           ;copy error code
  1002                                                          mov     ah,0                                            ;AX = error code
  1003                                                          mov     dl,10h                                          ;hexadecimal divisor
  1004                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1005                                                          or      ax,03030h                                       ;add ASCII zone digits
  1006                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1007                                                          jb      .80                                             ;yes, continue
  1008                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1009                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1010                                                          jb      .90                                             ;yes, continue
  1011                                                          add     al,7                                            ;no, make ASCII
  1012                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1013                                                          call    BootPrint                                       ;write error message
  1014                                                          pop     ax                                              ;restore error code
  1015                                  ;
  1016                                  ;       Display the completion message.
  1017                                  ;
  1018                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1019                                                          mov     al,ah                                           ;BIOS return code
  1020                                                          cmp     al,0                                            ;success?
  1021                                                          je      .110                                            ;yes, continue
  1022                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1023                                                          cmp     al,1                                            ;disk parameter error?
  1024                                                          je      .110                                            ;yes, continue
  1025                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1026                                                          cmp     al,2                                            ;address mark not found?
  1027                                                          je      .110                                            ;yes, continue
  1028                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1029                                                          cmp     al,3                                            ;protected disk?
  1030                                                          je      .110                                            ;yes, continue
  1031                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1032                                                          cmp     al,6                                            ;diskette removed?
  1033                                                          je      .110                                            ;yes, continue
  1034                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1035                                                          cmp     al,80H                                          ;drive timed out?
  1036                                                          je      .110                                            ;yes, continue
  1037                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1038                                  .110                    call    BootPrint                                       ;display result message
  1039                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1040                                                          int     021h                                            ;terminate DOS program
  1041                                                          ret                                                     ;return (should not execute)
  1042                                  ;-----------------------------------------------------------------------------------------------------------------------
  1043                                  ;
  1044                                  ;       Diskette Preparation Messages
  1045                                  ;
  1046                                  ;-----------------------------------------------------------------------------------------------------------------------
  1047                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1048                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1049                                                          db      13,10
  1050                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1051                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1052                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1053                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1054                                                          db      13,10,0
  1055                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1056                                                          db      13,10,0
  1057                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1058                                                          db      13,10,0
  1059                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1060                                                          db      13,10,0
  1061                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1062                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1063                                                          db      13,10,0
  1064                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1065                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1066                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1067                                                          db      13,10,"and retry."
  1068                                                          db      13,10,0
  1069                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1070                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1071                                                          db      13,10,"using another diskette."
  1072                                                          db      13,10,0
  1073                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1074                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1075                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1076                                                          db      13,10,0
  1077                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1078                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1079                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1080                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1081                                                          db      13,10,"is properly inserted in the diskette drive."
  1082                                                          db      13,10,0
  1083                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1084                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1085                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1086                                                          db      13,10,0
  1087                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1088                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1089                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1090                                                          db      13,10,0
  1091                                  wcPrepInBuf             equ     $
  1092                                  %endif
  1093                                  %ifdef BUILDDISK
  1094                                  ;=======================================================================================================================
  1095                                  ;
  1096                                  ;       File Allocation Tables
  1097                                  ;
  1098                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1099                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1100                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1101                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1102                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1103                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1104                                  ;       the last cluster in the chain.
  1105                                  ;
  1106                                  ;       Every three bytes encode two FAT entries as follows:
  1107                                  ;
  1108                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1109                                  ;
  1110                                  ;=======================================================================================================================
  1111                                  ;-----------------------------------------------------------------------------------------------------------------------
  1112                                  ;
  1113                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1114                                  ;
  1115                                  ;-----------------------------------------------------------------------------------------------------------------------
  1116                                  section                 fat1                                                    ;first copy of FAT
  1117 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1118 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1119 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1120 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1121 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1122 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1123 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1124 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1125 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1126 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1127 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1128 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1129                                  ;-----------------------------------------------------------------------------------------------------------------------
  1130                                  ;
  1131                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1132                                  ;
  1133                                  ;-----------------------------------------------------------------------------------------------------------------------
  1134                                  section                 fat2                                                    ;second copy of FAT
  1135 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1136 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1137 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1138 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1139 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1140 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1141 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1142 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1143 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1144 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1145 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1146 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1147                                  ;-----------------------------------------------------------------------------------------------------------------------
  1148                                  ;
  1149                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1150                                  ;
  1151                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1152                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1153                                  ;       copy.
  1154                                  ;
  1155                                  ;-----------------------------------------------------------------------------------------------------------------------
  1156                                  section                 dir                                                     ;diskette directory
  1157 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1157 00000009 4F4D               
  1158 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1159 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1160 00000016 0000                                            dw      0h                                              ;time
  1161 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1162 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1163 0000001A 0200                                            dw      2                                               ;first cluster
  1164 0000001C 00540000                                        dd      05400h                                          ;file size
  1165 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1166                                  %endif
  1167                                  %ifdef BUILDCOM
  1168                                  ;=======================================================================================================================
  1169                                  ;
  1170                                  ;       OS.COM
  1171                                  ;
  1172                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1173                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1174                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1175                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1176                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1177                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1178                                  ;
  1179                                  ;       Our loader addressability is set up according to the following diagram.
  1180                                  ;
  1181                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1182                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1183                                  ;                               |  256 = 100h bytes                             |
  1184                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1185                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1186                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1187                                  ;                       007e00  +-----------------------------------------------+
  1188                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1189                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1190                                  ;                               |                                               |
  1191                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1192                                  ;                               |                                               |
  1193                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1194                                  ;                               |  Loader Code                                  |
  1195                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1196                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1197                                  ;
  1198                                  ;=======================================================================================================================
  1199                                  ;-----------------------------------------------------------------------------------------------------------------------
  1200                                  ;
  1201                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1202                                  ;
  1203                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1204                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1205                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1206                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1207                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1208                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1209                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1210                                  ;       registers.
  1211                                  ;
  1212                                  ;-----------------------------------------------------------------------------------------------------------------------
  1213                                                          cpu     8086                                            ;assume minimal CPU
  1214                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1215                                                          bits    16                                              ;this is 16-bit code
  1216 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1217 00000001 1F                                              pop     ds                                              ;...as our data segment
  1218 00000002 0E                                              push    cs                                              ;use the code segment
  1219 00000003 07                                              pop     es                                              ;...as our extra segment
  1220                                  ;
  1221                                  ;       Write a message to the console so we know we have our addressability established.
  1222                                  ;
  1223 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1224 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1225                                  ;
  1226                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1227                                  ;
  1228 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1229 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1230 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1231 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1232                                                          cpu     386                                             ;allow 80386 instructions
  1233 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1234 00000017 E89600                                          call    PutTTYString                                    ;display message
  1235                                  ;
  1236                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1237                                  ;
  1238 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1239 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1240 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1241 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1242 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1243 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1244 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1245 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1246 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1247 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1248                                  ;
  1249                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1250                                  ;
  1251 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1252 00000038 07                                              pop     es                                              ;... as target segment
  1253 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1254 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1255 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1256 00000041 FC                                              cld                                                     ;forward strings
  1257 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1258 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1259 00000047 E86600                                          call    PutTTYString                                    ;display message
  1260                                  ;
  1261                                  ;       Switch to protected mode.
  1262                                  ;
  1263 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1264 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1265 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1266 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1267 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1268 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1269 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1270 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1271 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1272 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1273 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1274                                  ;
  1275                                  ;       Enable hardware and maskable interrupts.
  1276                                  ;
  1277 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1278 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1279 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1280 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1281                                  ;
  1282                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1283                                  ;
  1284 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1285 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1286 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1287                                  ;-----------------------------------------------------------------------------------------------------------------------
  1288                                  ;
  1289                                  ;       Routine:        LoaderExit
  1290                                  ;
  1291                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1292                                  ;
  1293                                  ;       In:             DS:SI   string address
  1294                                  ;
  1295                                  ;-----------------------------------------------------------------------------------------------------------------------
  1296 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1297                                  ;
  1298                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1299                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1300                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1301                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1302                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1303                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1304                                  ;
  1305 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1306 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1307 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1308 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1309 00000085 F4                                              hlt                                                     ;wait for interrupt
  1310 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1311                                  ;
  1312                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1313                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1314                                  ;       HLT until the system resets.
  1315                                  ;
  1316 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1317 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1318 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1319 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1320 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1321                                  ;-----------------------------------------------------------------------------------------------------------------------
  1322                                  ;
  1323                                  ;       Routine:        GetCPUType
  1324                                  ;
  1325                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1326                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1327                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1328                                  ;
  1329                                  ;       Out:            AX      0 = 808x, v20, etc.
  1330                                  ;                               1 = 80186
  1331                                  ;                               2 = 80286
  1332                                  ;                               3 = 80386
  1333                                  ;
  1334                                  ;-----------------------------------------------------------------------------------------------------------------------
  1335 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1336 00000092 B120                                            mov     cl,32                                           ;shift count
  1337 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1338 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1339 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1340                                                          cpu     186
  1341 0000009A 54                                              push    sp                                              ;save stack pointer
  1342 0000009B 59                                              pop     cx                                              ;...into cx
  1343 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1344 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1345                                                          cpu     286
  1346 000000A0 40                                              inc     ax                                              ;AX = 2
  1347 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1348 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1349 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1350 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1351 000000AE 40                                              inc     ax                                              ;AX = 3
  1352 000000AF C3                      .10                     ret                                                     ;return
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;       Routine:        PutTTYString
  1356                                  ;
  1357                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1358                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1359                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1360                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1361                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1362                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1363                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1364                                  ;                       to LODSB is not needed.
  1365                                  ;
  1366                                  ;       In:             DS:SI   address of string
  1367                                  ;
  1368                                  ;       Out:            DF      0
  1369                                  ;                       ZF      1
  1370                                  ;                       AL      0
  1371                                  ;
  1372                                  ;-----------------------------------------------------------------------------------------------------------------------
  1373 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1374 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1375 000000B2 84C0                                            test    al,al                                           ;end of string?
  1376 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1377 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1378 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1379 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1380 000000BC C3                      .20                     ret                                                     ;return
  1381                                  ;-----------------------------------------------------------------------------------------------------------------------
  1382                                  ;
  1383                                  ;       Loader Data
  1384                                  ;
  1385                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1386                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1387                                  ;
  1388                                  ;-----------------------------------------------------------------------------------------------------------------------
  1389 000000BD 90                                              align   2
  1390 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1391 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1392 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1393 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1394 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1394 000000D1 74696E672073797374-
  1394 000000DA 656D20726571756972-
  1394 000000E3 657320616E20693338-
  1394 000000EC 36206F72206C617465-
  1394 000000F5 722070726F63657373-
  1394 000000FE 6F722E0D0A         
  1395 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1395 0000010C 65737320616E79206B-
  1395 00000115 657920746F20726573-
  1395 0000011E 746172742074686520-
  1395 00000127 636F6D70757465722E-
  1395 00000130 0D0A00             
  1396 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1397 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1397 00000145 7265640D0A00       
  1398 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1398 00000154 616465640D0A00     
  1399 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1399 00000164 4F530D0A00         
  1400 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1401                                  ;=======================================================================================================================
  1402                                  ;
  1403                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1404                                  ;
  1405                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1406                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1407                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1408                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1409                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1410                                  ;
  1411                                  ;=======================================================================================================================
  1412                                  ;=======================================================================================================================
  1413                                  ;
  1414                                  ;       Kernel Tables
  1415                                  ;
  1416                                  ;=======================================================================================================================
  1417                                  ;-----------------------------------------------------------------------------------------------------------------------
  1418                                  ;
  1419                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1420                                  ;
  1421                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1422                                  ;       first descriptor must be all nulls.
  1423                                  ;
  1424                                  ;       6   5         4         3         2         1         0
  1425                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1426                                  ;       ----------------------------------------------------------------
  1427                                  ;       h......hffffmmmma......ab......................bn..............n
  1428                                  ;
  1429                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1430                                  ;               ffff                                                            flags
  1431                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1432                                  ;                       a......a                                                access
  1433                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1434                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1435                                  ;
  1436                                  ;       00000000                                                                all areas have base addresses below 2^24
  1437                                  ;               0...                                                            single-byte size granularity
  1438                                  ;               1...                                                            4-kilobyte size granularity
  1439                                  ;               .0..                                                            16-bit default for code segments
  1440                                  ;               .1..                                                            32-bit default for code segments
  1441                                  ;               ..0.                                                            intel-reserved; should be zero
  1442                                  ;               ...0                                                            available for operating system use
  1443                                  ;                   0000                                                        segment is less than 2^16 in size
  1444                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1445                                  ;                       1.......                                                segment is present in memory
  1446                                  ;                       .00.....                                                segment is of privilege level 0
  1447                                  ;                       ...0....                                                segment is of system or gate type
  1448                                  ;                       ...00010                                                local decriptor table (LDT)
  1449                                  ;                       ...01001                                                task state segment (TSS) available
  1450                                  ;                       ...01011                                                task state segment (TSS) busy
  1451                                  ;                       ...10...                                                data segment
  1452                                  ;                       ...10011                                                writable data (accessed)
  1453                                  ;                       ...11...                                                code segment
  1454                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1455                                  ;
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  section                 gdt                                                     ;global descriptor table
  1458 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1459 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1460 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1461 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1462 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1463 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1464 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1465 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1466 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1467 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1468 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1469 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1470 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1471 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1472 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1473                                  ;-----------------------------------------------------------------------------------------------------------------------
  1474                                  ;
  1475                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1476                                  ;
  1477                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1478                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1479                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1480                                  ;
  1481                                  ;       6   5         4         3         2         1         0
  1482                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1483                                  ;       ----------------------------------------------------------------
  1484                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1485                                  ;
  1486                                  ;       h...h   high-order offset (bits 16-31)
  1487                                  ;       P       present (0=unused interrupt)
  1488                                  ;       zz      descriptor privilege level
  1489                                  ;       S       storage segment (must be zero for IDT)
  1490                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1491                                  ;       S...S   handling code selector in GDT
  1492                                  ;       l...l   lo-order offset (bits 0-15)
  1493                                  ;
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  section                 idt                                                     ;interrupt descriptor table
  1496                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1496                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1496 00000000 00004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1497                                                          mtrap   singlestep                                      ;01 single step
  1497                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1497 00000008 02004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1498                                                          mtrap   nmi                                             ;02 non-maskable
  1498                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1498 00000010 04004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1499                                                          mtrap   break                                           ;03 break
  1499                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1499 00000018 06004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1500                                                          mtrap   into                                            ;04 into
  1500                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1500 00000020 08004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1501                                                          mtrap   bounds                                          ;05 bounds
  1501                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1501 00000028 0A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1502                                                          mtrap   badopcode                                       ;06 bad op code
  1502                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1502 00000030 0C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1503                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1503                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1503 00000038 0E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1504                                                          mtrap   doublefault                                     ;08 double-fault
  1504                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1504 00000040 10004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1505                                                          mtrap   operand                                         ;09 operand
  1505                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1505 00000048 12004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1506                                                          mtrap   badtss                                          ;0a bad TSS
  1506                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1506 00000050 14004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1507                                                          mtrap   notpresent                                      ;0b not-present
  1507                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1507 00000058 16004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1508                                                          mtrap   stacklimit                                      ;0c stack limit
  1508                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1508 00000060 18004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1509                                                          mtrap   protection                                      ;0d general protection fault
  1509                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1509 00000068 1A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1510                                                          mtrap   int14                                           ;0e (reserved)
  1510                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1510 00000070 1C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1511                                                          mtrap   int15                                           ;0f (reserved)
  1511                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1511 00000078 1E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1512                                                          mtrap   coproccalc                                      ;10 (reserved)
  1512                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1512 00000080 20004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1513                                                          mtrap   int17                                           ;11 (reserved)
  1513                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1513 00000088 22004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1514                                                          mtrap   int18                                           ;12 (reserved)
  1514                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1514 00000090 24004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1515                                                          mtrap   int19                                           ;13 (reserved)
  1515                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1515 00000098 26004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1516                                                          mtrap   int20                                           ;14 (reserved)
  1516                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1516 000000A0 28004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1517                                                          mtrap   int21                                           ;15 (reserved)
  1517                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1517 000000A8 2A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1518                                                          mtrap   int22                                           ;16 (reserved)
  1518                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1518 000000B0 2C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1519                                                          mtrap   int23                                           ;17 (reserved)
  1519                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1519 000000B8 2E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1520                                                          mtrap   int24                                           ;18 (reserved)
  1520                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1520 000000C0 30004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1521                                                          mtrap   int25                                           ;19 (reserved)
  1521                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1521 000000C8 32004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1522                                                          mtrap   int26                                           ;1a (reserved)
  1522                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1522 000000D0 34004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1523                                                          mtrap   int27                                           ;1b (reserved)
  1523                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1523 000000D8 36004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1524                                                          mtrap   int28                                           ;1c (reserved)
  1524                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1524 000000E0 38004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1525                                                          mtrap   int29                                           ;1d (reserved)
  1525                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1525 000000E8 3A004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1526                                                          mtrap   int30                                           ;1e (reserved)
  1526                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1526 000000F0 3C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1527                                                          mtrap   int31                                           ;1f (reserved)
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 000000F8 3E004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 00000100 41004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 00000108 92004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 00000110 A8034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mint    com2                                            ;23 IRQ3 com2
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 00000118 AB034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mint    com1                                            ;24 IRQ4 com1
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 00000120 AE034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 00000128 B1034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mint    diskette                                        ;26 IRQ6 diskette
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 00000130 B4034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000138 CE034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000140 D1034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000148 D4034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mint    irq10                                           ;2a IRQA (reserved)
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000150 D7034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mint    irq11                                           ;2b IRQB (reserved)
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000158 DA034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000160 DD034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000168 E0034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000170 E3034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mint    irq15                                           ;2f IRQF (reserved)
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000178 E6034800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mtrap   svc                                             ;30 OS services
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000180 F8034800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1546                                  ;=======================================================================================================================
  1547                                  ;
  1548                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1549                                  ;
  1550                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1551                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1552                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1553                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1554                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1555                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1556                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1557                                  ;
  1558                                  ;=======================================================================================================================
  1559                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1560                                                          cpu     386                                             ;allow 80386 instructions
  1561                                                          bits    32                                              ;this is 32-bit code
  1562                                  ;=======================================================================================================================
  1563                                  ;
  1564                                  ;       CPU Interrupt Handlers
  1565                                  ;
  1566                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1567                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1568                                  ;
  1569                                  ;=======================================================================================================================
  1570                                  ;-----------------------------------------------------------------------------------------------------------------------
  1571                                  ;
  1572                                  ;       INT0    Divide By Zero
  1573                                  ;
  1574                                  ;-----------------------------------------------------------------------------------------------------------------------
  1575                                                          menter  dividebyzero                                    ;divide by zero
  1575                              <1> ?%1 equ ($-$$)
  1576 00000000 EB3E                                            jmp     ReportInterrupt                                 ;report interrupt
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                  ;
  1579                                  ;       INT1    Single Step
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                                          menter  singlestep                                      ;single step
  1582                              <1> ?%1 equ ($-$$)
  1583 00000002 EB3C                                            jmp     ReportInterrupt                                 ;report interrupt
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                  ;
  1586                                  ;       INT2    Non-Maskable Interrupt
  1587                                  ;
  1588                                  ;-----------------------------------------------------------------------------------------------------------------------
  1589                                                          menter  nmi                                             ;non-maskable
  1589                              <1> ?%1 equ ($-$$)
  1590 00000004 EB3A                                            jmp     ReportInterrupt                                 ;report interrupt
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT3    Break
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  break                                           ;break
  1596                              <1> ?%1 equ ($-$$)
  1597 00000006 EB38                                            jmp     ReportInterrupt                                 ;report interrupt
  1598                                  ;-----------------------------------------------------------------------------------------------------------------------
  1599                                  ;
  1600                                  ;       INT4    Into
  1601                                  ;
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                                          menter  into                                            ;into
  1603                              <1> ?%1 equ ($-$$)
  1604 00000008 EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  ;
  1607                                  ;       INT5    Bounds
  1608                                  ;
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                                          menter  bounds                                          ;bounds
  1610                              <1> ?%1 equ ($-$$)
  1611 0000000A EB34                                            jmp     ReportInterrupt                                 ;report interrupt
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                  ;
  1614                                  ;       INT6    Bad Operation Code
  1615                                  ;
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                                          menter  badopcode                                       ;bad opcode interrupt
  1617                              <1> ?%1 equ ($-$$)
  1618 0000000C EB32                                            jmp     ReportInterrupt                                 ;report interrupt
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                  ;
  1621                                  ;       INT7    No Coprocessor
  1622                                  ;
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1624                              <1> ?%1 equ ($-$$)
  1625 0000000E EB30                                            jmp     ReportInterrupt                                 ;report interrupt
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  ;
  1628                                  ;       INT8    Double Fault
  1629                                  ;
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                                          menter  doublefault                                     ;doublefault interrupt
  1631                              <1> ?%1 equ ($-$$)
  1632 00000010 EB2E                                            jmp     ReportInterrupt                                 ;report interrupt
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  ;
  1635                                  ;       INT9    Operand
  1636                                  ;
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                                          menter  operand                                         ;operand interrupt
  1638                              <1> ?%1 equ ($-$$)
  1639 00000012 EB2C                                            jmp     ReportInterrupt                                 ;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;       INT10   Bad Task State Segment
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                                          menter  badtss                                          ;bad TSS interrupt
  1645                              <1> ?%1 equ ($-$$)
  1646 00000014 EB2A                                            jmp     ReportInterrupt                                 ;report interrupt
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                  ;
  1649                                  ;       INT11   Not Present
  1650                                  ;
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                                          menter  notpresent                                      ;not present interrupt
  1652                              <1> ?%1 equ ($-$$)
  1653 00000016 EB28                                            jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT12   Stack Limit
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  stacklimit                                      ;stack limit interrupt
  1659                              <1> ?%1 equ ($-$$)
  1660 00000018 EB26                                            jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT13   General Protection Fault
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  protection                                      ;protection fault interrupt
  1666                              <1> ?%1 equ ($-$$)
  1667 0000001A EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  ;
  1670                                  ;       INT14   Reserved
  1671                                  ;
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                                          menter  int14                                           ;(reserved)
  1673                              <1> ?%1 equ ($-$$)
  1674 0000001C EB22                                            jmp     ReportInterrupt                                 ;report interrupt
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                  ;
  1677                                  ;       INT15   Reserved
  1678                                  ;
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                                          menter  int15                                           ;(reserved)
  1680                              <1> ?%1 equ ($-$$)
  1681 0000001E EB20                                            jmp     ReportInterrupt                                 ;report interrupt
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  ;
  1684                                  ;       INT16   Coprocessor Calculation
  1685                                  ;
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                                          menter  coproccalc                                      ;coprocessor calculation
  1687                              <1> ?%1 equ ($-$$)
  1688 00000020 EB1E                                            jmp     ReportInterrupt                                 ;report interrupt
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  ;
  1691                                  ;       INT17   Reserved
  1692                                  ;
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                                          menter  int17                                           ;(reserved)
  1694                              <1> ?%1 equ ($-$$)
  1695 00000022 EB1C                                            jmp     ReportInterrupt                                 ;report interrupt
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  ;
  1698                                  ;       INT18   Reserved
  1699                                  ;
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                                          menter  int18                                           ;(reserved)
  1701                              <1> ?%1 equ ($-$$)
  1702 00000024 EB1A                                            jmp     ReportInterrupt                                 ;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       INT19   Reserved
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                                          menter  int19                                           ;(reserved)
  1708                              <1> ?%1 equ ($-$$)
  1709 00000026 EB18                                            jmp     ReportInterrupt                                 ;report interrupt
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;       INT20   Reserved
  1713                                  ;
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                                          menter  int20                                           ;(reserved)
  1715                              <1> ?%1 equ ($-$$)
  1716 00000028 EB16                                            jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT21   Reserved
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  int21                                           ;(reserved)
  1722                              <1> ?%1 equ ($-$$)
  1723 0000002A EB14                                            jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT22   Reserved
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  int22                                           ;(reserved)
  1729                              <1> ?%1 equ ($-$$)
  1730 0000002C EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT23   Reserved
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  int23                                           ;(reserved)
  1736                              <1> ?%1 equ ($-$$)
  1737 0000002E EB10                                            jmp     ReportInterrupt                                 ;report interrupt
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                  ;
  1740                                  ;       INT24   Reserved
  1741                                  ;
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                                          menter  int24                                           ;(reserved)
  1743                              <1> ?%1 equ ($-$$)
  1744 00000030 EB0E                                            jmp     ReportInterrupt                                 ;report interrupt
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                  ;
  1747                                  ;       INT25   Reserved
  1748                                  ;
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                                          menter  int25                                           ;(reserved)
  1750                              <1> ?%1 equ ($-$$)
  1751 00000032 EB0C                                            jmp     ReportInterrupt                                 ;report interrupt
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                  ;
  1754                                  ;       INT26   Reserved
  1755                                  ;
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                                          menter  int26                                           ;(reserved)
  1757                              <1> ?%1 equ ($-$$)
  1758 00000034 EB0A                                            jmp     ReportInterrupt                                 ;report interrupt
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  ;
  1761                                  ;       INT27   Reserved
  1762                                  ;
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                                          menter  int27                                           ;(reserved)
  1764                              <1> ?%1 equ ($-$$)
  1765 00000036 EB08                                            jmp     ReportInterrupt                                 ;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;       INT28   Reserved
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                                          menter  int28                                           ;(reserved)
  1771                              <1> ?%1 equ ($-$$)
  1772 00000038 EB06                                            jmp     ReportInterrupt                                 ;report interrupt
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;       INT29   Reserved
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                                          menter  int29                                           ;(reserved)
  1778                              <1> ?%1 equ ($-$$)
  1779 0000003A EB04                                            jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT30   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int30                                           ;(reserved)
  1785                              <1> ?%1 equ ($-$$)
  1786 0000003C EB02                                            jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT31   Reserved
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  int31                                           ;(reserved)
  1792                              <1> ?%1 equ ($-$$)
  1793 0000003E EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       Routine:        ReportInterrupt
  1797                                  ;
  1798                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1799                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1800                                  ;
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802 00000040 CF                      ReportInterrupt         iretd                                                   ;return
  1803                                  ;=======================================================================================================================
  1804                                  ;
  1805                                  ;       Hardware Device Interupts
  1806                                  ;
  1807                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1808                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1809                                  ;       (BX=2028h).
  1810                                  ;
  1811                                  ;=======================================================================================================================
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       IRQ0    Clock Tick Interrupt
  1815                                  ;
  1816                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1817                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1818                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1819                                  ;
  1820                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1821                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1822                                  ;
  1823                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1824                                  ;       zero, the floppy disk motors are turned off.
  1825                                  ;
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                                          menter  clocktick                                       ;clock tick interrupt
  1827                              <1> ?%1 equ ($-$$)
  1828 00000041 50                                              push    eax                                             ;save non-volatile regs
  1829 00000042 52                                              push    edx                                             ;
  1830 00000043 1E                                              push    ds                                              ;
  1831                                  ;
  1832                                  ;       End the interrupt.
  1833                                  ;
  1834 00000044 E811050000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1835                                  ;
  1836                                  ;       Update the clock tick count and the elapsed days as needed.
  1837                                  ;
  1838 00000049 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1839 0000004B 1F                                              pop     ds                                              ;... into data segment register
  1840 0000004C A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1841 00000051 40                                              inc     eax                                             ;increment clock ticks
  1842 00000052 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1843 00000057 7208                                            jb      irq0.10                                         ;no, skip ahead
  1844 00000059 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1845 0000005F 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1846 00000061 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1847                                  ;
  1848                                  ;       Decrement floppy disk motor timeout.
  1849                                  ;
  1850 00000066 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1851 0000006D 741E                                            je      irq0.20                                         ;yes, skip ahead
  1852 0000006F FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1853 00000075 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1854                                  ;
  1855                                  ;       Turn off the floppy disk motor if appropriate.
  1856                                  ;
  1857 00000077 FB                                              sti                                                     ;enable maskable interrupts
  1858 00000078 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1859 0000007A B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1860 0000007C EC                                              in      al,dx                                           ;FDC main status byte
  1861 0000007D A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1862 0000007F 75F7                                            jnz     irq0.15                                         ;wait while busy
  1863 00000081 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1864 00000083 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1865 00000088 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1866 0000008A B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1867 0000008C EE                                              out     dx,al                                           ;turn motor off
  1868                                  ;
  1869                                  ;       Enable maskable interrupts.
  1870                                  ;
  1871 0000008D FB                      irq0.20                 sti                                                     ;enable maskable interrupts
  1872                                  ;
  1873                                  ;       Restore and return.
  1874                                  ;
  1875 0000008E 1F                                              pop     ds                                              ;restore modified regs
  1876 0000008F 5A                                              pop     edx                                             ;
  1877 00000090 58                                              pop     eax                                             ;
  1878 00000091 CF                                              iretd                                                   ;return
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  ;
  1881                                  ;       IRQ1    Keyboard Interrupt
  1882                                  ;
  1883                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1884                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1885                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1886                                  ;       ALL modified registers upon return.
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                                          menter  keyboard                                        ;keyboard interrrupt
  1889                              <1> ?%1 equ ($-$$)
  1890 00000092 50                                              push    eax                                             ;save non-volatile regs
  1891 00000093 53                                              push    ebx                                             ;
  1892 00000094 51                                              push    ecx                                             ;
  1893 00000095 56                                              push    esi                                             ;
  1894 00000096 1E                                              push    ds                                              ;
  1895                                  ;
  1896                                  ;       End the interrupt.
  1897                                  ;
  1898 00000097 E8BE040000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1899                                  ;
  1900                                  ;       Handle keyboard scan-codes.
  1901                                  ;
  1902 0000009C 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1903 0000009E 1F                                              pop     ds                                              ;... into data segment register
  1904 0000009F 30C0                                            xor     al,al                                           ;zero
  1905 000000A1 A259080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  1906 000000A6 A25A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  1907 000000AB A25B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  1908 000000B0 A25C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  1909 000000B5 A25D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  1910 000000BA A25E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  1911 000000BF B020                                            mov     al,' '                                          ;space
  1912 000000C1 A25F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  1913 000000C6 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1914 000000C8 F6D0                                            not     al                                              ;controller timeout mask
  1915 000000CA 200558080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1916 000000D0 8A1D56080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  1917 000000D6 8A3D57080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  1918 000000DC E8B2040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1919 000000E1 0F84AD010000                                    jz      irq1.140                                        ;yes, skip ahead
  1920 000000E7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  1921 000000E9 A259080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  1922 000000EE 88C4                                            mov     ah,al                                           ;copy scan code 0
  1923 000000F0 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1924 000000F2 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1925 000000F5 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  1926 000000FB 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1927 000000FE 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  1928 00000104 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1929 00000106 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1930 00000109 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  1931 0000010F 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1932 00000112 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  1933 00000118 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  1934 0000011A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1935 0000011D 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  1936 00000123 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1937 00000126 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  1938 0000012C B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  1939 0000012E 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1940 00000131 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  1941 00000137 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1942 0000013A 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  1943 00000140 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  1944 00000142 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  1945 00000145 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1946 0000014B B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  1947 0000014D 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  1948 00000150 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1949 00000156 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  1950 00000158 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  1951 0000015B 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  1952 00000161 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  1953 00000164 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  1954 0000016A E824040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1955 0000016F 0F841F010000                                    jz      irq1.140                                        ;yes, skip ahead
  1956 00000175 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  1957 00000177 A25A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  1958 0000017C 88C4                                            mov     ah,al                                           ;copy scan code 1
  1959 0000017E B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  1960 00000180 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1961 00000183 7456                                            je      irq1.30                                         ;yes, set flag
  1962 00000185 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1963 00000188 7455                                            je      irq1.40                                         ;yes, reset flag
  1964 0000018A B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  1965 0000018C 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1966 0000018F 744A                                            je      irq1.30                                         ;yes, set flag
  1967 00000191 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1968 00000194 7449                                            je      irq1.40                                         ;yes, reset flag
  1969 00000196 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  1970 00000199 0F84BB000000                                    je      irq1.80                                         ;yes, skip ahead
  1971 0000019F 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  1972 000001A2 0F84B2000000                                    je      irq1.80                                         ;yes, skip ahead
  1973 000001A8 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  1974 000001AB 7405                                            je      irq1.10                                         ;yes, continue
  1975 000001AD 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  1976 000001B0 7524                                            jne     irq1.20                                         ;no, skip ahead
  1977 000001B2 E8DC030000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  1978 000001B7 0F84D7000000                                    jz      irq1.140                                        ;yes, skip ahead
  1979 000001BD E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  1980 000001BF A25B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  1981 000001C4 E8CA030000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1982 000001C9 0F84C5000000                                    jz      irq1.140                                        ;yes, skip ahead
  1983 000001CF E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  1984 000001D1 A25C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  1985 000001D6 E9C1000000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  1986 000001DB 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  1987 000001DD EB0D                                            jmp     irq1.60                                         ;skip ahead
  1988 000001DF F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  1989 000001E1 20C3                                            and     bl,al                                           ;reset shift flag
  1990 000001E3 EB07                                            jmp     irq1.60                                         ;skip ahead
  1991 000001E5 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  1992 000001E7 E878030000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  1993 000001EC 881D56080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  1994 000001F2 883D57080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  1995 000001F8 E883020000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  1996 000001FD E99A000000                                      jmp     irq1.150                                        ;finish keyboard handling
  1997 00000202 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  1998 00000205 7553                                            jne     irq1.80                                         ;no continue
  1999 00000207 E887030000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2000 0000020C 0F8482000000                                    jz      irq1.140                                        ;yes, skip ahead
  2001 00000212 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2002 00000214 A25A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2003 00000219 88C4                                            mov     ah,al                                           ;copy scan code 1
  2004 0000021B 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2005 0000021E 757C                                            jne     irq1.150                                        ;no, finish keyboard handling
  2006 00000220 E86E030000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2007 00000225 746D                                            jz      irq1.140                                        ;yes, skip ahead
  2008 00000227 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2009 00000229 A25B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2010 0000022E E860030000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2011 00000233 745F                                            jz      irq1.140                                        ;yes, skip ahead
  2012 00000235 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2013 00000237 A25C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2014 0000023C E852030000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2015 00000241 7451                                            jz      irq1.140                                        ;yes, skip ahead
  2016 00000243 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2017 00000245 A25D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2018 0000024A E844030000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2019 0000024F 7443                                            jz      irq1.140                                        ;yes, skip ahead
  2020 00000251 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2021 00000253 A25E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2022 00000258 EB42                                            jmp     irq1.150                                        ;continue
  2023 0000025A 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2024 0000025C F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2025 0000025F 7531                                            jnz     irq1.130                                        ;yes, skip ahead
  2026 00000261 BE[A8020000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2027 00000266 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2028 00000269 7405                                            jz      irq1.90                                         ;no, skip ahead
  2029 0000026B BE[28030000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2030 00000270 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2031 00000273 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2032 00000277 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2033 0000027A 7411                                            jz      irq1.100                                        ;no skip ahead
  2034 0000027C 88C1                                            mov     cl,al                                           ;copy ASCII code
  2035 0000027E 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2036 00000281 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2037 00000284 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2038 00000286 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2039 00000289 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2040 0000028B 3420                                            xor     al,EASCIICASE                                   ;switch case
  2041 0000028D A25F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2042 00000292 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2043 00000294 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2044 00000296 080558080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2045 0000029C E887010000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2046                                  ;
  2047                                  ;       Enable maskable interrupts.
  2048                                  ;
  2049 000002A1 FB                                              sti                                                     ;enable maskable interrupts
  2050                                  ;
  2051                                  ;       Restore and return.
  2052                                  ;
  2053 000002A2 1F                                              pop     ds                                              ;restore non-volatile regs
  2054 000002A3 5E                                              pop     esi                                             ;
  2055 000002A4 59                                              pop     ecx                                             ;
  2056 000002A5 5B                                              pop     ebx                                             ;
  2057 000002A6 58                                              pop     eax                                             ;
  2058 000002A7 CF                                              iretd                                                   ;return
  2059                                  ;-----------------------------------------------------------------------------------------------------------------------
  2060                                  ;       Scan-Code to ASCII Translation Tables
  2061                                  ;-----------------------------------------------------------------------------------------------------------------------
  2062 000002A8 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2063 000002B0 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2064 000002B8 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2065 000002C0 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2066 000002C8 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2067 000002D0 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2068 000002D8 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2069 000002E0 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2070 000002E8 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2071 000002F0 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2072 000002F8 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2073 00000300 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2074 00000308 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2075 00000310 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2076 00000318 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2077 00000320 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2078 00000328 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2079 00000330 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2080 00000338 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2081 00000340 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2082 00000348 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2083 00000350 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2084 00000358 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2085 00000360 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2086 00000368 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2087 00000370 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2088 00000378 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2089 00000380 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2090 00000388 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2091 00000390 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2092 00000398 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2093 000003A0 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2094                                  ;-----------------------------------------------------------------------------------------------------------------------
  2095                                  ;
  2096                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2097                                  ;
  2098                                  ;-----------------------------------------------------------------------------------------------------------------------
  2099                                                          menter  iochannel                                       ;secondary 8259A cascade
  2099                              <1> ?%1 equ ($-$$)
  2100 000003A8 50                                              push    eax                                             ;save modified regs
  2101 000003A9 EB45                                            jmp     hwint                                           ;end interrupt and return
  2102                                  ;-----------------------------------------------------------------------------------------------------------------------
  2103                                  ;
  2104                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2105                                  ;
  2106                                  ;-----------------------------------------------------------------------------------------------------------------------
  2107                                                          menter  com2                                            ;serial port 2 interrupt
  2107                              <1> ?%1 equ ($-$$)
  2108 000003AB 50                                              push    eax                                             ;save modified regs
  2109 000003AC EB42                                            jmp     hwint                                           ;end interrupt and return
  2110                                  ;-----------------------------------------------------------------------------------------------------------------------
  2111                                  ;
  2112                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2113                                  ;
  2114                                  ;-----------------------------------------------------------------------------------------------------------------------
  2115                                                          menter  com1                                            ;serial port 1 interrupt
  2115                              <1> ?%1 equ ($-$$)
  2116 000003AE 50                                              push    eax                                             ;save modified regs
  2117 000003AF EB3F                                            jmp     hwint                                           ;end interrupt and return
  2118                                  ;-----------------------------------------------------------------------------------------------------------------------
  2119                                  ;
  2120                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2121                                  ;
  2122                                  ;-----------------------------------------------------------------------------------------------------------------------
  2123                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2123                              <1> ?%1 equ ($-$$)
  2124 000003B1 50                                              push    eax                                             ;save modified regs
  2125 000003B2 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2126                                  ;-----------------------------------------------------------------------------------------------------------------------
  2127                                  ;
  2128                                  ;       IRQ6    Diskette Hardware Interrupt
  2129                                  ;
  2130                                  ;-----------------------------------------------------------------------------------------------------------------------
  2131                                                          menter  diskette                                        ;floppy disk interrupt
  2131                              <1> ?%1 equ ($-$$)
  2132 000003B4 50                                              push    eax                                             ;save non-volatile regs
  2133 000003B5 1E                                              push    ds                                              ;
  2134 000003B6 E89F010000                                      call    PutPrimaryEndOfInt                              ;end the interrupt
  2135 000003BB 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2136 000003BD 1F                                              pop     ds                                              ;... into DS register
  2137 000003BE A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2138 000003C3 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2139 000003C5 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2140 000003CA FB                                              sti                                                     ;enable maskable interrupts
  2141 000003CB 1F                                              pop     ds                                              ;restore non-volatile regs
  2142 000003CC 58                                              pop     eax                                             ;
  2143 000003CD CF                                              iretd                                                   ;return from interrupt
  2144                                  ;-----------------------------------------------------------------------------------------------------------------------
  2145                                  ;
  2146                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2147                                  ;
  2148                                  ;-----------------------------------------------------------------------------------------------------------------------
  2149                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2149                              <1> ?%1 equ ($-$$)
  2150 000003CE 50                                              push    eax                                             ;save modified regs
  2151 000003CF EB1F                                            jmp     hwint                                           ;end interrupt and return
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153                                  ;
  2154                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2155                                  ;
  2156                                  ;-----------------------------------------------------------------------------------------------------------------------
  2157                                                          menter  rtclock                                         ;real-time clock interrupt
  2157                              <1> ?%1 equ ($-$$)
  2158 000003D1 50                                              push    eax                                             ;save modified regs
  2159 000003D2 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2160                                  ;-----------------------------------------------------------------------------------------------------------------------
  2161                                  ;
  2162                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2163                                  ;
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2165                              <1> ?%1 equ ($-$$)
  2166 000003D4 50                                              push    eax                                             ;save modified regs
  2167 000003D5 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169                                  ;
  2170                                  ;       IRQ10   Reserved Hardware Interrupt
  2171                                  ;
  2172                                  ;-----------------------------------------------------------------------------------------------------------------------
  2173                                                          menter  irq10                                           ;reserved
  2173                              <1> ?%1 equ ($-$$)
  2174 000003D7 50                                              push    eax                                             ;save modified regs
  2175 000003D8 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  ;
  2178                                  ;       IRQ11   Reserved Hardware Interrupt
  2179                                  ;
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                                          menter  irq11                                           ;reserved
  2181                              <1> ?%1 equ ($-$$)
  2182 000003DA 50                                              push    eax                                             ;save modified regs
  2183 000003DB EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                  ;
  2186                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2187                                  ;
  2188                                  ;-----------------------------------------------------------------------------------------------------------------------
  2189                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2189                              <1> ?%1 equ ($-$$)
  2190 000003DD 50                                              push    eax                                             ;save modified regs
  2191 000003DE EB09                                            jmp     hwwint                                          ;end interrupt and return
  2192                                  ;-----------------------------------------------------------------------------------------------------------------------
  2193                                  ;
  2194                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2195                                  ;
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                                          menter  coprocessor                                     ;coprocessor interrupt
  2197                              <1> ?%1 equ ($-$$)
  2198 000003E0 50                                              push    eax                                             ;save modified regs
  2199 000003E1 EB06                                            jmp     hwwint                                          ;end interrupt and return
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                  ;
  2202                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2203                                  ;
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2205                              <1> ?%1 equ ($-$$)
  2206 000003E3 50                                              push    eax                                             ;save modified regs
  2207 000003E4 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209                                  ;
  2210                                  ;       IRQ15   Reserved Hardware Interrupt
  2211                                  ;
  2212                                  ;-----------------------------------------------------------------------------------------------------------------------
  2213                                                          menter  irq15                                           ;reserved
  2213                              <1> ?%1 equ ($-$$)
  2214 000003E6 50                                              push    eax                                             ;save modified regs
  2215 000003E7 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2216                                  ;-----------------------------------------------------------------------------------------------------------------------
  2217                                  ;
  2218                                  ;       Exit from hardware interrupt
  2219                                  ;
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221 000003E9 E871010000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2222 000003EE EB05                                            jmp     hwint90                                         ;skip ahead
  2223 000003F0 E865010000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2224 000003F5 FB                      hwint90                 sti                                                     ;enable maskable interrupts
  2225 000003F6 58                                              pop     eax                                             ;restore modified regs
  2226 000003F7 CF                                              iretd                                                   ;return from interrupt
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                  ;
  2229                                  ;       INT 30h Operating System Software Service Interrupt
  2230                                  ;
  2231                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2232                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2233                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2234                                  ;       the entry address of the specific function from a table.
  2235                                  ;
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                                          menter  svc
  2237                              <1> ?%1 equ ($-$$)
  2238 000003F8 3C01                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2239 000003FA 730D                                            jae     svc90                                           ;yes, skip ahead
  2240 000003FC 0FB6C0                                          movzx   eax,al                                          ;function
  2241 000003FF C1E002                                          shl     eax,2                                           ;offset into table
  2242 00000402 2EFF90[0A040000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2243 00000409 CF                      svc90                   iretd                                                   ;return from interrupt
  2244                                  ;-----------------------------------------------------------------------------------------------------------------------
  2245                                  ;
  2246                                  ;       Service Request Table
  2247                                  ;
  2248                                  ;
  2249                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2250                                  ;
  2251                                  ;-----------------------------------------------------------------------------------------------------------------------
  2252                                  tsvc                    tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2252                              <1> tsvc :
  2252                              <1> e%1 equ ($-tsvc)/4
  2252 0000040A [30050000]          <1>  dd %1
  2253                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                  ;
  2256                                  ;       Service Request Macros
  2257                                  ;
  2258                                  ;       These macros provide positional parameterization of service request calls.
  2259                                  ;
  2260                                  ;-----------------------------------------------------------------------------------------------------------------------
  2261                                  %macro                  placeCursor 0
  2262                                                          mov     al,ePlaceCursor                                 ;function code
  2263                                                          int     _svc                                            ;invoke OS service
  2264                                  %endmacro
  2265                                  ;=======================================================================================================================
  2266                                  ;
  2267                                  ;       Kernel Function Library
  2268                                  ;
  2269                                  ;=======================================================================================================================
  2270                                  ;=======================================================================================================================
  2271                                  ;
  2272                                  ;       Console Helper Routines
  2273                                  ;
  2274                                  ;       PutConsoleHexByte
  2275                                  ;       PutConsoleOIAChar
  2276                                  ;       PutConsoleOIAShift
  2277                                  ;
  2278                                  ;=======================================================================================================================
  2279                                  ;-----------------------------------------------------------------------------------------------------------------------
  2280                                  ;
  2281                                  ;       Routine:        PutConsoleHexByte
  2282                                  ;
  2283                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2284                                  ;
  2285                                  ;       In:             AL      byte value
  2286                                  ;                       CL      column
  2287                                  ;                       CH      row
  2288                                  ;                       DS      OS data selector
  2289                                  ;                       ES      CGA selector
  2290                                  ;
  2291                                  ;-----------------------------------------------------------------------------------------------------------------------
  2292 0000040E 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2293 0000040F C0E804                                          shr     al,4                                            ;hi-order nybble
  2294 00000412 E803000000                                      call    .10                                             ;make ASCII and store
  2295 00000417 58                                              pop     eax                                             ;byte value
  2296 00000418 240F                                            and     al,0Fh                                          ;lo-order nybble
  2297 0000041A 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  2298 0000041C 3C3A                                            cmp     al,03Ah                                         ;numeric?
  2299 0000041E 7202                                            jb      .20                                             ;yes, skip ahead
  2300 00000420 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2301 00000422 E8F3000000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2302 00000427 C3                                              ret                                                     ;return
  2303                                  ;-----------------------------------------------------------------------------------------------------------------------
  2304                                  ;
  2305                                  ;       Routine:        PutConsoleOIAChar
  2306                                  ;
  2307                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2308                                  ;
  2309                                  ;       In:             DS      OS data selector
  2310                                  ;
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312 00000428 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2313 00000429 51                                              push    ecx                                             ;
  2314 0000042A 56                                              push    esi                                             ;
  2315 0000042B 1E                                              push    ds                                              ;
  2316 0000042C 06                                              push    es                                              ;
  2317 0000042D 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2318 0000042F 1F                                              pop     ds                                              ;... into data segment register
  2319 00000430 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2320 00000432 07                                              pop     es                                              ;... into extra segment register
  2321 00000433 BE59080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2322 00000438 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2323 0000043A B300                                            mov     bl,0                                            ;starting column
  2324 0000043C B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2325 00000441 51                      .10                     push    ecx                                             ;save remaining count
  2326 00000442 89D9                                            mov     ecx,ebx                                         ;row, column
  2327 00000444 AC                                              lodsb                                                   ;read scan code
  2328 00000445 08C0                                            or      al,al                                           ;scan code present?
  2329 00000447 7407                                            jz      .20                                             ;no, skip ahead
  2330 00000449 E8C0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2331 0000044E EB0E                                            jmp     .30                                             ;continue
  2332 00000450 B020                    .20                     mov     al,' '                                          ;ASCII space
  2333 00000452 E8C3000000                                      call    SetConsoleChar                                  ;display space
  2334 00000457 B020                                            mov     al,' '                                          ;ASCII space
  2335 00000459 E8BC000000                                      call    SetConsoleChar                                  ;display space
  2336 0000045E 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2337 00000461 59                                              pop     ecx                                             ;restore remaining
  2338 00000462 E2DD                                            loop    .10                                             ;next code
  2339 00000464 A05F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2340 00000469 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2341 0000046B 720D                                            jb      .40                                             ;no, skip ahead
  2342 0000046D 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2343 0000046F 7709                                            ja      .40                                             ;no, skip ahead
  2344 00000471 88FD                                            mov     ch,bh                                           ;OIA row
  2345 00000473 B128                                            mov     cl,40                                           ;character display column
  2346 00000475 E8A0000000                                      call    SetConsoleChar                                  ;display ASCII character
  2347 0000047A 07                      .40                     pop     es                                              ;restore non-volatile regs
  2348 0000047B 1F                                              pop     ds                                              ;
  2349 0000047C 5E                                              pop     esi                                             ;
  2350 0000047D 59                                              pop     ecx                                             ;
  2351 0000047E 5B                                              pop     ebx                                             ;
  2352 0000047F C3                                              ret                                                     ;return
  2353                                  ;-----------------------------------------------------------------------------------------------------------------------
  2354                                  ;
  2355                                  ;       Routine:        PutConsoleOIAShift
  2356                                  ;
  2357                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2358                                  ;
  2359                                  ;       In:             BL      shift flags
  2360                                  ;                       BH      lock flags
  2361                                  ;                       DS      OS data selector
  2362                                  ;
  2363                                  ;-----------------------------------------------------------------------------------------------------------------------
  2364 00000480 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2365 00000481 06                                              push    es                                              ;
  2366 00000482 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2367 00000484 07                                              pop     es                                              ;... into ES register
  2368 00000485 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2369 00000487 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2370 00000489 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2371 0000048C 7402                                            jz      .10                                             ;no, skip ahead
  2372 0000048E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2373 00000490 B10E                    .10                     mov     cl,14                                           ;indicator column
  2374 00000492 E883000000                                      call    SetConsoleChar                                  ;display ASCII character
  2375 00000497 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2376 00000499 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2377 0000049C 7402                                            jz      .20                                             ;no, skip ahead
  2378 0000049E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2379 000004A0 B140                    .20                     mov     cl,64                                           ;indicator column
  2380 000004A2 E873000000                                      call    SetConsoleChar                                  ;display ASCII character
  2381 000004A7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2382 000004A9 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2383 000004AC 7402                                            jz      .30                                             ;no, skip ahead
  2384 000004AE B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2385 000004B0 B10F                    .30                     mov     cl,15                                           ;indicator column
  2386 000004B2 E863000000                                      call    SetConsoleChar                                  ;display ASCII character
  2387 000004B7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2388 000004B9 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2389 000004BC 7402                                            jz      .40                                             ;no, skip ahead
  2390 000004BE B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2391 000004C0 B13F                    .40                     mov     cl,63                                           ;indicator column
  2392 000004C2 E853000000                                      call    SetConsoleChar                                  ;display ASCII character
  2393 000004C7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2394 000004C9 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2395 000004CC 7402                                            jz      .50                                             ;no, skip ahead
  2396 000004CE B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2397 000004D0 B110                    .50                     mov     cl,16                                           ;indicator column
  2398 000004D2 E843000000                                      call    SetConsoleChar                                  ;display ASCII character
  2399 000004D7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2400 000004D9 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2401 000004DC 7402                                            jz      .60                                             ;no, skip ahead
  2402 000004DE B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2403 000004E0 B13E                    .60                     mov     cl,62                                           ;indicator column
  2404 000004E2 E833000000                                      call    SetConsoleChar                                  ;display ASCII character
  2405 000004E7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2406 000004E9 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2407 000004EC 7402                                            jz      .70                                             ;no, skip ahead
  2408 000004EE B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2409 000004F0 B14E                    .70                     mov     cl,78                                           ;indicator column
  2410 000004F2 E823000000                                      call    SetConsoleChar                                  ;display ASCII character
  2411 000004F7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2412 000004F9 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2413 000004FC 7402                                            jz      .80                                             ;no, skip ahead
  2414 000004FE B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2415 00000500 B14D                    .80                     mov     cl,77                                           ;indicator column
  2416 00000502 E813000000                                      call    SetConsoleChar                                  ;display ASCII character
  2417 00000507 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2418 00000509 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2419 0000050C 7402                                            jz      .90                                             ;no, skip ahead
  2420 0000050E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2421 00000510 B14C                    .90                     mov     cl,76                                           ;indicator column
  2422 00000512 E803000000                                      call    SetConsoleChar                                  ;display ASCII character
  2423 00000517 07                                              pop     es                                              ;restore non-volatile regs
  2424 00000518 59                                              pop     ecx                                             ;
  2425 00000519 C3                                              ret                                                     ;return
  2426                                  ;=======================================================================================================================
  2427                                  ;
  2428                                  ;       Memory-Mapped Video Routines
  2429                                  ;
  2430                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2431                                  ;
  2432                                  ;       SetConsoleChar
  2433                                  ;
  2434                                  ;=======================================================================================================================
  2435                                  ;-----------------------------------------------------------------------------------------------------------------------
  2436                                  ;
  2437                                  ;       Routine:        SetConsoleChar
  2438                                  ;
  2439                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2440                                  ;
  2441                                  ;       In:             AL      ASCII character
  2442                                  ;                       CL      column
  2443                                  ;                       CH      row
  2444                                  ;                       ES      CGA selector
  2445                                  ;
  2446                                  ;       Out:            EAX     last target address written (ES:)
  2447                                  ;                       CL      column + 1
  2448                                  ;
  2449                                  ;-----------------------------------------------------------------------------------------------------------------------
  2450 0000051A 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  2451 0000051C 0FB6C5                                          movzx   eax,ch                                          ;row
  2452 0000051F B450                                            mov     ah,ECONCOLS                                     ;cols/row
  2453 00000521 F6E4                                            mul     ah                                              ;row * cols/row
  2454 00000523 00C8                                            add     al,cl                                           ;add column
  2455 00000525 80D400                                          adc     ah,0                                            ;handle carry
  2456 00000528 D1E0                                            shl     eax,1                                           ;screen offset
  2457 0000052A 268810                                          mov     [es:eax],dl                                     ;store character
  2458 0000052D FEC1                                            inc     cl                                              ;next column
  2459 0000052F C3                                              ret                                                     ;return
  2460                                  ;=======================================================================================================================
  2461                                  ;
  2462                                  ;       Input/Output Routines
  2463                                  ;
  2464                                  ;       These routines read and/or write directly to ports.
  2465                                  ;
  2466                                  ;       PlaceCursor
  2467                                  ;       PutPrimaryEndOfInt
  2468                                  ;       PutSecondaryEndOfInt
  2469                                  ;       SetKeyboardLamps
  2470                                  ;       WaitForKeyInBuffer
  2471                                  ;       WaitForKeyOutBuffer
  2472                                  ;
  2473                                  ;=======================================================================================================================
  2474                                  ;-----------------------------------------------------------------------------------------------------------------------
  2475                                  ;
  2476                                  ;       Routine:        PlaceCursor
  2477                                  ;
  2478                                  ;       Description:    This routine positions the cursor on the console.
  2479                                  ;
  2480                                  ;       In:             DS      OS data selector
  2481                                  ;
  2482                                  ;-----------------------------------------------------------------------------------------------------------------------
  2483 00000530 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2484 00000531 A055080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2485 00000536 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2486 00000538 F6E4                                            mul     ah                                              ;row offset
  2487 0000053A 020554080000                                    add     al,[wbConsoleColumn]                            ;add column
  2488 00000540 80D400                                          adc     ah,0                                            ;add overflow
  2489 00000543 89C1                                            mov     ecx,eax                                         ;screen offset
  2490 00000545 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2491 00000547 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2492 00000549 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2493 0000054B EE                                              out     dx,al                                           ;select register
  2494 0000054C 42                                              inc     edx                                             ;data port
  2495 0000054D 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2496 0000054F EE                                              out     dx,al                                           ;store hi-order loc
  2497 00000550 4A                                              dec     edx                                             ;register select port
  2498 00000551 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2499 00000553 EE                                              out     dx,al                                           ;select register
  2500 00000554 42                                              inc     edx                                             ;data port
  2501 00000555 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2502 00000557 EE                                              out     dx,al                                           ;store lo-order loc
  2503 00000558 59                                              pop     ecx                                             ;restore non-volatile regs
  2504 00000559 C3                                              ret                                                     ;return
  2505                                  ;-----------------------------------------------------------------------------------------------------------------------
  2506                                  ;
  2507                                  ;       Routine:        PutPrimaryEndOfInt
  2508                                  ;
  2509                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2510                                  ;
  2511                                  ;-----------------------------------------------------------------------------------------------------------------------
  2512 0000055A B020                    PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2513 0000055C E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2514 0000055E C3                                              ret                                                     ;return
  2515                                  ;-----------------------------------------------------------------------------------------------------------------------
  2516                                  ;
  2517                                  ;       Routine:        PutSecondaryEndOfInt
  2518                                  ;
  2519                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2520                                  ;
  2521                                  ;-----------------------------------------------------------------------------------------------------------------------
  2522 0000055F B020                    PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2523 00000561 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2524 00000563 C3                                              ret                                                     ;return
  2525                                  ;-----------------------------------------------------------------------------------------------------------------------
  2526                                  ;
  2527                                  ;       Routine:        SetKeyboardLamps
  2528                                  ;
  2529                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2530                                  ;
  2531                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2532                                  ;
  2533                                  ;-----------------------------------------------------------------------------------------------------------------------
  2534 00000564 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2535 00000569 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2536 0000056B E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  2537 0000056D E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2538 00000572 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2539 00000574 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2540 00000579 88F8                                            mov     al,bh                                           ;set/reset lamps value
  2541 0000057B E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  2542 0000057D E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2543 00000582 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2544 00000584 C3                                              ret                                                     ;return
  2545                                  ;-----------------------------------------------------------------------------------------------------------------------
  2546                                  ;
  2547                                  ;       Routine:        WaitForKeyInBuffer
  2548                                  ;
  2549                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2550                                  ;
  2551                                  ;       Out:            ZF      1 = Input buffer ready
  2552                                  ;                               0 = Input buffer not ready after timeout
  2553                                  ;
  2554                                  ;-----------------------------------------------------------------------------------------------------------------------
  2555 00000585 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2556 00000586 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2557 0000058B E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2558 0000058D A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  2559 0000058F E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  2560 00000591 59                                              pop     ecx                                             ;restore non-volatile regs
  2561 00000592 C3                                              ret                                                     ;return
  2562                                  ;-----------------------------------------------------------------------------------------------------------------------
  2563                                  ;
  2564                                  ;       Routine:        WaitForKeyOutBuffer
  2565                                  ;
  2566                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2567                                  ;
  2568                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2569                                  ;                               0 = Output buffer empty after timeout
  2570                                  ;
  2571                                  ;-----------------------------------------------------------------------------------------------------------------------
  2572 00000593 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2573 00000594 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2574 00000599 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2575 0000059B A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  2576 0000059D E1FA                                            loopz   .10                                             ;loop until output buffer bit
  2577 0000059F 59                                              pop     ecx                                             ;restore non-volatile regs
  2578 000005A0 C3                                              ret                                                     ;return
  2579                                  ;-----------------------------------------------------------------------------------------------------------------------
  2580                                  ;
  2581                                  ;       End of the Kernel Function Library
  2582                                  ;
  2583                                  ;-----------------------------------------------------------------------------------------------------------------------
  2584 000005A1 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2585                                  ;=======================================================================================================================
  2586                                  ;
  2587                                  ;       Console Task
  2588                                  ;
  2589                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2590                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2591                                  ;       screen and responds to user commands.
  2592                                  ;
  2593                                  ;=======================================================================================================================
  2594                                  ;-----------------------------------------------------------------------------------------------------------------------
  2595                                  ;
  2596                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2597                                  ;
  2598                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2599                                  ;
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                  section                 constack                                                ;console task stack
  2602 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2606                                  ;
  2607                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2608                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2609                                  ;       16 descriptors. Six are initially defined.
  2610                                  ;
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  section                 conldt                                                  ;console local descriptors
  2613 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2614 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2615 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2616 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2617 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  2618 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  2619 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621                                  ;
  2622                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2623                                  ;
  2624                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2625                                  ;       segment. CS to console code.
  2626                                  ;
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  section                 contss                                                  ;console task state segment
  2629 00000000 00000000                                        dd      0                                               ;00 back-link tss
  2630 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  2631 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  2632 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  2633 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  2634 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  2635 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  2636 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  2637 00000020 00000000                                        dd      0                                               ;20 eip
  2638 00000024 00020000                                        dd      0200h                                           ;24 eflags
  2639 00000028 00000000                                        dd      0                                               ;28 eax
  2640 0000002C 00000000                                        dd      0                                               ;2c ecx
  2641 00000030 00000000                                        dd      0                                               ;30 edx
  2642 00000034 00000000                                        dd      0                                               ;34 ebx
  2643 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  2644 0000003C 00000000                                        dd      0                                               ;3c ebp
  2645 00000040 00000000                                        dd      0                                               ;40 esi
  2646 00000044 00000000                                        dd      0                                               ;44 edi
  2647 00000048 1C000000                                        dd      001Ch                                           ;48 es
  2648 0000004C 24000000                                        dd      0024h                                           ;4c cs
  2649 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  2650 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  2651 00000058 00000000                                        dd      0                                               ;58 fs
  2652 0000005C 00000000                                        dd      0                                               ;5c gs
  2653 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2654 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                  ;
  2657                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2658                                  ;
  2659                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2660                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2661                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2662                                  ;       event.
  2663                                  ;
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  section                 conmque                                                 ;console message queue
  2666 00000000 08000000                                        dd      8                                               ;head pointer
  2667 00000004 08000000                                        dd      8                                               ;tail pointer
  2668 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  2669                                  ;-----------------------------------------------------------------------------------------------------------------------
  2670                                  ;
  2671                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2672                                  ;
  2673                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2674                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2675                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2676                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2677                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2678                                  ;       board input, echoing to the console screen and responding to user commands.
  2679                                  ;
  2680                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2681                                  ;
  2682                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2683                                  ;                               |  Real Mode Interrupt Vectors                  |
  2684                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2685                                  ;                               |  Reserved BIOS Memory Area                    |
  2686                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2687                                  ;                               |  Shared Kernel Memory Area                    |
  2688                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2689                                  ;                               |  Global Descriptor Table (GDT)                |
  2690                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2691                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2692                                  ;                       002000  +-----------------------------------------------+
  2693                                  ;                               |  Interrupt Handlers                           |
  2694                                  ;                               |  Kernel Function Library                      |
  2695                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2696                                  ;                               |  Console Task Stack Area                      |
  2697                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2698                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2699                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2700                                  ;                               |  Console Task Task State Segment (TSS)        |
  2701                                  ;                       004800  +-----------------------------------------------+
  2702                                  ;                               |  Console Task Message Queue                   |
  2703                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2704                                  ;                               |  Console Task Code                            |
  2705                                  ;                               |  Console Task Constants                       |
  2706                                  ;                       006000  +===============================================+
  2707                                  ;
  2708                                  ;-----------------------------------------------------------------------------------------------------------------------
  2709                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2710                                  ;
  2711                                  ;       Initialize console work areas to low values.
  2712                                  ;
  2713 00000000 BF00080000              ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  2714 00000005 30C0                                            xor     al,al                                           ;initialization value
  2715 00000007 B960000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  2716 0000000C FC                                              cld                                                     ;forward strings
  2717 0000000D F3AA                                            rep     stosb                                           ;initialize data
  2718                                  ;
  2719                                  ;       Initialize the active panel variables.
  2720                                  ;
  2721 0000000F B8[B6000000]                                    mov     eax,czPnlCon001                                 ;initial console panel
  2722 00000014 A300080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  2723                                  ;
  2724                                  ;       Address the console screen memory.
  2725                                  ;
  2726 00000019 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  2727 0000001B 07                                              pop     es                                              ;...into extra segment reg
  2728                                  ;
  2729                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  2730                                  ;
  2731 0000001C BF000F0000                                      mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  2732 00000021 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2733 00000026 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2734 0000002B F3AB                                            rep     stosd                                           ;reset OIA
  2735                                  ;
  2736                                  ;       Clear the console rows. (This is done after every attention key).
  2737                                  ;
  2738 0000002D 31FF                    .20                     xor     edi,edi                                         ;target offset
  2739 0000002F B9C0030000                                      mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  2740 00000034 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initialization value
  2741 00000039 F3AB                                            rep     stosd                                           ;reset screen body
  2742                                  ;
  2743                                  ;       Reset the input field input address, row and column.
  2744                                  ;
  2745 0000003B 31C0                                            xor     eax,eax                                         ;zero register
  2746 0000003D A255080000                                      mov     [wbConsoleRow],al                               ;zero console row
  2747 00000042 A254080000                                      mov     [wbConsoleColumn],al                            ;zero console column
  2748                                  ;
  2749                                  ;       Load the field address from the panel. Exit loop if address is null.
  2750                                  ;
  2751 00000047 8B1D00080000                                    mov     ebx,[wdConsolePanel]                            ;first field template addr
  2752 0000004D 8B33                    .30                     mov     esi,[ebx]                                       ;field value addr
  2753 0000004F 85F6                                            test    esi,esi                                         ;end of panel?
  2754 00000051 7450                                            jz      .70                                             ;yes, exit loop
  2755                                  ;
  2756                                  ;       Load the field row, column, color and length.
  2757                                  ;
  2758 00000053 8A6B04                                          mov     ch,[ebx+4]                                      ;row
  2759 00000056 8A4B05                                          mov     cl,[ebx+5]                                      ;column
  2760 00000059 8A7306                                          mov     dh,[ebx+6]                                      ;color
  2761 0000005C 8A5307                                          mov     dl,[ebx+7]                                      ;length
  2762                                  ;
  2763                                  ;       Test the row high-bit for input field indication.
  2764                                  ;
  2765 0000005F F6C580                                          test    ch,080h                                         ;input field?
  2766 00000062 741C                                            jz      .40                                             ;no, branch
  2767 00000064 80E57F                                          and     ch,07Fh                                         ;clear input field indicator
  2768                                  ;
  2769                                  ;       Save the row and column if this is the first input field.
  2770                                  ;
  2771 00000067 A055080000                                      mov     al,[wbConsoleRow]                               ;console row
  2772 0000006C 0A0554080000                                    or      al,[wbConsoleColumn]                            ;already have an input field?
  2773 00000072 750C                                            jnz     .40                                             ;yes, branch
  2774 00000074 882D55080000                                    mov     [wbConsoleRow],ch                               ;update console row
  2775 0000007A 880D54080000                                    mov     [wbConsoleColumn],cl                            ;update console column
  2776                                  ;
  2777                                  ;       Compute the target offset.
  2778                                  ;
  2779 00000080 0FB6C5                  .40                     movzx   eax,ch                                          ;row
  2780 00000083 B450                                            mov     ah,ECONCOLS                                     ;columns per row
  2781 00000085 F6E4                                            mul     ah                                              ;row offset
  2782 00000087 00C8                                            add     al,cl                                           ;add column
  2783 00000089 80D400                                          adc     ah,0                                            ;handle overflow
  2784 0000008C D1E0                                            shl     eax,1                                           ;two-bytes per column
  2785 0000008E 89C7                                            mov     edi,eax                                         ;target offset
  2786                                  ;
  2787                                  ;       Display the field contents.
  2788                                  ;
  2789 00000090 0FB6CA                                          movzx   ecx,dl                                          ;length
  2790 00000093 88F4                                            mov     ah,dh                                           ;color
  2791 00000095 AC                      .50                     lodsb                                                   ;field character
  2792 00000096 84C0                                            test    al,al                                           ;end of value?
  2793 00000098 7404                                            jz      .60                                             ;yes, branch
  2794 0000009A 66AB                                            stosw                                                   ;store character and color
  2795 0000009C E2F7                                            loop    .50                                             ;next character
  2796 0000009E 83C308                  .60                     add     ebx,8                                           ;next field addr
  2797 000000A1 EBAA                                            jmp     short .30                                       ;next field
  2798                                  ;
  2799                                  ;       Place the cursor at the input field.
  2800                                  ;
  2801 000000A3 8A2555080000            .70                     mov     ah,[wbConsoleRow]                               ;field row
  2802 000000A9 A054080000                                      mov     al,[wbConsoleColumn]                            ;field column
  2803                                                          placeCursor                                             ;position the cursor
  2803 000000AE B000                <1>  mov al,ePlaceCursor
  2803 000000B0 CD30                <1>  int _svc
  2804                                  ;
  2805                                  ;       Enter halt loop
  2806                                  ;
  2807 000000B2 FB                      .80                     sti                                                     ;enable interrupts
  2808 000000B3 F4                                              hlt                                                     ;halt until interrupt
  2809 000000B4 EBFC                                            jmp     .80                                             ;continue halt loop
  2810                                  ;-----------------------------------------------------------------------------------------------------------------------
  2811                                  ;
  2812                                  ;       Constants
  2813                                  ;
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                  ;
  2817                                  ;       Panels
  2818                                  ;
  2819                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  2820                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  2821                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824 000000B6 [E2000000]              czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  2825 000000BA 00000206                                        db      00,00,02h,06                                    ;flags+row, col, attr, length
  2826 000000BE [E8000000]                                      dd      czFldTitleCon001
  2827 000000C2 001E0714                                        db      00,30,07h,20
  2828 000000C6 [FC000000]                                      dd      czFldDatTmCon001
  2829 000000CA 003F0211                                        db      00,63,02h,17
  2830 000000CE [0D010000]                                      dd      czFldPrmptCon001
  2831 000000D2 17000701                                        db      23,00,07h,01
  2832 000000D6 04080000                                        dd      wzConsoleInBuffer
  2833 000000DA 9701074F                                        db      128+23,01,07h,79
  2834 000000DE 00000000                                        dd      0                                               ;end of panel
  2835                                  ;-----------------------------------------------------------------------------------------------------------------------
  2836                                  ;
  2837                                  ;       Strings
  2838                                  ;
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840 000000E2 434F4E303031            czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  2841 000000E8 437573746F6D4F5320-     czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  2841 000000F1 56657273696F6E2031-
  2841 000000FA 2E30               
  2842 000000FC 44442D4D4D4D2D5959-     czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  2842 00000105 59592048483A4D4D   
  2843 0000010D 3A                      czFldPrmptCon001        db      ":"                                             ;command prompt
  2844 0000010E 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  2845                                  %endif
  2846                                  %ifdef BUILDDISK
  2847                                  ;-----------------------------------------------------------------------------------------------------------------------
  2848                                  ;
  2849                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2850                                  ;
  2851                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  2852                                  ;
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  section                 unused                                                  ;unused disk space
  2855 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  2856                                  %endif
  2857                                  ;=======================================================================================================================
  2858                                  ;
  2859                                  ;       End of Program Code
  2860                                  ;
  2861                                  ;=======================================================================================================================
