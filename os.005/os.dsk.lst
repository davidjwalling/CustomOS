     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;
   166                                  ;=======================================================================================================================
   167                                  ;-----------------------------------------------------------------------------------------------------------------------
   168                                  ;
   169                                  ;       Hardware-Defined Values
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   175                                  ;
   176                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   177                                  ;       for CGA, EGA, VGA and compatible video modes.
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   181                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   182                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   183                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ;
   186                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   187                                  ;
   188                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   189                                  ;
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   192                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   193                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   194                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   195                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  ;
   198                                  ;       8042 Keyboard Controller                                                EKEYB...
   199                                  ;
   200                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   201                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   202                                  ;
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  EKEYBPORTDATA           equ     060h                                            ;data port
   205                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   206                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   207                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   208                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   209                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   210                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   211                                                                                                                  ;---------------------------------------
   212                                                                                                                  ;       Keyboard Scan Codes
   213                                                                                                                  ;---------------------------------------
   214                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   215                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   216                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   217                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   218                                  EKEYBSLASH              equ     035h                                            ;slash
   219                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   220                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   221                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   222                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   223                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   224                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   225                                  EKEYBUP                 equ     080h                                            ;up
   226                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   227                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   228                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   229                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   230                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   231                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   232                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   233                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   234                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   235                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   236                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   237                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   238                                  ;-----------------------------------------------------------------------------------------------------------------------
   239                                  ;
   240                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   241                                  ;
   242                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   243                                  ;       external devices and signals a hardware interrupt to the CPU.
   244                                  ;
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   247                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   248                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   249                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   250                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;       8253 Programmable Interval Timer                                        EPIT...
   254                                  ;
   255                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   256                                  ;       approximately 18.2 times per second.
   257                                  ;
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       x86 CPU Architecture                                                    ;EX86...
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  ;
   268                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   269                                  ;
   270                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   271                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   272                                  ;
   273                                  ;       0.......        Segment is not present in memory (triggers int 11)
   274                                  ;       1.......        Segment is present in memory
   275                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   276                                  ;       ...0....        Segment is a system segment
   277                                  ;       ...00010                Local Descriptor Table
   278                                  ;       ...00101                Task Gate
   279                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   280                                  ;       ...01100                Call Gate (386)
   281                                  ;       ...01110                Interrupt Gate (386)
   282                                  ;       ...01111                Trap Gate (386)
   283                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   284                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   285                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   286                                  ;
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   289                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   290                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   291                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   292                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   293                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   294                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   295                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       Firmware-Defined Values
   299                                  ;
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   304                                  ;
   305                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   306                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   310                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   311                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   312                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   313                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   314                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   315                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   316                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   317                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   318                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   319                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;
   322                                  ;       Standards-Based Values
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       ASCII                                                                   EASCII...
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   331                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   332                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   333                                  EASCIISPACE             equ     020h                                            ;space
   334                                  EASCIIUPPERA            equ     041h                                            ;'A'
   335                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   336                                  EASCIICASE              equ     00100000b                                       ;case bit
   337                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   338                                  ;-----------------------------------------------------------------------------------------------------------------------
   339                                  ;
   340                                  ;       Operating System Values
   341                                  ;
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  ;
   345                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   346                                  ;
   347                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   348                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   352                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   353                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   354                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   355                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   356                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   357                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  ;       Console Constants                                                       ECON...
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  ECONCOLS                equ     80                                              ;columns per row
   362                                  ECONROWS                equ     24                                              ;console rows
   363                                  ECONOIAROW              equ     24                                              ;operator information area row
   364                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   365                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   366                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   367                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   368                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   373                                  EGDTCGA                 equ     020h                                            ;cga video selector
   374                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   375                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   376                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   377                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   378                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   379                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  ;       Keyboard Flags                                                          EKEYF...
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   384                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   385                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   386                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   387                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   388                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   389                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   390                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   391                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   392                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   393                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  ;       Kernel Constants                                                        EKRN...
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   398                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   399                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   400                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   401                                  ;=======================================================================================================================
   402                                  ;
   403                                  ;       Structures
   404                                  ;
   405                                  ;=======================================================================================================================
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;
   408                                  ;       OSDATA
   409                                  ;
   410                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   411                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   412                                  ;
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  struc                   OSDATA
   415 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   416 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   417 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   418 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   419 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   420 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   421 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   422 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   423 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   424 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   425 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   426 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   427 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   428 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   429 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   430 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   431 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   432 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   433 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   434 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   435 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   436 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   437 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   438 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   439 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   440 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   441 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   442 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   443 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   444 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   445 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   446 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   447 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   448 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   449 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   450 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   451 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   452 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   453 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   454 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   455 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   456 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   457 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   458 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   459 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   460 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   461 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   462 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   463 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   464 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   465 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   466 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   467 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   468 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   469 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   470 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   471 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   472 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   473 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   474 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   475 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   476 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   477 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   478 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   479 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   480 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   481 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   482 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   483 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   484 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   485 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   486 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   487 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   488 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   489 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   490 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   491 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   492 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   493 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   494 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   495 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   496 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   497 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   498 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   499 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   500 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   501 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   502 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   503 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   504 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   505 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   506 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   507 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   508 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   509 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   510 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   511 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   512 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   513 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   514 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   515 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   516                                  ;-----------------------------------------------------------------------------------------------------------------------
   517                                  ;
   518                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   519                                  ;
   520                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   521                                  ;
   522                                  ;-----------------------------------------------------------------------------------------------------------------------
   523                                  ECONDATA                equ     ($)
   524 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   525 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   526 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   527 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   528 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   529 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   530 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   531 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   532 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   533 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   534 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   535 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   536                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538                                  ;
   539                                  ;       End of OS Variables
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  endstruc
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;       Macros
   546                                  ;
   547                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   548                                  ;
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  %macro                  mint    1
   551                                  _%1                     equ     ($-$$) / EX86DESCLEN
   552                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   553                                  %endmacro
   554                                  %macro                  mtrap   1
   555                                  _%1                     equ     ($-$$) / EX86DESCLEN
   556                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   557                                  %endmacro
   558                                  %macro                  menter  1
   559                                  ?%1                     equ     ($-$$)
   560                                  %endmacro
   561                                  %macro                  tsvce   1
   562                                  e%1                     equ     ($-tsvc)/4
   563                                                          dd      %1
   564                                  %endmacro
   565                                  %ifdef BUILDBOOT
   566                                  ;=======================================================================================================================
   567                                  ;
   568                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   569                                  ;
   570                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   571                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   572                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   573                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   574                                  ;
   575                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   576                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   577                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   578                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   579                                  ;       immediately followed by a disk parameter table.
   580                                  ;
   581                                  ;=======================================================================================================================
   582                                                          cpu     8086                                            ;assume minimal CPU
   583                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   584                                                          bits    16                                              ;16-bit code at power-up
   585                                  %ifdef BUILDPREP
   586                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   587                                  %else
   588 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   589                                  %endif
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ;
   592                                  ;       Disk Parameter Table
   593                                  ;
   594                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   595                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   596                                  ;
   597                                  ;-----------------------------------------------------------------------------------------------------------------------
   598 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   599 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   600 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   601 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   602 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   603 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   604 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   605 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   606 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   607                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   608 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   609 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   610 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   611                                  ;
   612                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   613                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   614                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   615                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   616                                  ;       given several possible starting values for CS:IP.
   617                                  ;
   618                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   619 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   620                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   621 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   622 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   623 00000025 B104                                            mov     cl,4                                            ;shift count
   624 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   625 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   626 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   627                                  ;
   628                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   629                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   630                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   631                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   632                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   633                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   634                                  ;
   635 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   636 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   637 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   638 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   639 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   640                                  ;
   641                                  ;       Our boot addressability is now set up according to the following diagram.
   642                                  ;
   643                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   644                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   645                                  ;                               |  256 = 100h bytes                             |
   646                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   647                                  ;                               |  Boot Sector (vstart=0100h)                   |
   648                                  ;                               |  1 sector = 512 = 200h bytes                  |
   649                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   650                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   651                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   652                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   653                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   654                                  ;                               |  2 sectors = 1024 = 400h bytes
   655                                  ;                       009400  +-----------------------------------------------+ DS:1900
   656                                  ;
   657                                  ;       On entry, DL indicates the drive being booted from.
   658                                  ;
   659 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   660                                  ;
   661                                  ;       Compute directory i/o buffer address.
   662                                  ;
   663 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   664 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   665 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   666 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   667                                  ;
   668                                  ;       Compute segment where os.com will be loaded.
   669                                  ;
   670 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   671 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   672 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   673 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   674                                  ;
   675                                  ;       Set the video mode to 80 column, 25 row, text.
   676                                  ;
   677 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   678 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   679                                  ;
   680                                  ;       Write a message to the console so we know we have our addressability established.
   681                                  ;
   682 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   683 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   684                                  ;
   685                                  ;       Initialize the number of directory sectors to search.
   686                                  ;
   687 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   688 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   689                                  ;
   690                                  ;       Compute number of directory sectors and initialize overhead count.
   691                                  ;
   692 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   693 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   694 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   695 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   696                                  ;
   697                                  ;       Compute directory entries per sector.
   698                                  ;
   699 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   700 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   701 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   702                                  ;
   703                                  ;       Compute first logical directory sector and update overhead count.
   704                                  ;
   705 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   706 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   707 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   708 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   709 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   710 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   711                                  ;
   712                                  ;       Read directory sector.
   713                                  ;
   714 0000008E B001                    .30                     mov     al,1                                            ;sector count
   715 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   716 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   717 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   718                                  ;
   719                                  ;       Setup variables to search this directory sector.
   720                                  ;
   721 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   722 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   723 000000A1 7603                                            jna     .40                                             ;no, continue
   724 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   725 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   726 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   727 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   728                                  ;
   729                                  ;       Loop through directory sectors searching for kernel program.
   730                                  ;
   731 000000B1 56                      .50                     push    si                                              ;save kernel name address
   732 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   733 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   734 000000B6 FC                                              cld                                                     ;forward strings
   735 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   736 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   737 000000BA 5E                                              pop     si                                              ;restore kernel name address
   738 000000BB 7418                                            je      .60                                             ;exit loop if found
   739 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   740 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   741 000000C2 75ED                                            jnz     .50                                             ;next entry
   742                                  ;
   743                                  ;       Repeat search if we are not at the end of the directory.
   744                                  ;
   745 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   746 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   747 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   748 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   749 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   750                                  ;
   751                                  ;       If we find the kernel program in the directory, read the FAT.
   752                                  ;
   753 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   754 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   755 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   756 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   757 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   758 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   759                                  ;
   760                                  ;       Get the starting cluster of the kernel program and target address.
   761                                  ;
   762 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   763 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   764                                  ;
   765                                  ;       Read each program cluster into RAM.
   766                                  ;
   767 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   768 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   769 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   770 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   771 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   772 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   773 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   774 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   775 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   776                                  ;
   777                                  ;       Update buffer pointer for next cluster.
   778                                  ;
   779 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   780 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   781 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   782 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   783 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   784                                  ;
   785                                  ;       Compute next cluster number.
   786                                  ;
   787 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   788 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   789 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   790 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   791 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   792 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   793 00000120 83E701                                          and     di,1                                            ;get low bit
   794 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   795 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   796 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   797                                  ;
   798                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   799                                  ;
   800 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   801 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   802 00000130 B104                                            mov     cl,4                                            ;shift count
   803 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   804 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   805 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   806 0000013A 75B2                                            jne     .70                                             ;no, continue
   807                                  ;
   808                                  ;       Transfer control to the operating system program.
   809                                  ;
   810 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   811 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   812 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   813                                  ;
   814                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   815                                  ;
   816 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   817 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   818 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   819 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   820 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   821 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   822 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   823 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   824 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   825 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   826                                  ;
   827                                  ;       Try maxtries times to read sector.
   828                                  ;
   829 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   830 00000160 53                      .10                     push    bx                                              ;save buffer address
   831 00000161 51                                              push    cx                                              ;save retry count
   832 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   833 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   834 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   835 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   836 0000016F 59                                              pop     cx                                              ;restore retry count
   837 00000170 5B                                              pop     bx                                              ;restore buffer address
   838 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   839 00000173 E2EB                                            loop    .10                                             ;retry
   840                                  ;
   841                                  ;       Handle disk error: convert to ASCII and store in error string.
   842                                  ;
   843 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   844 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   845 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   846 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   847 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   848 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   849 00000183 7203                                            jb      .20                                             ;continue if numeral
   850 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   851 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   852 0000018A 7203                                            jb      .30                                             ;continue if numeral
   853 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   854 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   855 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   856 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   857                                  ;
   858                                  ;       Wait for a key press.
   859                                  ;
   860 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   861 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   862 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   863 0000019E FB                                              sti                                                     ;enable maskable interrupts
   864 0000019F F4                                              hlt                                                     ;wait for interrupt
   865 000001A0 EBF6                                            jmp     .10                                             ;repeat
   866                                  ;
   867                                  ;       Reset the system.
   868                                  ;
   869 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   870 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   871 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   872 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   873 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   874                                  ;
   875                                  ;       Display text message.
   876                                  ;
   877 000001AA FC                      BootPrint               cld                                                     ;forward strings
   878 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   879 000001AC 84C0                                            test    al,al                                           ;end of string?
   880 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   881 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   882 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   883 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   884 000001B6 C3                      BootReturn              ret                                                     ;return
   885                                  ;-----------------------------------------------------------------------------------------------------------------------
   886                                  ;
   887                                  ;       Constants
   888                                  ;
   889                                  ;-----------------------------------------------------------------------------------------------------------------------
   890 000001B7 90                                              align   2
   891 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   892 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   892 000001C3 4F4D               
   893 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   893 000001CE 530D0A00           
   894 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   894 000001DB 7220               
   895 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   896 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   896 000001E9 6700               
   897                                  ;-----------------------------------------------------------------------------------------------------------------------
   898                                  ;
   899                                  ;       Work Areas
   900                                  ;
   901                                  ;-----------------------------------------------------------------------------------------------------------------------
   902 000001EB 90                                              align   2
   903 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   904 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   905 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   906 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   907 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   908                                  wwReadCountCommand      equ     $                                               ;read count and command
   909 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   910 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   911                                  wwDriveHead             equ     $                                               ;drive, head (word)
   912 000001F8 00                      wbDrive                 db      0                                               ;drive
   913 000001F9 00                      wbHead                  db      0                                               ;head
   914                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   915 000001FA 00                                              db      0                                               ;sector
   916 000001FB 00                      wbTrack                 db      0                                               ;track
   917 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   918 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   919                                  %endif
   920                                  %ifdef BUILDPREP
   921                                  ;=======================================================================================================================
   922                                  ;
   923                                  ;       Diskette Preparation Code
   924                                  ;
   925                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   926                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   927                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   928                                  ;
   929                                  ;=======================================================================================================================
   930                                  ;
   931                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   932                                  ;
   933                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   934                                                          call    BootPrint                                       ;display message
   935                                  ;
   936                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   937                                  ;
   938                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   939                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   940                                                          jnz     .20                                             ;continue if key pressed
   941                                                          sti                                                     ;enable interrupts
   942                                                          hlt                                                     ;wait for interrupt
   943                                                          jmp     .10                                             ;repeat
   944                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   945                                                          je      .30                                             ;yes, branch
   946                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   947                                                          jne     .10                                             ;no, repeat
   948                                                          jmp     .120                                            ;yes, exit program
   949                                  ;
   950                                  ;       Display writing-sector message and patch the JMP instruction.
   951                                  ;
   952                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   953                                                          call    BootPrint                                       ;display message
   954                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   955                                                          mov     ax,01Bh                                         ;address past disk parameter table
   956                                                          mov     [bx],ax                                         ;update the JMP instruction
   957                                  ;
   958                                  ;       Try to read the boot sector.
   959                                  ;
   960                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   961                                  .40                     push    cx                                              ;save remaining tries
   962                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   963                                                          mov     dx,0                                            ;head zero, drive zero
   964                                                          mov     cx,1                                            ;track zero, sector one
   965                                                          mov     al,1                                            ;one sector
   966                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
   967                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   968                                                          pop     cx                                              ;restore remaining retries
   969                                                          jnc     .50                                             ;skip ahead if successful
   970                                                          loop    .40                                             ;try again
   971                                                          mov     si,czPrepMsg20                                  ;read-error message address
   972                                                          jmp     .70                                             ;branch to error routine
   973                                  ;
   974                                  ;       Copy diskette parms from input buffer to output buffer.
   975                                  ;
   976                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   977                                                          add     si,11                                           ;skip over JMP and system ID
   978                                                          mov     di,Boot                                         ;output buffer address
   979                                                          add     di,11                                           ;skip over JMP and system ID
   980                                                          mov     cx,19                                           ;length of diskette parameters
   981                                                          cld                                                     ;forward string copies
   982                                                          rep     movsb                                           ;copy diskette parameters
   983                                  ;
   984                                  ;       Try to write boot sector to diskette.
   985                                  ;
   986                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   987                                  .60                     push    cx                                              ;save remaining tries
   988                                                          mov     bx,Boot                                         ;output buffer address
   989                                                          mov     dx,0                                            ;head zero, drive zero
   990                                                          mov     cx,1                                            ;track zero, sector one
   991                                                          mov     al,1                                            ;one sector
   992                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
   993                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   994                                                          pop     cx                                              ;restore remaining retries
   995                                                          jnc     .100                                            ;skip ahead if successful
   996                                                          loop    .60                                             ;try again
   997                                                          mov     si,czPrepMsg30                                  ;write-error message address
   998                                  ;
   999                                  ;       Convert the error code to ASCII and display the error message.
  1000                                  ;
  1001                                  .70                     push    ax                                              ;save error code
  1002                                                          mov     al,ah                                           ;copy error code
  1003                                                          mov     ah,0                                            ;AX = error code
  1004                                                          mov     dl,10h                                          ;hexadecimal divisor
  1005                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1006                                                          or      ax,03030h                                       ;add ASCII zone digits
  1007                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1008                                                          jb      .80                                             ;yes, continue
  1009                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1010                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1011                                                          jb      .90                                             ;yes, continue
  1012                                                          add     al,7                                            ;no, make ASCII
  1013                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1014                                                          call    BootPrint                                       ;write error message
  1015                                                          pop     ax                                              ;restore error code
  1016                                  ;
  1017                                  ;       Display the completion message.
  1018                                  ;
  1019                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1020                                                          mov     al,ah                                           ;BIOS return code
  1021                                                          cmp     al,0                                            ;success?
  1022                                                          je      .110                                            ;yes, continue
  1023                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1024                                                          cmp     al,1                                            ;disk parameter error?
  1025                                                          je      .110                                            ;yes, continue
  1026                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1027                                                          cmp     al,2                                            ;address mark not found?
  1028                                                          je      .110                                            ;yes, continue
  1029                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1030                                                          cmp     al,3                                            ;protected disk?
  1031                                                          je      .110                                            ;yes, continue
  1032                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1033                                                          cmp     al,6                                            ;diskette removed?
  1034                                                          je      .110                                            ;yes, continue
  1035                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1036                                                          cmp     al,80H                                          ;drive timed out?
  1037                                                          je      .110                                            ;yes, continue
  1038                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1039                                  .110                    call    BootPrint                                       ;display result message
  1040                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1041                                                          int     021h                                            ;terminate DOS program
  1042                                                          ret                                                     ;return (should not execute)
  1043                                  ;-----------------------------------------------------------------------------------------------------------------------
  1044                                  ;
  1045                                  ;       Diskette Preparation Messages
  1046                                  ;
  1047                                  ;-----------------------------------------------------------------------------------------------------------------------
  1048                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1049                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1050                                                          db      13,10
  1051                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1052                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1053                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1054                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1055                                                          db      13,10,0
  1056                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1057                                                          db      13,10,0
  1058                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1059                                                          db      13,10,0
  1060                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1061                                                          db      13,10,0
  1062                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1063                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1064                                                          db      13,10,0
  1065                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1066                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1067                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1068                                                          db      13,10,"and retry."
  1069                                                          db      13,10,0
  1070                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1071                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1072                                                          db      13,10,"using another diskette."
  1073                                                          db      13,10,0
  1074                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1075                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1076                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1077                                                          db      13,10,0
  1078                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1079                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1080                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1081                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1082                                                          db      13,10,"is properly inserted in the diskette drive."
  1083                                                          db      13,10,0
  1084                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1085                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1086                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1087                                                          db      13,10,0
  1088                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1089                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1090                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1091                                                          db      13,10,0
  1092                                  wcPrepInBuf             equ     $
  1093                                  %endif
  1094                                  %ifdef BUILDDISK
  1095                                  ;=======================================================================================================================
  1096                                  ;
  1097                                  ;       File Allocation Tables
  1098                                  ;
  1099                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1100                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1101                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1102                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1103                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1104                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1105                                  ;       the last cluster in the chain.
  1106                                  ;
  1107                                  ;       Every three bytes encode two FAT entries as follows:
  1108                                  ;
  1109                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1110                                  ;
  1111                                  ;=======================================================================================================================
  1112                                  ;-----------------------------------------------------------------------------------------------------------------------
  1113                                  ;
  1114                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1115                                  ;
  1116                                  ;-----------------------------------------------------------------------------------------------------------------------
  1117                                  section                 fat1                                                    ;first copy of FAT
  1118 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1119 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1120 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1121 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1122 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1123 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1124 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1125 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1126 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1127 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1128 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1129 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1130                                  ;-----------------------------------------------------------------------------------------------------------------------
  1131                                  ;
  1132                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1133                                  ;
  1134                                  ;-----------------------------------------------------------------------------------------------------------------------
  1135                                  section                 fat2                                                    ;second copy of FAT
  1136 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1137 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1138 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1139 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1140 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1141 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1142 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1143 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1144 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1145 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1146 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1147 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1148                                  ;-----------------------------------------------------------------------------------------------------------------------
  1149                                  ;
  1150                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1151                                  ;
  1152                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1153                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1154                                  ;       copy.
  1155                                  ;
  1156                                  ;-----------------------------------------------------------------------------------------------------------------------
  1157                                  section                 dir                                                     ;diskette directory
  1158 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1158 00000009 4F4D               
  1159 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1160 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1161 00000016 0000                                            dw      0h                                              ;time
  1162 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1163 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1164 0000001A 0200                                            dw      2                                               ;first cluster
  1165 0000001C 00540000                                        dd      05400h                                          ;file size
  1166 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1167                                  %endif
  1168                                  %ifdef BUILDCOM
  1169                                  ;=======================================================================================================================
  1170                                  ;
  1171                                  ;       OS.COM
  1172                                  ;
  1173                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1174                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1175                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1176                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1177                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1178                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1179                                  ;
  1180                                  ;       Our loader addressability is set up according to the following diagram.
  1181                                  ;
  1182                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1183                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1184                                  ;                               |  256 = 100h bytes                             |
  1185                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1186                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1187                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1188                                  ;                       007e00  +-----------------------------------------------+
  1189                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1190                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1191                                  ;                               |                                               |
  1192                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1193                                  ;                               |                                               |
  1194                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1195                                  ;                               |  Loader Code                                  |
  1196                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1197                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1198                                  ;
  1199                                  ;=======================================================================================================================
  1200                                  ;-----------------------------------------------------------------------------------------------------------------------
  1201                                  ;
  1202                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1203                                  ;
  1204                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1205                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1206                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1207                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1208                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1209                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1210                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1211                                  ;       registers.
  1212                                  ;
  1213                                  ;-----------------------------------------------------------------------------------------------------------------------
  1214                                                          cpu     8086                                            ;assume minimal CPU
  1215                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1216                                                          bits    16                                              ;this is 16-bit code
  1217 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1218 00000001 1F                                              pop     ds                                              ;...as our data segment
  1219 00000002 0E                                              push    cs                                              ;use the code segment
  1220 00000003 07                                              pop     es                                              ;...as our extra segment
  1221                                  ;
  1222                                  ;       Write a message to the console so we know we have our addressability established.
  1223                                  ;
  1224 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1225 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1226                                  ;
  1227                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1228                                  ;
  1229 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1230 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1231 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1232 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1233                                                          cpu     386                                             ;allow 80386 instructions
  1234 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1235 00000017 E89600                                          call    PutTTYString                                    ;display message
  1236                                  ;
  1237                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1238                                  ;
  1239 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1240 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1241 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1242 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1243 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1244 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1245 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1246 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1247 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1248 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1249                                  ;
  1250                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1251                                  ;
  1252 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1253 00000038 07                                              pop     es                                              ;... as target segment
  1254 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1255 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1256 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1257 00000041 FC                                              cld                                                     ;forward strings
  1258 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1259 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1260 00000047 E86600                                          call    PutTTYString                                    ;display message
  1261                                  ;
  1262                                  ;       Switch to protected mode.
  1263                                  ;
  1264 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1265 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1266 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1267 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1268 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1269 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1270 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1271 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1272 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1273 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1274 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1275                                  ;
  1276                                  ;       Enable hardware and maskable interrupts.
  1277                                  ;
  1278 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1279 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1280 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1281 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1282                                  ;
  1283                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1284                                  ;
  1285 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1286 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1287 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1288                                  ;-----------------------------------------------------------------------------------------------------------------------
  1289                                  ;
  1290                                  ;       Routine:        LoaderExit
  1291                                  ;
  1292                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1293                                  ;
  1294                                  ;       In:             DS:SI   string address
  1295                                  ;
  1296                                  ;-----------------------------------------------------------------------------------------------------------------------
  1297 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1298                                  ;
  1299                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1300                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1301                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1302                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1303                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1304                                  ;
  1305 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1306 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1307 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1308 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1309 00000085 F4                                              hlt                                                     ;wait for interrupt
  1310 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1311                                  ;
  1312                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1313                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1314                                  ;       HLT until the system resets.
  1315                                  ;
  1316 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1317 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1318 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1319 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1320 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1321                                  ;-----------------------------------------------------------------------------------------------------------------------
  1322                                  ;
  1323                                  ;       Routine:        GetCPUType
  1324                                  ;
  1325                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1326                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1327                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1328                                  ;
  1329                                  ;       Out:            AX      0 = 808x, v20, etc.
  1330                                  ;                               1 = 80186
  1331                                  ;                               2 = 80286
  1332                                  ;                               3 = 80386
  1333                                  ;
  1334                                  ;-----------------------------------------------------------------------------------------------------------------------
  1335 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1336 00000092 B120                                            mov     cl,32                                           ;shift count
  1337 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1338 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1339 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1340                                                          cpu     186
  1341 0000009A 54                                              push    sp                                              ;save stack pointer
  1342 0000009B 59                                              pop     cx                                              ;...into cx
  1343 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1344 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1345                                                          cpu     286
  1346 000000A0 40                                              inc     ax                                              ;AX = 2
  1347 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1348 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1349 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1350 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1351 000000AE 40                                              inc     ax                                              ;AX = 3
  1352 000000AF C3                      .10                     ret                                                     ;return
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;       Routine:        PutTTYString
  1356                                  ;
  1357                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1358                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1359                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1360                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1361                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1362                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1363                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1364                                  ;                       to LODSB is not needed.
  1365                                  ;
  1366                                  ;       In:             DS:SI   address of string
  1367                                  ;
  1368                                  ;       Out:            DF      0
  1369                                  ;                       ZF      1
  1370                                  ;                       AL      0
  1371                                  ;
  1372                                  ;-----------------------------------------------------------------------------------------------------------------------
  1373 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1374 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1375 000000B2 84C0                                            test    al,al                                           ;end of string?
  1376 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1377 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1378 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1379 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1380 000000BC C3                      .20                     ret                                                     ;return
  1381                                  ;-----------------------------------------------------------------------------------------------------------------------
  1382                                  ;
  1383                                  ;       Loader Data
  1384                                  ;
  1385                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1386                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1387                                  ;
  1388                                  ;-----------------------------------------------------------------------------------------------------------------------
  1389 000000BD 90                                              align   2
  1390 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1391 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1392 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1393 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1394 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1394 000000D1 74696E672073797374-
  1394 000000DA 656D20726571756972-
  1394 000000E3 657320616E20693338-
  1394 000000EC 36206F72206C617465-
  1394 000000F5 722070726F63657373-
  1394 000000FE 6F722E0D0A         
  1395 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1395 0000010C 65737320616E79206B-
  1395 00000115 657920746F20726573-
  1395 0000011E 746172742074686520-
  1395 00000127 636F6D70757465722E-
  1395 00000130 0D0A00             
  1396 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1397 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1397 00000145 7265640D0A00       
  1398 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1398 00000154 616465640D0A00     
  1399 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1399 00000164 4F530D0A00         
  1400 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1401                                  ;=======================================================================================================================
  1402                                  ;
  1403                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1404                                  ;
  1405                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1406                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1407                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1408                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1409                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1410                                  ;
  1411                                  ;=======================================================================================================================
  1412                                  ;=======================================================================================================================
  1413                                  ;
  1414                                  ;       Kernel Tables
  1415                                  ;
  1416                                  ;=======================================================================================================================
  1417                                  ;-----------------------------------------------------------------------------------------------------------------------
  1418                                  ;
  1419                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1420                                  ;
  1421                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1422                                  ;       first descriptor must be all nulls.
  1423                                  ;
  1424                                  ;       6   5         4         3         2         1         0
  1425                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1426                                  ;       ----------------------------------------------------------------
  1427                                  ;       h......hffffmmmma......ab......................bn..............n
  1428                                  ;       00000000                        all areas have base addresses below 2^24
  1429                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1430                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1431                                  ;                   1001                present, ring-0, selector
  1432                                  ;
  1433                                  ;       h...h   hi-order base address (bits 24-31)
  1434                                  ;       ffff    flags
  1435                                  ;       mmmm    hi-order limit (bits 16-19)
  1436                                  ;       a...a   access
  1437                                  ;       b...b   lo-order base address (bits 0-23)
  1438                                  ;       n...n   lo-order limit (bits 0-15)
  1439                                  ;
  1440                                  ;-----------------------------------------------------------------------------------------------------------------------
  1441                                  section                 gdt                                                     ;global descriptor table
  1442 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1443 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1444 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1445 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1446 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1447 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1448 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1449 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1450 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1451 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1452 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1453 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1454 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1455 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1456 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1457                                  ;-----------------------------------------------------------------------------------------------------------------------
  1458                                  ;
  1459                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1460                                  ;
  1461                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1462                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1463                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1464                                  ;
  1465                                  ;       6   5         4         3         2         1         0
  1466                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1467                                  ;       ----------------------------------------------------------------
  1468                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1469                                  ;
  1470                                  ;       h...h   high-order offset (bits 16-31)
  1471                                  ;       P       present (0=unused interrupt)
  1472                                  ;       zz      descriptor privilege level
  1473                                  ;       S       storage segment (must be zero for IDT)
  1474                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1475                                  ;       S...S   handling code selector in GDT
  1476                                  ;       l...l   lo-order offset (bits 0-15)
  1477                                  ;
  1478                                  ;-----------------------------------------------------------------------------------------------------------------------
  1479                                  section                 idt                                                     ;interrupt descriptor table
  1480                                                          mint    dividebyzero                                    ;00 divide by zero
  1480                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1480 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1481                                                          mint    singlestep                                      ;01 single step
  1481                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1481 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1482                                                          mint    nmi                                             ;02 non-maskable
  1482                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1482 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1483                                                          mint    break                                           ;03 break
  1483                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1483 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1484                                                          mint    into                                            ;04 into
  1484                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1484 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1485                                                          mint    bounds                                          ;05 bounds
  1485                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1485 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1486                                                          mint    badopcode                                       ;06 bad op code
  1486                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1486 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1487                                                          mint    nocoproc                                        ;07 no coprocessor
  1487                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1487 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1488                                                          mint    doublefault                                     ;08 double-fault
  1488                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1488 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1489                                                          mint    operand                                         ;09 operand
  1489                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1489 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1490                                                          mint    badtss                                          ;0a bad TSS
  1490                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1490 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1491                                                          mint    notpresent                                      ;0b not-present
  1491                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1491 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1492                                                          mint    stacklimit                                      ;0c stack limit
  1492                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1492 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1493                                                          mint    protection                                      ;0d general protection fault
  1493                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1493 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1494                                                          mint    int14                                           ;0e (reserved)
  1494                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1494 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1495                                                          mint    int15                                           ;0f (reserved)
  1495                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1495 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1496                                                          mint    coproccalc                                      ;10 (reserved)
  1496                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1496 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1497                                                          mint    int17                                           ;11 (reserved)
  1497                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1497 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1498                                                          mint    int18                                           ;12 (reserved)
  1498                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1498 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1499                                                          mint    int19                                           ;13 (reserved)
  1499                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1499 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1500                                                          mint    int20                                           ;14 (reserved)
  1500                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1500 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1501                                                          mint    int21                                           ;15 (reserved)
  1501                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1501 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1502                                                          mint    int22                                           ;16 (reserved)
  1502                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1502 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1503                                                          mint    int23                                           ;17 (reserved)
  1503                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1503 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1504                                                          mint    int24                                           ;18 (reserved)
  1504                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1504 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1505                                                          mint    int25                                           ;19 (reserved)
  1505                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1505 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1506                                                          mint    int26                                           ;1a (reserved)
  1506                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1506 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1507                                                          mint    int27                                           ;1b (reserved)
  1507                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1507 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1508                                                          mint    int28                                           ;1c (reserved)
  1508                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1508 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1509                                                          mint    int29                                           ;1d (reserved)
  1509                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1509 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1510                                                          mint    int30                                           ;1e (reserved)
  1510                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1510 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1511                                                          mint    int31                                           ;1f (reserved)
  1511                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1511 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1512                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1512                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1512 00000100 3C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1513                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1513                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1513 00000108 8C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1514                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1514                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1514 00000110 A1054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1515                                                          mtrap   com2                                            ;23 IRQ3 com2
  1515                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1515 00000118 A4054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1516                                                          mtrap   com1                                            ;24 IRQ4 com1
  1516                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1516 00000120 A7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1517                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1517                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1517 00000128 AA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1518                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1518                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1518 00000130 AD054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1519                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1519                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1519 00000138 C1054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1520                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1520                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1520 00000140 C4054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1521                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1521                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1521 00000148 C7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1522                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1522                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1522 00000150 CA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1523                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1523                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1523 00000158 CD054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1524                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1524                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1524 00000160 D0054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1525                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1525                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1525 00000168 D3054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1526                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1526                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1526 00000170 D6054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1527                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 00000178 D9054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mtrap   svc                                             ;30 OS services
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 00000180 EA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1530                                  ;=======================================================================================================================
  1531                                  ;
  1532                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1533                                  ;
  1534                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1535                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1536                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1537                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1538                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1539                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1540                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1541                                  ;
  1542                                  ;=======================================================================================================================
  1543                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1544                                                          cpu     386                                             ;allow 80386 instructions
  1545                                                          bits    32                                              ;this is 32-bit code
  1546                                  ;=======================================================================================================================
  1547                                  ;
  1548                                  ;       CPU Interrupt Handlers
  1549                                  ;
  1550                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1551                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1552                                  ;
  1553                                  ;=======================================================================================================================
  1554                                  ;-----------------------------------------------------------------------------------------------------------------------
  1555                                  ;
  1556                                  ;       INT0    Divide By Zero
  1557                                  ;
  1558                                  ;-----------------------------------------------------------------------------------------------------------------------
  1559                                                          menter  dividebyzero                                    ;divide by zero
  1559                              <1> ?%1 equ ($-$$)
  1560 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1561 00000002 68[56010000]                                    push    czIntDivideByZero                               ;store message offset
  1562 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  ;
  1565                                  ;       INT1    Single Step
  1566                                  ;
  1567                                  ;-----------------------------------------------------------------------------------------------------------------------
  1568                                                          menter  singlestep                                      ;single step
  1568                              <1> ?%1 equ ($-$$)
  1569 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1570 0000000E 68[67010000]                                    push    czIntSingleStep                                 ;store message offset
  1571 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                  ;
  1574                                  ;       INT2    Non-Maskable Interrupt
  1575                                  ;
  1576                                  ;-----------------------------------------------------------------------------------------------------------------------
  1577                                                          menter  nmi                                             ;non-maskable
  1577                              <1> ?%1 equ ($-$$)
  1578 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1579 0000001A 68[73010000]                                    push    czIntNonMaskable                                ;store message offset
  1580 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  ;
  1583                                  ;       INT3    Break
  1584                                  ;
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586                                                          menter  break                                           ;break
  1586                              <1> ?%1 equ ($-$$)
  1587 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1588 00000026 68[8A010000]                                    push    czIntBreak                                      ;store message offset
  1589 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;
  1592                                  ;       INT4    Into
  1593                                  ;
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                                          menter  into                                            ;into
  1595                              <1> ?%1 equ ($-$$)
  1596 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1597 00000032 68[90010000]                                    push    czIntInto                                       ;store message offset
  1598 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  ;
  1601                                  ;       INT5    Bounds
  1602                                  ;
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                                          menter  bounds                                          ;bounds
  1604                              <1> ?%1 equ ($-$$)
  1605 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1606 0000003E 68[95010000]                                    push    czIntBounds                                     ;store message offset
  1607 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  ;
  1610                                  ;       INT6    Bad Operation Code
  1611                                  ;
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                                          menter  badopcode                                       ;bad opcode interrupt
  1613                              <1> ?%1 equ ($-$$)
  1614 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1615 0000004A 68[9C010000]                                    push    czIntBadOpCode                                  ;store message offset
  1616 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                  ;
  1619                                  ;       INT7    No Coprocessor
  1620                                  ;
  1621                                  ;-----------------------------------------------------------------------------------------------------------------------
  1622                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1622                              <1> ?%1 equ ($-$$)
  1623 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1624 00000056 68[AF010000]                                    push    czIntNoCoprocessor                              ;store message offset
  1625 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  ;
  1628                                  ;       INT8    Double Fault
  1629                                  ;
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                                          menter  doublefault                                     ;doublefault interrupt
  1631                              <1> ?%1 equ ($-$$)
  1632 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1633 00000062 68[BE010000]                                    push    czIntDoubleFault                                ;store message offset
  1634 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                  ;
  1637                                  ;       INT9    Operand
  1638                                  ;
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                                          menter  operand                                         ;operand interrupt
  1640                              <1> ?%1 equ ($-$$)
  1641 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1642 0000006E 68[CB010000]                                    push    czIntOperand                                    ;store message offset
  1643 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  ;
  1646                                  ;       INT10   Bad Task State Segment
  1647                                  ;
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                                          menter  badtss                                          ;bad TSS interrupt
  1649                              <1> ?%1 equ ($-$$)
  1650 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1651 0000007A 68[D3010000]                                    push    czIntBadTSS                                     ;store message offset
  1652 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  ;
  1655                                  ;       INT11   Not Present
  1656                                  ;
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                                          menter  notpresent                                      ;not present interrupt
  1658                              <1> ?%1 equ ($-$$)
  1659 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1660 00000086 68[EA010000]                                    push    czIntNotPresent                                 ;store message offset
  1661 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  ;
  1664                                  ;       INT12   Stack Limit
  1665                                  ;
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                                          menter  stacklimit                                      ;stack limit interrupt
  1667                              <1> ?%1 equ ($-$$)
  1668 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1669 00000092 68[F6010000]                                    push    czIntStackLimit                                 ;store message offset
  1670 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  ;
  1673                                  ;       INT13   General Protection Fault
  1674                                  ;
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                                          menter  protection                                      ;protection fault interrupt
  1676                              <1> ?%1 equ ($-$$)
  1677 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1678 0000009E 68[02020000]                                    push    czIntProtection                                 ;store message offset
  1679 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                  ;
  1682                                  ;       INT14   Reserved
  1683                                  ;
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                                          menter  int14                                           ;(reserved)
  1685                              <1> ?%1 equ ($-$$)
  1686 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1687 000000AA 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1688 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  ;
  1691                                  ;       INT15   Reserved
  1692                                  ;
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                                          menter  int15                                           ;(reserved)
  1694                              <1> ?%1 equ ($-$$)
  1695 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1696 000000B6 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1697 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                  ;
  1700                                  ;       INT16   Coprocessor Calculation
  1701                                  ;
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                                          menter  coproccalc                                      ;coprocessor calculation
  1703                              <1> ?%1 equ ($-$$)
  1704 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1705 000000C2 68[1B020000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1706 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  ;
  1709                                  ;       INT17   Reserved
  1710                                  ;
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                                          menter  int17                                           ;(reserved)
  1712                              <1> ?%1 equ ($-$$)
  1713 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1714 000000CE 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1715 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  ;
  1718                                  ;       INT18   Reserved
  1719                                  ;
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                                          menter  int18                                           ;(reserved)
  1721                              <1> ?%1 equ ($-$$)
  1722 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1723 000000D7 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1724 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  ;
  1727                                  ;       INT19   Reserved
  1728                                  ;
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                                          menter  int19                                           ;(reserved)
  1730                              <1> ?%1 equ ($-$$)
  1731 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1732 000000E0 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1733 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  ;
  1736                                  ;       INT20   Reserved
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                                          menter  int20                                           ;(reserved)
  1739                              <1> ?%1 equ ($-$$)
  1740 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1741 000000E9 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1742 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                  ;
  1745                                  ;       INT21   Reserved
  1746                                  ;
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                                          menter  int21                                           ;(reserved)
  1748                              <1> ?%1 equ ($-$$)
  1749 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1750 000000F2 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1751 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                  ;
  1754                                  ;       INT22   Reserved
  1755                                  ;
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                                          menter  int22                                           ;(reserved)
  1757                              <1> ?%1 equ ($-$$)
  1758 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1759 000000FB 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1760 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                  ;
  1763                                  ;       INT23   Reserved
  1764                                  ;
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                                          menter  int23                                           ;(reserved)
  1766                              <1> ?%1 equ ($-$$)
  1767 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1768 00000104 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1769 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                  ;
  1772                                  ;       INT24   Reserved
  1773                                  ;
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                                          menter  int24                                           ;(reserved)
  1775                              <1> ?%1 equ ($-$$)
  1776 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1777 0000010D 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1778 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  ;
  1781                                  ;       INT25   Reserved
  1782                                  ;
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                                          menter  int25                                           ;(reserved)
  1784                              <1> ?%1 equ ($-$$)
  1785 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1786 00000116 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1787 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                  ;
  1790                                  ;       INT26   Reserved
  1791                                  ;
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                                          menter  int26                                           ;(reserved)
  1793                              <1> ?%1 equ ($-$$)
  1794 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1795 0000011F 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1796 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                  ;
  1799                                  ;       INT27   Reserved
  1800                                  ;
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                                          menter  int27                                           ;(reserved)
  1802                              <1> ?%1 equ ($-$$)
  1803 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1804 00000128 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1805 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                  ;
  1808                                  ;       INT28   Reserved
  1809                                  ;
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                                          menter  int28                                           ;(reserved)
  1811                              <1> ?%1 equ ($-$$)
  1812 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1813 00000131 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1814 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  ;
  1817                                  ;       INT29   Reserved
  1818                                  ;
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                                          menter  int29                                           ;(reserved)
  1820                              <1> ?%1 equ ($-$$)
  1821 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1822 0000013A 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1823 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                  ;
  1826                                  ;       INT30   Reserved
  1827                                  ;
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                                          menter  int30                                           ;(reserved)
  1829                              <1> ?%1 equ ($-$$)
  1830 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1831 00000143 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1832 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                  ;
  1835                                  ;       INT31   Reserved
  1836                                  ;
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                                          menter  int31                                           ;(reserved)
  1838                              <1> ?%1 equ ($-$$)
  1839 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1840 0000014C 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1841 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                  ;
  1844                                  ;       Routine:        ReportInterrupt
  1845                                  ;
  1846                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1847                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1848                                  ;
  1849                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1850                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853 00000153 58                      ReportInterrupt         pop     eax                                             ;error message address
  1854 00000154 58                                              pop     eax                                             ;interrupt number
  1855 00000155 CF                                              iretd                                                   ;return
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  ;
  1858                                  ;       Processor Interrupt Name Strings
  1859                                  ;
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861 00000156 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  1861 0000015F 6279207A65726F00   
  1862 00000167 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  1862 00000170 657000             
  1863 00000173 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  1863 0000017C 626C6520696E746572-
  1863 00000185 7275707400         
  1864 0000018A 427265616B00            czIntBreak              db      "Break",0
  1865 00000190 496E746F00              czIntInto               db      "Into",0
  1866 00000195 426F756E647300          czIntBounds             db      "Bounds",0
  1867 0000019C 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  1867 000001A5 74696F6E20436F6465-
  1867 000001AE 00                 
  1868 000001AF 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  1868 000001B8 6573736F7200       
  1869 000001BE 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  1869 000001C7 756C7400           
  1870 000001CB 4F706572616E6400        czIntOperand            db      "Operand",0
  1871 000001D3 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  1871 000001DC 537461746520536567-
  1871 000001E5 6D656E7400         
  1872 000001EA 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  1872 000001F3 6E7400             
  1873 000001F6 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  1873 000001FF 697400             
  1874 00000202 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  1874 0000020B 726F74656374696F6E-
  1874 00000214 204661756C7400     
  1875 0000021B 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1875 00000224 6F722043616C63756C-
  1875 0000022D 6174696F6E00       
  1876 00000233 526573657276656400      czIntReserved           db      "Reserved",0
  1877                                  ;=======================================================================================================================
  1878                                  ;
  1879                                  ;       Hardware Device Interupts
  1880                                  ;
  1881                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1882                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1883                                  ;       (BX=2028h).
  1884                                  ;
  1885                                  ;=======================================================================================================================
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       IRQ0    Clock Tick Interrupt
  1889                                  ;
  1890                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1891                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1892                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1893                                  ;
  1894                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1895                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1896                                  ;
  1897                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1898                                  ;       zero, the floppy disk motors are turned off.
  1899                                  ;
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                                          menter  clocktick                                       ;clock tick interrupt
  1901                              <1> ?%1 equ ($-$$)
  1902 0000023C 50                                              push    eax                                             ;save non-volatile regs
  1903 0000023D 52                                              push    edx                                             ;
  1904 0000023E 1E                                              push    ds                                              ;
  1905                                  ;
  1906                                  ;       Update the clock tick count and the elapsed days as needed.
  1907                                  ;
  1908 0000023F 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1909 00000241 1F                                              pop     ds                                              ;... into data segment register
  1910 00000242 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1911 00000247 40                                              inc     eax                                             ;increment clock ticks
  1912 00000248 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1913 0000024D 7208                                            jb      irq0.10                                         ;no, skip ahead
  1914 0000024F FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1915 00000255 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1916 00000257 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1917                                  ;
  1918                                  ;       Decrement floppy disk motor timeout.
  1919                                  ;
  1920 0000025C 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1921 00000263 741E                                            je      irq0.20                                         ;yes, skip ahead
  1922 00000265 FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1923 0000026B 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1924                                  ;
  1925                                  ;       Turn off the floppy disk motor if appropriate.
  1926                                  ;
  1927 0000026D FB                                              sti                                                     ;enable maskable interrupts
  1928 0000026E B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1929 00000270 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1930 00000272 EC                                              in      al,dx                                           ;FDC main status byte
  1931 00000273 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1932 00000275 75F7                                            jnz     irq0.15                                         ;wait while busy
  1933 00000277 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1934 00000279 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1935 0000027E B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1936 00000280 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1937 00000282 EE                                              out     dx,al                                           ;turn motor off
  1938                                  ;
  1939                                  ;       Signal the end of the hardware interrupt.
  1940                                  ;
  1941 00000283 E8CA050000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1942                                  ;
  1943                                  ;       Restore and return.
  1944                                  ;
  1945 00000288 1F                                              pop     ds                                              ;restore modified regs
  1946 00000289 5A                                              pop     edx                                             ;
  1947 0000028A 58                                              pop     eax                                             ;
  1948 0000028B CF                                              iretd                                                   ;return
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                  ;
  1951                                  ;       IRQ1    Keyboard Interrupt
  1952                                  ;
  1953                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1954                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1955                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1956                                  ;       ALL modified registers upon return.
  1957                                  ;
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                                          menter  keyboard                                        ;keyboard interrrupt
  1959                              <1> ?%1 equ ($-$$)
  1960 0000028C 50                                              push    eax                                             ;save non-volatile regs
  1961 0000028D 53                                              push    ebx                                             ;
  1962 0000028E 51                                              push    ecx                                             ;
  1963 0000028F 56                                              push    esi                                             ;
  1964 00000290 1E                                              push    ds                                              ;
  1965 00000291 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1966 00000293 1F                                              pop     ds                                              ;... into data segment register
  1967 00000294 30C0                                            xor     al,al                                           ;zero
  1968 00000296 A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  1969 0000029B A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  1970 000002A0 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  1971 000002A5 A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  1972 000002AA A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  1973 000002AF A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  1974 000002B4 B020                                            mov     al,' '                                          ;space
  1975 000002B6 A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  1976 000002BB B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1977 000002BD F6D0                                            not     al                                              ;controller timeout mask
  1978 000002BF 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1979 000002C5 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  1980 000002CB 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  1981 000002D1 E8B7050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1982 000002D6 0F84AD010000                                    jz      irq1.140                                        ;yes, skip ahead
  1983 000002DC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  1984 000002DE A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  1985 000002E3 88C4                                            mov     ah,al                                           ;copy scan code 0
  1986 000002E5 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1987 000002E7 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1988 000002EA 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  1989 000002F0 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1990 000002F3 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  1991 000002F9 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1992 000002FB 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1993 000002FE 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  1994 00000304 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1995 00000307 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  1996 0000030D B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  1997 0000030F 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1998 00000312 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  1999 00000318 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2000 0000031B 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2001 00000321 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2002 00000323 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2003 00000326 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2004 0000032C 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2005 0000032F 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2006 00000335 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2007 00000337 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2008 0000033A 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2009 00000340 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2010 00000342 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2011 00000345 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2012 0000034B B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2013 0000034D 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2014 00000350 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2015 00000356 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2016 00000359 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2017 0000035F E829050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2018 00000364 0F841F010000                                    jz      irq1.140                                        ;yes, skip ahead
  2019 0000036A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2020 0000036C A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2021 00000371 88C4                                            mov     ah,al                                           ;copy scan code 1
  2022 00000373 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2023 00000375 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2024 00000378 7456                                            je      irq1.30                                         ;yes, set flag
  2025 0000037A 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2026 0000037D 7455                                            je      irq1.40                                         ;yes, reset flag
  2027 0000037F B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2028 00000381 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2029 00000384 744A                                            je      irq1.30                                         ;yes, set flag
  2030 00000386 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2031 00000389 7449                                            je      irq1.40                                         ;yes, reset flag
  2032 0000038B 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2033 0000038E 0F84BB000000                                    je      irq1.80                                         ;yes, skip ahead
  2034 00000394 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2035 00000397 0F84B2000000                                    je      irq1.80                                         ;yes, skip ahead
  2036 0000039D 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2037 000003A0 7405                                            je      irq1.10                                         ;yes, continue
  2038 000003A2 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2039 000003A5 7524                                            jne     irq1.20                                         ;no, skip ahead
  2040 000003A7 E8E1040000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2041 000003AC 0F84D7000000                                    jz      irq1.140                                        ;yes, skip ahead
  2042 000003B2 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2043 000003B4 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2044 000003B9 E8CF040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2045 000003BE 0F84C5000000                                    jz      irq1.140                                        ;yes, skip ahead
  2046 000003C4 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2047 000003C6 A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2048 000003CB E9C1000000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2049 000003D0 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2050 000003D2 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2051 000003D4 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2052 000003D6 20C3                                            and     bl,al                                           ;reset shift flag
  2053 000003D8 EB07                                            jmp     irq1.60                                         ;skip ahead
  2054 000003DA 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2055 000003DC E87D040000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2056 000003E1 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2057 000003E7 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2058 000003ED E8F2020000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2059 000003F2 E99A000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2060 000003F7 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2061 000003FA 7553                                            jne     irq1.80                                         ;no continue
  2062 000003FC E88C040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2063 00000401 0F8482000000                                    jz      irq1.140                                        ;yes, skip ahead
  2064 00000407 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2065 00000409 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2066 0000040E 88C4                                            mov     ah,al                                           ;copy scan code 1
  2067 00000410 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2068 00000413 757C                                            jne     irq1.150                                        ;no, finish keyboard handling
  2069 00000415 E873040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2070 0000041A 746D                                            jz      irq1.140                                        ;yes, skip ahead
  2071 0000041C E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2072 0000041E A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2073 00000423 E865040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2074 00000428 745F                                            jz      irq1.140                                        ;yes, skip ahead
  2075 0000042A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2076 0000042C A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2077 00000431 E857040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2078 00000436 7451                                            jz      irq1.140                                        ;yes, skip ahead
  2079 00000438 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2080 0000043A A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2081 0000043F E849040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2082 00000444 7443                                            jz      irq1.140                                        ;yes, skip ahead
  2083 00000446 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2084 00000448 A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2085 0000044D EB42                                            jmp     irq1.150                                        ;continue
  2086 0000044F 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2087 00000451 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2088 00000454 7531                                            jnz     irq1.130                                        ;yes, skip ahead
  2089 00000456 BE[A1040000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2090 0000045B F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2091 0000045E 7405                                            jz      irq1.90                                         ;no, skip ahead
  2092 00000460 BE[21050000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2093 00000465 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2094 00000468 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2095 0000046C F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2096 0000046F 7411                                            jz      irq1.100                                        ;no skip ahead
  2097 00000471 88C1                                            mov     cl,al                                           ;copy ASCII code
  2098 00000473 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2099 00000476 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2100 00000479 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2101 0000047B 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2102 0000047E 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2103 00000480 3420                                            xor     al,EASCIICASE                                   ;switch case
  2104 00000482 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2105 00000487 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2106 00000489 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2107 0000048B 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2108 00000491 E8F6010000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2109 00000496 E8B7030000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2110 0000049B 1F                                              pop     ds                                              ;restore non-volatile regs
  2111 0000049C 5E                                              pop     esi                                             ;
  2112 0000049D 59                                              pop     ecx                                             ;
  2113 0000049E 5B                                              pop     ebx                                             ;
  2114 0000049F 58                                              pop     eax                                             ;
  2115 000004A0 CF                                              iretd                                                   ;return
  2116                                  ;-----------------------------------------------------------------------------------------------------------------------
  2117                                  ;       Scan-Code to ASCII Translation Tables
  2118                                  ;-----------------------------------------------------------------------------------------------------------------------
  2119 000004A1 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2120 000004A9 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2121 000004B1 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2122 000004B9 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2123 000004C1 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2124 000004C9 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2125 000004D1 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2126 000004D9 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2127 000004E1 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2128 000004E9 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2129 000004F1 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2130 000004F9 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2131 00000501 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2132 00000509 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2133 00000511 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2134 00000519 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2135 00000521 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2136 00000529 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2137 00000531 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2138 00000539 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2139 00000541 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2140 00000549 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2141 00000551 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2142 00000559 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2143 00000561 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2144 00000569 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2145 00000571 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2146 00000579 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2147 00000581 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2148 00000589 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2149 00000591 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2150 00000599 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  ;
  2153                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2154                                  ;
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156                                                          menter  iochannel                                       ;secondary 8259A cascade
  2156                              <1> ?%1 equ ($-$$)
  2157 000005A1 50                                              push    eax                                             ;save modified regs
  2158 000005A2 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  ;
  2161                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2162                                  ;
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                                          menter  com2                                            ;serial port 2 interrupt
  2164                              <1> ?%1 equ ($-$$)
  2165 000005A4 50                                              push    eax                                             ;save modified regs
  2166 000005A5 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  ;
  2169                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2170                                  ;
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                                          menter  com1                                            ;serial port 1 interrupt
  2172                              <1> ?%1 equ ($-$$)
  2173 000005A7 50                                              push    eax                                             ;save modified regs
  2174 000005A8 EB39                                            jmp     hwint                                           ;end interrupt and return
  2175                                  ;-----------------------------------------------------------------------------------------------------------------------
  2176                                  ;
  2177                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2178                                  ;
  2179                                  ;-----------------------------------------------------------------------------------------------------------------------
  2180                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2180                              <1> ?%1 equ ($-$$)
  2181 000005AA 50                                              push    eax                                             ;save modified regs
  2182 000005AB EB36                                            jmp     hwint                                           ;end interrupt and return
  2183                                  ;-----------------------------------------------------------------------------------------------------------------------
  2184                                  ;
  2185                                  ;       IRQ6    Diskette Hardware Interrupt
  2186                                  ;
  2187                                  ;-----------------------------------------------------------------------------------------------------------------------
  2188                                                          menter  diskette                                        ;floppy disk interrupt
  2188                              <1> ?%1 equ ($-$$)
  2189 000005AD 50                                              push    eax                                             ;save non-volatile regs
  2190 000005AE 1E                                              push    ds                                              ;
  2191 000005AF 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2192 000005B1 1F                                              pop     ds                                              ;... into DS register
  2193 000005B2 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2194 000005B7 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2195 000005B9 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2196 000005BE 1F                                              pop     ds                                              ;restore non-volatile regs
  2197 000005BF EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                  ;
  2200                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2201                                  ;
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2203                              <1> ?%1 equ ($-$$)
  2204 000005C1 50                                              push    eax                                             ;save modified regs
  2205 000005C2 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                  ;
  2208                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2209                                  ;
  2210                                  ;-----------------------------------------------------------------------------------------------------------------------
  2211                                                          menter  rtclock                                         ;real-time clock interrupt
  2211                              <1> ?%1 equ ($-$$)
  2212 000005C4 50                                              push    eax                                             ;save modified regs
  2213 000005C5 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2214                                  ;-----------------------------------------------------------------------------------------------------------------------
  2215                                  ;
  2216                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2219                              <1> ?%1 equ ($-$$)
  2220 000005C7 50                                              push    eax                                             ;save modified regs
  2221 000005C8 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                  ;
  2224                                  ;       IRQ10   Reserved Hardware Interrupt
  2225                                  ;
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                                          menter  irq10                                           ;reserved
  2227                              <1> ?%1 equ ($-$$)
  2228 000005CA 50                                              push    eax                                             ;save modified regs
  2229 000005CB EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;
  2232                                  ;       IRQ11   Reserved Hardware Interrupt
  2233                                  ;
  2234                                  ;-----------------------------------------------------------------------------------------------------------------------
  2235                                                          menter  irq11                                           ;reserved
  2235                              <1> ?%1 equ ($-$$)
  2236 000005CD 50                                              push    eax                                             ;save modified regs
  2237 000005CE EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2238                                  ;-----------------------------------------------------------------------------------------------------------------------
  2239                                  ;
  2240                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2241                                  ;
  2242                                  ;-----------------------------------------------------------------------------------------------------------------------
  2243                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2243                              <1> ?%1 equ ($-$$)
  2244 000005D0 50                                              push    eax                                             ;save modified regs
  2245 000005D1 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  ;
  2248                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2249                                  ;
  2250                                  ;-----------------------------------------------------------------------------------------------------------------------
  2251                                                          menter  coprocessor                                     ;coprocessor interrupt
  2251                              <1> ?%1 equ ($-$$)
  2252 000005D3 50                                              push    eax                                             ;save modified regs
  2253 000005D4 EB06                                            jmp     hwwint                                          ;end interrupt and return
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                  ;
  2256                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2257                                  ;
  2258                                  ;-----------------------------------------------------------------------------------------------------------------------
  2259                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2259                              <1> ?%1 equ ($-$$)
  2260 000005D6 50                                              push    eax                                             ;save modified regs
  2261 000005D7 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2262                                  ;-----------------------------------------------------------------------------------------------------------------------
  2263                                  ;
  2264                                  ;       IRQ15   Reserved Hardware Interrupt
  2265                                  ;
  2266                                  ;-----------------------------------------------------------------------------------------------------------------------
  2267                                                          menter  irq15                                           ;reserved
  2267                              <1> ?%1 equ ($-$$)
  2268 000005D9 50                                              push    eax                                             ;save modified regs
  2269 000005DA EB00                                            jmp     hwwint                                          ;end interrupt and return
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271                                  ;
  2272                                  ;       Exit from hardware interrupt
  2273                                  ;
  2274                                  ;-----------------------------------------------------------------------------------------------------------------------
  2275 000005DC E877020000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2276 000005E1 EB05                                            jmp     hwint90                                         ;skip ahead
  2277 000005E3 E86A020000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2278 000005E8 58                      hwint90                 pop     eax                                             ;restore modified regs
  2279 000005E9 CF                                              iretd                                                   ;return from interrupt
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281                                  ;
  2282                                  ;       INT 30h Operating System Software Service Interrupt
  2283                                  ;
  2284                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2285                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2286                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2287                                  ;       the entry address of the specific function from a table.
  2288                                  ;
  2289                                  ;-----------------------------------------------------------------------------------------------------------------------
  2290                                                          menter  svc
  2290                              <1> ?%1 equ ($-$$)
  2291 000005EA 3C03                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2292 000005EC 730D                                            jae     svc90                                           ;yes, skip ahead
  2293 000005EE 0FB6C0                                          movzx   eax,al                                          ;function
  2294 000005F1 C1E002                                          shl     eax,2                                           ;offset into table
  2295 000005F4 2EFF90[FC050000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2296 000005FB CF                      svc90                   iretd                                                   ;return from interrupt
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                  ;
  2299                                  ;       Service Request Table
  2300                                  ;
  2301                                  ;
  2302                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2303                                  ;
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2305                              <1> tsvc :
  2305                              <1> e%1 equ ($-tsvc)/4
  2305 000005FC [AB070000]          <1>  dd %1
  2306                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2306                              <1> e%1 equ ($-tsvc)/4
  2306 00000600 [28080000]          <1>  dd %1
  2307                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2307                              <1> e%1 equ ($-tsvc)/4
  2307 00000604 [7E070000]          <1>  dd %1
  2308                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2309                                  ;-----------------------------------------------------------------------------------------------------------------------
  2310                                  ;
  2311                                  ;       Service Request Macros
  2312                                  ;
  2313                                  ;       These macros provide positional parameterization of service request calls.
  2314                                  ;
  2315                                  ;-----------------------------------------------------------------------------------------------------------------------
  2316                                  %macro                  clearConsoleScreen 0
  2317                                                          mov     al,eClearConsoleScreen                          ;function code
  2318                                                          int     _svc                                            ;invoke OS service
  2319                                  %endmacro
  2320                                  %macro                  placeCursor 0
  2321                                                          mov     al,ePlaceCursor                                 ;function code
  2322                                                          int     _svc                                            ;invoke OS service
  2323                                  %endmacro
  2324                                  %macro                  putConsoleString 1
  2325                                                          mov     edx,%1                                          ;string address
  2326                                                          mov     al,ePutConsoleString                            ;function code
  2327                                                          int     _svc                                            ;invoke OS service
  2328                                  %endmacro
  2329                                  ;=======================================================================================================================
  2330                                  ;
  2331                                  ;       Kernel Function Library
  2332                                  ;
  2333                                  ;=======================================================================================================================
  2334                                  ;=======================================================================================================================
  2335                                  ;
  2336                                  ;       Console Helper Routines
  2337                                  ;
  2338                                  ;       FirstConsoleColumn
  2339                                  ;       NextConsoleColumn
  2340                                  ;       NextConsoleRow
  2341                                  ;       PutConsoleChar
  2342                                  ;       PutConsoleHexByte
  2343                                  ;       PutConsoleOIAChar
  2344                                  ;       PutConsoleOIAShift
  2345                                  ;       PutConsoleString
  2346                                  ;
  2347                                  ;=======================================================================================================================
  2348                                  ;-----------------------------------------------------------------------------------------------------------------------
  2349                                  ;
  2350                                  ;       Routine:        FirstConsoleColumn
  2351                                  ;
  2352                                  ;       Description:    This routine resets the console column to start of the row.
  2353                                  ;
  2354                                  ;       In:             DS      OS data selector
  2355                                  ;
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357 00000608 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2358 0000060A A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2359 0000060F C3                                              ret                                                     ;return
  2360                                  ;-----------------------------------------------------------------------------------------------------------------------
  2361                                  ;
  2362                                  ;       Routine:        NextConsoleColumn
  2363                                  ;
  2364                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2365                                  ;                       incremented if the end of the current row is reached.
  2366                                  ;
  2367                                  ;       In:             DS      OS data selector
  2368                                  ;
  2369                                  ;-----------------------------------------------------------------------------------------------------------------------
  2370 00000610 A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2371 00000615 FEC0                                            inc     al                                              ;increment column
  2372 00000617 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2373 0000061C 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2374 0000061E 720A                                            jb      .10                                             ;no, skip ahead
  2375 00000620 E8E3FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2376 00000625 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2377 0000062A C3                      .10                     ret                                                     ;return
  2378                                  ;-----------------------------------------------------------------------------------------------------------------------
  2379                                  ;
  2380                                  ;       Routine:        NextConsoleRow
  2381                                  ;
  2382                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2383                                  ;
  2384                                  ;       In:             DS      OS data selector
  2385                                  ;
  2386                                  ;-----------------------------------------------------------------------------------------------------------------------
  2387 0000062B A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2388 00000630 FEC0                                            inc     al                                              ;increment row
  2389 00000632 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2390 00000637 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2391 00000639 7211                                            jb      .10                                             ;no, skip ahead
  2392 0000063B E8A6010000                                      call    ScrollConsoleRow                                ;scroll up one row
  2393 00000640 A001080000                                      mov     al,[wbConsoleRow]                               ;row
  2394 00000645 FEC8                                            dec     al                                              ;decrement row
  2395 00000647 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2396 0000064C C3                      .10                     ret                                                     ;return
  2397                                  ;-----------------------------------------------------------------------------------------------------------------------
  2398                                  ;
  2399                                  ;       Routine:        PutConsoleChar
  2400                                  ;
  2401                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2402                                  ;
  2403                                  ;       In:             AL      ASCII character
  2404                                  ;                       DS      OS data selector
  2405                                  ;
  2406                                  ;-----------------------------------------------------------------------------------------------------------------------
  2407 0000064D 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2408 0000064E 06                                              push    es                                              ;
  2409 0000064F 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2410 00000651 07                                              pop     es                                              ;... into extra segment reg
  2411 00000652 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2412 00000658 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  2413 0000065E E8AF010000                                      call    SetConsoleChar                                  ;put character at row, column
  2414 00000663 07                                              pop     es                                              ;restore non-volatile regs
  2415 00000664 59                                              pop     ecx                                             ;
  2416 00000665 C3                                              ret                                                     ;return
  2417                                  ;-----------------------------------------------------------------------------------------------------------------------
  2418                                  ;
  2419                                  ;       Routine:        PutConsoleHexByte
  2420                                  ;
  2421                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2422                                  ;
  2423                                  ;       In:             AL      byte value
  2424                                  ;                       CL      column
  2425                                  ;                       CH      row
  2426                                  ;                       DS      OS data selector
  2427                                  ;                       ES      CGA selector
  2428                                  ;
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430 00000666 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2431 00000667 88C3                                            mov     bl,al                                           ;save byte value
  2432 00000669 C0E804                                          shr     al,4                                            ;hi-order nybble
  2433 0000066C 0C30                                            or      al,030h                                         ;apply ASCII zone
  2434 0000066E 3C3A                                            cmp     al,03ah                                         ;numeric?
  2435 00000670 7202                                            jb      .10                                             ;yes, skip ahead
  2436 00000672 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2437 00000674 E899010000              .10                     call    SetConsoleChar                                  ;display ASCII character
  2438 00000679 88D8                                            mov     al,bl                                           ;byte value
  2439 0000067B 240F                                            and     al,0fh                                          ;lo-order nybble
  2440 0000067D 0C30                                            or      al,30h                                          ;apply ASCII zone
  2441 0000067F 3C3A                                            cmp     al,03ah                                         ;numeric?
  2442 00000681 7202                                            jb      .20                                             ;yes, skip ahead
  2443 00000683 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2444 00000685 E888010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2445 0000068A 5B                                              pop     ebx                                             ;restore non-volatile regs
  2446 0000068B C3                                              ret                                                     ;return
  2447                                  ;-----------------------------------------------------------------------------------------------------------------------
  2448                                  ;
  2449                                  ;       Routine:        PutConsoleOIAChar
  2450                                  ;
  2451                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2452                                  ;
  2453                                  ;       In:             DS      OS data selector
  2454                                  ;
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456 0000068C 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2457 0000068D 51                                              push    ecx                                             ;
  2458 0000068E 56                                              push    esi                                             ;
  2459 0000068F 1E                                              push    ds                                              ;
  2460 00000690 06                                              push    es                                              ;
  2461 00000691 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2462 00000693 1F                                              pop     ds                                              ;... into data segment register
  2463 00000694 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2464 00000696 07                                              pop     es                                              ;... into extra segment register
  2465 00000697 BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2466 0000069C B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2467 0000069E B300                                            mov     bl,0                                            ;starting column
  2468 000006A0 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2469 000006A5 51                      .10                     push    ecx                                             ;save remaining count
  2470 000006A6 89D9                                            mov     ecx,ebx                                         ;row, column
  2471 000006A8 AC                                              lodsb                                                   ;read scan code
  2472 000006A9 08C0                                            or      al,al                                           ;scan code present?
  2473 000006AB 7407                                            jz      .20                                             ;no, skip ahead
  2474 000006AD E8B4FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2475 000006B2 EB0E                                            jmp     .30                                             ;continue
  2476 000006B4 B020                    .20                     mov     al,' '                                          ;ASCII space
  2477 000006B6 E857010000                                      call    SetConsoleChar                                  ;display space
  2478 000006BB B020                                            mov     al,' '                                          ;ASCII space
  2479 000006BD E850010000                                      call    SetConsoleChar                                  ;display space
  2480 000006C2 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2481 000006C5 59                                              pop     ecx                                             ;restore remaining
  2482 000006C6 E2DD                                            loop    .10                                             ;next code
  2483 000006C8 A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2484 000006CD 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2485 000006CF 720D                                            jb      .40                                             ;no, skip ahead
  2486 000006D1 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2487 000006D3 7709                                            ja      .40                                             ;no, skip ahead
  2488 000006D5 88FD                                            mov     ch,bh                                           ;OIA row
  2489 000006D7 B128                                            mov     cl,40                                           ;character display column
  2490 000006D9 E834010000                                      call    SetConsoleChar                                  ;display ASCII character
  2491 000006DE 07                      .40                     pop     es                                              ;restore non-volatile regs
  2492 000006DF 1F                                              pop     ds                                              ;
  2493 000006E0 5E                                              pop     esi                                             ;
  2494 000006E1 59                                              pop     ecx                                             ;
  2495 000006E2 5B                                              pop     ebx                                             ;
  2496 000006E3 C3                                              ret                                                     ;return
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498                                  ;
  2499                                  ;       Routine:        PutConsoleOIAShift
  2500                                  ;
  2501                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2502                                  ;
  2503                                  ;       In:             BL      shift flags
  2504                                  ;                       BH      lock flags
  2505                                  ;                       DS      OS data selector
  2506                                  ;
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508 000006E4 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2509 000006E5 06                                              push    es                                              ;
  2510 000006E6 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2511 000006E8 07                                              pop     es                                              ;... into ES register
  2512 000006E9 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2513 000006EB B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2514 000006ED F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2515 000006F0 7402                                            jz      .10                                             ;no, skip ahead
  2516 000006F2 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2517 000006F4 B10E                    .10                     mov     cl,14                                           ;indicator column
  2518 000006F6 E817010000                                      call    SetConsoleChar                                  ;display ASCII character
  2519 000006FB B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2520 000006FD F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2521 00000700 7402                                            jz      .20                                             ;no, skip ahead
  2522 00000702 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2523 00000704 B140                    .20                     mov     cl,64                                           ;indicator column
  2524 00000706 E807010000                                      call    SetConsoleChar                                  ;display ASCII character
  2525 0000070B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2526 0000070D F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2527 00000710 7402                                            jz      .30                                             ;no, skip ahead
  2528 00000712 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2529 00000714 B10F                    .30                     mov     cl,15                                           ;indicator column
  2530 00000716 E8F7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2531 0000071B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2532 0000071D F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2533 00000720 7402                                            jz      .40                                             ;no, skip ahead
  2534 00000722 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2535 00000724 B13F                    .40                     mov     cl,63                                           ;indicator column
  2536 00000726 E8E7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2537 0000072B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2538 0000072D F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2539 00000730 7402                                            jz      .50                                             ;no, skip ahead
  2540 00000732 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2541 00000734 B110                    .50                     mov     cl,16                                           ;indicator column
  2542 00000736 E8D7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2543 0000073B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2544 0000073D F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2545 00000740 7402                                            jz      .60                                             ;no, skip ahead
  2546 00000742 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2547 00000744 B13E                    .60                     mov     cl,62                                           ;indicator column
  2548 00000746 E8C7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2549 0000074B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2550 0000074D F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2551 00000750 7402                                            jz      .70                                             ;no, skip ahead
  2552 00000752 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2553 00000754 B14E                    .70                     mov     cl,78                                           ;indicator column
  2554 00000756 E8B7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2555 0000075B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2556 0000075D F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2557 00000760 7402                                            jz      .80                                             ;no, skip ahead
  2558 00000762 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2559 00000764 B14D                    .80                     mov     cl,77                                           ;indicator column
  2560 00000766 E8A7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2561 0000076B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2562 0000076D F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2563 00000770 7402                                            jz      .90                                             ;no, skip ahead
  2564 00000772 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2565 00000774 B14C                    .90                     mov     cl,76                                           ;indicator column
  2566 00000776 E897000000                                      call    SetConsoleChar                                  ;display ASCII character
  2567 0000077B 07                                              pop     es                                              ;restore non-volatile regs
  2568 0000077C 59                                              pop     ecx                                             ;
  2569 0000077D C3                                              ret                                                     ;return
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  ;
  2572                                  ;       Routine:        PutConsoleString
  2573                                  ;
  2574                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2575                                  ;                       console position as needed.
  2576                                  ;
  2577                                  ;       In:             EDX     source address
  2578                                  ;                       DS      OS data selector
  2579                                  ;
  2580                                  ;-----------------------------------------------------------------------------------------------------------------------
  2581 0000077E 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  2582 0000077F 89D6                                            mov     esi,edx                                         ;source address
  2583 00000781 FC                                              cld                                                     ;forward strings
  2584 00000782 AC                      .10                     lodsb                                                   ;ASCII character
  2585 00000783 08C0                                            or      al,al                                           ;end of string?
  2586 00000785 7422                                            jz      .40                                             ;yes, skip ahead
  2587 00000787 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  2588 00000789 7507                                            jne     .20                                             ;no, skip ahead
  2589 0000078B E878FEFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  2590 00000790 EBF0                                            jmp     .10                                             ;next character
  2591 00000792 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2592 00000794 7507                                            jne     .30                                             ;no, skip ahead
  2593 00000796 E890FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  2594 0000079B EBE5                                            jmp     .10                                             ;next character
  2595 0000079D E8ABFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  2596 000007A2 E869FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  2597 000007A7 EBD9                                            jmp     .10                                             ;next character
  2598 000007A9 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  2599 000007AA C3                                              ret                                                     ;return
  2600                                  ;=======================================================================================================================
  2601                                  ;
  2602                                  ;       Memory-Mapped Video Routines
  2603                                  ;
  2604                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2605                                  ;
  2606                                  ;       ClearConsoleScreen
  2607                                  ;       ScrollConsoleRow
  2608                                  ;       SetConsoleChar
  2609                                  ;
  2610                                  ;=======================================================================================================================
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       Routine:        ClearConsoleScreen
  2614                                  ;
  2615                                  ;       Description:    This routine clears the console (CGA) screen.
  2616                                  ;
  2617                                  ;-----------------------------------------------------------------------------------------------------------------------
  2618 000007AB 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2619 000007AC 57                                              push    edi                                             ;
  2620 000007AD 1E                                              push    ds                                              ;
  2621 000007AE 06                                              push    es                                              ;
  2622 000007AF 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  2623 000007B1 1F                                              pop     ds                                              ;... into DS register
  2624 000007B2 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2625 000007B4 07                                              pop     es                                              ;... into ES register
  2626 000007B5 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  2627 000007BA B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2628 000007BF 31FF                                            xor     edi,edi                                         ;target offset
  2629 000007C1 FC                                              cld                                                     ;forward strings
  2630 000007C2 F3AB                                            rep     stosd                                           ;reset screen body
  2631 000007C4 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2632 000007C9 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2633 000007CE F3AB                                            rep     stosd                                           ;reset OIA line
  2634 000007D0 30C0                                            xor     al,al                                           ;zero register
  2635 000007D2 A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  2636 000007D7 A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  2637 000007DC E847000000                                      call    PlaceCursor                                     ;place cursor at current position
  2638 000007E1 07                                              pop     es                                              ;restore non-volatile regs
  2639 000007E2 1F                                              pop     ds                                              ;
  2640 000007E3 5F                                              pop     edi                                             ;
  2641 000007E4 59                                              pop     ecx                                             ;
  2642 000007E5 C3                                              ret                                                     ;return
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                  ;
  2645                                  ;       Routine:        ScrollConsoleRow
  2646                                  ;
  2647                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2648                                  ;
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650 000007E6 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2651 000007E7 56                                              push    esi                                             ;
  2652 000007E8 57                                              push    edi                                             ;
  2653 000007E9 1E                                              push    ds                                              ;
  2654 000007EA 06                                              push    es                                              ;
  2655 000007EB 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2656 000007ED 1F                                              pop     ds                                              ;... into DS
  2657 000007EE 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2658 000007F0 07                                              pop     es                                              ;... into ES
  2659 000007F1 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2660 000007F6 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2661 000007FB 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  2662 000007FD FC                                              cld                                                     ;forward strings
  2663 000007FE F3A5                                            rep     movsd                                           ;move 24 lines up
  2664 00000800 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2665 00000805 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2666 0000080A F3AB                                            rep     stosd                                           ;clear bottom row
  2667 0000080C 07                                              pop     es                                              ;restore non-volatile regs
  2668 0000080D 1F                                              pop     ds                                              ;
  2669 0000080E 5F                                              pop     edi                                             ;
  2670 0000080F 5E                                              pop     esi                                             ;
  2671 00000810 59                                              pop     ecx                                             ;
  2672 00000811 C3                                              ret                                                     ;return
  2673                                  ;-----------------------------------------------------------------------------------------------------------------------
  2674                                  ;
  2675                                  ;       Routine:        SetConsoleChar
  2676                                  ;
  2677                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2678                                  ;
  2679                                  ;       In:             AL      ASCII character
  2680                                  ;                       CL      column
  2681                                  ;                       CH      row
  2682                                  ;                       ES      CGA selector
  2683                                  ;
  2684                                  ;       Out:            EAX     last target address written (ES:)
  2685                                  ;                       CL      column + 1
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688 00000812 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  2689 00000814 0FB6C5                                          movzx   eax,ch                                          ;row
  2690 00000817 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  2691 00000819 F6E4                                            mul     ah                                              ;row * cols/row
  2692 0000081B 00C8                                            add     al,cl                                           ;add column
  2693 0000081D 80D400                                          adc     ah,0                                            ;handle carry
  2694 00000820 D1E0                                            shl     eax,1                                           ;screen offset
  2695 00000822 268810                                          mov     [es:eax],dl                                     ;store character
  2696 00000825 FEC1                                            inc     cl                                              ;next column
  2697 00000827 C3                                              ret                                                     ;return
  2698                                  ;=======================================================================================================================
  2699                                  ;
  2700                                  ;       Input/Output Routines
  2701                                  ;
  2702                                  ;       These routines read and/or write directly to ports.
  2703                                  ;
  2704                                  ;       PlaceCursor
  2705                                  ;       PutPrimaryEndOfInt
  2706                                  ;       PutSecondaryEndOfInt
  2707                                  ;       SetKeyboardLamps
  2708                                  ;       WaitForKeyInBuffer
  2709                                  ;       WaitForKeyOutBuffer
  2710                                  ;
  2711                                  ;=======================================================================================================================
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713                                  ;
  2714                                  ;       Routine:        PlaceCursor
  2715                                  ;
  2716                                  ;       Description:    This routine positions the cursor on the console.
  2717                                  ;
  2718                                  ;       In:             DS      OS data selector
  2719                                  ;
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721 00000828 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2722 00000829 A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2723 0000082E B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2724 00000830 F6E4                                            mul     ah                                              ;row offset
  2725 00000832 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  2726 00000838 80D400                                          adc     ah,0                                            ;add overflow
  2727 0000083B 89C1                                            mov     ecx,eax                                         ;screen offset
  2728 0000083D B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2729 0000083F B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2730 00000841 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2731 00000843 EE                                              out     dx,al                                           ;select register
  2732 00000844 42                                              inc     edx                                             ;data port
  2733 00000845 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2734 00000847 EE                                              out     dx,al                                           ;store hi-order loc
  2735 00000848 4A                                              dec     edx                                             ;register select port
  2736 00000849 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2737 0000084B EE                                              out     dx,al                                           ;select register
  2738 0000084C 42                                              inc     edx                                             ;data port
  2739 0000084D 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2740 0000084F EE                                              out     dx,al                                           ;store lo-order loc
  2741 00000850 59                                              pop     ecx                                             ;restore non-volatile regs
  2742 00000851 C3                                              ret                                                     ;return
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  ;
  2745                                  ;       Routine:        PutPrimaryEndOfInt
  2746                                  ;
  2747                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2748                                  ;
  2749                                  ;-----------------------------------------------------------------------------------------------------------------------
  2750 00000852 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2751 00000853 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2752 00000855 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2753 00000857 C3                                              ret                                                     ;return
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                  ;
  2756                                  ;       Routine:        PutSecondaryEndOfInt
  2757                                  ;
  2758                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2759                                  ;
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761 00000858 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2762 00000859 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2763 0000085B E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2764 0000085D C3                                              ret                                                     ;return
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                  ;
  2767                                  ;       Routine:        SetKeyboardLamps
  2768                                  ;
  2769                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2770                                  ;
  2771                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2772                                  ;
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774 0000085E E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2775 00000863 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2776 00000865 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  2777 00000867 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2778 0000086C E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2779 0000086E E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2780 00000873 88F8                                            mov     al,bh                                           ;set/reset lamps value
  2781 00000875 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  2782 00000877 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2783 0000087C E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2784 0000087E C3                                              ret                                                     ;return
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786                                  ;
  2787                                  ;       Routine:        WaitForKeyInBuffer
  2788                                  ;
  2789                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2790                                  ;
  2791                                  ;       Out:            ZF      1 = Input buffer ready
  2792                                  ;                               0 = Input buffer not ready after timeout
  2793                                  ;
  2794                                  ;-----------------------------------------------------------------------------------------------------------------------
  2795 0000087F 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2796 00000880 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2797 00000885 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2798 00000887 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  2799 00000889 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  2800 0000088B 59                                              pop     ecx                                             ;restore non-volatile regs
  2801 0000088C C3                                              ret                                                     ;return
  2802                                  ;-----------------------------------------------------------------------------------------------------------------------
  2803                                  ;
  2804                                  ;       Routine:        WaitForKeyOutBuffer
  2805                                  ;
  2806                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2807                                  ;
  2808                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2809                                  ;                               0 = Output buffer empty after timeout
  2810                                  ;
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812 0000088D 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2813 0000088E B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2814 00000893 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2815 00000895 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  2816 00000897 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  2817 00000899 59                                              pop     ecx                                             ;restore non-volatile regs
  2818 0000089A C3                                              ret                                                     ;return
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  ;
  2821                                  ;       End of the Kernel Function Library
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824 0000089B 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2825                                  ;=======================================================================================================================
  2826                                  ;
  2827                                  ;       Console Task
  2828                                  ;
  2829                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2830                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2831                                  ;       screen and responds to user commands.
  2832                                  ;
  2833                                  ;=======================================================================================================================
  2834                                  ;-----------------------------------------------------------------------------------------------------------------------
  2835                                  ;
  2836                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2837                                  ;
  2838                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2839                                  ;
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  section                 constack                                                ;console task stack
  2842 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2843                                  ;-----------------------------------------------------------------------------------------------------------------------
  2844                                  ;
  2845                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2846                                  ;
  2847                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2848                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2849                                  ;       16 descriptors. Six are initially defined.
  2850                                  ;
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                  section                 conldt                                                  ;console local descriptors
  2853 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2854 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2855 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2856 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2857 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  2858 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  2859 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2860                                  ;-----------------------------------------------------------------------------------------------------------------------
  2861                                  ;
  2862                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2863                                  ;
  2864                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2865                                  ;       segment. CS to console code.
  2866                                  ;
  2867                                  ;-----------------------------------------------------------------------------------------------------------------------
  2868                                  section                 contss                                                  ;console task state segment
  2869 00000000 00000000                                        dd      0                                               ;00 back-link tss
  2870 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  2871 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  2872 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  2873 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  2874 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  2875 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  2876 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  2877 00000020 00000000                                        dd      0                                               ;20 eip
  2878 00000024 00020000                                        dd      0200h                                           ;24 eflags
  2879 00000028 00000000                                        dd      0                                               ;28 eax
  2880 0000002C 00000000                                        dd      0                                               ;2c ecx
  2881 00000030 00000000                                        dd      0                                               ;30 edx
  2882 00000034 00000000                                        dd      0                                               ;34 ebx
  2883 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  2884 0000003C 00000000                                        dd      0                                               ;3c ebp
  2885 00000040 00000000                                        dd      0                                               ;40 esi
  2886 00000044 00000000                                        dd      0                                               ;44 edi
  2887 00000048 1C000000                                        dd      001Ch                                           ;48 es
  2888 0000004C 24000000                                        dd      0024h                                           ;4c cs
  2889 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  2890 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  2891 00000058 00000000                                        dd      0                                               ;58 fs
  2892 0000005C 00000000                                        dd      0                                               ;5c gs
  2893 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2894 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2895                                  ;-----------------------------------------------------------------------------------------------------------------------
  2896                                  ;
  2897                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2898                                  ;
  2899                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2900                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2901                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2902                                  ;       event.
  2903                                  ;
  2904                                  ;-----------------------------------------------------------------------------------------------------------------------
  2905                                  section                 conmque                                                 ;console message queue
  2906 00000000 08000000                                        dd      8                                               ;head pointer
  2907 00000004 08000000                                        dd      8                                               ;tail pointer
  2908 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  2909                                  ;-----------------------------------------------------------------------------------------------------------------------
  2910                                  ;
  2911                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2912                                  ;
  2913                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2914                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2915                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2916                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2917                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2918                                  ;       board input, echoing to the console screen and responding to user commands.
  2919                                  ;
  2920                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2921                                  ;
  2922                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2923                                  ;                               |  Real Mode Interrupt Vectors                  |
  2924                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2925                                  ;                               |  Reserved BIOS Memory Area                    |
  2926                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2927                                  ;                               |  Shared Kernel Memory Area                    |
  2928                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2929                                  ;                               |  Global Descriptor Table (GDT)                |
  2930                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2931                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2932                                  ;                       002000  +-----------------------------------------------+
  2933                                  ;                               |  Interrupt Handlers                           |
  2934                                  ;                               |  Kernel Function Library                      |
  2935                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2936                                  ;                               |  Console Task Stack Area                      |
  2937                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2938                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2939                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2940                                  ;                               |  Console Task Task State Segment (TSS)        |
  2941                                  ;                       004800  +-----------------------------------------------+
  2942                                  ;                               |  Console Task Message Queue                   |
  2943                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2944                                  ;                               |  Console Task Code                            |
  2945                                  ;                               |  Console Task Constants                       |
  2946                                  ;                       006000  +===============================================+
  2947                                  ;
  2948                                  ;-----------------------------------------------------------------------------------------------------------------------
  2949                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2950 00000000 E81E000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  2951                                  
  2952                                                          clearConsoleScreen                                      ;clear the console screen
  2952 00000005 B000                <1>  mov al,eClearConsoleScreen
  2952 00000007 CD30                <1>  int _svc
  2953                                                          putConsoleString czTitle                                ;display startup message
  2953 00000009 BA[41000000]        <1>  mov edx,%1
  2953 0000000E B002                <1>  mov al,ePutConsoleString
  2953 00000010 CD30                <1>  int _svc
  2954                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2954                              <1> .10 :
  2954 00000012 BA[3F000000]        <1>  mov edx,%1
  2954 00000017 B002                <1>  mov al,ePutConsoleString
  2954 00000019 CD30                <1>  int _svc
  2955                                                          placeCursor                                             ;set CRT cursor location
  2955 0000001B B001                <1>  mov al,ePlaceCursor
  2955 0000001D CD30                <1>  int _svc
  2956                                  
  2957 0000001F FB                      .20                     sti                                                     ;enable interrupts
  2958 00000020 F4                                              hlt                                                     ;halt until interrupt
  2959 00000021 EBFC                                            jmp     .20                                             ;continue halt loop
  2960                                  ;-----------------------------------------------------------------------------------------------------------------------
  2961                                  ;
  2962                                  ;       Routine:        ConInitializeData
  2963                                  ;
  2964                                  ;       Description:    This routine initializes console task variables.
  2965                                  ;
  2966                                  ;-----------------------------------------------------------------------------------------------------------------------
  2967 00000023 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  2968 00000024 57                                              push    edi                                             ;
  2969 00000025 06                                              push    es                                              ;
  2970                                  ;
  2971                                  ;       Initialize console work areas.
  2972                                  ;
  2973 00000026 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2974 00000028 07                                              pop     es                                              ;... into extra segment register
  2975 00000029 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  2976 0000002E 30C0                                            xor     al,al                                           ;initialization value
  2977 00000030 B90C000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  2978 00000035 FC                                              cld                                                     ;forward strings
  2979 00000036 F3AA                                            rep     stosb                                           ;initialize data
  2980                                  ;
  2981                                  ;       Restore and return.
  2982                                  ;
  2983 00000038 07                                              pop     es                                              ;restore non-volatile regs
  2984 00000039 5F                                              pop     edi                                             ;
  2985 0000003A 59                                              pop     ecx                                             ;
  2986 0000003B C3                                              ret                                                     ;return
  2987                                  ;-----------------------------------------------------------------------------------------------------------------------
  2988                                  ;
  2989                                  ;       Constants
  2990                                  ;
  2991                                  ;-----------------------------------------------------------------------------------------------------------------------
  2992 0000003C 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  2993 0000003F 3A00                    czPrompt                db      ":",0                                           ;prompt string
  2994 00000041 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  2994 0000004A 65726174696E672053-
  2994 00000053 797374656D20312E30-
  2994 0000005C 0D0A00             
  2995 0000005F 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  2996                                  %endif
  2997                                  %ifdef BUILDDISK
  2998                                  ;-----------------------------------------------------------------------------------------------------------------------
  2999                                  ;
  3000                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3001                                  ;
  3002                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3003                                  ;
  3004                                  ;-----------------------------------------------------------------------------------------------------------------------
  3005                                  section                 unused                                                  ;unused disk space
  3006 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3007                                  %endif
  3008                                  ;=======================================================================================================================
  3009                                  ;
  3010                                  ;       End of Program Code
  3011                                  ;
  3012                                  ;=======================================================================================================================
