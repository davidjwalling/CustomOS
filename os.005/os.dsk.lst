     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.005
     6                                  ;
     7                                  ;       Description:    In this sample, the kernel is expanded to include a keyboard interupt handler. This handler
     8                                  ;                       updates data visible on the console in an operator information area.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;
   166                                  ;=======================================================================================================================
   167                                  ;-----------------------------------------------------------------------------------------------------------------------
   168                                  ;
   169                                  ;       Hardware-Defined Values
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   175                                  ;
   176                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   177                                  ;       for CGA, EGA, VGA and compatible video modes.
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   181                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   182                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   183                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ;
   186                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   187                                  ;
   188                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   189                                  ;
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   192                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   193                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   194                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   195                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  ;
   198                                  ;       8042 Keyboard Controller                                                EKEYB...
   199                                  ;
   200                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   201                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   202                                  ;
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  EKEYBPORTDATA           equ     060h                                            ;data port
   205                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   206                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   207                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   208                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   209                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   210                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   211                                                                                                                  ;---------------------------------------
   212                                                                                                                  ;       Keyboard Scan Codes
   213                                                                                                                  ;---------------------------------------
   214                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   215                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   216                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   217                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   218                                  EKEYBSLASH              equ     035h                                            ;slash
   219                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   220                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   221                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   222                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   223                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   224                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   225                                  EKEYBUP                 equ     080h                                            ;up
   226                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   227                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   228                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   229                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   230                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   231                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   232                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   233                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   234                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   235                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   236                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   237                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   238                                  ;-----------------------------------------------------------------------------------------------------------------------
   239                                  ;
   240                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   241                                  ;
   242                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   243                                  ;       external devices and signals a hardware interrupt to the CPU.
   244                                  ;
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   247                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   248                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   249                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   250                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;       8253 Programmable Interval Timer                                        EPIT...
   254                                  ;
   255                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   256                                  ;       approximately 18.2 times per second.
   257                                  ;
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  ;
   262                                  ;       x86 CPU Architecture                                                    ;EX86...
   263                                  ;
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  ;
   268                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   269                                  ;
   270                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   271                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   272                                  ;
   273                                  ;       0.......        Segment is not present in memory (triggers int 11)
   274                                  ;       1.......        Segment is present in memory
   275                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   276                                  ;       ...0....        Segment is a system segment
   277                                  ;       ...00010                Local Descriptor Table
   278                                  ;       ...00101                Task Gate
   279                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   280                                  ;       ...01100                Call Gate (386)
   281                                  ;       ...01110                Interrupt Gate (386)
   282                                  ;       ...01111                Trap Gate (386)
   283                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   284                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   285                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   286                                  ;
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   289                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   290                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   291                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   292                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   293                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   294                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   295                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       Firmware-Defined Values
   299                                  ;
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   304                                  ;
   305                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   306                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   310                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   311                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   312                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   313                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   314                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   315                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   316                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   317                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   318                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  ;
   321                                  ;       Standards-Based Values
   322                                  ;
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;
   326                                  ;       ASCII                                                                   EASCII...
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   330                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   331                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   332                                  EASCIISPACE             equ     020h                                            ;space
   333                                  EASCIIUPPERA            equ     041h                                            ;'A'
   334                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   335                                  EASCIICASE              equ     00100000b                                       ;case bit
   336                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   337                                  ;-----------------------------------------------------------------------------------------------------------------------
   338                                  ;
   339                                  ;       Operating System Values
   340                                  ;
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;
   344                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   345                                  ;
   346                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   347                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   348                                  ;
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   351                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   352                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   353                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   354                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   355                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   356                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;       Console Constants                                                       ECON...
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  ECONCOLS                equ     80                                              ;columns per row
   361                                  ECONROWS                equ     24                                              ;console rows
   362                                  ECONOIAROW              equ     24                                              ;operator information area row
   363                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   364                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   365                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   366                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   367                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   372                                  EGDTCGA                 equ     020h                                            ;cga video selector
   373                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   374                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   375                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   376                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   377                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   378                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  ;       Keyboard Flags                                                          EKEYF...
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   383                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   384                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   385                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   386                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   387                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   388                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   389                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   390                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   391                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   392                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  ;       Kernel Constants                                                        EKRN...
   395                                  ;-----------------------------------------------------------------------------------------------------------------------
   396                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   397                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   398                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   399                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   400                                  ;=======================================================================================================================
   401                                  ;
   402                                  ;       Structures
   403                                  ;
   404                                  ;=======================================================================================================================
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;
   407                                  ;       OSDATA
   408                                  ;
   409                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   410                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   411                                  ;
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  struc                   OSDATA
   414 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   415 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   416 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   417 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   418 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   419 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   420 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   421 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   422 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   423 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   424 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   425 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   426 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   427 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   428 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   429 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   430 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   431 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   432 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   433 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   434 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   435 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   436 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   437 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   438 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   439 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   440 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   441 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   442 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   443 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   444 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   445 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   446 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   447 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   448 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   449 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   450 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   451 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   452 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   453 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   454 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   455 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   456 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   457 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   458 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   459 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   460 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   461 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   462 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   463 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   464 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   465 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   466 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   467 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   468 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   469 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   470 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   471 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   472 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   473 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   474 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   475 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   476 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   477 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   478 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   479 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   480 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   481 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   482 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   483 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   484 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   485 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   486 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   487 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   488 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   489 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   490 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   491 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   492 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   493 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   494 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   495 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   496 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   497 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   498 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   499 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   500 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   501 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   502 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   503 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   504 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   505 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   506 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   507 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   508 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   509 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   510 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   511 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   512 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   513 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   514 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516                                  ;
   517                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   518                                  ;
   519                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   520                                  ;
   521                                  ;-----------------------------------------------------------------------------------------------------------------------
   522                                  ECONDATA                equ     ($)
   523 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   524 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   525 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   526 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   527 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   528 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   529 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   530 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   531 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   532 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   533 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   534 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   535                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   536                                  ;-----------------------------------------------------------------------------------------------------------------------
   537                                  ;
   538                                  ;       End of OS Variables
   539                                  ;
   540                                  ;-----------------------------------------------------------------------------------------------------------------------
   541                                  endstruc
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  ;
   544                                  ;       Macros
   545                                  ;
   546                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   547                                  ;
   548                                  ;-----------------------------------------------------------------------------------------------------------------------
   549                                  %macro                  mint    1
   550                                  _%1                     equ     ($-$$) / EX86DESCLEN
   551                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   552                                  %endmacro
   553                                  %macro                  mtrap   1
   554                                  _%1                     equ     ($-$$) / EX86DESCLEN
   555                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   556                                  %endmacro
   557                                  %macro                  menter  1
   558                                  ?%1                     equ     ($-$$)
   559                                  %endmacro
   560                                  %macro                  tsvce   1
   561                                  e%1                     equ     ($-tsvc)/4
   562                                                          dd      %1
   563                                  %endmacro
   564                                  %ifdef BUILDBOOT
   565                                  ;=======================================================================================================================
   566                                  ;
   567                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   568                                  ;
   569                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   570                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   571                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   572                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   573                                  ;
   574                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   575                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   576                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   577                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   578                                  ;       immediately followed by a disk parameter table.
   579                                  ;
   580                                  ;=======================================================================================================================
   581                                                          cpu     8086                                            ;assume minimal CPU
   582                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   583                                                          bits    16                                              ;16-bit code at power-up
   584                                  %ifdef BUILDPREP
   585                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   586                                  %else
   587 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   588                                  %endif
   589                                  ;-----------------------------------------------------------------------------------------------------------------------
   590                                  ;
   591                                  ;       Disk Parameter Table
   592                                  ;
   593                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   594                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   595                                  ;
   596                                  ;-----------------------------------------------------------------------------------------------------------------------
   597 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   598 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   599 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   600 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   601 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   602 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   603 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   604 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   605 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   606                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   607 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   608 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   609 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   610                                  ;
   611                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   612                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   613                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   614                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   615                                  ;       given several possible starting values for CS:IP.
   616                                  ;
   617                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   618 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   619                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   620 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   621 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   622 00000025 B104                                            mov     cl,4                                            ;shift count
   623 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   624 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   625 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   626                                  ;
   627                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   628                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   629                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   630                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   631                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   632                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   633                                  ;
   634 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   635 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   636 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   637 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   638 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   639                                  ;
   640                                  ;       Our boot addressability is now set up according to the following diagram.
   641                                  ;
   642                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   643                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   644                                  ;                               |  256 = 100h bytes                             |
   645                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   646                                  ;                               |  Boot Sector (vstart=0100h)                   |
   647                                  ;                               |  1 sector = 512 = 200h bytes                  |
   648                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   649                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   650                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   651                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   652                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   653                                  ;                               |  2 sectors = 1024 = 400h bytes
   654                                  ;                       009400  +-----------------------------------------------+ DS:1900
   655                                  ;
   656                                  ;       On entry, DL indicates the drive being booted from.
   657                                  ;
   658 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   659                                  ;
   660                                  ;       Compute directory i/o buffer address.
   661                                  ;
   662 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   663 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   664 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   665 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   666                                  ;
   667                                  ;       Compute segment where os.com will be loaded.
   668                                  ;
   669 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   670 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   671 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   672 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   673                                  ;
   674                                  ;       Set the video mode to 80 column, 25 row, text.
   675                                  ;
   676 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   677 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   678                                  ;
   679                                  ;       Write a message to the console so we know we have our addressability established.
   680                                  ;
   681 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   682 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   683                                  ;
   684                                  ;       Initialize the number of directory sectors to search.
   685                                  ;
   686 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   687 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   688                                  ;
   689                                  ;       Compute number of directory sectors and initialize overhead count.
   690                                  ;
   691 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   692 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   693 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   694 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   695                                  ;
   696                                  ;       Compute directory entries per sector.
   697                                  ;
   698 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   699 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   700 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   701                                  ;
   702                                  ;       Compute first logical directory sector and update overhead count.
   703                                  ;
   704 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   705 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   706 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   707 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   708 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   709 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   710                                  ;
   711                                  ;       Read directory sector.
   712                                  ;
   713 0000008E B001                    .30                     mov     al,1                                            ;sector count
   714 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   715 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   716 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   717                                  ;
   718                                  ;       Setup variables to search this directory sector.
   719                                  ;
   720 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   721 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   722 000000A1 7603                                            jna     .40                                             ;no, continue
   723 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   724 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   725 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   726 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   727                                  ;
   728                                  ;       Loop through directory sectors searching for kernel program.
   729                                  ;
   730 000000B1 56                      .50                     push    si                                              ;save kernel name address
   731 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   732 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   733 000000B6 FC                                              cld                                                     ;forward strings
   734 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   735 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   736 000000BA 5E                                              pop     si                                              ;restore kernel name address
   737 000000BB 7418                                            je      .60                                             ;exit loop if found
   738 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   739 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   740 000000C2 75ED                                            jnz     .50                                             ;next entry
   741                                  ;
   742                                  ;       Repeat search if we are not at the end of the directory.
   743                                  ;
   744 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   745 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   746 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   747 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   748 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   749                                  ;
   750                                  ;       If we find the kernel program in the directory, read the FAT.
   751                                  ;
   752 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   753 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   754 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   755 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   756 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   757 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   758                                  ;
   759                                  ;       Get the starting cluster of the kernel program and target address.
   760                                  ;
   761 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   762 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   763                                  ;
   764                                  ;       Read each program cluster into RAM.
   765                                  ;
   766 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   767 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   768 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   769 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   770 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   771 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   772 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   773 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   774 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   775                                  ;
   776                                  ;       Update buffer pointer for next cluster.
   777                                  ;
   778 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   779 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   780 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   781 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   782 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   783                                  ;
   784                                  ;       Compute next cluster number.
   785                                  ;
   786 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   787 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   788 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   789 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   790 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   791 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   792 00000120 83E701                                          and     di,1                                            ;get low bit
   793 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   794 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   795 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   796                                  ;
   797                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   798                                  ;
   799 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   800 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   801 00000130 B104                                            mov     cl,4                                            ;shift count
   802 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   803 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   804 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   805 0000013A 75B2                                            jne     .70                                             ;no, continue
   806                                  ;
   807                                  ;       Transfer control to the operating system program.
   808                                  ;
   809 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   810 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   811 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   812                                  ;
   813                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   814                                  ;
   815 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   816 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   817 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   818 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   819 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   820 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   821 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   822 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   823 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   824 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   825                                  ;
   826                                  ;       Try maxtries times to read sector.
   827                                  ;
   828 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   829 00000160 53                      .10                     push    bx                                              ;save buffer address
   830 00000161 51                                              push    cx                                              ;save retry count
   831 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   832 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   833 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   834 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   835 0000016F 59                                              pop     cx                                              ;restore retry count
   836 00000170 5B                                              pop     bx                                              ;restore buffer address
   837 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   838 00000173 E2EB                                            loop    .10                                             ;retry
   839                                  ;
   840                                  ;       Handle disk error: convert to ASCII and store in error string.
   841                                  ;
   842 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   843 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   844 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   845 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   846 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   847 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   848 00000183 7203                                            jb      .20                                             ;continue if numeral
   849 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   850 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   851 0000018A 7203                                            jb      .30                                             ;continue if numeral
   852 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   853 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   854 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   855 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   856                                  ;
   857                                  ;       Wait for a key press.
   858                                  ;
   859 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   860 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   861 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   862 0000019E FB                                              sti                                                     ;enable maskable interrupts
   863 0000019F F4                                              hlt                                                     ;wait for interrupt
   864 000001A0 EBF6                                            jmp     .10                                             ;repeat
   865                                  ;
   866                                  ;       Reset the system.
   867                                  ;
   868 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   869 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   870 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   871 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   872 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   873                                  ;
   874                                  ;       Display text message.
   875                                  ;
   876 000001AA FC                      BootPrint               cld                                                     ;forward strings
   877 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   878 000001AC 84C0                                            test    al,al                                           ;end of string?
   879 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   880 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   881 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   882 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   883 000001B6 C3                      BootReturn              ret                                                     ;return
   884                                  ;-----------------------------------------------------------------------------------------------------------------------
   885                                  ;
   886                                  ;       Constants
   887                                  ;
   888                                  ;-----------------------------------------------------------------------------------------------------------------------
   889 000001B7 90                                              align   2
   890 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   891 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   891 000001C3 4F4D               
   892 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   892 000001CE 530D0A00           
   893 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   893 000001DB 7220               
   894 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   895 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   895 000001E9 6700               
   896                                  ;-----------------------------------------------------------------------------------------------------------------------
   897                                  ;
   898                                  ;       Work Areas
   899                                  ;
   900                                  ;-----------------------------------------------------------------------------------------------------------------------
   901 000001EB 90                                              align   2
   902 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   903 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   904 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   905 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   906 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   907                                  wwReadCountCommand      equ     $                                               ;read count and command
   908 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   909 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   910                                  wwDriveHead             equ     $                                               ;drive, head (word)
   911 000001F8 00                      wbDrive                 db      0                                               ;drive
   912 000001F9 00                      wbHead                  db      0                                               ;head
   913                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   914 000001FA 00                                              db      0                                               ;sector
   915 000001FB 00                      wbTrack                 db      0                                               ;track
   916 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   917 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   918                                  %endif
   919                                  %ifdef BUILDPREP
   920                                  ;=======================================================================================================================
   921                                  ;
   922                                  ;       Diskette Preparation Code
   923                                  ;
   924                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   925                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   926                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   927                                  ;
   928                                  ;=======================================================================================================================
   929                                  ;
   930                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   931                                  ;
   932                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   933                                                          call    BootPrint                                       ;display message
   934                                  ;
   935                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   936                                  ;
   937                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   938                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   939                                                          jnz     .20                                             ;continue if key pressed
   940                                                          sti                                                     ;enable interrupts
   941                                                          hlt                                                     ;wait for interrupt
   942                                                          jmp     .10                                             ;repeat
   943                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   944                                                          je      .30                                             ;yes, branch
   945                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   946                                                          jne     .10                                             ;no, repeat
   947                                                          jmp     .120                                            ;yes, exit program
   948                                  ;
   949                                  ;       Display writing-sector message and patch the JMP instruction.
   950                                  ;
   951                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   952                                                          call    BootPrint                                       ;display message
   953                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   954                                                          mov     ax,01Bh                                         ;address past disk parameter table
   955                                                          mov     [bx],ax                                         ;update the JMP instruction
   956                                  ;
   957                                  ;       Try to read the boot sector.
   958                                  ;
   959                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   960                                  .40                     push    cx                                              ;save remaining tries
   961                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   962                                                          mov     dx,0                                            ;head zero, drive zero
   963                                                          mov     cx,1                                            ;track zero, sector one
   964                                                          mov     ax,0201h                                        ;read one sector
   965                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   966                                                          pop     cx                                              ;restore remaining retries
   967                                                          jnc     .50                                             ;skip ahead if successful
   968                                                          loop    .40                                             ;try again
   969                                                          mov     si,czPrepMsg20                                  ;read-error message address
   970                                                          jmp     .70                                             ;branch to error routine
   971                                  ;
   972                                  ;       Copy diskette parms from input buffer to output buffer.
   973                                  ;
   974                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
   975                                                          add     si,11                                           ;skip over JMP and system ID
   976                                                          mov     di,Boot                                         ;output buffer address
   977                                                          add     di,11                                           ;skip over JMP and system ID
   978                                                          mov     cx,19                                           ;length of diskette parameters
   979                                                          cld                                                     ;forward string copies
   980                                                          rep     movsb                                           ;copy diskette parameters
   981                                  ;
   982                                  ;       Try to write boot sector to diskette.
   983                                  ;
   984                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   985                                  .60                     push    cx                                              ;save remaining tries
   986                                                          mov     bx,Boot                                         ;output buffer address
   987                                                          mov     dx,0                                            ;head zero, drive zero
   988                                                          mov     cx,1                                            ;track zero, sector one
   989                                                          mov     ax,0301h                                        ;write one sector
   990                                                          int     EBIOSINTDISKETTE                                ;attempt the write
   991                                                          pop     cx                                              ;restore remaining retries
   992                                                          jnc     .100                                            ;skip ahead if successful
   993                                                          loop    .60                                             ;try again
   994                                                          mov     si,czPrepMsg30                                  ;write-error message address
   995                                  ;
   996                                  ;       Convert the error code to ASCII and display the error message.
   997                                  ;
   998                                  .70                     push    ax                                              ;save error code
   999                                                          mov     al,ah                                           ;copy error code
  1000                                                          mov     ah,0                                            ;AX = error code
  1001                                                          mov     dl,10h                                          ;hexadecimal divisor
  1002                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1003                                                          or      ax,03030h                                       ;add ASCII zone digits
  1004                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1005                                                          jb      .80                                             ;yes, continue
  1006                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1007                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1008                                                          jb      .90                                             ;yes, continue
  1009                                                          add     al,7                                            ;no, make ASCII
  1010                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1011                                                          call    BootPrint                                       ;write error message
  1012                                                          pop     ax                                              ;restore error code
  1013                                  ;
  1014                                  ;       Display the completion message.
  1015                                  ;
  1016                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1017                                                          mov     al,ah                                           ;BIOS return code
  1018                                                          cmp     al,0                                            ;success?
  1019                                                          je      .110                                            ;yes, continue
  1020                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1021                                                          cmp     al,1                                            ;disk parameter error?
  1022                                                          je      .110                                            ;yes, continue
  1023                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1024                                                          cmp     al,2                                            ;address mark not found?
  1025                                                          je      .110                                            ;yes, continue
  1026                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1027                                                          cmp     al,3                                            ;protected disk?
  1028                                                          je      .110                                            ;yes, continue
  1029                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1030                                                          cmp     al,6                                            ;diskette removed?
  1031                                                          je      .110                                            ;yes, continue
  1032                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1033                                                          cmp     al,80H                                          ;drive timed out?
  1034                                                          je      .110                                            ;yes, continue
  1035                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1036                                  .110                    call    BootPrint                                       ;display result message
  1037                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1038                                                          int     021h                                            ;terminate DOS program
  1039                                                          ret                                                     ;return (should not execute)
  1040                                  ;-----------------------------------------------------------------------------------------------------------------------
  1041                                  ;
  1042                                  ;       Diskette Preparation Messages
  1043                                  ;
  1044                                  ;-----------------------------------------------------------------------------------------------------------------------
  1045                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1046                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1047                                                          db      13,10
  1048                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1049                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1050                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1051                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1052                                                          db      13,10,0
  1053                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1054                                                          db      13,10,0
  1055                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1056                                                          db      13,10,0
  1057                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1058                                                          db      13,10,0
  1059                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1060                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1061                                                          db      13,10,0
  1062                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1063                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1064                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1065                                                          db      13,10,"and retry."
  1066                                                          db      13,10,0
  1067                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1068                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1069                                                          db      13,10,"using another diskette."
  1070                                                          db      13,10,0
  1071                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1072                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1073                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1074                                                          db      13,10,0
  1075                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1076                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1077                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1078                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1079                                                          db      13,10,"is properly inserted in the diskette drive."
  1080                                                          db      13,10,0
  1081                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1082                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1083                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1084                                                          db      13,10,0
  1085                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1086                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1087                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1088                                                          db      13,10,0
  1089                                  wcPrepInBuf             equ     $
  1090                                  %endif
  1091                                  %ifdef BUILDDISK
  1092                                  ;=======================================================================================================================
  1093                                  ;
  1094                                  ;       File Allocation Tables
  1095                                  ;
  1096                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1097                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1098                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1099                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1100                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1101                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1102                                  ;       the last cluster in the chain.
  1103                                  ;
  1104                                  ;       Every three bytes encode two FAT entries as follows:
  1105                                  ;
  1106                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1107                                  ;
  1108                                  ;=======================================================================================================================
  1109                                  ;-----------------------------------------------------------------------------------------------------------------------
  1110                                  ;
  1111                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1112                                  ;
  1113                                  ;-----------------------------------------------------------------------------------------------------------------------
  1114                                  section                 fat1                                                    ;first copy of FAT
  1115 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1116 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1117 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1118 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1119 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1120 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1121 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1122 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1123 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1124 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1125 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1126 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1127                                  ;-----------------------------------------------------------------------------------------------------------------------
  1128                                  ;
  1129                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1130                                  ;
  1131                                  ;-----------------------------------------------------------------------------------------------------------------------
  1132                                  section                 fat2                                                    ;second copy of FAT
  1133 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1134 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1135 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1136 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1137 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1138 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1139 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1140 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1141 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1142 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1143 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1144 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1145                                  ;-----------------------------------------------------------------------------------------------------------------------
  1146                                  ;
  1147                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1148                                  ;
  1149                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1150                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1151                                  ;       copy.
  1152                                  ;
  1153                                  ;-----------------------------------------------------------------------------------------------------------------------
  1154                                  section                 dir                                                     ;diskette directory
  1155 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1155 00000009 4F4D               
  1156 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1157 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1158 00000016 0000                                            dw      0h                                              ;time
  1159 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1160 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1161 0000001A 0200                                            dw      2                                               ;first cluster
  1162 0000001C 00540000                                        dd      05400h                                          ;file size
  1163 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1164                                  %endif
  1165                                  %ifdef BUILDCOM
  1166                                  ;=======================================================================================================================
  1167                                  ;
  1168                                  ;       OS.COM
  1169                                  ;
  1170                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1171                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1172                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1173                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1174                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1175                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1176                                  ;
  1177                                  ;       Our loader addressability is set up according to the following diagram.
  1178                                  ;
  1179                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1180                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1181                                  ;                               |  256 = 100h bytes                             |
  1182                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1183                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1184                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1185                                  ;                       007e00  +-----------------------------------------------+
  1186                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1187                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1188                                  ;                               |                                               |
  1189                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1190                                  ;                               |                                               |
  1191                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1192                                  ;                               |  Loader Code                                  |
  1193                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1194                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1195                                  ;
  1196                                  ;=======================================================================================================================
  1197                                  ;-----------------------------------------------------------------------------------------------------------------------
  1198                                  ;
  1199                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1200                                  ;
  1201                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1202                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1203                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1204                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1205                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1206                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1207                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1208                                  ;       registers.
  1209                                  ;
  1210                                  ;-----------------------------------------------------------------------------------------------------------------------
  1211                                                          cpu     8086                                            ;assume minimal CPU
  1212                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1213                                                          bits    16                                              ;this is 16-bit code
  1214 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1215 00000001 1F                                              pop     ds                                              ;...as our data segment
  1216 00000002 0E                                              push    cs                                              ;use the code segment
  1217 00000003 07                                              pop     es                                              ;...as our extra segment
  1218                                  ;
  1219                                  ;       Write a message to the console so we know we have our addressability established.
  1220                                  ;
  1221 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1222 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1223                                  ;
  1224                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1225                                  ;
  1226 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1227 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1228 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1229 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1230                                                          cpu     386                                             ;allow 80386 instructions
  1231 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1232 00000017 E89600                                          call    PutTTYString                                    ;display message
  1233                                  ;
  1234                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1235                                  ;
  1236 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1237 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1238 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1239 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1240 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1241 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1242 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1243 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1244 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1245 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1246                                  ;
  1247                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1248                                  ;
  1249 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1250 00000038 07                                              pop     es                                              ;... as target segment
  1251 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1252 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1253 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1254 00000041 FC                                              cld                                                     ;forward strings
  1255 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1256 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1257 00000047 E86600                                          call    PutTTYString                                    ;display message
  1258                                  ;
  1259                                  ;       Switch to protected mode.
  1260                                  ;
  1261 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1262 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1263 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1264 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1265 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1266 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1267 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1268 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1269 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1270 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1271 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1272                                  ;
  1273                                  ;       Enable hardware and maskable interrupts.
  1274                                  ;
  1275 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1276 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1277 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1278 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1279                                  ;
  1280                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1281                                  ;
  1282 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1283 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1284 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1285                                  ;-----------------------------------------------------------------------------------------------------------------------
  1286                                  ;
  1287                                  ;       Routine:        LoaderExit
  1288                                  ;
  1289                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1290                                  ;
  1291                                  ;       In:             DS:SI   string address
  1292                                  ;
  1293                                  ;-----------------------------------------------------------------------------------------------------------------------
  1294 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1295                                  ;
  1296                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1297                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1298                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1299                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1300                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1301                                  ;
  1302 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1303 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1304 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1305 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1306 00000085 F4                                              hlt                                                     ;wait for interrupt
  1307 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1308                                  ;
  1309                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1310                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1311                                  ;       HLT until the system resets.
  1312                                  ;
  1313 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1314 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1315 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1316 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1317 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;       Routine:        GetCPUType
  1321                                  ;
  1322                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1323                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1324                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1325                                  ;
  1326                                  ;       Out:            AX      0 = 808x, v20, etc.
  1327                                  ;                               1 = 80186
  1328                                  ;                               2 = 80286
  1329                                  ;                               3 = 80386
  1330                                  ;
  1331                                  ;-----------------------------------------------------------------------------------------------------------------------
  1332 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1333 00000092 B120                                            mov     cl,32                                           ;shift count
  1334 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1335 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1336 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1337                                                          cpu     186
  1338 0000009A 54                                              push    sp                                              ;save stack pointer
  1339 0000009B 59                                              pop     cx                                              ;...into cx
  1340 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1341 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1342                                                          cpu     286
  1343 000000A0 40                                              inc     ax                                              ;AX = 2
  1344 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1345 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1346 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1347 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1348 000000AE 40                                              inc     ax                                              ;AX = 3
  1349 000000AF C3                      .10                     ret                                                     ;return
  1350                                  ;-----------------------------------------------------------------------------------------------------------------------
  1351                                  ;
  1352                                  ;       Routine:        PutTTYString
  1353                                  ;
  1354                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1355                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1356                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1357                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1358                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1359                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1360                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1361                                  ;                       to LODSB is not needed.
  1362                                  ;
  1363                                  ;       In:             DS:SI   address of string
  1364                                  ;
  1365                                  ;       Out:            DF      0
  1366                                  ;                       ZF      1
  1367                                  ;                       AL      0
  1368                                  ;
  1369                                  ;-----------------------------------------------------------------------------------------------------------------------
  1370 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1371 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1372 000000B2 84C0                                            test    al,al                                           ;end of string?
  1373 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1374 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1375 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1376 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1377 000000BC C3                      .20                     ret                                                     ;return
  1378                                  ;-----------------------------------------------------------------------------------------------------------------------
  1379                                  ;
  1380                                  ;       Loader Data
  1381                                  ;
  1382                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1383                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1384                                  ;
  1385                                  ;-----------------------------------------------------------------------------------------------------------------------
  1386 000000BD 90                                              align   2
  1387 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1388 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1389 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1390 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1391 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1391 000000D1 74696E672073797374-
  1391 000000DA 656D20726571756972-
  1391 000000E3 657320616E20693338-
  1391 000000EC 36206F72206C617465-
  1391 000000F5 722070726F63657373-
  1391 000000FE 6F722E0D0A         
  1392 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1392 0000010C 65737320616E79206B-
  1392 00000115 657920746F20726573-
  1392 0000011E 746172742074686520-
  1392 00000127 636F6D70757465722E-
  1392 00000130 0D0A00             
  1393 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1394 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1394 00000145 7265640D0A00       
  1395 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1395 00000154 616465640D0A00     
  1396 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1396 00000164 4F530D0A00         
  1397 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1398                                  ;=======================================================================================================================
  1399                                  ;
  1400                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1401                                  ;
  1402                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1403                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1404                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1405                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1406                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1407                                  ;
  1408                                  ;=======================================================================================================================
  1409                                  ;=======================================================================================================================
  1410                                  ;
  1411                                  ;       Kernel Tables
  1412                                  ;
  1413                                  ;=======================================================================================================================
  1414                                  ;-----------------------------------------------------------------------------------------------------------------------
  1415                                  ;
  1416                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1417                                  ;
  1418                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1419                                  ;       first descriptor must be all nulls.
  1420                                  ;
  1421                                  ;       6   5         4         3         2         1         0
  1422                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1423                                  ;       ----------------------------------------------------------------
  1424                                  ;       h......hffffmmmma......ab......................bn..............n
  1425                                  ;       00000000                        all areas have base addresses below 2^24
  1426                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1427                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1428                                  ;                   1001                present, ring-0, selector
  1429                                  ;
  1430                                  ;       h...h   hi-order base address (bits 24-31)
  1431                                  ;       ffff    flags
  1432                                  ;       mmmm    hi-order limit (bits 16-19)
  1433                                  ;       a...a   access
  1434                                  ;       b...b   lo-order base address (bits 0-23)
  1435                                  ;       n...n   lo-order limit (bits 0-15)
  1436                                  ;
  1437                                  ;-----------------------------------------------------------------------------------------------------------------------
  1438                                  section                 gdt                                                     ;global descriptor table
  1439 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1440 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1441 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1442 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1443 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1444 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1445 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1446 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1447 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1448 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1449 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1450 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1451 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1452 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1453 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1454                                  ;-----------------------------------------------------------------------------------------------------------------------
  1455                                  ;
  1456                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1457                                  ;
  1458                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1459                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1460                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1461                                  ;
  1462                                  ;       6   5         4         3         2         1         0
  1463                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1464                                  ;       ----------------------------------------------------------------
  1465                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1466                                  ;
  1467                                  ;       h...h   high-order offset (bits 16-31)
  1468                                  ;       P       present (0=unused interrupt)
  1469                                  ;       zz      descriptor privilege level
  1470                                  ;       S       storage segment (must be zero for IDT)
  1471                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1472                                  ;       S...S   handling code selector in GDT
  1473                                  ;       l...l   lo-order offset (bits 0-15)
  1474                                  ;
  1475                                  ;-----------------------------------------------------------------------------------------------------------------------
  1476                                  section                 idt                                                     ;interrupt descriptor table
  1477                                                          mint    dividebyzero                                    ;00 divide by zero
  1477                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1477 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1478                                                          mint    singlestep                                      ;01 single step
  1478                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1478 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1479                                                          mint    nmi                                             ;02 non-maskable
  1479                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1479 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1480                                                          mint    break                                           ;03 break
  1480                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1480 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1481                                                          mint    into                                            ;04 into
  1481                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1481 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1482                                                          mint    bounds                                          ;05 bounds
  1482                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1482 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1483                                                          mint    badopcode                                       ;06 bad op code
  1483                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1483 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1484                                                          mint    nocoproc                                        ;07 no coprocessor
  1484                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1484 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1485                                                          mint    doublefault                                     ;08 double-fault
  1485                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1485 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1486                                                          mint    operand                                         ;09 operand
  1486                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1486 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1487                                                          mint    badtss                                          ;0a bad TSS
  1487                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1487 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1488                                                          mint    notpresent                                      ;0b not-present
  1488                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1488 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1489                                                          mint    stacklimit                                      ;0c stack limit
  1489                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1489 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1490                                                          mint    protection                                      ;0d general protection fault
  1490                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1490 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1491                                                          mint    int14                                           ;0e (reserved)
  1491                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1491 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1492                                                          mint    int15                                           ;0f (reserved)
  1492                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1492 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1493                                                          mint    coproccalc                                      ;10 (reserved)
  1493                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1493 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1494                                                          mint    int17                                           ;11 (reserved)
  1494                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1494 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1495                                                          mint    int18                                           ;12 (reserved)
  1495                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1495 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1496                                                          mint    int19                                           ;13 (reserved)
  1496                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1496 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1497                                                          mint    int20                                           ;14 (reserved)
  1497                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1497 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1498                                                          mint    int21                                           ;15 (reserved)
  1498                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1498 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1499                                                          mint    int22                                           ;16 (reserved)
  1499                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1499 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1500                                                          mint    int23                                           ;17 (reserved)
  1500                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1500 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1501                                                          mint    int24                                           ;18 (reserved)
  1501                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1501 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1502                                                          mint    int25                                           ;19 (reserved)
  1502                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1502 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1503                                                          mint    int26                                           ;1a (reserved)
  1503                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1503 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1504                                                          mint    int27                                           ;1b (reserved)
  1504                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1504 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1505                                                          mint    int28                                           ;1c (reserved)
  1505                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1505 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1506                                                          mint    int29                                           ;1d (reserved)
  1506                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1506 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1507                                                          mint    int30                                           ;1e (reserved)
  1507                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1507 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1508                                                          mint    int31                                           ;1f (reserved)
  1508                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1508 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1509                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1509                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1509 00000100 3C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1510                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1510                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1510 00000108 8C024800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1511                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1511                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1511 00000110 A1054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1512                                                          mtrap   com2                                            ;23 IRQ3 com2
  1512                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1512 00000118 A4054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1513                                                          mtrap   com1                                            ;24 IRQ4 com1
  1513                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1513 00000120 A7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1514                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1514                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1514 00000128 AA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1515                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1515                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1515 00000130 AD054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1516                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1516                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1516 00000138 C1054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1517                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1517                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1517 00000140 C4054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1518                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1518                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1518 00000148 C7054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1519                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1519                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1519 00000150 CA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1520                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1520                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1520 00000158 CD054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1521                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1521                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1521 00000160 D0054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1522                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1522                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1522 00000168 D3054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1523                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1523                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1523 00000170 D6054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1524                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1524                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1524 00000178 D9054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1525                                                          mtrap   svc                                             ;30 OS services
  1525                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1525 00000180 EA054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1526 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1527                                  ;=======================================================================================================================
  1528                                  ;
  1529                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1530                                  ;
  1531                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1532                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1533                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1534                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1535                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1536                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1537                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1538                                  ;
  1539                                  ;=======================================================================================================================
  1540                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1541                                                          cpu     386                                             ;allow 80386 instructions
  1542                                                          bits    32                                              ;this is 32-bit code
  1543                                  ;=======================================================================================================================
  1544                                  ;
  1545                                  ;       CPU Interrupt Handlers
  1546                                  ;
  1547                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1548                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1549                                  ;
  1550                                  ;=======================================================================================================================
  1551                                  ;-----------------------------------------------------------------------------------------------------------------------
  1552                                  ;
  1553                                  ;       INT0    Divide By Zero
  1554                                  ;
  1555                                  ;-----------------------------------------------------------------------------------------------------------------------
  1556                                                          menter  dividebyzero                                    ;divide by zero
  1556                              <1> ?%1 equ ($-$$)
  1557 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1558 00000002 68[56010000]                                    push    czIntDivideByZero                               ;store message offset
  1559 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1560                                  ;-----------------------------------------------------------------------------------------------------------------------
  1561                                  ;
  1562                                  ;       INT1    Single Step
  1563                                  ;
  1564                                  ;-----------------------------------------------------------------------------------------------------------------------
  1565                                                          menter  singlestep                                      ;single step
  1565                              <1> ?%1 equ ($-$$)
  1566 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1567 0000000E 68[67010000]                                    push    czIntSingleStep                                 ;store message offset
  1568 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1569                                  ;-----------------------------------------------------------------------------------------------------------------------
  1570                                  ;
  1571                                  ;       INT2    Non-Maskable Interrupt
  1572                                  ;
  1573                                  ;-----------------------------------------------------------------------------------------------------------------------
  1574                                                          menter  nmi                                             ;non-maskable
  1574                              <1> ?%1 equ ($-$$)
  1575 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1576 0000001A 68[73010000]                                    push    czIntNonMaskable                                ;store message offset
  1577 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1578                                  ;-----------------------------------------------------------------------------------------------------------------------
  1579                                  ;
  1580                                  ;       INT3    Break
  1581                                  ;
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                                          menter  break                                           ;break
  1583                              <1> ?%1 equ ($-$$)
  1584 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1585 00000026 68[8A010000]                                    push    czIntBreak                                      ;store message offset
  1586 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                  ;
  1589                                  ;       INT4    Into
  1590                                  ;
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                                          menter  into                                            ;into
  1592                              <1> ?%1 equ ($-$$)
  1593 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1594 00000032 68[90010000]                                    push    czIntInto                                       ;store message offset
  1595 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1596                                  ;-----------------------------------------------------------------------------------------------------------------------
  1597                                  ;
  1598                                  ;       INT5    Bounds
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                                          menter  bounds                                          ;bounds
  1601                              <1> ?%1 equ ($-$$)
  1602 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1603 0000003E 68[95010000]                                    push    czIntBounds                                     ;store message offset
  1604 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  ;
  1607                                  ;       INT6    Bad Operation Code
  1608                                  ;
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                                          menter  badopcode                                       ;bad opcode interrupt
  1610                              <1> ?%1 equ ($-$$)
  1611 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1612 0000004A 68[9C010000]                                    push    czIntBadOpCode                                  ;store message offset
  1613 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                  ;
  1616                                  ;       INT7    No Coprocessor
  1617                                  ;
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1619                              <1> ?%1 equ ($-$$)
  1620 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1621 00000056 68[AF010000]                                    push    czIntNoCoprocessor                              ;store message offset
  1622 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                  ;
  1625                                  ;       INT8    Double Fault
  1626                                  ;
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                                          menter  doublefault                                     ;doublefault interrupt
  1628                              <1> ?%1 equ ($-$$)
  1629 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1630 00000062 68[BE010000]                                    push    czIntDoubleFault                                ;store message offset
  1631 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;       INT9    Operand
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                                          menter  operand                                         ;operand interrupt
  1637                              <1> ?%1 equ ($-$$)
  1638 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1639 0000006E 68[CB010000]                                    push    czIntOperand                                    ;store message offset
  1640 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  ;
  1643                                  ;       INT10   Bad Task State Segment
  1644                                  ;
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                                          menter  badtss                                          ;bad TSS interrupt
  1646                              <1> ?%1 equ ($-$$)
  1647 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1648 0000007A 68[D3010000]                                    push    czIntBadTSS                                     ;store message offset
  1649 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  ;
  1652                                  ;       INT11   Not Present
  1653                                  ;
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                                          menter  notpresent                                      ;not present interrupt
  1655                              <1> ?%1 equ ($-$$)
  1656 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1657 00000086 68[EA010000]                                    push    czIntNotPresent                                 ;store message offset
  1658 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  ;
  1661                                  ;       INT12   Stack Limit
  1662                                  ;
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                                          menter  stacklimit                                      ;stack limit interrupt
  1664                              <1> ?%1 equ ($-$$)
  1665 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1666 00000092 68[F6010000]                                    push    czIntStackLimit                                 ;store message offset
  1667 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  ;
  1670                                  ;       INT13   General Protection Fault
  1671                                  ;
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                                          menter  protection                                      ;protection fault interrupt
  1673                              <1> ?%1 equ ($-$$)
  1674 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1675 0000009E 68[02020000]                                    push    czIntProtection                                 ;store message offset
  1676 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  ;
  1679                                  ;       INT14   Reserved
  1680                                  ;
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                                          menter  int14                                           ;(reserved)
  1682                              <1> ?%1 equ ($-$$)
  1683 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1684 000000AA 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1685 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT15   Reserved
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  int15                                           ;(reserved)
  1691                              <1> ?%1 equ ($-$$)
  1692 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1693 000000B6 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1694 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT16   Coprocessor Calculation
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  coproccalc                                      ;coprocessor calculation
  1700                              <1> ?%1 equ ($-$$)
  1701 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1702 000000C2 68[1B020000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1703 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT17   Reserved
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  int17                                           ;(reserved)
  1709                              <1> ?%1 equ ($-$$)
  1710 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1711 000000CE 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1712 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT18   Reserved
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  int18                                           ;(reserved)
  1718                              <1> ?%1 equ ($-$$)
  1719 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1720 000000D7 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1721 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT19   Reserved
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  int19                                           ;(reserved)
  1727                              <1> ?%1 equ ($-$$)
  1728 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1729 000000E0 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1730 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT20   Reserved
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  int20                                           ;(reserved)
  1736                              <1> ?%1 equ ($-$$)
  1737 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1738 000000E9 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1739 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT21   Reserved
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  int21                                           ;(reserved)
  1745                              <1> ?%1 equ ($-$$)
  1746 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1747 000000F2 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1748 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT22   Reserved
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  int22                                           ;(reserved)
  1754                              <1> ?%1 equ ($-$$)
  1755 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1756 000000FB 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1757 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT23   Reserved
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  int23                                           ;(reserved)
  1763                              <1> ?%1 equ ($-$$)
  1764 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1765 00000104 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1766 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT24   Reserved
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  int24                                           ;(reserved)
  1772                              <1> ?%1 equ ($-$$)
  1773 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1774 0000010D 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1775 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT25   Reserved
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  int25                                           ;(reserved)
  1781                              <1> ?%1 equ ($-$$)
  1782 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1783 00000116 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1784 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT26   Reserved
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  int26                                           ;(reserved)
  1790                              <1> ?%1 equ ($-$$)
  1791 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1792 0000011F 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1793 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT27   Reserved
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  int27                                           ;(reserved)
  1799                              <1> ?%1 equ ($-$$)
  1800 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1801 00000128 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1802 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT28   Reserved
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  int28                                           ;(reserved)
  1808                              <1> ?%1 equ ($-$$)
  1809 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1810 00000131 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1811 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT29   Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  int29                                           ;(reserved)
  1817                              <1> ?%1 equ ($-$$)
  1818 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1819 0000013A 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1820 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT30   Reserved
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  int30                                           ;(reserved)
  1826                              <1> ?%1 equ ($-$$)
  1827 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1828 00000143 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1829 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT31   Reserved
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  int31                                           ;(reserved)
  1835                              <1> ?%1 equ ($-$$)
  1836 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1837 0000014C 68[33020000]                                    push    czIntReserved                                   ;store message offset
  1838 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       Routine:        ReportInterrupt
  1842                                  ;
  1843                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1844                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1845                                  ;
  1846                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1847                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850 00000153 58                      ReportInterrupt         pop     eax                                             ;error message address
  1851 00000154 58                                              pop     eax                                             ;interrupt number
  1852 00000155 CF                                              iretd                                                   ;return
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  ;
  1855                                  ;       Processor Interrupt Name Strings
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858 00000156 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  1858 0000015F 6279207A65726F00   
  1859 00000167 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  1859 00000170 657000             
  1860 00000173 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  1860 0000017C 626C6520696E746572-
  1860 00000185 7275707400         
  1861 0000018A 427265616B00            czIntBreak              db      "Break",0
  1862 00000190 496E746F00              czIntInto               db      "Into",0
  1863 00000195 426F756E647300          czIntBounds             db      "Bounds",0
  1864 0000019C 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  1864 000001A5 74696F6E20436F6465-
  1864 000001AE 00                 
  1865 000001AF 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  1865 000001B8 6573736F7200       
  1866 000001BE 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  1866 000001C7 756C7400           
  1867 000001CB 4F706572616E6400        czIntOperand            db      "Operand",0
  1868 000001D3 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  1868 000001DC 537461746520536567-
  1868 000001E5 6D656E7400         
  1869 000001EA 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  1869 000001F3 6E7400             
  1870 000001F6 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  1870 000001FF 697400             
  1871 00000202 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  1871 0000020B 726F74656374696F6E-
  1871 00000214 204661756C7400     
  1872 0000021B 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1872 00000224 6F722043616C63756C-
  1872 0000022D 6174696F6E00       
  1873 00000233 526573657276656400      czIntReserved           db      "Reserved",0
  1874                                  ;=======================================================================================================================
  1875                                  ;
  1876                                  ;       Hardware Device Interupts
  1877                                  ;
  1878                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1879                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1880                                  ;       (BX=2028h).
  1881                                  ;
  1882                                  ;=======================================================================================================================
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  ;
  1885                                  ;       IRQ0    Clock Tick Interrupt
  1886                                  ;
  1887                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1888                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1889                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1890                                  ;
  1891                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1892                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1893                                  ;
  1894                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1895                                  ;       zero, the floppy disk motors are turned off.
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                                          menter  clocktick                                       ;clock tick interrupt
  1898                              <1> ?%1 equ ($-$$)
  1899 0000023C 50                                              push    eax                                             ;save modified regs
  1900 0000023D 52                                              push    edx                                             ;
  1901 0000023E 1E                                              push    ds                                              ;
  1902                                  ;
  1903                                  ;       Update the clock tick count and the elapsed days as needed.
  1904                                  ;
  1905 0000023F 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1906 00000241 1F                                              pop     ds                                              ;... into data segment register
  1907 00000242 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1908 00000247 40                                              inc     eax                                             ;increment clock ticks
  1909 00000248 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1910 0000024D 7208                                            jb      irq0.10                                         ;no, skip ahead
  1911 0000024F FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  1912 00000255 31C0                                            xor     eax,eax                                         ;reset clock ticks
  1913 00000257 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1914                                  ;
  1915                                  ;       Decrement floppy disk motor timeout.
  1916                                  ;
  1917 0000025C 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1918 00000263 741E                                            je      irq0.20                                         ;yes, skip ahead
  1919 00000265 FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1920 0000026B 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  1921                                  ;
  1922                                  ;       Turn off the floppy disk motor if appropriate.
  1923                                  ;
  1924 0000026D FB                                              sti                                                     ;enable maskable interrupts
  1925 0000026E B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1926 00000270 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1927 00000272 EC                                              in      al,dx                                           ;FDC main status byte
  1928 00000273 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1929 00000275 75F7                                            jnz     irq0.15                                         ;wait while busy
  1930 00000277 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1931 00000279 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  1932 0000027E B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  1933 00000280 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1934 00000282 EE                                              out     dx,al                                           ;turn motor off
  1935                                  ;
  1936                                  ;       Signal the end of the hardware interrupt.
  1937                                  ;
  1938 00000283 E8CA050000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1939                                  ;
  1940                                  ;       Restore and return.
  1941                                  ;
  1942 00000288 1F                                              pop     ds                                              ;restore modified regs
  1943 00000289 5A                                              pop     edx                                             ;
  1944 0000028A 58                                              pop     eax                                             ;
  1945 0000028B CF                                              iretd                                                   ;return
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;       IRQ1    Keyboard Interrupt
  1949                                  ;
  1950                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1951                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1952                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1953                                  ;       ALL modified registers upon return.
  1954                                  ;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                                          menter  keyboard                                        ;keyboard interrrupt
  1956                              <1> ?%1 equ ($-$$)
  1957 0000028C 50                                              push    eax                                             ;save non-volatile regs
  1958 0000028D 53                                              push    ebx                                             ;
  1959 0000028E 51                                              push    ecx                                             ;
  1960 0000028F 56                                              push    esi                                             ;
  1961 00000290 1E                                              push    ds                                              ;
  1962 00000291 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  1963 00000293 1F                                              pop     ds                                              ;... into data segment register
  1964 00000294 30C0                                            xor     al,al                                           ;zero
  1965 00000296 A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  1966 0000029B A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  1967 000002A0 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  1968 000002A5 A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  1969 000002AA A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  1970 000002AF A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  1971 000002B4 B020                                            mov     al,' '                                          ;space
  1972 000002B6 A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  1973 000002BB B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1974 000002BD F6D0                                            not     al                                              ;controller timeout mask
  1975 000002BF 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1976 000002C5 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  1977 000002CB 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  1978 000002D1 E8B7050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  1979 000002D6 0F84AD010000                                    jz      irq1.140                                        ;yes, skip ahead
  1980 000002DC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  1981 000002DE A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  1982 000002E3 88C4                                            mov     ah,al                                           ;copy scan code 0
  1983 000002E5 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1984 000002E7 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1985 000002EA 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  1986 000002F0 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1987 000002F3 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  1988 000002F9 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1989 000002FB 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1990 000002FE 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  1991 00000304 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1992 00000307 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  1993 0000030D B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  1994 0000030F 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1995 00000312 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  1996 00000318 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1997 0000031B 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  1998 00000321 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  1999 00000323 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2000 00000326 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2001 0000032C 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2002 0000032F 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2003 00000335 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2004 00000337 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2005 0000033A 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2006 00000340 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2007 00000342 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2008 00000345 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2009 0000034B B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2010 0000034D 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2011 00000350 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2012 00000356 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2013 00000359 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2014 0000035F E829050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2015 00000364 0F841F010000                                    jz      irq1.140                                        ;yes, skip ahead
  2016 0000036A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2017 0000036C A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2018 00000371 88C4                                            mov     ah,al                                           ;copy scan code 1
  2019 00000373 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2020 00000375 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2021 00000378 7456                                            je      irq1.30                                         ;yes, set flag
  2022 0000037A 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2023 0000037D 7455                                            je      irq1.40                                         ;yes, reset flag
  2024 0000037F B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2025 00000381 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2026 00000384 744A                                            je      irq1.30                                         ;yes, set flag
  2027 00000386 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2028 00000389 7449                                            je      irq1.40                                         ;yes, reset flag
  2029 0000038B 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2030 0000038E 0F84BB000000                                    je      irq1.80                                         ;yes, skip ahead
  2031 00000394 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2032 00000397 0F84B2000000                                    je      irq1.80                                         ;yes, skip ahead
  2033 0000039D 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2034 000003A0 7405                                            je      irq1.10                                         ;yes, continue
  2035 000003A2 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2036 000003A5 7524                                            jne     irq1.20                                         ;no, skip ahead
  2037 000003A7 E8E1040000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2038 000003AC 0F84D7000000                                    jz      irq1.140                                        ;yes, skip ahead
  2039 000003B2 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2040 000003B4 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2041 000003B9 E8CF040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2042 000003BE 0F84C5000000                                    jz      irq1.140                                        ;yes, skip ahead
  2043 000003C4 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2044 000003C6 A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2045 000003CB E9C1000000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2046 000003D0 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2047 000003D2 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2048 000003D4 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2049 000003D6 20C3                                            and     bl,al                                           ;reset shift flag
  2050 000003D8 EB07                                            jmp     irq1.60                                         ;skip ahead
  2051 000003DA 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2052 000003DC E87D040000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2053 000003E1 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2054 000003E7 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2055 000003ED E8F2020000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2056 000003F2 E99A000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2057 000003F7 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2058 000003FA 7553                                            jne     irq1.80                                         ;no continue
  2059 000003FC E88C040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2060 00000401 0F8482000000                                    jz      irq1.140                                        ;yes, skip ahead
  2061 00000407 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2062 00000409 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2063 0000040E 88C4                                            mov     ah,al                                           ;copy scan code 1
  2064 00000410 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2065 00000413 757C                                            jne     irq1.150                                        ;no, finish keyboard handling
  2066 00000415 E873040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2067 0000041A 746D                                            jz      irq1.140                                        ;yes, skip ahead
  2068 0000041C E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2069 0000041E A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2070 00000423 E865040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2071 00000428 745F                                            jz      irq1.140                                        ;yes, skip ahead
  2072 0000042A E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2073 0000042C A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2074 00000431 E857040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2075 00000436 7451                                            jz      irq1.140                                        ;yes, skip ahead
  2076 00000438 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2077 0000043A A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2078 0000043F E849040000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2079 00000444 7443                                            jz      irq1.140                                        ;yes, skip ahead
  2080 00000446 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2081 00000448 A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2082 0000044D EB42                                            jmp     irq1.150                                        ;continue
  2083 0000044F 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2084 00000451 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2085 00000454 7531                                            jnz     irq1.130                                        ;yes, skip ahead
  2086 00000456 BE[A1040000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2087 0000045B F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2088 0000045E 7405                                            jz      irq1.90                                         ;no, skip ahead
  2089 00000460 BE[21050000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2090 00000465 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2091 00000468 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2092 0000046C F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2093 0000046F 7411                                            jz      irq1.100                                        ;no skip ahead
  2094 00000471 88C1                                            mov     cl,al                                           ;copy ASCII code
  2095 00000473 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2096 00000476 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2097 00000479 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2098 0000047B 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2099 0000047E 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2100 00000480 3420                                            xor     al,EASCIICASE                                   ;switch case
  2101 00000482 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2102 00000487 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2103 00000489 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2104 0000048B 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2105 00000491 E8F6010000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2106 00000496 E8B7030000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2107 0000049B 1F                                              pop     ds                                              ;restore non-volatile regs
  2108 0000049C 5E                                              pop     esi                                             ;
  2109 0000049D 59                                              pop     ecx                                             ;
  2110 0000049E 5B                                              pop     ebx                                             ;
  2111 0000049F 58                                              pop     eax                                             ;
  2112 000004A0 CF                                              iretd                                                   ;return
  2113                                  ;-----------------------------------------------------------------------------------------------------------------------
  2114                                  ;       Scan-Code to ASCII Translation Tables
  2115                                  ;-----------------------------------------------------------------------------------------------------------------------
  2116 000004A1 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2117 000004A9 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2118 000004B1 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2119 000004B9 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2120 000004C1 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2121 000004C9 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2122 000004D1 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2123 000004D9 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2124 000004E1 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2125 000004E9 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2126 000004F1 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2127 000004F9 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2128 00000501 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2129 00000509 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2130 00000511 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2131 00000519 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2132 00000521 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2133 00000529 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2134 00000531 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2135 00000539 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2136 00000541 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2137 00000549 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2138 00000551 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2139 00000559 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2140 00000561 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2141 00000569 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2142 00000571 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2143 00000579 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2144 00000581 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2145 00000589 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2146 00000591 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2147 00000599 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2148                                  ;-----------------------------------------------------------------------------------------------------------------------
  2149                                  ;
  2150                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2151                                  ;
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153                                                          menter  iochannel                                       ;secondary 8259A cascade
  2153                              <1> ?%1 equ ($-$$)
  2154 000005A1 50                                              push    eax                                             ;save modified regs
  2155 000005A2 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2156                                  ;-----------------------------------------------------------------------------------------------------------------------
  2157                                  ;
  2158                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2159                                  ;
  2160                                  ;-----------------------------------------------------------------------------------------------------------------------
  2161                                                          menter  com2                                            ;serial port 2 interrupt
  2161                              <1> ?%1 equ ($-$$)
  2162 000005A4 50                                              push    eax                                             ;save modified regs
  2163 000005A5 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                  ;
  2166                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2167                                  ;
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169                                                          menter  com1                                            ;serial port 1 interrupt
  2169                              <1> ?%1 equ ($-$$)
  2170 000005A7 50                                              push    eax                                             ;save modified regs
  2171 000005A8 EB39                                            jmp     hwint                                           ;end interrupt and return
  2172                                  ;-----------------------------------------------------------------------------------------------------------------------
  2173                                  ;
  2174                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2175                                  ;
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2177                              <1> ?%1 equ ($-$$)
  2178 000005AA 50                                              push    eax                                             ;save modified regs
  2179 000005AB EB36                                            jmp     hwint                                           ;end interrupt and return
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                  ;
  2182                                  ;       IRQ6    Diskette Hardware Interrupt
  2183                                  ;
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                                          menter  diskette                                        ;floppy disk interrupt
  2185                              <1> ?%1 equ ($-$$)
  2186 000005AD 50                                              push    eax                                             ;save non-volatile regs
  2187 000005AE 1E                                              push    ds                                              ;
  2188 000005AF 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2189 000005B1 1F                                              pop     ds                                              ;... into DS register
  2190 000005B2 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2191 000005B7 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2192 000005B9 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2193 000005BE 1F                                              pop     ds                                              ;restore non-volatile regs
  2194 000005BF EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2195                                  ;-----------------------------------------------------------------------------------------------------------------------
  2196                                  ;
  2197                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2198                                  ;
  2199                                  ;-----------------------------------------------------------------------------------------------------------------------
  2200                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2200                              <1> ?%1 equ ($-$$)
  2201 000005C1 50                                              push    eax                                             ;save modified regs
  2202 000005C2 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  ;
  2205                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                                          menter  rtclock                                         ;real-time clock interrupt
  2208                              <1> ?%1 equ ($-$$)
  2209 000005C4 50                                              push    eax                                             ;save modified regs
  2210 000005C5 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                  ;
  2213                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2214                                  ;
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2216                              <1> ?%1 equ ($-$$)
  2217 000005C7 50                                              push    eax                                             ;save modified regs
  2218 000005C8 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  ;
  2221                                  ;       IRQ10   Reserved Hardware Interrupt
  2222                                  ;
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                                          menter  irq10                                           ;reserved
  2224                              <1> ?%1 equ ($-$$)
  2225 000005CA 50                                              push    eax                                             ;save modified regs
  2226 000005CB EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                  ;
  2229                                  ;       IRQ11   Reserved Hardware Interrupt
  2230                                  ;
  2231                                  ;-----------------------------------------------------------------------------------------------------------------------
  2232                                                          menter  irq11                                           ;reserved
  2232                              <1> ?%1 equ ($-$$)
  2233 000005CD 50                                              push    eax                                             ;save modified regs
  2234 000005CE EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2235                                  ;-----------------------------------------------------------------------------------------------------------------------
  2236                                  ;
  2237                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2238                                  ;
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2240                              <1> ?%1 equ ($-$$)
  2241 000005D0 50                                              push    eax                                             ;save modified regs
  2242 000005D1 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2243                                  ;-----------------------------------------------------------------------------------------------------------------------
  2244                                  ;
  2245                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2246                                  ;
  2247                                  ;-----------------------------------------------------------------------------------------------------------------------
  2248                                                          menter  coprocessor                                     ;coprocessor interrupt
  2248                              <1> ?%1 equ ($-$$)
  2249 000005D3 50                                              push    eax                                             ;save modified regs
  2250 000005D4 EB06                                            jmp     hwwint                                          ;end interrupt and return
  2251                                  ;-----------------------------------------------------------------------------------------------------------------------
  2252                                  ;
  2253                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2254                                  ;
  2255                                  ;-----------------------------------------------------------------------------------------------------------------------
  2256                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2256                              <1> ?%1 equ ($-$$)
  2257 000005D6 50                                              push    eax                                             ;save modified regs
  2258 000005D7 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2259                                  ;-----------------------------------------------------------------------------------------------------------------------
  2260                                  ;
  2261                                  ;       IRQ15   Reserved Hardware Interrupt
  2262                                  ;
  2263                                  ;-----------------------------------------------------------------------------------------------------------------------
  2264                                                          menter  irq15                                           ;reserved
  2264                              <1> ?%1 equ ($-$$)
  2265 000005D9 50                                              push    eax                                             ;save modified regs
  2266 000005DA EB00                                            jmp     hwwint                                          ;end interrupt and return
  2267                                  ;-----------------------------------------------------------------------------------------------------------------------
  2268                                  ;
  2269                                  ;       Exit from hardware interrupt
  2270                                  ;
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272 000005DC E877020000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2273 000005E1 EB05                                            jmp     hwint90                                         ;skip ahead
  2274 000005E3 E86A020000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2275 000005E8 58                      hwint90                 pop     eax                                             ;restore modified regs
  2276 000005E9 CF                                              iretd                                                   ;return from interrupt
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278                                  ;
  2279                                  ;       INT 30h Operating System Software Service Interrupt
  2280                                  ;
  2281                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2282                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2283                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2284                                  ;       the entry address of the specific function from a table.
  2285                                  ;
  2286                                  ;-----------------------------------------------------------------------------------------------------------------------
  2287                                                          menter  svc
  2287                              <1> ?%1 equ ($-$$)
  2288 000005EA 3C03                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2289 000005EC 730D                                            jae     svc90                                           ;yes, skip ahead
  2290 000005EE 0FB6C0                                          movzx   eax,al                                          ;function
  2291 000005F1 C1E002                                          shl     eax,2                                           ;offset into table
  2292 000005F4 2EFF90[FC050000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2293 000005FB CF                      svc90                   iretd                                                   ;return from interrupt
  2294                                  ;-----------------------------------------------------------------------------------------------------------------------
  2295                                  ;
  2296                                  ;       Service Request Table
  2297                                  ;
  2298                                  ;
  2299                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2300                                  ;
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2302                              <1> tsvc :
  2302                              <1> e%1 equ ($-tsvc)/4
  2302 000005FC [AB070000]          <1>  dd %1
  2303                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2303                              <1> e%1 equ ($-tsvc)/4
  2303 00000600 [28080000]          <1>  dd %1
  2304                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2304                              <1> e%1 equ ($-tsvc)/4
  2304 00000604 [7E070000]          <1>  dd %1
  2305                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307                                  ;
  2308                                  ;       Service Request Macros
  2309                                  ;
  2310                                  ;       These macros provide positional parameterization of service request calls.
  2311                                  ;
  2312                                  ;-----------------------------------------------------------------------------------------------------------------------
  2313                                  %macro                  clearConsoleScreen 0
  2314                                                          mov     al,eClearConsoleScreen                          ;function code
  2315                                                          int     _svc                                            ;invoke OS service
  2316                                  %endmacro
  2317                                  %macro                  placeCursor 0
  2318                                                          mov     al,ePlaceCursor                                 ;function code
  2319                                                          int     _svc                                            ;invoke OS service
  2320                                  %endmacro
  2321                                  %macro                  putConsoleString 1
  2322                                                          mov     edx,%1                                          ;string address
  2323                                                          mov     al,ePutConsoleString                            ;function code
  2324                                                          int     _svc                                            ;invoke OS service
  2325                                  %endmacro
  2326                                  ;=======================================================================================================================
  2327                                  ;
  2328                                  ;       Kernel Function Library
  2329                                  ;
  2330                                  ;=======================================================================================================================
  2331                                  ;=======================================================================================================================
  2332                                  ;
  2333                                  ;       Console Helper Routines
  2334                                  ;
  2335                                  ;       FirstConsoleColumn
  2336                                  ;       NextConsoleColumn
  2337                                  ;       NextConsoleRow
  2338                                  ;       PutConsoleChar
  2339                                  ;       PutConsoleHexByte
  2340                                  ;       PutConsoleOIAChar
  2341                                  ;       PutConsoleOIAShift
  2342                                  ;       PutConsoleString
  2343                                  ;
  2344                                  ;=======================================================================================================================
  2345                                  ;-----------------------------------------------------------------------------------------------------------------------
  2346                                  ;
  2347                                  ;       Routine:        FirstConsoleColumn
  2348                                  ;
  2349                                  ;       Description:    This routine resets the console column to start of the row.
  2350                                  ;
  2351                                  ;       In:             DS      OS data selector
  2352                                  ;
  2353                                  ;-----------------------------------------------------------------------------------------------------------------------
  2354 00000608 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2355 0000060A A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2356 0000060F C3                                              ret                                                     ;return
  2357                                  ;-----------------------------------------------------------------------------------------------------------------------
  2358                                  ;
  2359                                  ;       Routine:        NextConsoleColumn
  2360                                  ;
  2361                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2362                                  ;                       incremented if the end of the current row is reached.
  2363                                  ;
  2364                                  ;       In:             DS      OS data selector
  2365                                  ;
  2366                                  ;-----------------------------------------------------------------------------------------------------------------------
  2367 00000610 A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2368 00000615 FEC0                                            inc     al                                              ;increment column
  2369 00000617 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2370 0000061C 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2371 0000061E 720A                                            jb      .10                                             ;no, skip ahead
  2372 00000620 E8E3FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2373 00000625 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2374 0000062A C3                      .10                     ret                                                     ;return
  2375                                  ;-----------------------------------------------------------------------------------------------------------------------
  2376                                  ;
  2377                                  ;       Routine:        NextConsoleRow
  2378                                  ;
  2379                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2380                                  ;
  2381                                  ;       In:             DS      OS data selector
  2382                                  ;
  2383                                  ;-----------------------------------------------------------------------------------------------------------------------
  2384 0000062B A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2385 00000630 FEC0                                            inc     al                                              ;increment row
  2386 00000632 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2387 00000637 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2388 00000639 7211                                            jb      .10                                             ;no, skip ahead
  2389 0000063B E8A6010000                                      call    ScrollConsoleRow                                ;scroll up one row
  2390 00000640 A001080000                                      mov     al,[wbConsoleRow]                               ;row
  2391 00000645 FEC8                                            dec     al                                              ;decrement row
  2392 00000647 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2393 0000064C C3                      .10                     ret                                                     ;return
  2394                                  ;-----------------------------------------------------------------------------------------------------------------------
  2395                                  ;
  2396                                  ;       Routine:        PutConsoleChar
  2397                                  ;
  2398                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2399                                  ;
  2400                                  ;       In:             AL      ASCII character
  2401                                  ;                       DS      OS data selector
  2402                                  ;
  2403                                  ;-----------------------------------------------------------------------------------------------------------------------
  2404 0000064D 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2405 0000064E 06                                              push    es                                              ;
  2406 0000064F 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2407 00000651 07                                              pop     es                                              ;... into extra segment reg
  2408 00000652 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  2409 00000658 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  2410 0000065E E8AF010000                                      call    SetConsoleChar                                  ;put character at row, column
  2411 00000663 07                                              pop     es                                              ;restore non-volatile regs
  2412 00000664 59                                              pop     ecx                                             ;
  2413 00000665 C3                                              ret                                                     ;return
  2414                                  ;-----------------------------------------------------------------------------------------------------------------------
  2415                                  ;
  2416                                  ;       Routine:        PutConsoleHexByte
  2417                                  ;
  2418                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2419                                  ;
  2420                                  ;       In:             AL      byte value
  2421                                  ;                       CL      column
  2422                                  ;                       CH      row
  2423                                  ;                       DS      OS data selector
  2424                                  ;                       ES      CGA selector
  2425                                  ;
  2426                                  ;-----------------------------------------------------------------------------------------------------------------------
  2427 00000666 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2428 00000667 88C3                                            mov     bl,al                                           ;save byte value
  2429 00000669 C0E804                                          shr     al,4                                            ;hi-order nybble
  2430 0000066C 0C30                                            or      al,030h                                         ;apply ASCII zone
  2431 0000066E 3C3A                                            cmp     al,03ah                                         ;numeric?
  2432 00000670 7202                                            jb      .10                                             ;yes, skip ahead
  2433 00000672 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2434 00000674 E899010000              .10                     call    SetConsoleChar                                  ;display ASCII character
  2435 00000679 88D8                                            mov     al,bl                                           ;byte value
  2436 0000067B 240F                                            and     al,0fh                                          ;lo-order nybble
  2437 0000067D 0C30                                            or      al,30h                                          ;apply ASCII zone
  2438 0000067F 3C3A                                            cmp     al,03ah                                         ;numeric?
  2439 00000681 7202                                            jb      .20                                             ;yes, skip ahead
  2440 00000683 0407                                            add     al,7                                            ;add ASCII offset for alpha
  2441 00000685 E888010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  2442 0000068A 5B                                              pop     ebx                                             ;restore non-volatile regs
  2443 0000068B C3                                              ret                                                     ;return
  2444                                  ;-----------------------------------------------------------------------------------------------------------------------
  2445                                  ;
  2446                                  ;       Routine:        PutConsoleOIAChar
  2447                                  ;
  2448                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2449                                  ;
  2450                                  ;       In:             DS      OS data selector
  2451                                  ;
  2452                                  ;-----------------------------------------------------------------------------------------------------------------------
  2453 0000068C 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2454 0000068D 51                                              push    ecx                                             ;
  2455 0000068E 56                                              push    esi                                             ;
  2456 0000068F 1E                                              push    ds                                              ;
  2457 00000690 06                                              push    es                                              ;
  2458 00000691 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2459 00000693 1F                                              pop     ds                                              ;... into data segment register
  2460 00000694 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2461 00000696 07                                              pop     es                                              ;... into extra segment register
  2462 00000697 BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  2463 0000069C B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  2464 0000069E B300                                            mov     bl,0                                            ;starting column
  2465 000006A0 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  2466 000006A5 51                      .10                     push    ecx                                             ;save remaining count
  2467 000006A6 89D9                                            mov     ecx,ebx                                         ;row, column
  2468 000006A8 AC                                              lodsb                                                   ;read scan code
  2469 000006A9 08C0                                            or      al,al                                           ;scan code present?
  2470 000006AB 7407                                            jz      .20                                             ;no, skip ahead
  2471 000006AD E8B4FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  2472 000006B2 EB0E                                            jmp     .30                                             ;continue
  2473 000006B4 B020                    .20                     mov     al,' '                                          ;ASCII space
  2474 000006B6 E857010000                                      call    SetConsoleChar                                  ;display space
  2475 000006BB B020                                            mov     al,' '                                          ;ASCII space
  2476 000006BD E850010000                                      call    SetConsoleChar                                  ;display space
  2477 000006C2 80C302                  .30                     add     bl,2                                            ;next column (+2)
  2478 000006C5 59                                              pop     ecx                                             ;restore remaining
  2479 000006C6 E2DD                                            loop    .10                                             ;next code
  2480 000006C8 A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  2481 000006CD 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  2482 000006CF 720D                                            jb      .40                                             ;no, skip ahead
  2483 000006D1 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  2484 000006D3 7709                                            ja      .40                                             ;no, skip ahead
  2485 000006D5 88FD                                            mov     ch,bh                                           ;OIA row
  2486 000006D7 B128                                            mov     cl,40                                           ;character display column
  2487 000006D9 E834010000                                      call    SetConsoleChar                                  ;display ASCII character
  2488 000006DE 07                      .40                     pop     es                                              ;restore non-volatile regs
  2489 000006DF 1F                                              pop     ds                                              ;
  2490 000006E0 5E                                              pop     esi                                             ;
  2491 000006E1 59                                              pop     ecx                                             ;
  2492 000006E2 5B                                              pop     ebx                                             ;
  2493 000006E3 C3                                              ret                                                     ;return
  2494                                  ;-----------------------------------------------------------------------------------------------------------------------
  2495                                  ;
  2496                                  ;       Routine:        PutConsoleOIAShift
  2497                                  ;
  2498                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2499                                  ;
  2500                                  ;       In:             BL      shift flags
  2501                                  ;                       BH      lock flags
  2502                                  ;                       DS      OS data selector
  2503                                  ;
  2504                                  ;-----------------------------------------------------------------------------------------------------------------------
  2505 000006E4 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2506 000006E5 06                                              push    es                                              ;
  2507 000006E6 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2508 000006E8 07                                              pop     es                                              ;... into ES register
  2509 000006E9 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  2510 000006EB B020                                            mov     al,EASCIISPACE                                  ;space is default character
  2511 000006ED F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2512 000006F0 7402                                            jz      .10                                             ;no, skip ahead
  2513 000006F2 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2514 000006F4 B10E                    .10                     mov     cl,14                                           ;indicator column
  2515 000006F6 E817010000                                      call    SetConsoleChar                                  ;display ASCII character
  2516 000006FB B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2517 000006FD F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2518 00000700 7402                                            jz      .20                                             ;no, skip ahead
  2519 00000702 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2520 00000704 B140                    .20                     mov     cl,64                                           ;indicator column
  2521 00000706 E807010000                                      call    SetConsoleChar                                  ;display ASCII character
  2522 0000070B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2523 0000070D F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2524 00000710 7402                                            jz      .30                                             ;no, skip ahead
  2525 00000712 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2526 00000714 B10F                    .30                     mov     cl,15                                           ;indicator column
  2527 00000716 E8F7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2528 0000071B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2529 0000071D F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2530 00000720 7402                                            jz      .40                                             ;no, skip ahead
  2531 00000722 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2532 00000724 B13F                    .40                     mov     cl,63                                           ;indicator column
  2533 00000726 E8E7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2534 0000072B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2535 0000072D F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2536 00000730 7402                                            jz      .50                                             ;no, skip ahead
  2537 00000732 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2538 00000734 B110                    .50                     mov     cl,16                                           ;indicator column
  2539 00000736 E8D7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2540 0000073B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2541 0000073D F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2542 00000740 7402                                            jz      .60                                             ;no, skip ahead
  2543 00000742 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  2544 00000744 B13E                    .60                     mov     cl,62                                           ;indicator column
  2545 00000746 E8C7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2546 0000074B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2547 0000074D F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2548 00000750 7402                                            jz      .70                                             ;no, skip ahead
  2549 00000752 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  2550 00000754 B14E                    .70                     mov     cl,78                                           ;indicator column
  2551 00000756 E8B7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2552 0000075B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2553 0000075D F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2554 00000760 7402                                            jz      .80                                             ;no, skip ahead
  2555 00000762 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  2556 00000764 B14D                    .80                     mov     cl,77                                           ;indicator column
  2557 00000766 E8A7000000                                      call    SetConsoleChar                                  ;display ASCII character
  2558 0000076B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2559 0000076D F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2560 00000770 7402                                            jz      .90                                             ;no, skip ahead
  2561 00000772 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  2562 00000774 B14C                    .90                     mov     cl,76                                           ;indicator column
  2563 00000776 E897000000                                      call    SetConsoleChar                                  ;display ASCII character
  2564 0000077B 07                                              pop     es                                              ;restore non-volatile regs
  2565 0000077C 59                                              pop     ecx                                             ;
  2566 0000077D C3                                              ret                                                     ;return
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568                                  ;
  2569                                  ;       Routine:        PutConsoleString
  2570                                  ;
  2571                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2572                                  ;                       console position as needed.
  2573                                  ;
  2574                                  ;       In:             EDX     source address
  2575                                  ;                       DS      OS data selector
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578 0000077E 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  2579 0000077F 89D6                                            mov     esi,edx                                         ;source address
  2580 00000781 FC                                              cld                                                     ;forward strings
  2581 00000782 AC                      .10                     lodsb                                                   ;ASCII character
  2582 00000783 08C0                                            or      al,al                                           ;end of string?
  2583 00000785 7422                                            jz      .40                                             ;yes, skip ahead
  2584 00000787 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  2585 00000789 7507                                            jne     .20                                             ;no, skip ahead
  2586 0000078B E878FEFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  2587 00000790 EBF0                                            jmp     .10                                             ;next character
  2588 00000792 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2589 00000794 7507                                            jne     .30                                             ;no, skip ahead
  2590 00000796 E890FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  2591 0000079B EBE5                                            jmp     .10                                             ;next character
  2592 0000079D E8ABFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  2593 000007A2 E869FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  2594 000007A7 EBD9                                            jmp     .10                                             ;next character
  2595 000007A9 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  2596 000007AA C3                                              ret                                                     ;return
  2597                                  ;=======================================================================================================================
  2598                                  ;
  2599                                  ;       Memory-Mapped Video Routines
  2600                                  ;
  2601                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2602                                  ;
  2603                                  ;       ClearConsoleScreen
  2604                                  ;       ScrollConsoleRow
  2605                                  ;       SetConsoleChar
  2606                                  ;
  2607                                  ;=======================================================================================================================
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                  ;
  2610                                  ;       Routine:        ClearConsoleScreen
  2611                                  ;
  2612                                  ;       Description:    This routine clears the console (CGA) screen.
  2613                                  ;
  2614                                  ;-----------------------------------------------------------------------------------------------------------------------
  2615 000007AB 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2616 000007AC 57                                              push    edi                                             ;
  2617 000007AD 1E                                              push    ds                                              ;
  2618 000007AE 06                                              push    es                                              ;
  2619 000007AF 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  2620 000007B1 1F                                              pop     ds                                              ;... into DS register
  2621 000007B2 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2622 000007B4 07                                              pop     es                                              ;... into ES register
  2623 000007B5 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  2624 000007BA B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2625 000007BF 31FF                                            xor     edi,edi                                         ;target offset
  2626 000007C1 FC                                              cld                                                     ;forward strings
  2627 000007C2 F3AB                                            rep     stosd                                           ;reset screen body
  2628 000007C4 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2629 000007C9 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2630 000007CE F3AB                                            rep     stosd                                           ;reset OIA line
  2631 000007D0 30C0                                            xor     al,al                                           ;zero register
  2632 000007D2 A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  2633 000007D7 A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  2634 000007DC E847000000                                      call    PlaceCursor                                     ;place cursor at current position
  2635 000007E1 07                                              pop     es                                              ;restore non-volatile regs
  2636 000007E2 1F                                              pop     ds                                              ;
  2637 000007E3 5F                                              pop     edi                                             ;
  2638 000007E4 59                                              pop     ecx                                             ;
  2639 000007E5 C3                                              ret                                                     ;return
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                  ;
  2642                                  ;       Routine:        ScrollConsoleRow
  2643                                  ;
  2644                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2645                                  ;
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647 000007E6 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2648 000007E7 56                                              push    esi                                             ;
  2649 000007E8 57                                              push    edi                                             ;
  2650 000007E9 1E                                              push    ds                                              ;
  2651 000007EA 06                                              push    es                                              ;
  2652 000007EB 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2653 000007ED 1F                                              pop     ds                                              ;... into DS
  2654 000007EE 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  2655 000007F0 07                                              pop     es                                              ;... into ES
  2656 000007F1 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2657 000007F6 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2658 000007FB 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  2659 000007FD FC                                              cld                                                     ;forward strings
  2660 000007FE F3A5                                            rep     movsd                                           ;move 24 lines up
  2661 00000800 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2662 00000805 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  2663 0000080A F3AB                                            rep     stosd                                           ;clear bottom row
  2664 0000080C 07                                              pop     es                                              ;restore non-volatile regs
  2665 0000080D 1F                                              pop     ds                                              ;
  2666 0000080E 5F                                              pop     edi                                             ;
  2667 0000080F 5E                                              pop     esi                                             ;
  2668 00000810 59                                              pop     ecx                                             ;
  2669 00000811 C3                                              ret                                                     ;return
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                  ;
  2672                                  ;       Routine:        SetConsoleChar
  2673                                  ;
  2674                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2675                                  ;
  2676                                  ;       In:             AL      ASCII character
  2677                                  ;                       CL      column
  2678                                  ;                       CH      row
  2679                                  ;                       ES      CGA selector
  2680                                  ;
  2681                                  ;       Out:            EAX     last target address written (ES:)
  2682                                  ;                       CL      column + 1
  2683                                  ;
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685 00000812 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  2686 00000814 0FB6C5                                          movzx   eax,ch                                          ;row
  2687 00000817 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  2688 00000819 F6E4                                            mul     ah                                              ;row * cols/row
  2689 0000081B 00C8                                            add     al,cl                                           ;add column
  2690 0000081D 80D400                                          adc     ah,0                                            ;handle carry
  2691 00000820 D1E0                                            shl     eax,1                                           ;screen offset
  2692 00000822 268810                                          mov     [es:eax],dl                                     ;store character
  2693 00000825 FEC1                                            inc     cl                                              ;next column
  2694 00000827 C3                                              ret                                                     ;return
  2695                                  ;=======================================================================================================================
  2696                                  ;
  2697                                  ;       Input/Output Routines
  2698                                  ;
  2699                                  ;       These routines read and/or write directly to ports.
  2700                                  ;
  2701                                  ;       PlaceCursor
  2702                                  ;       PutPrimaryEndOfInt
  2703                                  ;       PutSecondaryEndOfInt
  2704                                  ;       SetKeyboardLamps
  2705                                  ;       WaitForKeyInBuffer
  2706                                  ;       WaitForKeyOutBuffer
  2707                                  ;
  2708                                  ;=======================================================================================================================
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                  ;
  2711                                  ;       Routine:        PlaceCursor
  2712                                  ;
  2713                                  ;       Description:    This routine positions the cursor on the console.
  2714                                  ;
  2715                                  ;       In:             DS      OS data selector
  2716                                  ;
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718 00000828 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  2719 00000829 A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  2720 0000082E B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  2721 00000830 F6E4                                            mul     ah                                              ;row offset
  2722 00000832 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  2723 00000838 80D400                                          adc     ah,0                                            ;add overflow
  2724 0000083B 89C1                                            mov     ecx,eax                                         ;screen offset
  2725 0000083D B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2726 0000083F B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2727 00000841 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2728 00000843 EE                                              out     dx,al                                           ;select register
  2729 00000844 42                                              inc     edx                                             ;data port
  2730 00000845 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  2731 00000847 EE                                              out     dx,al                                           ;store hi-order loc
  2732 00000848 4A                                              dec     edx                                             ;register select port
  2733 00000849 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2734 0000084B EE                                              out     dx,al                                           ;select register
  2735 0000084C 42                                              inc     edx                                             ;data port
  2736 0000084D 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  2737 0000084F EE                                              out     dx,al                                           ;store lo-order loc
  2738 00000850 59                                              pop     ecx                                             ;restore non-volatile regs
  2739 00000851 C3                                              ret                                                     ;return
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  ;
  2742                                  ;       Routine:        PutPrimaryEndOfInt
  2743                                  ;
  2744                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2745                                  ;
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747 00000852 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  2748 00000853 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2749 00000855 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2750 00000857 C3                                              ret                                                     ;return
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                  ;
  2753                                  ;       Routine:        PutSecondaryEndOfInt
  2754                                  ;
  2755                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2756                                  ;
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758 00000858 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  2759 00000859 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2760 0000085B E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2761 0000085D C3                                              ret                                                     ;return
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  ;
  2764                                  ;       Routine:        SetKeyboardLamps
  2765                                  ;
  2766                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2767                                  ;
  2768                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2769                                  ;
  2770                                  ;-----------------------------------------------------------------------------------------------------------------------
  2771 0000085E E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2772 00000863 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2773 00000865 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  2774 00000867 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2775 0000086C E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2776 0000086E E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2777 00000873 88F8                                            mov     al,bh                                           ;set/reset lamps value
  2778 00000875 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  2779 00000877 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2780 0000087C E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2781 0000087E C3                                              ret                                                     ;return
  2782                                  ;-----------------------------------------------------------------------------------------------------------------------
  2783                                  ;
  2784                                  ;       Routine:        WaitForKeyInBuffer
  2785                                  ;
  2786                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2787                                  ;
  2788                                  ;       Out:            ZF      1 = Input buffer ready
  2789                                  ;                               0 = Input buffer not ready after timeout
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792 0000087F 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2793 00000880 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2794 00000885 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2795 00000887 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  2796 00000889 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  2797 0000088B 59                                              pop     ecx                                             ;restore non-volatile regs
  2798 0000088C C3                                              ret                                                     ;return
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                  ;
  2801                                  ;       Routine:        WaitForKeyOutBuffer
  2802                                  ;
  2803                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2804                                  ;
  2805                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2806                                  ;                               0 = Output buffer empty after timeout
  2807                                  ;
  2808                                  ;-----------------------------------------------------------------------------------------------------------------------
  2809 0000088D 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2810 0000088E B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2811 00000893 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2812 00000895 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  2813 00000897 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  2814 00000899 59                                              pop     ecx                                             ;restore non-volatile regs
  2815 0000089A C3                                              ret                                                     ;return
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  ;
  2818                                  ;       End of the Kernel Function Library
  2819                                  ;
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821 0000089B 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  2822                                  ;=======================================================================================================================
  2823                                  ;
  2824                                  ;       Console Task
  2825                                  ;
  2826                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2827                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2828                                  ;       screen and responds to user commands.
  2829                                  ;
  2830                                  ;=======================================================================================================================
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                  ;
  2833                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2834                                  ;
  2835                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2836                                  ;
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                  section                 constack                                                ;console task stack
  2839 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2843                                  ;
  2844                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2845                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2846                                  ;       16 descriptors. Six are initially defined.
  2847                                  ;
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849                                  section                 conldt                                                  ;console local descriptors
  2850 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  2851 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  2852 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  2853 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  2854 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  2855 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  2856 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  ;
  2859                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  2860                                  ;
  2861                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2862                                  ;       segment. CS to console code.
  2863                                  ;
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  section                 contss                                                  ;console task state segment
  2866 00000000 00000000                                        dd      0                                               ;00 back-link tss
  2867 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  2868 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  2869 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  2870 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  2871 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  2872 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  2873 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  2874 00000020 00000000                                        dd      0                                               ;20 eip
  2875 00000024 00020000                                        dd      0200h                                           ;24 eflags
  2876 00000028 00000000                                        dd      0                                               ;28 eax
  2877 0000002C 00000000                                        dd      0                                               ;2c ecx
  2878 00000030 00000000                                        dd      0                                               ;30 edx
  2879 00000034 00000000                                        dd      0                                               ;34 ebx
  2880 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  2881 0000003C 00000000                                        dd      0                                               ;3c ebp
  2882 00000040 00000000                                        dd      0                                               ;40 esi
  2883 00000044 00000000                                        dd      0                                               ;44 edi
  2884 00000048 1C000000                                        dd      001Ch                                           ;48 es
  2885 0000004C 24000000                                        dd      0024h                                           ;4c cs
  2886 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  2887 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  2888 00000058 00000000                                        dd      0                                               ;58 fs
  2889 0000005C 00000000                                        dd      0                                               ;5c gs
  2890 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  2891 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  2892                                  ;-----------------------------------------------------------------------------------------------------------------------
  2893                                  ;
  2894                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  2895                                  ;
  2896                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2897                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2898                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2899                                  ;       event.
  2900                                  ;
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  section                 conmque                                                 ;console message queue
  2903 00000000 08000000                                        dd      8                                               ;head pointer
  2904 00000004 08000000                                        dd      8                                               ;tail pointer
  2905 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                  ;
  2908                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  2909                                  ;
  2910                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2911                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2912                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2913                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2914                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2915                                  ;       board input, echoing to the console screen and responding to user commands.
  2916                                  ;
  2917                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  2918                                  ;
  2919                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  2920                                  ;                               |  Real Mode Interrupt Vectors                  |
  2921                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  2922                                  ;                               |  Reserved BIOS Memory Area                    |
  2923                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  2924                                  ;                               |  Shared Kernel Memory Area                    |
  2925                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  2926                                  ;                               |  Global Descriptor Table (GDT)                |
  2927                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  2928                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  2929                                  ;                       002000  +-----------------------------------------------+
  2930                                  ;                               |  Interrupt Handlers                           |
  2931                                  ;                               |  Kernel Function Library                      |
  2932                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  2933                                  ;                               |  Console Task Stack Area                      |
  2934                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  2935                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  2936                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  2937                                  ;                               |  Console Task Task State Segment (TSS)        |
  2938                                  ;                       004800  +-----------------------------------------------+
  2939                                  ;                               |  Console Task Message Queue                   |
  2940                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  2941                                  ;                               |  Console Task Code                            |
  2942                                  ;                               |  Console Task Constants                       |
  2943                                  ;                       006000  +===============================================+
  2944                                  ;
  2945                                  ;-----------------------------------------------------------------------------------------------------------------------
  2946                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  2947 00000000 E81E000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  2948                                  
  2949                                                          clearConsoleScreen                                      ;clear the console screen
  2949 00000005 B000                <1>  mov al,eClearConsoleScreen
  2949 00000007 CD30                <1>  int _svc
  2950                                                          putConsoleString czTitle                                ;display startup message
  2950 00000009 BA[41000000]        <1>  mov edx,%1
  2950 0000000E B002                <1>  mov al,ePutConsoleString
  2950 00000010 CD30                <1>  int _svc
  2951                                  .10                     putConsoleString czPrompt                               ;display input prompt
  2951                              <1> .10 :
  2951 00000012 BA[3F000000]        <1>  mov edx,%1
  2951 00000017 B002                <1>  mov al,ePutConsoleString
  2951 00000019 CD30                <1>  int _svc
  2952                                                          placeCursor                                             ;set CRT cursor location
  2952 0000001B B001                <1>  mov al,ePlaceCursor
  2952 0000001D CD30                <1>  int _svc
  2953                                  
  2954 0000001F FB                      .20                     sti                                                     ;enable interrupts
  2955 00000020 F4                                              hlt                                                     ;halt until interrupt
  2956 00000021 EBFC                                            jmp     .20                                             ;continue halt loop
  2957                                  ;-----------------------------------------------------------------------------------------------------------------------
  2958                                  ;
  2959                                  ;       Routine:        ConInitializeData
  2960                                  ;
  2961                                  ;       Description:    This routine initializes console task variables.
  2962                                  ;
  2963                                  ;-----------------------------------------------------------------------------------------------------------------------
  2964 00000023 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  2965 00000024 57                                              push    edi                                             ;
  2966 00000025 06                                              push    es                                              ;
  2967                                  ;
  2968                                  ;       Initialize console work areas.
  2969                                  ;
  2970 00000026 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2971 00000028 07                                              pop     es                                              ;... into extra segment register
  2972 00000029 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  2973 0000002E 30C0                                            xor     al,al                                           ;initialization value
  2974 00000030 B90C000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  2975 00000035 FC                                              cld                                                     ;forward strings
  2976 00000036 F3AA                                            rep     stosb                                           ;initialize data
  2977                                  ;
  2978                                  ;       Restore and return.
  2979                                  ;
  2980 00000038 07                                              pop     es                                              ;restore non-volatile regs
  2981 00000039 5F                                              pop     edi                                             ;
  2982 0000003A 59                                              pop     ecx                                             ;
  2983 0000003B C3                                              ret                                                     ;return
  2984                                  ;-----------------------------------------------------------------------------------------------------------------------
  2985                                  ;
  2986                                  ;       Constants
  2987                                  ;
  2988                                  ;-----------------------------------------------------------------------------------------------------------------------
  2989 0000003C 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  2990 0000003F 3A00                    czPrompt                db      ":",0                                           ;prompt string
  2991 00000041 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  2991 0000004A 65726174696E672053-
  2991 00000053 797374656D20312E30-
  2991 0000005C 0D0A00             
  2992 0000005F 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  2993                                  %endif
  2994                                  %ifdef BUILDDISK
  2995                                  ;-----------------------------------------------------------------------------------------------------------------------
  2996                                  ;
  2997                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  2998                                  ;
  2999                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3000                                  ;
  3001                                  ;-----------------------------------------------------------------------------------------------------------------------
  3002                                  section                 unused                                                  ;unused disk space
  3003 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3004                                  %endif
  3005                                  ;=======================================================================================================================
  3006                                  ;
  3007                                  ;       End of Program Code
  3008                                  ;
  3009                                  ;=======================================================================================================================
