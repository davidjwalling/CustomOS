     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.001
     6                                  ;
     7                                  ;       Description:    This sample program defines a valid boot sector that displays a message and waits for a key
     8                                  ;                       to be pressed to restart the system. Using assembly directives, either a simple boot sector
     9                                  ;                       or an entire floppy disk image is generated. Real mode BIOS interrupts are used to display
    10                                  ;                       the message and poll for a keypress.
    11                                  ;
    12                                  ;       Revised:        June 17, 2019
    13                                  ;
    14                                  ;       Assembly:       nasm os.asm -f bin -o os.dat -l os.dat.lst -DBUILDBOOT
    15                                  ;                       nasm os.asm -f bin -o os.dsk -l os.dsk.lst -DBUILDDISK
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;
    31                                  ;-----------------------------------------------------------------------------------------------------------------------
    32                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    33                                  %define BUILDBOOT                                                               ;... also build the boot sector
    34                                  %endif
    35                                  ;-----------------------------------------------------------------------------------------------------------------------
    36                                  ;
    37                                  ;       Conventions
    38                                  ;
    39                                  ;       Alignment:      In this document, columns are numbered beginning with 1. Logical tabs are set after every
    40                                  ;                       eight columns. Tabs are simulated using SPACE characters. Comments that span an entire line
    41                                  ;                       have a semicolon in line 1 and text begins in column 9. Assembly instructions (mnemonics)
    42                                  ;                       begin in column 25. Assembly operands begin in column 33. Inline comments begin in column 81.
    43                                  ;                       Lines should not extend beyond column 120.
    44                                  ;
    45                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX. ECX
    46                                  ;                       may be used as the sole parameter if a test for zero is required. EBX and EBP may be used as
    47                                  ;                       parameters if the routine is considered a "method" of an "object". In this case, EBX or EBP
    48                                  ;                       will address the object storage. If the routine is general-purpose string or character-array
    49                                  ;                       manipulator, ESI and EDI may be used as parameters to address input and/or ouput buffers.
    50                                  ;
    51                                  ;       Code Order:     Routines should appear in the order of their first likely use. Negative relative call or jump
    52                                  ;                       addresses usually, therefore, indicate reuse.
    53                                  ;
    54                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1. A comment that
    55                                  ;                       accompanies code on a line begins with a semicolon in column 81. Register names in comments
    56                                  ;                       are in upper case (EAX, EDI). Hexadecimal values in comments are in lower case (01fh, 0dah).
    57                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    58                                  ;                       register contents on entry and exit.
    59                                  ;
    60                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT). Constant
    61                                  ;                       stored values are named in camel case, starting with 'c' (cbMaxLines). The 2nd letter of the
    62                                  ;                       constant label indicates the storage type.
    63                                  ;
    64                                  ;                       cq......        constant quad-word (dq)
    65                                  ;                       cd......        constant double-word (dd)
    66                                  ;                       cw......        constant word (dw)
    67                                  ;                       cb......        constant byte (db)
    68                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    69                                  ;
    70                                  ;       Instructions:   32-bit instructions are generally favored. 8-bit instructions and data are preferred for
    71                                  ;                       flags and status fields, etc. 16-bit instructions are avoided wherever possible to avoid
    72                                  ;                       prefix bytes.
    73                                  ;
    74                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20). Labels within a
    75                                  ;                       routine begin at ".10" and increment by 10.
    76                                  ;
    77                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants
    78                                  ;                       (equates). Hexadecimal literals in code are in upper case with a leading '0' and trailing
    79                                  ;                       'h' (01Fh). Binary literal values in source code are encoded with a final 'b' (1010b).
    80                                  ;                       Decimal literal values in source code are strictly numerals (2048). Octal literal values
    81                                  ;                       are avoided. String literals are enclosed in double quotes, e.g. "Loading OS". Single
    82                                  ;                       character literals are enclosed in single quotes, e.g. 'A'.
    83                                  ;
    84                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString). Macro
    85                                  ;                       names describe an action and so DO begin with a verb.
    86                                  ;
    87                                  ;       Memory Use:     Operating system memory allocation is minimized. Buffers are kept to as small a size as
    88                                  ;                       practicable. Data and code intermingling is avoided wherever possible.
    89                                  ;
    90                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX). Register names in source code are
    91                                  ;                       in lower case (eax, edx).
    92                                  ;
    93                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
    94                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
    95                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
    96                                  ;
    97                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock). Routine names
    98                                  ;                       begin with a verb (Get, Read, Load). Routines should have a single entry address and a single
    99                                  ;                       exit instruction (ret, iretd, etc.). Routines that serve as wrappers for library functions
   100                                  ;                       carry the same name as the library function but begin with a leading underscore (_) character.
   101                                  ;
   102                                  ;       Structures:     Structure names are in all-caps (DATETIME). Structure names describe a "thing" and so do NOT
   103                                  ;                       begin with a verb.
   104                                  ;
   105                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines. Registers ESI and EDI
   106                                  ;                       are preserved unless they are input parameters. Registers EAX and ECX are preferred for
   107                                  ;                       returning response/result values. Registers EBX and EBP are preferred for context (structure)
   108                                  ;                       address parameters. Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   109                                  ;
   110                                  ;       Variables:      Variables are named in camel case, starting with 'w'. The 2nd letter of the variable label
   111                                  ;                       indicates the storage type.
   112                                  ;
   113                                  ;                       wq......        variable quad-word (resq)
   114                                  ;                       wd......        variable double-word (resd)
   115                                  ;                       ww......        variable word (resw)
   116                                  ;                       wb......        variable byte (resb)
   117                                  ;                       ws......        writable structure
   118                                  ;
   119                                  ;-----------------------------------------------------------------------------------------------------------------------
   120                                  ;=======================================================================================================================
   121                                  ;
   122                                  ;       Equates
   123                                  ;
   124                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   125                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   126                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   127                                  ;       sets. Equates here are defined in the following groupings:
   128                                  ;
   129                                  ;       Hardware-Defined Values
   130                                  ;
   131                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   132                                  ;
   133                                  ;       Firmware-Defined Values
   134                                  ;
   135                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   136                                  ;
   137                                  ;       Operating System Values
   138                                  ;
   139                                  ;       EBOOT...        Boot sector and loader values
   140                                  ;
   141                                  ;=======================================================================================================================
   142                                  ;-----------------------------------------------------------------------------------------------------------------------
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;-----------------------------------------------------------------------------------------------------------------------
   147                                  ;-----------------------------------------------------------------------------------------------------------------------
   148                                  ;
   149                                  ;       8042 Keyboard Controller                                                EKEYB...
   150                                  ;
   151                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   152                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   153                                  ;
   154                                  ;-----------------------------------------------------------------------------------------------------------------------
   155                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   156                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  ;
   159                                  ;       Firmware-Defined Values
   160                                  ;
   161                                  ;-----------------------------------------------------------------------------------------------------------------------
   162                                  ;-----------------------------------------------------------------------------------------------------------------------
   163                                  ;
   164                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   165                                  ;
   166                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   167                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   168                                  ;
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   171                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   172                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   173                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   174                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   175                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       Operating System Values
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ;
   183                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   184                                  ;
   185                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   186                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   187                                  ;
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   190                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   191                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   192                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   193                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   194                                  %ifdef BUILDBOOT
   195                                  ;=======================================================================================================================
   196                                  ;
   197                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   198                                  ;
   199                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   200                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   201                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   202                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   203                                  ;
   204                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   205                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   206                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   207                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   208                                  ;       immediately followed by a disk parameter table.
   209                                  ;
   210                                  ;=======================================================================================================================
   211                                                          cpu     8086                                            ;assume minimal CPU
   212                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   213                                                          bits    16                                              ;16-bit code at power-up
   214 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   215                                  ;-----------------------------------------------------------------------------------------------------------------------
   216                                  ;
   217                                  ;       Disk Parameter Table
   218                                  ;
   219                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   220                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   221                                  ;
   222                                  ;-----------------------------------------------------------------------------------------------------------------------
   223 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   224 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   225 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   226 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   227 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   228 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   229 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   230 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   231 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   232                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   233 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   234 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   235 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   236                                  ;
   237                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past
   238                                  ;       the end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot
   239                                  ;       sector is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. To avoid assumptions,
   240                                  ;       we first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this
   241                                  ;       code given several possible starting values for CS:IP.
   242                                  ;
   243                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   244 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   245                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   246 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   247 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   248 00000025 B104                                            mov     cl,4                                            ;shift count
   249 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   250 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   251 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   252                                  ;
   253                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   254                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   255                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   256                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   257                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   258                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   259                                  ;
   260 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   261 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   262 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   263 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   264 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   265                                  ;
   266                                  ;       Our boot addressability is now set up according to the following diagram.
   267                                  ;
   268                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   269                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   270                                  ;                               |  256 = 100h bytes                             |
   271                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   272                                  ;                               |  Boot Sector (vstart=0100h)                   |
   273                                  ;                               |  1 sector = 512 = 200h bytes                  |
   274                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   275                                  ;
   276                                  ;       Set the video mode to 80 column, 25 row, text.
   277                                  ;
   278 00000039 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   279 0000003C CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   280                                  ;
   281                                  ;       Write a message to the console so we know we have our addressability established.
   282                                  ;
   283 0000003E BE[6300]                                        mov     si,czStartingMsg                                ;starting message
   284 00000041 E81200                                          call    PutTTYString                                    ;display loader message
   285                                  ;
   286                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
   287                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
   288                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
   289                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
   290                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
   291                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
   292                                  ;
   293 00000044 B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
   294 00000046 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
   295 00000048 7504                                            jnz     .40                                             ;exit if key pressed
   296 0000004A FB                                              sti                                                     ;enable maskable interrupts
   297 0000004B F4                                              hlt                                                     ;wait for interrupt
   298 0000004C EBF6                                            jmp     .30                                             ;repeat until keypress
   299                                  ;
   300                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
   301                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
   302                                  ;       HLT until the system resets.
   303                                  ;
   304 0000004E B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   305 00000050 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   306 00000052 FB                      .50                     sti                                                     ;enable maskable interrupts
   307 00000053 F4                                              hlt                                                     ;stop until reset, int, nmi
   308 00000054 EBFC                                            jmp     .50                                             ;loop until restart kicks in
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  ;
   311                                  ;       Routine:        PutTTYString
   312                                  ;
   313                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
   314                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
   315                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
   316                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
   317                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
   318                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
   319                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
   320                                  ;                       to LODSB is not needed.
   321                                  ;
   322                                  ;       In:             DS:SI   address of string
   323                                  ;
   324                                  ;       Out:            DF      0
   325                                  ;                       ZF      1
   326                                  ;                       AL      0
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329 00000056 FC                      PutTTYString            cld                                                     ;forward strings
   330 00000057 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   331 00000058 84C0                                            test    al,al                                           ;end of string?
   332 0000005A 7406                                            jz      .20                                             ;... yes, exit our loop
   333 0000005C B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   334 0000005E CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   335 00000060 EBF5                                            jmp     .10                                             ;repeat until done
   336 00000062 C3                      .20                     ret                                                     ;return
   337                                  ;-----------------------------------------------------------------------------------------------------------------------
   338                                  ;
   339                                  ;       Loader Data
   340                                  ;
   341                                  ;       Our only "data" is the string displayed when system starts. It ends with ASCII carriage-return (13) and line-
   342                                  ;       feed (10) values. The remainder of the boot sector is filled with NUL. The boot sector finally ends with the
   343                                  ;       required two-byte signature checked by the BIOS. Note that recent versions of NASM will issue a warning if
   344                                  ;       the calculated address for the end-of-sector signature produces a negative value for "510-($-$$)". This will
   345                                  ;       indicate if we have added too much data and exceeded the length of the sector.
   346                                  ;
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348 00000063 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
   348 0000006C 4F530D0A00         
   349 00000071 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   350 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   351                                  %endif
   352                                  %ifdef BUILDDISK
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       Free Disk Space                                                         @disk: 000200   @mem:  n/a
   356                                  ;
   357                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  section                 unused                                                  ;unused disk space
   361 00000000 F6<rept>                                        times   EBOOTDISKBYTES-EBOOTSECTORBYTES db 0F6h         ;fill to end of disk image
   362                                  %endif
   363                                  ;=======================================================================================================================
   364                                  ;
   365                                  ;       End of Program Code
   366                                  ;
   367                                  ;=======================================================================================================================
